
kernel.elf:     file format elf32-littlenios2
kernel.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000194

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x00000000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x00000194 paddr 0x00000194 align 2**12
         filesz 0x0000e544 memsz 0x0000e544 flags r-x
    LOAD off    0x000106d8 vaddr 0x0000e6d8 paddr 0x00010170 align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rw-
    LOAD off    0x00012c08 vaddr 0x00011c08 paddr 0x00011c08 align 2**12
         filesz 0x00000000 memsz 0x000005b8 flags rw-
    LOAD off    0x00013000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00013000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  00000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000df58  00000194  00000194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005ec  0000e0ec  0000e0ec  000100ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a98  0000e6d8  00010170  000106d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000005b8  00011c08  00011c08  00012c08  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00013020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d38  00000000  00000000  00013048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000172b  00000000  00000000  00013d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002471c  00000000  00000000  000154ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000801e  00000000  00000000  00039bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000148b6  00000000  00000000  00041be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001d88  00000000  00000000  0005649c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000222e  00000000  00000000  00058224  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c543  00000000  00000000  0005a452  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00066998  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  000669b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006a97a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006a97d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006a989  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006a98a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006a98b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006a98f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006a993  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0006a997  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0006a9a2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0006a9ad  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0006a9b8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000018  00000000  00000000  0006a9c0  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0005f6a9  00000000  00000000  0006a9d8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
00000194 l    d  .text	00000000 .text
0000e0ec l    d  .rodata	00000000 .rodata
0000e6d8 l    d  .rwdata	00000000 .rwdata
00011c08 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 kernel.c
00000000 l    df *ABS*	00000000 kernelTest1.c
00000000 l    df *ABS*	00000000 system_m.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001cec l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000e710 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000027e8 l     F .text	00000058 __sprint_r
0000e40a l     O .rodata	00000010 blanks.3452
0000e3fa l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000484c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
00004a00 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000063fc l     F .text	00000058 std
00006508 l     F .text	00000008 __fp_lock
00006510 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00010144 l     O .rwdata	00000004 charset
0000e43c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000e584 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00009eec l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b740 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000b7a0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b7cc l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b900 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000bbe0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000bcc0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000be1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000c048 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00010164 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000c2e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f0cc l     O .rwdata	00001060 jtag_uart_0
0000c3d4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c614 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000c83c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000ceb8 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000d1dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000d600 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000d73c l     F .text	000000dc alt_file_locked
0000d9a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000508 g     F .text	000000c8 addLast
00007a78 g     F .text	00000094 _mprec_log10
00007b64 g     F .text	00000088 __any_on
00009200 g     F .text	00000070 _isatty_r
0000e55c g     O .rodata	00000028 __mprec_tinytens
0000be7c g     F .text	0000006c alt_main
00002650 g     F .text	000000a0 _puts_r
00011f30 g     O .bss	00000100 alt_irq
00009270 g     F .text	00000078 _lseek_r
00001be4 g       .text	00000000 _transfer
00001008 g     F .text	000000d4 yield
00001b38 g     F .text	0000004c transfer
00010170 g       *ABS*	00000000 __flash_rwdata_start
00001198 g     F .text	00000070 put
0000aa0c g     F .text	00000088 __eqdf2
000121c0 g       *ABS*	00000000 __alt_heap_start
000025d8 g     F .text	00000044 printf
0000113c g     F .text	00000020 reinitialiser
00008ccc g     F .text	00000068 __sseek
00006464 g     F .text	000000a4 __sinit
0000713c g     F .text	00000084 _setlocale_r
00006564 g     F .text	00000068 __sfmoreglue
0000bf08 g     F .text	00000020 __malloc_unlock
00001798 g     F .text	00000078 consumer0
00011c8c g     O .bss	00000078 monitors
000074f4 g     F .text	000000e0 memmove
00011c18 g     O .bss	00000004 nextProcessId
00006554 g     F .text	00000010 _cleanup
00007bec g     F .text	000000bc _Balloc
00011f0c g     O .bss	0000000c b2
0000ab1c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000001c __reset
00011c10 g     O .bss	00000004 edge_capture
00000ac8 g     F .text	000000b0 createMonitor
00000000 g       *ABS*	00000000 __flash_exceptions_start
00001380 g     F .text	00000068 displayNumber
0000918c g     F .text	00000074 _fstat_r
00000400 g     F .text	00000060 init_button
00011c3c g     O .bss	00000004 errno
00011c54 g     O .bss	00000004 alt_argv
00011c28 g     O .bss	00000004 running
0001812c g       *ABS*	00000000 _gp
0000ef4c g     O .rwdata	00000180 alt_fd_list
00011d04 g     O .bss	00000208 processes
0000dbc4 g     F .text	00000094 alt_find_dev
00007454 g     F .text	000000a0 memcpy
0001012c g     O .rwdata	00000004 readyList
00006548 g     F .text	0000000c _cleanup_r
0000acb4 g     F .text	000000f8 __floatsidf
0000d6c4 g     F .text	00000078 alt_io_redirect
0000ac2c g     F .text	00000088 __ltdf2
0000e0ec g       *ABS*	00000000 __DTOR_END__
000026f0 g     F .text	00000014 puts
000079c8 g     F .text	000000b0 __ratio
00011c14 g     O .bss	00000004 timer_capture
0000ca54 g     F .text	00000224 altera_avalon_jtag_uart_read
00001e84 g     F .text	00000014 malloc
0000261c g     F .text	00000034 _printf_r
00001e28 g     F .text	00000008 __udivsi3
0000bb20 g     F .text	000000c0 isatty
000009ec g     F .text	00000060 currentMonitor
0000e46c g     O .rodata	000000c8 __mprec_tens
00011f18 g     O .bss	0000000c b1
00007118 g     F .text	00000008 __locale_charset
00000f24 g     F .text	00000050 _notify
000004b8 g     F .text	00000050 init_clock
0000de30 g     F .text	00000090 alt_icache_flush
00011c30 g     O .bss	00000004 __malloc_top_pad
00010140 g     O .rwdata	00000004 __mb_cur_max
00007120 g     F .text	0000000c _localeconv_r
00001888 g     F .text	00000078 consumer2
000082e4 g     F .text	0000003c __i2b
00006afc g     F .text	0000049c __sfvwrite_r
00002704 g     F .text	00000070 _sbrk_r
000010fc g     F .text	00000020 attendre
000092e8 g     F .text	00000078 _read_r
0000ef18 g     O .rwdata	0000000c __lc_ctype
00010158 g     O .rwdata	00000004 alt_max_fd
0000b444 g     F .text	00000138 __unpack_d
00009068 g     F .text	00000110 _fclose_r
000063c8 g     F .text	00000034 fflush
00011c34 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b960 g     F .text	000001c0 alt_irq_register
000019b4 g     F .text	000000c4 test1
0000a37c g     F .text	00000074 __adddf3
000078a8 g     F .text	00000120 __b2d
0000993c g     F .text	000005b0 __umoddi3
0000bd2c g     F .text	000000f0 lseek
00010134 g     O .rwdata	00000004 _global_impure_ptr
00008660 g     F .text	000005f4 _realloc_r
000121c0 g       *ABS*	00000000 __bss_end
0000d508 g     F .text	000000f8 alt_iic_isr_register
0000da98 g     F .text	0000010c alt_tick
00009360 g     F .text	000005dc __udivdi3
0000e534 g     O .rodata	00000028 __mprec_bigtens
00008540 g     F .text	00000120 __s2b
0000ae84 g     F .text	00000194 __floatunsidf
00011c2c g     O .bss	00000004 nextP
000077c8 g     F .text	00000060 __mcmp
00006530 g     F .text	00000018 __fp_lock_all
0000d4c0 g     F .text	00000048 alt_ic_irq_enabled
000014d8 g     F .text	000002c0 producer
00000d30 g     F .text	00000128 exitMonitor
00000f74 g     F .text	00000048 notify
0000da00 g     F .text	00000098 alt_alarm_stop
0000111c g     F .text	00000020 declencher
00011c4c g     O .bss	00000004 alt_irq_active
02000000 g       *ABS*	00000000 __alt_mem_onchip_mem
020000ec g     F .exceptions	000000c8 alt_irq_handler
0000ef24 g     O .rwdata	00000028 alt_dev_null
0000d10c g     F .text	0000001c alt_dcache_flush_all
00007694 g     F .text	00000070 __hi0bits
0000adac g     F .text	000000d8 __fixdfsi
00001b84 g     F .text	00000044 iotransfer
00010170 g       *ABS*	00000000 __ram_rwdata_end
00010150 g     O .rwdata	00000008 alt_dev_list
0000c1c4 g     F .text	00000120 write
0000e6d8 g       *ABS*	00000000 __ram_rodata_end
0000b82c g     F .text	000000d4 fstat
0000115c g     F .text	0000003c initBuffer
000005d0 g     F .text	00000070 addFirst
00008420 g     F .text	00000120 __pow5mult
00011c40 g     O .bss	00000004 __nlocale_changed
00001e30 g     F .text	00000008 __umodsi3
00000894 g     F .text	0000002c currentProcess
000121c0 g       *ABS*	00000000 end
000010dc g     F .text	00000020 createEvent
00000758 g     F .text	00000060 head
0000c554 g     F .text	000000c0 altera_avalon_jtag_uart_init
00001ce0 g       .text	00000000 allowInterrupts
0000e0e8 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000cf28 g     F .text	00000090 alt_avalon_timer_sc_init
0000b0b0 g     F .text	00000080 __clzsi2
0000cc78 g     F .text	00000240 altera_avalon_jtag_uart_write
00006454 g     F .text	00000004 __sfp_lock_acquire
00007370 g     F .text	000000e4 memchr
00002840 g     F .text	00001eac ___vfprintf_internal_r
000067e8 g     F .text	00000314 _free_r
00000e58 g     F .text	000000cc wait
00004850 g     F .text	000001b0 __call_exitprocs
00011c08 g     O .bss	00000008 interruptVector
00011c44 g     O .bss	00000004 __mlocale_changed
000012c8 g     F .text	0000005c eput
0001013c g     O .rwdata	00000004 __malloc_sbrk_base
00000194 g     F .text	0000003c _start
000007b8 g     F .text	000000dc createProcess
00011c5c g     O .bss	00000004 _alt_tick_rate
00007fb0 g     F .text	0000014c __lshift
00011c60 g     O .bss	00000004 _alt_nticks
0000bf28 g     F .text	00000120 read
0000c378 g     F .text	0000005c alt_sys_init
0000df48 g     F .text	00000134 __register_exitproc
000080fc g     F .text	000001e8 __multiply
0000c8ec g     F .text	00000074 altera_avalon_jtag_uart_close
0000e6d8 g       *ABS*	00000000 __ram_rwdata_start
0000e0ec g       *ABS*	00000000 __ram_rodata_start
00011c64 g     O .bss	00000028 __malloc_current_mallinfo
00011c1c g     O .bss	00000004 nextMonitorId
00007ca8 g     F .text	0000017c __d2b
00001cd4 g       .text	00000000 maskInterrupts
00001324 g     F .text	0000005c eget
0000c40c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000dd78 g     F .text	000000b8 alt_get_fd
0000b57c g     F .text	000000c8 __fpcmp_parts_d
00008ff8 g     F .text	00000070 _close_r
000008c0 g     F .text	0000012c currentMonitorID
0000ded4 g     F .text	00000074 memcmp
0000c4bc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000121c0 g       *ABS*	00000000 __alt_stack_base
0000c504 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00004710 g     F .text	0000013c __swsetup_r
0000a7b4 g     F .text	00000258 __divdf3
000065cc g     F .text	000000f0 __sfp
00007b0c g     F .text	00000058 __copybits
00001810 g     F .text	00000078 consumer1
0000eb10 g     O .rwdata	00000408 __malloc_av_
00006460 g     F .text	00000004 __sinit_lock_release
0000a3f0 g     F .text	000003c4 __muldf3
00008db0 g     F .text	00000060 __sread
0000dc58 g     F .text	00000120 alt_find_file
0000d128 g     F .text	000000b4 alt_dev_llist_insert
0000bee8 g     F .text	00000020 __malloc_lock
0000c108 g     F .text	000000bc sbrk
000061cc g     F .text	000001fc _fflush_r
00008f44 g     F .text	000000b4 _calloc_r
00011c08 g       *ABS*	00000000 __bss_start
000075d4 g     F .text	00000098 memset
00001a78 g     F .text	00000064 main
000002a4 g     F .text	000000d8 insertTail
00011c58 g     O .bss	00000004 alt_envp
00011c38 g     O .bss	00000004 __malloc_max_total_mem
0000c464 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000e704 g     O .rwdata	0000000c lcdZones
00000460 g     F .text	00000058 handle_timer_interrupts
00000b78 g     F .text	000001b8 enterMonitor
00008cc4 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00009178 g     F .text	00000014 fclose
000006f4 g     F .text	00000064 size
00012030 g     O .bss	00000190 _atexit0
00004c18 g     F .text	000015b4 _dtoa_r
00001e98 g     F .text	00000740 _malloc_r
0001015c g     O .rwdata	00000004 alt_errno
00007060 g     F .text	000000b8 _fwalk
00001d68 g     F .text	00000060 __divsi3
0000e590 g     O .rodata	00000014 __thenan_df
000066bc g     F .text	0000012c _malloc_trim_r
0000e0ec g       *ABS*	00000000 __CTOR_END__
00008e10 g     F .text	000000bc strcmp
0000e0ec g       *ABS*	00000000 __flash_rodata_start
0000e0ec g       *ABS*	00000000 __DTOR_LIST__
0000aa94 g     F .text	00000088 __nedf2
0000c344 g     F .text	00000034 alt_irq_init
0000c0a8 g     F .text	00000060 alt_release_fd
0000e5a4 g     O .rodata	00000100 __clz_tab
00011c48 g     O .bss	00000004 _PathLocale
0000dec0 g     F .text	00000014 atexit
00008ecc g     F .text	00000078 _write_r
000071c0 g     F .text	0000001c setlocale
00001208 g     F .text	0000006c get
00010130 g     O .rwdata	00000004 _impure_ptr
00011c50 g     O .bss	00000004 alt_argc
0000d2a0 g     F .text	00000064 _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
00007828 g     F .text	00000080 __ulp
00008c54 g     F .text	00000040 __isinfd
00006518 g     F .text	00000018 __fp_unlock_all
00000640 g     F .text	000000b4 removeHead
00010148 g     O .rwdata	00000008 alt_fs_list
0000e6d8 g     O .rwdata	0000002c digitCodes
02000020 g       *ABS*	00000000 __ram_exceptions_start
0000712c g     F .text	00000010 localeconv
000001d0 g     F .text	000000d4 removeHeadI
0000d334 g     F .text	00000050 alt_ic_isr_register
00001274 g     F .text	00000054 initEventBuffer
00010170 g       *ABS*	00000000 _edata
000121c0 g       *ABS*	00000000 _end
00001adc g     F .text	0000005c newProcess
020001b4 g       *ABS*	00000000 __ram_exceptions_end
0000c960 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00011c20 g     O .bss	00000004 dummyMonitor1
0000d420 g     F .text	000000a0 alt_ic_irq_disable
00008d34 g     F .text	0000007c __swrite
00010138 g     O .rwdata	00000004 __malloc_trim_threshold
0000dba4 g     F .text	00000020 altera_nios2_qsys_irq_init
00011f24 g     O .bss	0000000c b0
00001e38 g     F .text	00000038 exit
00006f98 g     F .text	000000c8 _fwalk_reent
00007e24 g     F .text	0000018c __mdiff
00001dc8 g     F .text	00000060 __modsi3
00011c24 g     O .bss	00000004 dummyMonitor2
02000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
00006458 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00000a4c g     F .text	0000007c start
00008c94 g     F .text	00000030 __isnand
0000b80c g     F .text	00000020 _exit
0000cfb8 g     F .text	00000154 alt_alarm_start
0000b018 g     F .text	00000098 __muldi3
000071dc g     F .text	00000194 __smakebuf_r
00002774 g     F .text	00000074 strlen
0000d818 g     F .text	00000188 open
0000aba4 g     F .text	00000088 __gedf2
000013e8 g     F .text	000000f0 blinkNumber
00001bc8 g       .text	00000000 _createStack
0000d304 g     F .text	00000030 alt_icache_flush_all
00010160 g     O .rwdata	00000004 alt_priority_mask
0000d384 g     F .text	0000009c alt_ic_irq_enable
000046ec g     F .text	00000024 __vfprintf_internal
00000fbc g     F .text	0000004c notifyAll
0000a2fc g     F .text	00000080 __subdf3
00007704 g     F .text	000000c4 __lo0bits
00010168 g     O .rwdata	00000008 alt_alarm_list
0000d23c g     F .text	00000064 _do_ctors
00001900 g     F .text	000000b4 test0
0000037c g     F .text	00000084 handle_button_interrupts
0000b644 g     F .text	000000fc close
0000bc40 g     F .text	00000080 alt_load
0000b130 g     F .text	00000314 __pack_d
00001e70 g     F .text	00000014 free
0000645c g     F .text	00000004 __sinit_lock_acquire
00008320 g     F .text	00000100 __multadd
0000766c g     F .text	00000028 _Bfree



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 2000014:	08406514 	ori	at,at,404
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__alt_mem_sdram>

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c00074 	movhi	r3,1
 2000134:	18c7cc04 	addi	r3,r3,7984
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c00074 	movhi	r3,1
 200014c:	18c7cc04 	addi	r3,r3,7984
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

00000194 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     194:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     19c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1a0:	d6a04b14 	ori	gp,gp,33068
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1a4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1a8:	10870214 	ori	r2,r2,7176

    movhi r3, %hi(__bss_end)
     1ac:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1b0:	18c87014 	ori	r3,r3,8640

    beq r2, r3, 1f
     1b4:	10c00326 	beq	r2,r3,1c4 <_start+0x30>

0:
    stw zero, (r2)
     1b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1c0:	10fffd36 	bltu	r2,r3,1b8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1c4:	000bc400 	call	bc40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1c8:	000be7c0 	call	be7c <alt_main>

000001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1cc:	003fff06 	br	1cc <alt_after_alt_main>

000001d0 <removeHeadI>:
} ListElem;

ListElem* interruptVector[2]={NULL,NULL};


Process removeHeadI(int i){
     1d0:	defff904 	addi	sp,sp,-28
     1d4:	dfc00615 	stw	ra,24(sp)
     1d8:	df000515 	stw	fp,20(sp)
     1dc:	df000504 	addi	fp,sp,20
     1e0:	e13ffe15 	stw	r4,-8(fp)
    
    ListElem* removed = interruptVector[i];
     1e4:	e0bffe17 	ldw	r2,-8(fp)
     1e8:	1085883a 	add	r2,r2,r2
     1ec:	1087883a 	add	r3,r2,r2
     1f0:	d0a6b704 	addi	r2,gp,-25892
     1f4:	1885883a 	add	r2,r3,r2
     1f8:	10800017 	ldw	r2,0(r2)
     1fc:	e0bffd15 	stw	r2,-12(fp)
    if(interruptVector[i] != NULL){
     200:	e0bffe17 	ldw	r2,-8(fp)
     204:	1085883a 	add	r2,r2,r2
     208:	1087883a 	add	r3,r2,r2
     20c:	d0a6b704 	addi	r2,gp,-25892
     210:	1885883a 	add	r2,r3,r2
     214:	10800017 	ldw	r2,0(r2)
     218:	1005003a 	cmpeq	r2,r2,zero
     21c:	10000d1e 	bne	r2,zero,254 <removeHeadI+0x84>
        interruptVector[i] = interruptVector[i] -> next;
     220:	e17ffe17 	ldw	r5,-8(fp)
     224:	e0bffe17 	ldw	r2,-8(fp)
     228:	1085883a 	add	r2,r2,r2
     22c:	1087883a 	add	r3,r2,r2
     230:	d0a6b704 	addi	r2,gp,-25892
     234:	1885883a 	add	r2,r3,r2
     238:	10800017 	ldw	r2,0(r2)
     23c:	11000117 	ldw	r4,4(r2)
     240:	2945883a 	add	r2,r5,r5
     244:	1087883a 	add	r3,r2,r2
     248:	d0a6b704 	addi	r2,gp,-25892
     24c:	1885883a 	add	r2,r3,r2
     250:	11000015 	stw	r4,0(r2)
    }
    if(removed != NULL){
     254:	e0bffd17 	ldw	r2,-12(fp)
     258:	1005003a 	cmpeq	r2,r2,zero
     25c:	1000081e 	bne	r2,zero,280 <removeHeadI+0xb0>
        Process result = removed -> p; 
     260:	e0bffd17 	ldw	r2,-12(fp)
     264:	10800017 	ldw	r2,0(r2)
     268:	e0bffc15 	stw	r2,-16(fp)
		free(removed); 
     26c:	e13ffd17 	ldw	r4,-12(fp)
     270:	0001e700 	call	1e70 <free>
		return result;
     274:	e0bffc17 	ldw	r2,-16(fp)
     278:	e0bfff15 	stw	r2,-4(fp)
     27c:	00000306 	br	28c <removeHeadI+0xbc>
    }
    else{
        Process result = NULL;
     280:	e03ffb15 	stw	zero,-20(fp)
        return result;
     284:	e0bffb17 	ldw	r2,-20(fp)
     288:	e0bfff15 	stw	r2,-4(fp)
     28c:	e0bfff17 	ldw	r2,-4(fp)
    }  
}
     290:	e037883a 	mov	sp,fp
     294:	dfc00117 	ldw	ra,4(sp)
     298:	df000017 	ldw	fp,0(sp)
     29c:	dec00204 	addi	sp,sp,8
     2a0:	f800283a 	ret

000002a4 <insertTail>:

void insertTail(int i, Process toBeInserted){
     2a4:	defffa04 	addi	sp,sp,-24
     2a8:	dfc00515 	stw	ra,20(sp)
     2ac:	df000415 	stw	fp,16(sp)
     2b0:	df000404 	addi	fp,sp,16
     2b4:	e13ffe15 	stw	r4,-8(fp)
     2b8:	e17fff15 	stw	r5,-4(fp)
    
    ListElem* elem = malloc(sizeof(ListElem));
     2bc:	01000204 	movi	r4,8
     2c0:	0001e840 	call	1e84 <malloc>
     2c4:	e0bffd15 	stw	r2,-12(fp)
    elem -> p = toBeInserted;
     2c8:	e0fffd17 	ldw	r3,-12(fp)
     2cc:	e0bfff17 	ldw	r2,-4(fp)
     2d0:	18800015 	stw	r2,0(r3)
    elem -> next = NULL;
     2d4:	e0bffd17 	ldw	r2,-12(fp)
     2d8:	10000115 	stw	zero,4(r2)
    
    ListElem* temp= NULL;
     2dc:	e03ffc15 	stw	zero,-16(fp)
    if(interruptVector[i] == NULL){
     2e0:	e0bffe17 	ldw	r2,-8(fp)
     2e4:	1085883a 	add	r2,r2,r2
     2e8:	1087883a 	add	r3,r2,r2
     2ec:	d0a6b704 	addi	r2,gp,-25892
     2f0:	1885883a 	add	r2,r3,r2
     2f4:	10800017 	ldw	r2,0(r2)
     2f8:	1004c03a 	cmpne	r2,r2,zero
     2fc:	1000081e 	bne	r2,zero,320 <insertTail+0x7c>
        
       interruptVector[i] = elem; 
     300:	e0bffe17 	ldw	r2,-8(fp)
     304:	1085883a 	add	r2,r2,r2
     308:	1087883a 	add	r3,r2,r2
     30c:	d0a6b704 	addi	r2,gp,-25892
     310:	1887883a 	add	r3,r3,r2
     314:	e0bffd17 	ldw	r2,-12(fp)
     318:	18800015 	stw	r2,0(r3)
     31c:	00001206 	br	368 <insertTail+0xc4>
    }
    else{
        
        temp = interruptVector[i];
     320:	e0bffe17 	ldw	r2,-8(fp)
     324:	1085883a 	add	r2,r2,r2
     328:	1087883a 	add	r3,r2,r2
     32c:	d0a6b704 	addi	r2,gp,-25892
     330:	1885883a 	add	r2,r3,r2
     334:	10800017 	ldw	r2,0(r2)
     338:	e0bffc15 	stw	r2,-16(fp)
        while((temp -> next) != NULL){
     33c:	00000306 	br	34c <insertTail+0xa8>
        
            temp = temp -> next;
     340:	e0bffc17 	ldw	r2,-16(fp)
     344:	10800117 	ldw	r2,4(r2)
     348:	e0bffc15 	stw	r2,-16(fp)
       interruptVector[i] = elem; 
    }
    else{
        
        temp = interruptVector[i];
        while((temp -> next) != NULL){
     34c:	e0bffc17 	ldw	r2,-16(fp)
     350:	10800117 	ldw	r2,4(r2)
     354:	1004c03a 	cmpne	r2,r2,zero
     358:	103ff91e 	bne	r2,zero,340 <insertTail+0x9c>
        
            temp = temp -> next;
        }
        temp -> next = elem;  
     35c:	e0fffc17 	ldw	r3,-16(fp)
     360:	e0bffd17 	ldw	r2,-12(fp)
     364:	18800115 	stw	r2,4(r3)
    
    }
    
        
}
     368:	e037883a 	mov	sp,fp
     36c:	dfc00117 	ldw	ra,4(sp)
     370:	df000017 	ldw	fp,0(sp)
     374:	dec00204 	addi	sp,sp,8
     378:	f800283a 	ret

0000037c <handle_button_interrupts>:
/* A variable to hold the value of the button pio edge capture register. */
volatile int edge_capture = 0;


void handle_button_interrupts(void* context, alt_u32 id)
{
     37c:	defffa04 	addi	sp,sp,-24
     380:	dfc00515 	stw	ra,20(sp)
     384:	df000415 	stw	fp,16(sp)
     388:	df000404 	addi	fp,sp,16
     38c:	e13ffe15 	stw	r4,-8(fp)
     390:	e17fff15 	stw	r5,-4(fp)
    
    /* Cast context to edge_capture's type. It is important that this be 
     * declared volatile to avoid unwanted compiler optimization.
     */
    volatile int* edge_capture_ptr = (volatile int*) context;
     394:	e0bffe17 	ldw	r2,-8(fp)
     398:	e0bffd15 	stw	r2,-12(fp)
    
    /* Store the value in the Button's edge capture register in *context. */
    *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
     39c:	00808034 	movhi	r2,512
     3a0:	10940304 	addi	r2,r2,20492
     3a4:	10c00037 	ldwio	r3,0(r2)
     3a8:	e0bffd17 	ldw	r2,-12(fp)
     3ac:	10c00015 	stw	r3,0(r2)
	/* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0xf);
     3b0:	00c08034 	movhi	r3,512
     3b4:	18d40304 	addi	r3,r3,20492
     3b8:	008003c4 	movi	r2,15
     3bc:	18800035 	stwio	r2,0(r3)
    
    /* Read the PIO to delay ISR exit. This is done to prevent a spurious interrupt in systems
     * with high processor -> pio latency and fast interrupts.  */
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
     3c0:	00808034 	movhi	r2,512
     3c4:	10940304 	addi	r2,r2,20492
     3c8:	10800037 	ldwio	r2,0(r2)
    
    Process p2 = removeHeadI(1);
     3cc:	01000044 	movi	r4,1
     3d0:	00001d00 	call	1d0 <removeHeadI>
     3d4:	e0bffc15 	stw	r2,-16(fp)
   
    if(p2 != NULL){
     3d8:	e0bffc17 	ldw	r2,-16(fp)
     3dc:	1005003a 	cmpeq	r2,r2,zero
     3e0:	1000021e 	bne	r2,zero,3ec <handle_button_interrupts+0x70>
        
        transfer(p2);
     3e4:	e13ffc17 	ldw	r4,-16(fp)
     3e8:	0001b380 	call	1b38 <transfer>
       
    }
}
     3ec:	e037883a 	mov	sp,fp
     3f0:	dfc00117 	ldw	ra,4(sp)
     3f4:	df000017 	ldw	fp,0(sp)
     3f8:	dec00204 	addi	sp,sp,8
     3fc:	f800283a 	ret

00000400 <init_button>:

/* Initialize the button_pio. */

void init_button()
{
     400:	defffd04 	addi	sp,sp,-12
     404:	dfc00215 	stw	ra,8(sp)
     408:	df000115 	stw	fp,4(sp)
     40c:	df000104 	addi	fp,sp,4
    /* Recast the edge_capture pointer to match the alt_irq_register() function
     * prototype. */
    void* edge_capture_ptr = (void*) &edge_capture;
     410:	d0a6b904 	addi	r2,gp,-25884
     414:	e0bfff15 	stw	r2,-4(fp)
    
    /* Enable all 4 button interrupts. */
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0xf);
     418:	00c08034 	movhi	r3,512
     41c:	18d40204 	addi	r3,r3,20488
     420:	008003c4 	movi	r2,15
     424:	18800035 	stwio	r2,0(r3)
    
    /* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0xf);
     428:	00c08034 	movhi	r3,512
     42c:	18d40304 	addi	r3,r3,20492
     430:	008003c4 	movi	r2,15
     434:	18800035 	stwio	r2,0(r3)
    
    /* Register the interrupt handler. */
    alt_irq_register (BUTTONS_IRQ, edge_capture_ptr, handle_button_interrupts);
     438:	01000084 	movi	r4,2
     43c:	e17fff17 	ldw	r5,-4(fp)
     440:	01800034 	movhi	r6,0
     444:	3180df04 	addi	r6,r6,892
     448:	000b9600 	call	b960 <alt_irq_register>
}
     44c:	e037883a 	mov	sp,fp
     450:	dfc00117 	ldw	ra,4(sp)
     454:	df000017 	ldw	fp,0(sp)
     458:	dec00204 	addi	sp,sp,8
     45c:	f800283a 	ret

00000460 <handle_timer_interrupts>:

/* A variable to set up context for timer interrupt. */
volatile int timer_capture = 0;

void handle_timer_interrupts(void* context, alt_u32 id)
{
     460:	defffb04 	addi	sp,sp,-20
     464:	dfc00415 	stw	ra,16(sp)
     468:	df000315 	stw	fp,12(sp)
     46c:	df000304 	addi	fp,sp,12
     470:	e13ffe15 	stw	r4,-8(fp)
     474:	e17fff15 	stw	r5,-4(fp)
	/* clear the interrupt */
	IOWR_ALTERA_AVALON_TIMER_STATUS (TIMER_BASE, 0);
     478:	00808034 	movhi	r2,512
     47c:	10942804 	addi	r2,r2,20640
     480:	10000035 	stwio	zero,0(r2)

	Process p2 = removeHeadI(0);
     484:	0009883a 	mov	r4,zero
     488:	00001d00 	call	1d0 <removeHeadI>
     48c:	e0bffd15 	stw	r2,-12(fp)
    if(p2 != NULL){
     490:	e0bffd17 	ldw	r2,-12(fp)
     494:	1005003a 	cmpeq	r2,r2,zero
     498:	1000021e 	bne	r2,zero,4a4 <handle_timer_interrupts+0x44>
        transfer(p2);
     49c:	e13ffd17 	ldw	r4,-12(fp)
     4a0:	0001b380 	call	1b38 <transfer>
    }
}
     4a4:	e037883a 	mov	sp,fp
     4a8:	dfc00117 	ldw	ra,4(sp)
     4ac:	df000017 	ldw	fp,0(sp)
     4b0:	dec00204 	addi	sp,sp,8
     4b4:	f800283a 	ret

000004b8 <init_clock>:

void init_clock()
{
     4b8:	defffd04 	addi	sp,sp,-12
     4bc:	dfc00215 	stw	ra,8(sp)
     4c0:	df000115 	stw	fp,4(sp)
     4c4:	df000104 	addi	fp,sp,4
    
  void* timer_capture_ptr = (void*) &timer_capture;  
     4c8:	d0a6ba04 	addi	r2,gp,-25880
     4cc:	e0bfff15 	stw	r2,-4(fp)
  /* set to free running mode */
  IOWR_ALTERA_AVALON_TIMER_CONTROL (TIMER_BASE, 
     4d0:	00c08034 	movhi	r3,512
     4d4:	18d42904 	addi	r3,r3,20644
     4d8:	008001c4 	movi	r2,7
     4dc:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_ITO_MSK  |
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */ 
  alt_irq_register (TIMER_IRQ, timer_capture_ptr, handle_timer_interrupts);  
     4e0:	0009883a 	mov	r4,zero
     4e4:	e17fff17 	ldw	r5,-4(fp)
     4e8:	01800034 	movhi	r6,0
     4ec:	31811804 	addi	r6,r6,1120
     4f0:	000b9600 	call	b960 <alt_irq_register>
  
}
     4f4:	e037883a 	mov	sp,fp
     4f8:	dfc00117 	ldw	ra,4(sp)
     4fc:	df000017 	ldw	fp,0(sp)
     500:	dec00204 	addi	sp,sp,8
     504:	f800283a 	ret

00000508 <addLast>:
            Utility functions for list manipulation
 ***********************************************************
 ***********************************************************/

// add element to the tail of the list
void addLast(int* list, int processId) {
     508:	defffc04 	addi	sp,sp,-16
     50c:	df000315 	stw	fp,12(sp)
     510:	df000304 	addi	fp,sp,12
     514:	e13ffe15 	stw	r4,-8(fp)
     518:	e17fff15 	stw	r5,-4(fp)

    if (*list == -1){
     51c:	e0bffe17 	ldw	r2,-8(fp)
     520:	10800017 	ldw	r2,0(r2)
     524:	10bfffd8 	cmpnei	r2,r2,-1
     528:	1000041e 	bne	r2,zero,53c <addLast+0x34>
        // list is empty
        *list = processId;
     52c:	e0fffe17 	ldw	r3,-8(fp)
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	18800015 	stw	r2,0(r3)
     538:	00002106 	br	5c0 <addLast+0xb8>
    }
    else {
        int temp = *list;
     53c:	e0bffe17 	ldw	r2,-8(fp)
     540:	10800017 	ldw	r2,0(r2)
     544:	e0bffd15 	stw	r2,-12(fp)
        while (processes[temp].next != -1){
     548:	00000706 	br	568 <addLast+0x60>
            temp = processes[temp].next;
     54c:	e0bffd17 	ldw	r2,-12(fp)
     550:	00c00074 	movhi	r3,1
     554:	18c74104 	addi	r3,r3,7428
     558:	10800d24 	muli	r2,r2,52
     55c:	10c5883a 	add	r2,r2,r3
     560:	10800017 	ldw	r2,0(r2)
     564:	e0bffd15 	stw	r2,-12(fp)
        // list is empty
        *list = processId;
    }
    else {
        int temp = *list;
        while (processes[temp].next != -1){
     568:	e0bffd17 	ldw	r2,-12(fp)
     56c:	00c00074 	movhi	r3,1
     570:	18c74104 	addi	r3,r3,7428
     574:	10800d24 	muli	r2,r2,52
     578:	10c5883a 	add	r2,r2,r3
     57c:	10800017 	ldw	r2,0(r2)
     580:	10bfffd8 	cmpnei	r2,r2,-1
     584:	103ff11e 	bne	r2,zero,54c <addLast+0x44>
            temp = processes[temp].next;
        }
        processes[temp].next = processId;
     588:	e0bffd17 	ldw	r2,-12(fp)
     58c:	00c00074 	movhi	r3,1
     590:	18c74104 	addi	r3,r3,7428
     594:	10800d24 	muli	r2,r2,52
     598:	10c7883a 	add	r3,r2,r3
     59c:	e0bfff17 	ldw	r2,-4(fp)
     5a0:	18800015 	stw	r2,0(r3)
        processes[processId].next = -1;
     5a4:	e0bfff17 	ldw	r2,-4(fp)
     5a8:	00c00074 	movhi	r3,1
     5ac:	18c74104 	addi	r3,r3,7428
     5b0:	10800d24 	muli	r2,r2,52
     5b4:	10c7883a 	add	r3,r2,r3
     5b8:	00bfffc4 	movi	r2,-1
     5bc:	18800015 	stw	r2,0(r3)
    }

}
     5c0:	e037883a 	mov	sp,fp
     5c4:	df000017 	ldw	fp,0(sp)
     5c8:	dec00104 	addi	sp,sp,4
     5cc:	f800283a 	ret

000005d0 <addFirst>:

// add element to the head of list
void addFirst(int* list, int processId){
     5d0:	defffd04 	addi	sp,sp,-12
     5d4:	df000215 	stw	fp,8(sp)
     5d8:	df000204 	addi	fp,sp,8
     5dc:	e13ffe15 	stw	r4,-8(fp)
     5e0:	e17fff15 	stw	r5,-4(fp)

    if (*list == -1){
     5e4:	e0bffe17 	ldw	r2,-8(fp)
     5e8:	10800017 	ldw	r2,0(r2)
     5ec:	10bfffd8 	cmpnei	r2,r2,-1
     5f0:	1000041e 	bne	r2,zero,604 <addFirst+0x34>
        *list = processId;
     5f4:	e0fffe17 	ldw	r3,-8(fp)
     5f8:	e0bfff17 	ldw	r2,-4(fp)
     5fc:	18800015 	stw	r2,0(r3)
     600:	00000b06 	br	630 <addFirst+0x60>
    }
    else {
        processes[processId].next = *list;
     604:	e13fff17 	ldw	r4,-4(fp)
     608:	e0bffe17 	ldw	r2,-8(fp)
     60c:	11400017 	ldw	r5,0(r2)
     610:	00c00074 	movhi	r3,1
     614:	18c74104 	addi	r3,r3,7428
     618:	20800d24 	muli	r2,r4,52
     61c:	10c5883a 	add	r2,r2,r3
     620:	11400015 	stw	r5,0(r2)
        *list = processId;
     624:	e0fffe17 	ldw	r3,-8(fp)
     628:	e0bfff17 	ldw	r2,-4(fp)
     62c:	18800015 	stw	r2,0(r3)
    }
}
     630:	e037883a 	mov	sp,fp
     634:	df000017 	ldw	fp,0(sp)
     638:	dec00104 	addi	sp,sp,4
     63c:	f800283a 	ret

00000640 <removeHead>:

// remove element that is head of the list
int removeHead(int* list){
     640:	defffa04 	addi	sp,sp,-24
     644:	dfc00515 	stw	ra,20(sp)
     648:	df000415 	stw	fp,16(sp)
     64c:	df000404 	addi	fp,sp,16
     650:	e13ffe15 	stw	r4,-8(fp)
    if (*list == -1){
     654:	e0bffe17 	ldw	r2,-8(fp)
     658:	10800017 	ldw	r2,0(r2)
     65c:	10bfffd8 	cmpnei	r2,r2,-1
     660:	1000061e 	bne	r2,zero,67c <removeHead+0x3c>
        printf("List is empty!");
     664:	01000074 	movhi	r4,1
     668:	21383b04 	addi	r4,r4,-7956
     66c:	00025d80 	call	25d8 <printf>
        return(-1);
     670:	00bfffc4 	movi	r2,-1
     674:	e0bfff15 	stw	r2,-4(fp)
     678:	00001806 	br	6dc <removeHead+0x9c>
    }
    else {
        int head = *list;
     67c:	e0bffe17 	ldw	r2,-8(fp)
     680:	10800017 	ldw	r2,0(r2)
     684:	e0bffd15 	stw	r2,-12(fp)
        int next = processes[*list].next;
     688:	e0bffe17 	ldw	r2,-8(fp)
     68c:	10800017 	ldw	r2,0(r2)
     690:	00c00074 	movhi	r3,1
     694:	18c74104 	addi	r3,r3,7428
     698:	10800d24 	muli	r2,r2,52
     69c:	10c5883a 	add	r2,r2,r3
     6a0:	10800017 	ldw	r2,0(r2)
     6a4:	e0bffc15 	stw	r2,-16(fp)
        processes[*list].next = -1;
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	10800017 	ldw	r2,0(r2)
     6b0:	00c00074 	movhi	r3,1
     6b4:	18c74104 	addi	r3,r3,7428
     6b8:	10800d24 	muli	r2,r2,52
     6bc:	10c7883a 	add	r3,r2,r3
     6c0:	00bfffc4 	movi	r2,-1
     6c4:	18800015 	stw	r2,0(r3)
        *list = next;
     6c8:	e0fffe17 	ldw	r3,-8(fp)
     6cc:	e0bffc17 	ldw	r2,-16(fp)
     6d0:	18800015 	stw	r2,0(r3)
        return head;
     6d4:	e0bffd17 	ldw	r2,-12(fp)
     6d8:	e0bfff15 	stw	r2,-4(fp)
     6dc:	e0bfff17 	ldw	r2,-4(fp)
    }
}
     6e0:	e037883a 	mov	sp,fp
     6e4:	dfc00117 	ldw	ra,4(sp)
     6e8:	df000017 	ldw	fp,0(sp)
     6ec:	dec00204 	addi	sp,sp,8
     6f0:	f800283a 	ret

000006f4 <size>:

int size(int* list) {
     6f4:	defffd04 	addi	sp,sp,-12
     6f8:	df000215 	stw	fp,8(sp)
     6fc:	df000204 	addi	fp,sp,8
     700:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i=0 ; *list != -1 ; i++) {
     704:	e03ffe15 	stw	zero,-8(fp)
     708:	00000a06 	br	734 <size+0x40>
		list = &processes[*list].next;
     70c:	e0bfff17 	ldw	r2,-4(fp)
     710:	10800017 	ldw	r2,0(r2)
     714:	10c00d24 	muli	r3,r2,52
     718:	00800074 	movhi	r2,1
     71c:	10874104 	addi	r2,r2,7428
     720:	10c5883a 	add	r2,r2,r3
     724:	e0bfff15 	stw	r2,-4(fp)
    }
}

int size(int* list) {
	int i;
	for (i=0 ; *list != -1 ; i++) {
     728:	e0bffe17 	ldw	r2,-8(fp)
     72c:	10800044 	addi	r2,r2,1
     730:	e0bffe15 	stw	r2,-8(fp)
     734:	e0bfff17 	ldw	r2,-4(fp)
     738:	10800017 	ldw	r2,0(r2)
     73c:	10bfffd8 	cmpnei	r2,r2,-1
     740:	103ff21e 	bne	r2,zero,70c <size+0x18>
		list = &processes[*list].next;
	}

	return i;
     744:	e0bffe17 	ldw	r2,-8(fp)
}
     748:	e037883a 	mov	sp,fp
     74c:	df000017 	ldw	fp,0(sp)
     750:	dec00104 	addi	sp,sp,4
     754:	f800283a 	ret

00000758 <head>:

// returns head of the list
int head(int* list){
     758:	defffc04 	addi	sp,sp,-16
     75c:	dfc00315 	stw	ra,12(sp)
     760:	df000215 	stw	fp,8(sp)
     764:	df000204 	addi	fp,sp,8
     768:	e13ffe15 	stw	r4,-8(fp)
    if (*list == -1){
     76c:	e0bffe17 	ldw	r2,-8(fp)
     770:	10800017 	ldw	r2,0(r2)
     774:	10bfffd8 	cmpnei	r2,r2,-1
     778:	1000061e 	bne	r2,zero,794 <head+0x3c>
        printf("List is empty!\n");
     77c:	01000074 	movhi	r4,1
     780:	21383b04 	addi	r4,r4,-7956
     784:	00026f00 	call	26f0 <puts>
        return(-1);
     788:	00bfffc4 	movi	r2,-1
     78c:	e0bfff15 	stw	r2,-4(fp)
     790:	00000306 	br	7a0 <head+0x48>
    }
    else {
        return *list;
     794:	e0bffe17 	ldw	r2,-8(fp)
     798:	10800017 	ldw	r2,0(r2)
     79c:	e0bfff15 	stw	r2,-4(fp)
     7a0:	e0bfff17 	ldw	r2,-4(fp)
    }
}
     7a4:	e037883a 	mov	sp,fp
     7a8:	dfc00117 	ldw	ra,4(sp)
     7ac:	df000017 	ldw	fp,0(sp)
     7b0:	dec00204 	addi	sp,sp,8
     7b4:	f800283a 	ret

000007b8 <createProcess>:
 ***********************************************************
                    Kernel functions
 ***********************************************************
 ***********************************************************/

void createProcess (void (*f), int stackSize) {
     7b8:	defffa04 	addi	sp,sp,-24
     7bc:	dfc00515 	stw	ra,20(sp)
     7c0:	df000415 	stw	fp,16(sp)
     7c4:	df000404 	addi	fp,sp,16
     7c8:	e13ffe15 	stw	r4,-8(fp)
     7cc:	e17fff15 	stw	r5,-4(fp)
	if (nextProcessId == MAXPROCESS){
     7d0:	d0a6bb17 	ldw	r2,-25876(gp)
     7d4:	10800298 	cmpnei	r2,r2,10
     7d8:	1000051e 	bne	r2,zero,7f0 <createProcess+0x38>
		printf("Error: Maximum number of processes reached!\n");
     7dc:	01000074 	movhi	r4,1
     7e0:	21383f04 	addi	r4,r4,-7940
     7e4:	00026f00 	call	26f0 <puts>
		exit(1);
     7e8:	01000044 	movi	r4,1
     7ec:	0001e380 	call	1e38 <exit>
	}

	Process process;
	unsigned int* stack = malloc(stackSize);
     7f0:	e13fff17 	ldw	r4,-4(fp)
     7f4:	0001e840 	call	1e84 <malloc>
     7f8:	e0bffc15 	stw	r2,-16(fp)
	process = newProcess(f, stack, stackSize);
     7fc:	e13ffe17 	ldw	r4,-8(fp)
     800:	e17ffc17 	ldw	r5,-16(fp)
     804:	e1bfff17 	ldw	r6,-4(fp)
     808:	0001adc0 	call	1adc <newProcess>
     80c:	e0bffd15 	stw	r2,-12(fp)
	processes[nextProcessId].next = -1;
     810:	d0a6bb17 	ldw	r2,-25876(gp)
     814:	00c00074 	movhi	r3,1
     818:	18c74104 	addi	r3,r3,7428
     81c:	10800d24 	muli	r2,r2,52
     820:	10c7883a 	add	r3,r2,r3
     824:	00bfffc4 	movi	r2,-1
     828:	18800015 	stw	r2,0(r3)
	processes[nextProcessId].p = process;
     82c:	d0a6bb17 	ldw	r2,-25876(gp)
     830:	00c00074 	movhi	r3,1
     834:	18c74104 	addi	r3,r3,7428
     838:	10800d24 	muli	r2,r2,52
     83c:	10c5883a 	add	r2,r2,r3
     840:	10c00104 	addi	r3,r2,4
     844:	e0bffd17 	ldw	r2,-12(fp)
     848:	18800015 	stw	r2,0(r3)
	processes[nextProcessId].monitorsStackPos = 0;
     84c:	d0a6bb17 	ldw	r2,-25876(gp)
     850:	00c00074 	movhi	r3,1
     854:	18c74104 	addi	r3,r3,7428
     858:	10800d24 	muli	r2,r2,52
     85c:	10c5883a 	add	r2,r2,r3
     860:	10800c04 	addi	r2,r2,48
     864:	10000015 	stw	zero,0(r2)
	// add process to the list of ready Processes
	addLast(&readyList, nextProcessId);
     868:	d166bb17 	ldw	r5,-25876(gp)
     86c:	d1200004 	addi	r4,gp,-32768
     870:	00005080 	call	508 <addLast>
	nextProcessId++;
     874:	d0a6bb17 	ldw	r2,-25876(gp)
     878:	10800044 	addi	r2,r2,1
     87c:	d0a6bb15 	stw	r2,-25876(gp)
}
     880:	e037883a 	mov	sp,fp
     884:	dfc00117 	ldw	ra,4(sp)
     888:	df000017 	ldw	fp,0(sp)
     88c:	dec00204 	addi	sp,sp,8
     890:	f800283a 	ret

00000894 <currentProcess>:

inline int currentProcess(void) {
     894:	defffe04 	addi	sp,sp,-8
     898:	dfc00115 	stw	ra,4(sp)
     89c:	df000015 	stw	fp,0(sp)
     8a0:	d839883a 	mov	fp,sp
	return head(&readyList);
     8a4:	d1200004 	addi	r4,gp,-32768
     8a8:	00007580 	call	758 <head>
}
     8ac:	e037883a 	mov	sp,fp
     8b0:	dfc00117 	ldw	ra,4(sp)
     8b4:	df000017 	ldw	fp,0(sp)
     8b8:	dec00204 	addi	sp,sp,8
     8bc:	f800283a 	ret

000008c0 <currentMonitorID>:

inline int currentMonitorID(void) {
     8c0:	deffef04 	addi	sp,sp,-68
     8c4:	dfc01015 	stw	ra,64(sp)
     8c8:	df000f15 	stw	fp,60(sp)
     8cc:	df000f04 	addi	fp,sp,60
	printf(" currentMonitorID: currentProcess = %d\n", currentProcess());
     8d0:	00008940 	call	894 <currentProcess>
     8d4:	100b883a 	mov	r5,r2
     8d8:	01000074 	movhi	r4,1
     8dc:	21384a04 	addi	r4,r4,-7896
     8e0:	00025d80 	call	25d8 <printf>
	FLUSH
     8e4:	e03ff215 	stw	zero,-56(fp)
     8e8:	00000306 	br	8f8 <currentMonitorID+0x38>
     8ec:	e0bff217 	ldw	r2,-56(fp)
     8f0:	10800044 	addi	r2,r2,1
     8f4:	e0bff215 	stw	r2,-56(fp)
     8f8:	e0fff217 	ldw	r3,-56(fp)
     8fc:	00800234 	movhi	r2,8
     900:	10a847c4 	addi	r2,r2,-24289
     904:	10fff90e 	bge	r2,r3,8ec <currentMonitorID+0x2c>
	ProcessDescriptor process = processes[currentProcess()];
     908:	00008940 	call	894 <currentProcess>
     90c:	00c00074 	movhi	r3,1
     910:	18c74104 	addi	r3,r3,7428
     914:	10800d24 	muli	r2,r2,52
     918:	10c7883a 	add	r3,r2,r3
     91c:	18800017 	ldw	r2,0(r3)
     920:	e0bff315 	stw	r2,-52(fp)
     924:	18800117 	ldw	r2,4(r3)
     928:	e0bff415 	stw	r2,-48(fp)
     92c:	18800217 	ldw	r2,8(r3)
     930:	e0bff515 	stw	r2,-44(fp)
     934:	18800317 	ldw	r2,12(r3)
     938:	e0bff615 	stw	r2,-40(fp)
     93c:	18800417 	ldw	r2,16(r3)
     940:	e0bff715 	stw	r2,-36(fp)
     944:	18800517 	ldw	r2,20(r3)
     948:	e0bff815 	stw	r2,-32(fp)
     94c:	18800617 	ldw	r2,24(r3)
     950:	e0bff915 	stw	r2,-28(fp)
     954:	18800717 	ldw	r2,28(r3)
     958:	e0bffa15 	stw	r2,-24(fp)
     95c:	18800817 	ldw	r2,32(r3)
     960:	e0bffb15 	stw	r2,-20(fp)
     964:	18800917 	ldw	r2,36(r3)
     968:	e0bffc15 	stw	r2,-16(fp)
     96c:	18800a17 	ldw	r2,40(r3)
     970:	e0bffd15 	stw	r2,-12(fp)
     974:	18800b17 	ldw	r2,44(r3)
     978:	e0bffe15 	stw	r2,-8(fp)
     97c:	18800c17 	ldw	r2,48(r3)
     980:	e0bfff15 	stw	r2,-4(fp)
	printf(" currentMonitorID: stackPos = %d\n", process.monitorsStackPos);
     984:	e17fff17 	ldw	r5,-4(fp)
     988:	01000074 	movhi	r4,1
     98c:	21385404 	addi	r4,r4,-7856
     990:	00025d80 	call	25d8 <printf>
	FLUSH
     994:	e03ff115 	stw	zero,-60(fp)
     998:	00000306 	br	9a8 <currentMonitorID+0xe8>
     99c:	e0bff117 	ldw	r2,-60(fp)
     9a0:	10800044 	addi	r2,r2,1
     9a4:	e0bff115 	stw	r2,-60(fp)
     9a8:	e0fff117 	ldw	r3,-60(fp)
     9ac:	00800234 	movhi	r2,8
     9b0:	10a847c4 	addi	r2,r2,-24289
     9b4:	10fff90e 	bge	r2,r3,99c <currentMonitorID+0xdc>
	return process.monitorsStack[process.monitorsStackPos-1];
     9b8:	e0bfff17 	ldw	r2,-4(fp)
     9bc:	10bfffc4 	addi	r2,r2,-1
     9c0:	1085883a 	add	r2,r2,r2
     9c4:	1085883a 	add	r2,r2,r2
     9c8:	e0fff104 	addi	r3,fp,-60
     9cc:	10c5883a 	add	r2,r2,r3
     9d0:	10800404 	addi	r2,r2,16
     9d4:	10800017 	ldw	r2,0(r2)
}
     9d8:	e037883a 	mov	sp,fp
     9dc:	dfc00117 	ldw	ra,4(sp)
     9e0:	df000017 	ldw	fp,0(sp)
     9e4:	dec00204 	addi	sp,sp,8
     9e8:	f800283a 	ret

000009ec <currentMonitor>:

inline Monitor currentMonitor(void) {
     9ec:	defffd04 	addi	sp,sp,-12
     9f0:	dfc00215 	stw	ra,8(sp)
     9f4:	df000115 	stw	fp,4(sp)
     9f8:	dc000015 	stw	r16,0(sp)
     9fc:	d839883a 	mov	fp,sp
     a00:	2021883a 	mov	r16,r4
	return monitors[currentMonitorID()];
     a04:	00008c00 	call	8c0 <currentMonitorID>
     a08:	00c00074 	movhi	r3,1
     a0c:	18c72304 	addi	r3,r3,7308
     a10:	10800324 	muli	r2,r2,12
     a14:	10c7883a 	add	r3,r2,r3
     a18:	18800017 	ldw	r2,0(r3)
     a1c:	80800015 	stw	r2,0(r16)
     a20:	18800117 	ldw	r2,4(r3)
     a24:	80800115 	stw	r2,4(r16)
     a28:	18800217 	ldw	r2,8(r3)
     a2c:	80800215 	stw	r2,8(r16)
}
     a30:	8005883a 	mov	r2,r16
     a34:	e037883a 	mov	sp,fp
     a38:	dfc00217 	ldw	ra,8(sp)
     a3c:	df000117 	ldw	fp,4(sp)
     a40:	dc000017 	ldw	r16,0(sp)
     a44:	dec00304 	addi	sp,sp,12
     a48:	f800283a 	ret

00000a4c <start>:

void start() {
     a4c:	defffd04 	addi	sp,sp,-12
     a50:	dfc00215 	stw	ra,8(sp)
     a54:	df000115 	stw	fp,4(sp)
     a58:	df000104 	addi	fp,sp,4
    printf("Starting kernel...\n");
     a5c:	01000074 	movhi	r4,1
     a60:	21385d04 	addi	r4,r4,-7820
     a64:	00026f00 	call	26f0 <puts>
    if (readyList == -1){
     a68:	d0a00017 	ldw	r2,-32768(gp)
     a6c:	10bfffd8 	cmpnei	r2,r2,-1
     a70:	1000051e 	bne	r2,zero,a88 <start+0x3c>
        printf("Error: No process in the ready list!\n");
     a74:	01000074 	movhi	r4,1
     a78:	21386204 	addi	r4,r4,-7800
     a7c:	00026f00 	call	26f0 <puts>
        exit(1);
     a80:	01000044 	movi	r4,1
     a84:	0001e380 	call	1e38 <exit>
    }
    Process process = processes[head(&readyList)].p;
     a88:	d1200004 	addi	r4,gp,-32768
     a8c:	00007580 	call	758 <head>
     a90:	00c00074 	movhi	r3,1
     a94:	18c74104 	addi	r3,r3,7428
     a98:	10800d24 	muli	r2,r2,52
     a9c:	10c5883a 	add	r2,r2,r3
     aa0:	10800104 	addi	r2,r2,4
     aa4:	10800017 	ldw	r2,0(r2)
     aa8:	e0bfff15 	stw	r2,-4(fp)
    transfer(process);
     aac:	e13fff17 	ldw	r4,-4(fp)
     ab0:	0001b380 	call	1b38 <transfer>
}
     ab4:	e037883a 	mov	sp,fp
     ab8:	dfc00117 	ldw	ra,4(sp)
     abc:	df000017 	ldw	fp,0(sp)
     ac0:	dec00204 	addi	sp,sp,8
     ac4:	f800283a 	ret

00000ac8 <createMonitor>:


int createMonitor() {
     ac8:	defffe04 	addi	sp,sp,-8
     acc:	dfc00115 	stw	ra,4(sp)
     ad0:	df000015 	stw	fp,0(sp)
     ad4:	d839883a 	mov	fp,sp
	if(nextMonitorId == MAXMONITORS) {
     ad8:	d0a6bc17 	ldw	r2,-25872(gp)
     adc:	10800298 	cmpnei	r2,r2,10
     ae0:	1000051e 	bne	r2,zero,af8 <createMonitor+0x30>
		printf("Error: maximum number of monitors reached!\n");
     ae4:	01000074 	movhi	r4,1
     ae8:	21386c04 	addi	r4,r4,-7760
     aec:	00026f00 	call	26f0 <puts>
		exit(1);
     af0:	01000044 	movi	r4,1
     af4:	0001e380 	call	1e38 <exit>
	}

	monitors[nextMonitorId].isOccupied 	= 0;
     af8:	d0a6bc17 	ldw	r2,-25872(gp)
     afc:	00c00074 	movhi	r3,1
     b00:	18c72304 	addi	r3,r3,7308
     b04:	10800324 	muli	r2,r2,12
     b08:	10c5883a 	add	r2,r2,r3
     b0c:	1000000d 	sth	zero,0(r2)
	monitors[nextMonitorId].readyList	= -1;
     b10:	d0a6bc17 	ldw	r2,-25872(gp)
     b14:	00c00074 	movhi	r3,1
     b18:	18c72304 	addi	r3,r3,7308
     b1c:	10800324 	muli	r2,r2,12
     b20:	10c5883a 	add	r2,r2,r3
     b24:	10c00204 	addi	r3,r2,8
     b28:	00bfffc4 	movi	r2,-1
     b2c:	18800015 	stw	r2,0(r3)
	monitors[nextMonitorId].waitingList = -1;
     b30:	d0a6bc17 	ldw	r2,-25872(gp)
     b34:	00c00074 	movhi	r3,1
     b38:	18c72304 	addi	r3,r3,7308
     b3c:	10800324 	muli	r2,r2,12
     b40:	10c5883a 	add	r2,r2,r3
     b44:	10c00104 	addi	r3,r2,4
     b48:	00bfffc4 	movi	r2,-1
     b4c:	18800015 	stw	r2,0(r3)

	return nextMonitorId++;
     b50:	d0a6bc17 	ldw	r2,-25872(gp)
     b54:	1007883a 	mov	r3,r2
     b58:	10800044 	addi	r2,r2,1
     b5c:	d0a6bc15 	stw	r2,-25872(gp)
     b60:	1805883a 	mov	r2,r3
}
     b64:	e037883a 	mov	sp,fp
     b68:	dfc00117 	ldw	ra,4(sp)
     b6c:	df000017 	ldw	fp,0(sp)
     b70:	dec00204 	addi	sp,sp,8
     b74:	f800283a 	ret

00000b78 <enterMonitor>:

void enterMonitor(int monitorID) {
     b78:	deffee04 	addi	sp,sp,-72
     b7c:	dfc01115 	stw	ra,68(sp)
     b80:	df001015 	stw	fp,64(sp)
     b84:	dc000f15 	stw	r16,60(sp)
     b88:	df000f04 	addi	fp,sp,60
     b8c:	e13fff15 	stw	r4,-4(fp)
	printf("#begin enterMonitor\n");
     b90:	01000074 	movhi	r4,1
     b94:	21387704 	addi	r4,r4,-7716
     b98:	00026f00 	call	26f0 <puts>
	// Waiting on the monitor
	if (monitors[monitorID].isOccupied) {
     b9c:	e0bfff17 	ldw	r2,-4(fp)
     ba0:	00c00074 	movhi	r3,1
     ba4:	18c72304 	addi	r3,r3,7308
     ba8:	10800324 	muli	r2,r2,12
     bac:	10c5883a 	add	r2,r2,r3
     bb0:	1080000b 	ldhu	r2,0(r2)
     bb4:	10bfffcc 	andi	r2,r2,65535
     bb8:	10a0001c 	xori	r2,r2,32768
     bbc:	10a00004 	addi	r2,r2,-32768
     bc0:	1005003a 	cmpeq	r2,r2,zero
     bc4:	1000141e 	bne	r2,zero,c18 <enterMonitor+0xa0>
		// gives CPU to first process on ready list
		addFirst(&monitors[monitorID].readyList, removeHead(&readyList));
     bc8:	e0bfff17 	ldw	r2,-4(fp)
     bcc:	10800324 	muli	r2,r2,12
     bd0:	10c00204 	addi	r3,r2,8
     bd4:	00800074 	movhi	r2,1
     bd8:	10872304 	addi	r2,r2,7308
     bdc:	18a1883a 	add	r16,r3,r2
     be0:	d1200004 	addi	r4,gp,-32768
     be4:	00006400 	call	640 <removeHead>
     be8:	100b883a 	mov	r5,r2
     bec:	8009883a 	mov	r4,r16
     bf0:	00005d00 	call	5d0 <addFirst>
		transfer(processes[head(&readyList)].p);
     bf4:	d1200004 	addi	r4,gp,-32768
     bf8:	00007580 	call	758 <head>
     bfc:	00c00074 	movhi	r3,1
     c00:	18c74104 	addi	r3,r3,7428
     c04:	10800d24 	muli	r2,r2,52
     c08:	10c5883a 	add	r2,r2,r3
     c0c:	10800104 	addi	r2,r2,4
     c10:	11000017 	ldw	r4,0(r2)
     c14:	0001b380 	call	1b38 <transfer>
    }
    // The guy who unfroze us put us on top of ready list and was "occupying" the monitor

    // Actually entering monitor
    // monitor-level stuff
    monitors[monitorID].isOccupied = 1;
     c18:	e0bfff17 	ldw	r2,-4(fp)
     c1c:	00c00074 	movhi	r3,1
     c20:	18c72304 	addi	r3,r3,7308
     c24:	10800324 	muli	r2,r2,12
     c28:	10c7883a 	add	r3,r2,r3
     c2c:	00800044 	movi	r2,1
     c30:	1880000d 	sth	r2,0(r3)
    ProcessDescriptor process = processes[currentProcess()];
     c34:	00008940 	call	894 <currentProcess>
     c38:	00c00074 	movhi	r3,1
     c3c:	18c74104 	addi	r3,r3,7428
     c40:	10800d24 	muli	r2,r2,52
     c44:	10c7883a 	add	r3,r2,r3
     c48:	18800017 	ldw	r2,0(r3)
     c4c:	e0bff215 	stw	r2,-56(fp)
     c50:	18800117 	ldw	r2,4(r3)
     c54:	e0bff315 	stw	r2,-52(fp)
     c58:	18800217 	ldw	r2,8(r3)
     c5c:	e0bff415 	stw	r2,-48(fp)
     c60:	18800317 	ldw	r2,12(r3)
     c64:	e0bff515 	stw	r2,-44(fp)
     c68:	18800417 	ldw	r2,16(r3)
     c6c:	e0bff615 	stw	r2,-40(fp)
     c70:	18800517 	ldw	r2,20(r3)
     c74:	e0bff715 	stw	r2,-36(fp)
     c78:	18800617 	ldw	r2,24(r3)
     c7c:	e0bff815 	stw	r2,-32(fp)
     c80:	18800717 	ldw	r2,28(r3)
     c84:	e0bff915 	stw	r2,-28(fp)
     c88:	18800817 	ldw	r2,32(r3)
     c8c:	e0bffa15 	stw	r2,-24(fp)
     c90:	18800917 	ldw	r2,36(r3)
     c94:	e0bffb15 	stw	r2,-20(fp)
     c98:	18800a17 	ldw	r2,40(r3)
     c9c:	e0bffc15 	stw	r2,-16(fp)
     ca0:	18800b17 	ldw	r2,44(r3)
     ca4:	e0bffd15 	stw	r2,-12(fp)
     ca8:	18800c17 	ldw	r2,48(r3)
     cac:	e0bffe15 	stw	r2,-8(fp)
    // process-level stuff
    const int pos = process.monitorsStackPos;
     cb0:	e0bffe17 	ldw	r2,-8(fp)
     cb4:	e0bff115 	stw	r2,-60(fp)
    process.monitorsStack[pos] = monitorID;
     cb8:	e0bff117 	ldw	r2,-60(fp)
     cbc:	1085883a 	add	r2,r2,r2
     cc0:	1085883a 	add	r2,r2,r2
     cc4:	e0fff104 	addi	r3,fp,-60
     cc8:	10c5883a 	add	r2,r2,r3
     ccc:	10c00304 	addi	r3,r2,12
     cd0:	e0bfff17 	ldw	r2,-4(fp)
     cd4:	18800015 	stw	r2,0(r3)
	process.monitorsStackPos ++;
     cd8:	e0bffe17 	ldw	r2,-8(fp)
     cdc:	10800044 	addi	r2,r2,1
     ce0:	e0bffe15 	stw	r2,-8(fp)
	printf("#end enterMonitor, proc: %d, stackPos: %d\n", currentProcess(), processes[currentProcess()].monitorsStackPos);
     ce4:	00008940 	call	894 <currentProcess>
     ce8:	1021883a 	mov	r16,r2
     cec:	00008940 	call	894 <currentProcess>
     cf0:	00c00074 	movhi	r3,1
     cf4:	18c74104 	addi	r3,r3,7428
     cf8:	10800d24 	muli	r2,r2,52
     cfc:	10c5883a 	add	r2,r2,r3
     d00:	10800c04 	addi	r2,r2,48
     d04:	11800017 	ldw	r6,0(r2)
     d08:	01000074 	movhi	r4,1
     d0c:	21387c04 	addi	r4,r4,-7696
     d10:	800b883a 	mov	r5,r16
     d14:	00025d80 	call	25d8 <printf>
}
     d18:	e037883a 	mov	sp,fp
     d1c:	dfc00217 	ldw	ra,8(sp)
     d20:	df000117 	ldw	fp,4(sp)
     d24:	dc000017 	ldw	r16,0(sp)
     d28:	dec00304 	addi	sp,sp,12
     d2c:	f800283a 	ret

00000d30 <exitMonitor>:

void exitMonitor(void) {
     d30:	defff804 	addi	sp,sp,-32
     d34:	dfc00715 	stw	ra,28(sp)
     d38:	df000615 	stw	fp,24(sp)
     d3c:	df000604 	addi	fp,sp,24
	printf("#begin exitMonitor, stackPos: %d\n", processes[currentProcess()].monitorsStackPos);
     d40:	00008940 	call	894 <currentProcess>
     d44:	00c00074 	movhi	r3,1
     d48:	18c74104 	addi	r3,r3,7428
     d4c:	10800d24 	muli	r2,r2,52
     d50:	10c5883a 	add	r2,r2,r3
     d54:	10800c04 	addi	r2,r2,48
     d58:	11400017 	ldw	r5,0(r2)
     d5c:	01000074 	movhi	r4,1
     d60:	21388704 	addi	r4,r4,-7652
     d64:	00025d80 	call	25d8 <printf>
	Monitor mon = currentMonitor();
     d68:	e13ffd04 	addi	r4,fp,-12
     d6c:	00009ec0 	call	9ec <currentMonitor>
	processes[currentProcess()].monitorsStackPos --;
     d70:	00008940 	call	894 <currentProcess>
     d74:	100b883a 	mov	r5,r2
     d78:	00c00074 	movhi	r3,1
     d7c:	18c74104 	addi	r3,r3,7428
     d80:	28800d24 	muli	r2,r5,52
     d84:	10c5883a 	add	r2,r2,r3
     d88:	10800c04 	addi	r2,r2,48
     d8c:	10800017 	ldw	r2,0(r2)
     d90:	113fffc4 	addi	r4,r2,-1
     d94:	00c00074 	movhi	r3,1
     d98:	18c74104 	addi	r3,r3,7428
     d9c:	28800d24 	muli	r2,r5,52
     da0:	10c5883a 	add	r2,r2,r3
     da4:	10800c04 	addi	r2,r2,48
     da8:	11000015 	stw	r4,0(r2)
	mon.isOccupied = 0;
     dac:	e03ffd0d 	sth	zero,-12(fp)

	// Check ready list for waiting processes
	int* const myList = &mon.readyList;
     db0:	e0bffd04 	addi	r2,fp,-12
     db4:	10800204 	addi	r2,r2,8
     db8:	e0bffc15 	stw	r2,-16(fp)
	if (*myList != -1) {
     dbc:	e0bffc17 	ldw	r2,-16(fp)
     dc0:	10800017 	ldw	r2,0(r2)
     dc4:	10bfffe0 	cmpeqi	r2,r2,-1
     dc8:	10001b1e 	bne	r2,zero,e38 <exitMonitor+0x108>
		int nextProcessID = removeHead(myList);
     dcc:	e13ffc17 	ldw	r4,-16(fp)
     dd0:	00006400 	call	640 <removeHead>
     dd4:	e0bffb15 	stw	r2,-20(fp)
		printf(" %d is waiting on this monitor\n", nextProcessID);
     dd8:	01000074 	movhi	r4,1
     ddc:	21389004 	addi	r4,r4,-7616
     de0:	e17ffb17 	ldw	r5,-20(fp)
     de4:	00025d80 	call	25d8 <printf>
		FLUSH
     de8:	e03ffa15 	stw	zero,-24(fp)
     dec:	00000306 	br	dfc <exitMonitor+0xcc>
     df0:	e0bffa17 	ldw	r2,-24(fp)
     df4:	10800044 	addi	r2,r2,1
     df8:	e0bffa15 	stw	r2,-24(fp)
     dfc:	e0fffa17 	ldw	r3,-24(fp)
     e00:	00800234 	movhi	r2,8
     e04:	10a847c4 	addi	r2,r2,-24289
     e08:	10fff90e 	bge	r2,r3,df0 <exitMonitor+0xc0>
		// Put the process on the 'global' ready list
		addFirst(&readyList, nextProcessID);
     e0c:	d1200004 	addi	r4,gp,-32768
     e10:	e17ffb17 	ldw	r5,-20(fp)
     e14:	00005d00 	call	5d0 <addFirst>
		transfer(processes[nextProcessID].p);
     e18:	e0bffb17 	ldw	r2,-20(fp)
     e1c:	00c00074 	movhi	r3,1
     e20:	18c74104 	addi	r3,r3,7428
     e24:	10800d24 	muli	r2,r2,52
     e28:	10c5883a 	add	r2,r2,r3
     e2c:	10800104 	addi	r2,r2,4
     e30:	11000017 	ldw	r4,0(r2)
     e34:	0001b380 	call	1b38 <transfer>
	}
	// Doesn't do anything after transfer
	printf("#end exitMonitor\n");
     e38:	01000074 	movhi	r4,1
     e3c:	21389804 	addi	r4,r4,-7584
     e40:	00026f00 	call	26f0 <puts>
}
     e44:	e037883a 	mov	sp,fp
     e48:	dfc00117 	ldw	ra,4(sp)
     e4c:	df000017 	ldw	fp,0(sp)
     e50:	dec00204 	addi	sp,sp,8
     e54:	f800283a 	ret

00000e58 <wait>:

void wait(void) {
     e58:	defff904 	addi	sp,sp,-28
     e5c:	dfc00615 	stw	ra,24(sp)
     e60:	df000515 	stw	fp,20(sp)
     e64:	df000504 	addi	fp,sp,20
	Monitor mon = currentMonitor();
     e68:	e13ffd04 	addi	r4,fp,-12
     e6c:	00009ec0 	call	9ec <currentMonitor>
	mon.isOccupied = 0;
     e70:	e03ffd0d 	sth	zero,-12(fp)

	// Stop current process
	addFirst(&mon.waitingList, removeHead(&readyList));
     e74:	d1200004 	addi	r4,gp,-32768
     e78:	00006400 	call	640 <removeHead>
     e7c:	100b883a 	mov	r5,r2
     e80:	e0bffd04 	addi	r2,fp,-12
     e84:	11000104 	addi	r4,r2,4
     e88:	00005d00 	call	5d0 <addFirst>


	// Find a candidate process to run
	int* const myList = &mon.readyList;
     e8c:	e0bffd04 	addi	r2,fp,-12
     e90:	10800204 	addi	r2,r2,8
     e94:	e0bffc15 	stw	r2,-16(fp)
	// candidate is ready on local monitor
	if (*myList != -1) {
     e98:	e0bffc17 	ldw	r2,-16(fp)
     e9c:	10800017 	ldw	r2,0(r2)
     ea0:	10bfffe0 	cmpeqi	r2,r2,-1
     ea4:	10000f1e 	bne	r2,zero,ee4 <wait+0x8c>
		int nextProcessID = removeHead(myList);
     ea8:	e13ffc17 	ldw	r4,-16(fp)
     eac:	00006400 	call	640 <removeHead>
     eb0:	e0bffb15 	stw	r2,-20(fp)
		// Put the process on the 'global' ready list
		addFirst(&readyList, nextProcessID);
     eb4:	d1200004 	addi	r4,gp,-32768
     eb8:	e17ffb17 	ldw	r5,-20(fp)
     ebc:	00005d00 	call	5d0 <addFirst>
		transfer(processes[nextProcessID].p);
     ec0:	e0bffb17 	ldw	r2,-20(fp)
     ec4:	00c00074 	movhi	r3,1
     ec8:	18c74104 	addi	r3,r3,7428
     ecc:	10800d24 	muli	r2,r2,52
     ed0:	10c5883a 	add	r2,r2,r3
     ed4:	10800104 	addi	r2,r2,4
     ed8:	11000017 	ldw	r4,0(r2)
     edc:	0001b380 	call	1b38 <transfer>
     ee0:	00000906 	br	f08 <wait+0xb0>
	}
	// no candidate on local monitor, pick one in global ready list
	else {
		transfer(processes[head(&readyList)].p);
     ee4:	d1200004 	addi	r4,gp,-32768
     ee8:	00007580 	call	758 <head>
     eec:	00c00074 	movhi	r3,1
     ef0:	18c74104 	addi	r3,r3,7428
     ef4:	10800d24 	muli	r2,r2,52
     ef8:	10c5883a 	add	r2,r2,r3
     efc:	10800104 	addi	r2,r2,4
     f00:	11000017 	ldw	r4,0(r2)
     f04:	0001b380 	call	1b38 <transfer>
	}
	// at this point, the monitor HAS to be free & we have been notified

	// we re-take the monitor
	mon.isOccupied = 1;
     f08:	00800044 	movi	r2,1
     f0c:	e0bffd0d 	sth	r2,-12(fp)
}
     f10:	e037883a 	mov	sp,fp
     f14:	dfc00117 	ldw	ra,4(sp)
     f18:	df000017 	ldw	fp,0(sp)
     f1c:	dec00204 	addi	sp,sp,8
     f20:	f800283a 	ret

00000f24 <_notify>:

/* private */ void _notify(Monitor mon) {
     f24:	defffa04 	addi	sp,sp,-24
     f28:	dfc00515 	stw	ra,20(sp)
     f2c:	df000415 	stw	fp,16(sp)
     f30:	df000404 	addi	fp,sp,16
     f34:	e13ffd15 	stw	r4,-12(fp)
     f38:	e17ffe15 	stw	r5,-8(fp)
     f3c:	e1bfff15 	stw	r6,-4(fp)
	int notified = removeHead(&mon.waitingList);
     f40:	e0bffd04 	addi	r2,fp,-12
     f44:	11000104 	addi	r4,r2,4
     f48:	00006400 	call	640 <removeHead>
     f4c:	e0bffc15 	stw	r2,-16(fp)
	addFirst(&mon.readyList, notified);
     f50:	e0bffd04 	addi	r2,fp,-12
     f54:	11000204 	addi	r4,r2,8
     f58:	e17ffc17 	ldw	r5,-16(fp)
     f5c:	00005d00 	call	5d0 <addFirst>
}
     f60:	e037883a 	mov	sp,fp
     f64:	dfc00117 	ldw	ra,4(sp)
     f68:	df000017 	ldw	fp,0(sp)
     f6c:	dec00204 	addi	sp,sp,8
     f70:	f800283a 	ret

00000f74 <notify>:

void notify(void) {
     f74:	defffb04 	addi	sp,sp,-20
     f78:	dfc00415 	stw	ra,16(sp)
     f7c:	df000315 	stw	fp,12(sp)
     f80:	df000304 	addi	fp,sp,12
	Monitor mon = currentMonitor();
     f84:	e13ffd04 	addi	r4,fp,-12
     f88:	00009ec0 	call	9ec <currentMonitor>
	if (mon.waitingList != -1) {
     f8c:	e0bffe17 	ldw	r2,-8(fp)
     f90:	10bfffe0 	cmpeqi	r2,r2,-1
     f94:	1000041e 	bne	r2,zero,fa8 <notify+0x34>
		_notify(mon);
     f98:	e13ffd17 	ldw	r4,-12(fp)
     f9c:	e17ffe17 	ldw	r5,-8(fp)
     fa0:	e1bfff17 	ldw	r6,-4(fp)
     fa4:	0000f240 	call	f24 <_notify>
	}
}
     fa8:	e037883a 	mov	sp,fp
     fac:	dfc00117 	ldw	ra,4(sp)
     fb0:	df000017 	ldw	fp,0(sp)
     fb4:	dec00204 	addi	sp,sp,8
     fb8:	f800283a 	ret

00000fbc <notifyAll>:

void notifyAll(void) {
     fbc:	defffb04 	addi	sp,sp,-20
     fc0:	dfc00415 	stw	ra,16(sp)
     fc4:	df000315 	stw	fp,12(sp)
     fc8:	df000304 	addi	fp,sp,12
	Monitor mon = currentMonitor();
     fcc:	e13ffd04 	addi	r4,fp,-12
     fd0:	00009ec0 	call	9ec <currentMonitor>
	while (mon.waitingList != -1) {
     fd4:	00000406 	br	fe8 <notifyAll+0x2c>
		_notify(mon);
     fd8:	e13ffd17 	ldw	r4,-12(fp)
     fdc:	e17ffe17 	ldw	r5,-8(fp)
     fe0:	e1bfff17 	ldw	r6,-4(fp)
     fe4:	0000f240 	call	f24 <_notify>
	}
}

void notifyAll(void) {
	Monitor mon = currentMonitor();
	while (mon.waitingList != -1) {
     fe8:	e0bffe17 	ldw	r2,-8(fp)
     fec:	10bfffd8 	cmpnei	r2,r2,-1
     ff0:	103ff91e 	bne	r2,zero,fd8 <notifyAll+0x1c>
		_notify(mon);
	}
}
     ff4:	e037883a 	mov	sp,fp
     ff8:	dfc00117 	ldw	ra,4(sp)
     ffc:	df000017 	ldw	fp,0(sp)
    1000:	dec00204 	addi	sp,sp,8
    1004:	f800283a 	ret

00001008 <yield>:

void yield(void){
    1008:	defffc04 	addi	sp,sp,-16
    100c:	dfc00315 	stw	ra,12(sp)
    1010:	df000215 	stw	fp,8(sp)
    1014:	df000204 	addi	fp,sp,8
	printf("#yield, stack pos is: %d\n", processes[currentProcess()].monitorsStackPos);
    1018:	00008940 	call	894 <currentProcess>
    101c:	00c00074 	movhi	r3,1
    1020:	18c74104 	addi	r3,r3,7428
    1024:	10800d24 	muli	r2,r2,52
    1028:	10c5883a 	add	r2,r2,r3
    102c:	10800c04 	addi	r2,r2,48
    1030:	11400017 	ldw	r5,0(r2)
    1034:	01000074 	movhi	r4,1
    1038:	21389d04 	addi	r4,r4,-7564
    103c:	00025d80 	call	25d8 <printf>
    int pId = removeHead(&readyList);
    1040:	d1200004 	addi	r4,gp,-32768
    1044:	00006400 	call	640 <removeHead>
    1048:	e0bfff15 	stw	r2,-4(fp)
    addLast(&readyList, pId);
    104c:	d1200004 	addi	r4,gp,-32768
    1050:	e17fff17 	ldw	r5,-4(fp)
    1054:	00005080 	call	508 <addLast>
    printf("process %d yielding to %d\n", pId, head(&readyList));
    1058:	d1200004 	addi	r4,gp,-32768
    105c:	00007580 	call	758 <head>
    1060:	100d883a 	mov	r6,r2
    1064:	01000074 	movhi	r4,1
    1068:	2138a404 	addi	r4,r4,-7536
    106c:	e17fff17 	ldw	r5,-4(fp)
    1070:	00025d80 	call	25d8 <printf>
    Process process = processes[head(&readyList)].p;
    1074:	d1200004 	addi	r4,gp,-32768
    1078:	00007580 	call	758 <head>
    107c:	00c00074 	movhi	r3,1
    1080:	18c74104 	addi	r3,r3,7428
    1084:	10800d24 	muli	r2,r2,52
    1088:	10c5883a 	add	r2,r2,r3
    108c:	10800104 	addi	r2,r2,4
    1090:	10800017 	ldw	r2,0(r2)
    1094:	e0bffe15 	stw	r2,-8(fp)
    transfer(process);
    1098:	e13ffe17 	ldw	r4,-8(fp)
    109c:	0001b380 	call	1b38 <transfer>
    printf("#endYield, stack pos is: %d\n", processes[currentProcess()].monitorsStackPos);
    10a0:	00008940 	call	894 <currentProcess>
    10a4:	00c00074 	movhi	r3,1
    10a8:	18c74104 	addi	r3,r3,7428
    10ac:	10800d24 	muli	r2,r2,52
    10b0:	10c5883a 	add	r2,r2,r3
    10b4:	10800c04 	addi	r2,r2,48
    10b8:	11400017 	ldw	r5,0(r2)
    10bc:	01000074 	movhi	r4,1
    10c0:	2138ab04 	addi	r4,r4,-7508
    10c4:	00025d80 	call	25d8 <printf>
}
    10c8:	e037883a 	mov	sp,fp
    10cc:	dfc00117 	ldw	ra,4(sp)
    10d0:	df000017 	ldw	fp,0(sp)
    10d4:	dec00204 	addi	sp,sp,8
    10d8:	f800283a 	ret

000010dc <createEvent>:

int createEvent() {
    10dc:	deffff04 	addi	sp,sp,-4
    10e0:	df000015 	stw	fp,0(sp)
    10e4:	d839883a 	mov	fp,sp
	return 0;
    10e8:	0005883a 	mov	r2,zero
}
    10ec:	e037883a 	mov	sp,fp
    10f0:	df000017 	ldw	fp,0(sp)
    10f4:	dec00104 	addi	sp,sp,4
    10f8:	f800283a 	ret

000010fc <attendre>:

void attendre(int eventID) {
    10fc:	defffe04 	addi	sp,sp,-8
    1100:	df000115 	stw	fp,4(sp)
    1104:	df000104 	addi	fp,sp,4
    1108:	e13fff15 	stw	r4,-4(fp)

}
    110c:	e037883a 	mov	sp,fp
    1110:	df000017 	ldw	fp,0(sp)
    1114:	dec00104 	addi	sp,sp,4
    1118:	f800283a 	ret

0000111c <declencher>:

void declencher(int eventID) {
    111c:	defffe04 	addi	sp,sp,-8
    1120:	df000115 	stw	fp,4(sp)
    1124:	df000104 	addi	fp,sp,4
    1128:	e13fff15 	stw	r4,-4(fp)

}
    112c:	e037883a 	mov	sp,fp
    1130:	df000017 	ldw	fp,0(sp)
    1134:	dec00104 	addi	sp,sp,4
    1138:	f800283a 	ret

0000113c <reinitialiser>:

void reinitialiser(int eventID) {
    113c:	defffe04 	addi	sp,sp,-8
    1140:	df000115 	stw	fp,4(sp)
    1144:	df000104 	addi	fp,sp,4
    1148:	e13fff15 	stw	r4,-4(fp)

}
    114c:	e037883a 	mov	sp,fp
    1150:	df000017 	ldw	fp,0(sp)
    1154:	dec00104 	addi	sp,sp,4
    1158:	f800283a 	ret

0000115c <initBuffer>:
	int message;
	int full;
	int monitor;
} Buffer;

void initBuffer(Buffer* b) {
    115c:	defffd04 	addi	sp,sp,-12
    1160:	dfc00215 	stw	ra,8(sp)
    1164:	df000115 	stw	fp,4(sp)
    1168:	df000104 	addi	fp,sp,4
    116c:	e13fff15 	stw	r4,-4(fp)
	b->monitor = createMonitor();
    1170:	0000ac80 	call	ac8 <createMonitor>
    1174:	e0ffff17 	ldw	r3,-4(fp)
    1178:	18800215 	stw	r2,8(r3)
	b->full = 0;
    117c:	e0bfff17 	ldw	r2,-4(fp)
    1180:	10000115 	stw	zero,4(r2)
}
    1184:	e037883a 	mov	sp,fp
    1188:	dfc00117 	ldw	ra,4(sp)
    118c:	df000017 	ldw	fp,0(sp)
    1190:	dec00204 	addi	sp,sp,8
    1194:	f800283a 	ret

00001198 <put>:

void put(Buffer* b, int m) {
    1198:	defffc04 	addi	sp,sp,-16
    119c:	dfc00315 	stw	ra,12(sp)
    11a0:	df000215 	stw	fp,8(sp)
    11a4:	df000204 	addi	fp,sp,8
    11a8:	e13ffe15 	stw	r4,-8(fp)
    11ac:	e17fff15 	stw	r5,-4(fp)
	enterMonitor(b->monitor);
    11b0:	e0bffe17 	ldw	r2,-8(fp)
    11b4:	11000217 	ldw	r4,8(r2)
    11b8:	0000b780 	call	b78 <enterMonitor>
	while(b->full) {
    11bc:	00000106 	br	11c4 <put+0x2c>
		wait();
    11c0:	0000e580 	call	e58 <wait>
	b->full = 0;
}

void put(Buffer* b, int m) {
	enterMonitor(b->monitor);
	while(b->full) {
    11c4:	e0bffe17 	ldw	r2,-8(fp)
    11c8:	10800117 	ldw	r2,4(r2)
    11cc:	1004c03a 	cmpne	r2,r2,zero
    11d0:	103ffb1e 	bne	r2,zero,11c0 <put+0x28>
		wait();
	}
	b->message = m;
    11d4:	e0fffe17 	ldw	r3,-8(fp)
    11d8:	e0bfff17 	ldw	r2,-4(fp)
    11dc:	18800015 	stw	r2,0(r3)
	b->full = 1;
    11e0:	e0fffe17 	ldw	r3,-8(fp)
    11e4:	00800044 	movi	r2,1
    11e8:	18800115 	stw	r2,4(r3)
	notify();
    11ec:	0000f740 	call	f74 <notify>
	exitMonitor();
    11f0:	0000d300 	call	d30 <exitMonitor>
	return;
}
    11f4:	e037883a 	mov	sp,fp
    11f8:	dfc00117 	ldw	ra,4(sp)
    11fc:	df000017 	ldw	fp,0(sp)
    1200:	dec00204 	addi	sp,sp,8
    1204:	f800283a 	ret

00001208 <get>:

int get(Buffer*b) {
    1208:	defffc04 	addi	sp,sp,-16
    120c:	dfc00315 	stw	ra,12(sp)
    1210:	df000215 	stw	fp,8(sp)
    1214:	df000204 	addi	fp,sp,8
    1218:	e13fff15 	stw	r4,-4(fp)
	int m;

	enterMonitor(b->monitor);
    121c:	e0bfff17 	ldw	r2,-4(fp)
    1220:	11000217 	ldw	r4,8(r2)
    1224:	0000b780 	call	b78 <enterMonitor>
	while(!b->full) {
    1228:	00000106 	br	1230 <get+0x28>
		wait();
    122c:	0000e580 	call	e58 <wait>

int get(Buffer*b) {
	int m;

	enterMonitor(b->monitor);
	while(!b->full) {
    1230:	e0bfff17 	ldw	r2,-4(fp)
    1234:	10800117 	ldw	r2,4(r2)
    1238:	1005003a 	cmpeq	r2,r2,zero
    123c:	103ffb1e 	bne	r2,zero,122c <get+0x24>
		wait();
	}
	m = b->message;
    1240:	e0bfff17 	ldw	r2,-4(fp)
    1244:	10800017 	ldw	r2,0(r2)
    1248:	e0bffe15 	stw	r2,-8(fp)
	b->full = 0;
    124c:	e0bfff17 	ldw	r2,-4(fp)
    1250:	10000115 	stw	zero,4(r2)
	notifyAll();
    1254:	0000fbc0 	call	fbc <notifyAll>
	exitMonitor();
    1258:	0000d300 	call	d30 <exitMonitor>

	return m;
    125c:	e0bffe17 	ldw	r2,-8(fp)
}
    1260:	e037883a 	mov	sp,fp
    1264:	dfc00117 	ldw	ra,4(sp)
    1268:	df000017 	ldw	fp,0(sp)
    126c:	dec00204 	addi	sp,sp,8
    1270:	f800283a 	ret

00001274 <initEventBuffer>:
	int message;
	int fullEvent;
	int emptyEvent;
} EventBuffer;

void initEventBuffer(EventBuffer* b) {
    1274:	defffd04 	addi	sp,sp,-12
    1278:	dfc00215 	stw	ra,8(sp)
    127c:	df000115 	stw	fp,4(sp)
    1280:	df000104 	addi	fp,sp,4
    1284:	e13fff15 	stw	r4,-4(fp)
	b->emptyEvent = createEvent();
    1288:	00010dc0 	call	10dc <createEvent>
    128c:	1007883a 	mov	r3,r2
    1290:	e0bfff17 	ldw	r2,-4(fp)
    1294:	10c00215 	stw	r3,8(r2)
	b->fullEvent = createEvent();
    1298:	00010dc0 	call	10dc <createEvent>
    129c:	1007883a 	mov	r3,r2
    12a0:	e0bfff17 	ldw	r2,-4(fp)
    12a4:	10c00115 	stw	r3,4(r2)
	declencher(b->emptyEvent);
    12a8:	e0bfff17 	ldw	r2,-4(fp)
    12ac:	11000217 	ldw	r4,8(r2)
    12b0:	000111c0 	call	111c <declencher>
}
    12b4:	e037883a 	mov	sp,fp
    12b8:	dfc00117 	ldw	ra,4(sp)
    12bc:	df000017 	ldw	fp,0(sp)
    12c0:	dec00204 	addi	sp,sp,8
    12c4:	f800283a 	ret

000012c8 <eput>:

void eput(EventBuffer* b, int m) {
    12c8:	defffc04 	addi	sp,sp,-16
    12cc:	dfc00315 	stw	ra,12(sp)
    12d0:	df000215 	stw	fp,8(sp)
    12d4:	df000204 	addi	fp,sp,8
    12d8:	e13ffe15 	stw	r4,-8(fp)
    12dc:	e17fff15 	stw	r5,-4(fp)
	attendre(b->emptyEvent);
    12e0:	e0bffe17 	ldw	r2,-8(fp)
    12e4:	11000217 	ldw	r4,8(r2)
    12e8:	00010fc0 	call	10fc <attendre>
	reinitialiser(b->emptyEvent);
    12ec:	e0bffe17 	ldw	r2,-8(fp)
    12f0:	11000217 	ldw	r4,8(r2)
    12f4:	000113c0 	call	113c <reinitialiser>
	b->message = m;
    12f8:	e0fffe17 	ldw	r3,-8(fp)
    12fc:	e0bfff17 	ldw	r2,-4(fp)
    1300:	18800015 	stw	r2,0(r3)
	declencher(b->fullEvent);
    1304:	e0bffe17 	ldw	r2,-8(fp)
    1308:	11000117 	ldw	r4,4(r2)
    130c:	000111c0 	call	111c <declencher>
}
    1310:	e037883a 	mov	sp,fp
    1314:	dfc00117 	ldw	ra,4(sp)
    1318:	df000017 	ldw	fp,0(sp)
    131c:	dec00204 	addi	sp,sp,8
    1320:	f800283a 	ret

00001324 <eget>:

int eget(EventBuffer *b) {
    1324:	defffc04 	addi	sp,sp,-16
    1328:	dfc00315 	stw	ra,12(sp)
    132c:	df000215 	stw	fp,8(sp)
    1330:	df000204 	addi	fp,sp,8
    1334:	e13fff15 	stw	r4,-4(fp)
	int m;
	attendre(b->fullEvent);
    1338:	e0bfff17 	ldw	r2,-4(fp)
    133c:	11000117 	ldw	r4,4(r2)
    1340:	00010fc0 	call	10fc <attendre>
	reinitialiser(b->fullEvent);
    1344:	e0bfff17 	ldw	r2,-4(fp)
    1348:	11000117 	ldw	r4,4(r2)
    134c:	000113c0 	call	113c <reinitialiser>
	m = b->message;
    1350:	e0bfff17 	ldw	r2,-4(fp)
    1354:	10800017 	ldw	r2,0(r2)
    1358:	e0bffe15 	stw	r2,-8(fp)
	declencher(b->emptyEvent);
    135c:	e0bfff17 	ldw	r2,-4(fp)
    1360:	11000217 	ldw	r4,8(r2)
    1364:	000111c0 	call	111c <declencher>
	return m;
    1368:	e0bffe17 	ldw	r2,-8(fp)
}
    136c:	e037883a 	mov	sp,fp
    1370:	dfc00117 	ldw	ra,4(sp)
    1374:	df000017 	ldw	fp,0(sp)
    1378:	dec00204 	addi	sp,sp,8
    137c:	f800283a 	ret

00001380 <displayNumber>:
int digitCodes[] = {0x3E223E00, 0x203E2400, 0x2E2A3A00, 0x3E2A2A00, 0x3E080E00,
		0x3A2A2E00, 0x3A2A3E00, 0x3E020200, 0x3E2A3E00, 0x3E2A2E00, 0};
int lcdZones[] = {LED_0_BASE, LED_1_BASE, LED_2_BASE};

/* displays number "no" in LCD zone "zone" */
void displayNumber(int zone, int no) {
    1380:	defffd04 	addi	sp,sp,-12
    1384:	df000215 	stw	fp,8(sp)
    1388:	df000204 	addi	fp,sp,8
    138c:	e13ffe15 	stw	r4,-8(fp)
    1390:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[zone], digitCodes[no]);
    1394:	e0bffe17 	ldw	r2,-8(fp)
    1398:	00c00074 	movhi	r3,1
    139c:	18f9c104 	addi	r3,r3,-6396
    13a0:	1085883a 	add	r2,r2,r2
    13a4:	1085883a 	add	r2,r2,r2
    13a8:	10c5883a 	add	r2,r2,r3
    13ac:	10800017 	ldw	r2,0(r2)
    13b0:	1009883a 	mov	r4,r2
    13b4:	e0bfff17 	ldw	r2,-4(fp)
    13b8:	00c00074 	movhi	r3,1
    13bc:	18f9b604 	addi	r3,r3,-6440
    13c0:	1085883a 	add	r2,r2,r2
    13c4:	1085883a 	add	r2,r2,r2
    13c8:	10c5883a 	add	r2,r2,r3
    13cc:	10c00017 	ldw	r3,0(r2)
    13d0:	2005883a 	mov	r2,r4
    13d4:	10c00035 	stwio	r3,0(r2)
}
    13d8:	e037883a 	mov	sp,fp
    13dc:	df000017 	ldw	fp,0(sp)
    13e0:	dec00104 	addi	sp,sp,4
    13e4:	f800283a 	ret

000013e8 <blinkNumber>:

/* blinks number "no" in LCD zone "zone" */
void blinkNumber(int zone, int no) {
    13e8:	defffb04 	addi	sp,sp,-20
    13ec:	df000415 	stw	fp,16(sp)
    13f0:	df000404 	addi	fp,sp,16
    13f4:	e13ffe15 	stw	r4,-8(fp)
    13f8:	e17fff15 	stw	r5,-4(fp)
	int i, j;
	for (i = 0; i < BLINKS; i++) {
    13fc:	e03ffd15 	stw	zero,-12(fp)
    1400:	00002e06 	br	14bc <blinkNumber+0xd4>
		IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[zone], 0);
    1404:	e0bffe17 	ldw	r2,-8(fp)
    1408:	00c00074 	movhi	r3,1
    140c:	18f9c104 	addi	r3,r3,-6396
    1410:	1085883a 	add	r2,r2,r2
    1414:	1085883a 	add	r2,r2,r2
    1418:	10c5883a 	add	r2,r2,r3
    141c:	10800017 	ldw	r2,0(r2)
    1420:	10000035 	stwio	zero,0(r2)
		for (j = 0; j < PAUSE; j++);
    1424:	e03ffc15 	stw	zero,-16(fp)
    1428:	00000306 	br	1438 <blinkNumber+0x50>
    142c:	e0bffc17 	ldw	r2,-16(fp)
    1430:	10800044 	addi	r2,r2,1
    1434:	e0bffc15 	stw	r2,-16(fp)
    1438:	e0fffc17 	ldw	r3,-16(fp)
    143c:	00800234 	movhi	r2,8
    1440:	10a847c4 	addi	r2,r2,-24289
    1444:	10fff90e 	bge	r2,r3,142c <blinkNumber+0x44>
		IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[zone], digitCodes[no]);
    1448:	e0bffe17 	ldw	r2,-8(fp)
    144c:	00c00074 	movhi	r3,1
    1450:	18f9c104 	addi	r3,r3,-6396
    1454:	1085883a 	add	r2,r2,r2
    1458:	1085883a 	add	r2,r2,r2
    145c:	10c5883a 	add	r2,r2,r3
    1460:	10800017 	ldw	r2,0(r2)
    1464:	1009883a 	mov	r4,r2
    1468:	e0bfff17 	ldw	r2,-4(fp)
    146c:	00c00074 	movhi	r3,1
    1470:	18f9b604 	addi	r3,r3,-6440
    1474:	1085883a 	add	r2,r2,r2
    1478:	1085883a 	add	r2,r2,r2
    147c:	10c5883a 	add	r2,r2,r3
    1480:	10c00017 	ldw	r3,0(r2)
    1484:	2005883a 	mov	r2,r4
    1488:	10c00035 	stwio	r3,0(r2)
		for (j = 0; j < PAUSE; j++);
    148c:	e03ffc15 	stw	zero,-16(fp)
    1490:	00000306 	br	14a0 <blinkNumber+0xb8>
    1494:	e0bffc17 	ldw	r2,-16(fp)
    1498:	10800044 	addi	r2,r2,1
    149c:	e0bffc15 	stw	r2,-16(fp)
    14a0:	e0fffc17 	ldw	r3,-16(fp)
    14a4:	00800234 	movhi	r2,8
    14a8:	10a847c4 	addi	r2,r2,-24289
    14ac:	10fff90e 	bge	r2,r3,1494 <blinkNumber+0xac>
}

/* blinks number "no" in LCD zone "zone" */
void blinkNumber(int zone, int no) {
	int i, j;
	for (i = 0; i < BLINKS; i++) {
    14b0:	e0bffd17 	ldw	r2,-12(fp)
    14b4:	10800044 	addi	r2,r2,1
    14b8:	e0bffd15 	stw	r2,-12(fp)
    14bc:	e0bffd17 	ldw	r2,-12(fp)
    14c0:	10800110 	cmplti	r2,r2,4
    14c4:	103fcf1e 	bne	r2,zero,1404 <blinkNumber+0x1c>
		IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[zone], 0);
		for (j = 0; j < PAUSE; j++);
		IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[zone], digitCodes[no]);
		for (j = 0; j < PAUSE; j++);
	}
}
    14c8:	e037883a 	mov	sp,fp
    14cc:	df000017 	ldw	fp,0(sp)
    14d0:	dec00104 	addi	sp,sp,4
    14d4:	f800283a 	ret

000014d8 <producer>:

void producer(){
    14d8:	defff804 	addi	sp,sp,-32
    14dc:	dfc00715 	stw	ra,28(sp)
    14e0:	df000615 	stw	fp,24(sp)
    14e4:	df000604 	addi	fp,sp,24
	int reg, temp;

	printf("Producer starting...\n");
    14e8:	01000074 	movhi	r4,1
    14ec:	2138b304 	addi	r4,r4,-7476
    14f0:	00026f00 	call	26f0 <puts>

	reg = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
    14f4:	00808034 	movhi	r2,512
    14f8:	10940304 	addi	r2,r2,20492
    14fc:	10800037 	ldwio	r2,0(r2)
    1500:	e0bffb15 	stw	r2,-20(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE,reg);
    1504:	00c08034 	movhi	r3,512
    1508:	18d40304 	addi	r3,r3,20492
    150c:	e0bffb17 	ldw	r2,-20(fp)
    1510:	18800035 	stwio	r2,0(r3)

	while(1) {
		enterMonitor(dummyMonitor1);
    1514:	d126bd17 	ldw	r4,-25868(gp)
    1518:	0000b780 	call	b78 <enterMonitor>
		enterMonitor(dummyMonitor2);
    151c:	d126be17 	ldw	r4,-25864(gp)
    1520:	0000b780 	call	b78 <enterMonitor>
		enterMonitor(dummyMonitor1);
    1524:	d126bd17 	ldw	r4,-25868(gp)
    1528:	0000b780 	call	b78 <enterMonitor>
		reg = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
    152c:	00808034 	movhi	r2,512
    1530:	10940304 	addi	r2,r2,20492
    1534:	10800037 	ldwio	r2,0(r2)
    1538:	e0bffb15 	stw	r2,-20(fp)
		if (reg != 0) {
    153c:	e0bffb17 	ldw	r2,-20(fp)
    1540:	1005003a 	cmpeq	r2,r2,zero
    1544:	10008f1e 	bne	r2,zero,1784 <producer+0x2ac>

			/* check button 0 */
			temp = reg;
    1548:	e0bffb17 	ldw	r2,-20(fp)
    154c:	e0bffa15 	stw	r2,-24(fp)
			if (temp%2==1) {
    1550:	e0fffa17 	ldw	r3,-24(fp)
    1554:	00a00034 	movhi	r2,32768
    1558:	10800044 	addi	r2,r2,1
    155c:	1886703a 	and	r3,r3,r2
    1560:	e0fffc15 	stw	r3,-16(fp)
    1564:	e0fffc17 	ldw	r3,-16(fp)
    1568:	1804403a 	cmpge	r2,r3,zero
    156c:	10000a1e 	bne	r2,zero,1598 <producer+0xc0>
    1570:	e0bffc17 	ldw	r2,-16(fp)
    1574:	10bfffc4 	addi	r2,r2,-1
    1578:	e0bffc15 	stw	r2,-16(fp)
    157c:	00bfff84 	movi	r2,-2
    1580:	e0fffc17 	ldw	r3,-16(fp)
    1584:	1886b03a 	or	r3,r3,r2
    1588:	e0fffc15 	stw	r3,-16(fp)
    158c:	e0bffc17 	ldw	r2,-16(fp)
    1590:	10800044 	addi	r2,r2,1
    1594:	e0bffc15 	stw	r2,-16(fp)
    1598:	e0bffc17 	ldw	r2,-16(fp)
    159c:	10800058 	cmpnei	r2,r2,1
    15a0:	1000071e 	bne	r2,zero,15c0 <producer+0xe8>
				printf("putting to 0\n");
    15a4:	01000074 	movhi	r4,1
    15a8:	2138b904 	addi	r4,r4,-7452
    15ac:	00026f00 	call	26f0 <puts>
				put(&b0, 0);
    15b0:	01000074 	movhi	r4,1
    15b4:	2107c904 	addi	r4,r4,7972
    15b8:	000b883a 	mov	r5,zero
    15bc:	00011980 	call	1198 <put>
			}

			/* check button 1 */
			temp = temp >> 1;
    15c0:	e0bffa17 	ldw	r2,-24(fp)
    15c4:	1005d07a 	srai	r2,r2,1
    15c8:	e0bffa15 	stw	r2,-24(fp)
			if (temp%2==1) {
    15cc:	e0fffa17 	ldw	r3,-24(fp)
    15d0:	00a00034 	movhi	r2,32768
    15d4:	10800044 	addi	r2,r2,1
    15d8:	1886703a 	and	r3,r3,r2
    15dc:	e0fffd15 	stw	r3,-12(fp)
    15e0:	e0fffd17 	ldw	r3,-12(fp)
    15e4:	1804403a 	cmpge	r2,r3,zero
    15e8:	10000a1e 	bne	r2,zero,1614 <producer+0x13c>
    15ec:	e0bffd17 	ldw	r2,-12(fp)
    15f0:	10bfffc4 	addi	r2,r2,-1
    15f4:	e0bffd15 	stw	r2,-12(fp)
    15f8:	00bfff84 	movi	r2,-2
    15fc:	e0fffd17 	ldw	r3,-12(fp)
    1600:	1886b03a 	or	r3,r3,r2
    1604:	e0fffd15 	stw	r3,-12(fp)
    1608:	e0bffd17 	ldw	r2,-12(fp)
    160c:	10800044 	addi	r2,r2,1
    1610:	e0bffd15 	stw	r2,-12(fp)
    1614:	e0bffd17 	ldw	r2,-12(fp)
    1618:	10800058 	cmpnei	r2,r2,1
    161c:	1000071e 	bne	r2,zero,163c <producer+0x164>
				printf("putting to 1\n");
    1620:	01000074 	movhi	r4,1
    1624:	2138bd04 	addi	r4,r4,-7436
    1628:	00026f00 	call	26f0 <puts>
				put(&b1, 1);
    162c:	01000074 	movhi	r4,1
    1630:	2107c604 	addi	r4,r4,7960
    1634:	01400044 	movi	r5,1
    1638:	00011980 	call	1198 <put>
			}

			/* check button 2 */
			temp = temp >> 1;
    163c:	e0bffa17 	ldw	r2,-24(fp)
    1640:	1005d07a 	srai	r2,r2,1
    1644:	e0bffa15 	stw	r2,-24(fp)
			if (temp%2==1) {
    1648:	e0fffa17 	ldw	r3,-24(fp)
    164c:	00a00034 	movhi	r2,32768
    1650:	10800044 	addi	r2,r2,1
    1654:	1886703a 	and	r3,r3,r2
    1658:	e0fffe15 	stw	r3,-8(fp)
    165c:	e0fffe17 	ldw	r3,-8(fp)
    1660:	1804403a 	cmpge	r2,r3,zero
    1664:	10000a1e 	bne	r2,zero,1690 <producer+0x1b8>
    1668:	e0bffe17 	ldw	r2,-8(fp)
    166c:	10bfffc4 	addi	r2,r2,-1
    1670:	e0bffe15 	stw	r2,-8(fp)
    1674:	00bfff84 	movi	r2,-2
    1678:	e0fffe17 	ldw	r3,-8(fp)
    167c:	1886b03a 	or	r3,r3,r2
    1680:	e0fffe15 	stw	r3,-8(fp)
    1684:	e0bffe17 	ldw	r2,-8(fp)
    1688:	10800044 	addi	r2,r2,1
    168c:	e0bffe15 	stw	r2,-8(fp)
    1690:	e0bffe17 	ldw	r2,-8(fp)
    1694:	10800058 	cmpnei	r2,r2,1
    1698:	1000101e 	bne	r2,zero,16dc <producer+0x204>
				printf("putting to 2\n");
    169c:	01000074 	movhi	r4,1
    16a0:	2138c104 	addi	r4,r4,-7420
    16a4:	00026f00 	call	26f0 <puts>
				exitMonitor();
    16a8:	0000d300 	call	d30 <exitMonitor>
				exitMonitor();
    16ac:	0000d300 	call	d30 <exitMonitor>
				exitMonitor();
    16b0:	0000d300 	call	d30 <exitMonitor>
				eput(&b2, 2);
    16b4:	01000074 	movhi	r4,1
    16b8:	2107c304 	addi	r4,r4,7948
    16bc:	01400084 	movi	r5,2
    16c0:	00012c80 	call	12c8 <eput>
				enterMonitor(dummyMonitor1);
    16c4:	d126bd17 	ldw	r4,-25868(gp)
    16c8:	0000b780 	call	b78 <enterMonitor>
				enterMonitor(dummyMonitor2);
    16cc:	d126be17 	ldw	r4,-25864(gp)
    16d0:	0000b780 	call	b78 <enterMonitor>
				enterMonitor(dummyMonitor1);
    16d4:	d126bd17 	ldw	r4,-25868(gp)
    16d8:	0000b780 	call	b78 <enterMonitor>
			}

			/* check button 3 -- exit if pressed */
			temp = temp >> 1;
    16dc:	e0bffa17 	ldw	r2,-24(fp)
    16e0:	1005d07a 	srai	r2,r2,1
    16e4:	e0bffa15 	stw	r2,-24(fp)
			if (temp%2==1) {
    16e8:	e0fffa17 	ldw	r3,-24(fp)
    16ec:	00a00034 	movhi	r2,32768
    16f0:	10800044 	addi	r2,r2,1
    16f4:	1886703a 	and	r3,r3,r2
    16f8:	e0ffff15 	stw	r3,-4(fp)
    16fc:	e0ffff17 	ldw	r3,-4(fp)
    1700:	1804403a 	cmpge	r2,r3,zero
    1704:	10000a1e 	bne	r2,zero,1730 <producer+0x258>
    1708:	e0bfff17 	ldw	r2,-4(fp)
    170c:	10bfffc4 	addi	r2,r2,-1
    1710:	e0bfff15 	stw	r2,-4(fp)
    1714:	00bfff84 	movi	r2,-2
    1718:	e0ffff17 	ldw	r3,-4(fp)
    171c:	1886b03a 	or	r3,r3,r2
    1720:	e0ffff15 	stw	r3,-4(fp)
    1724:	e0bfff17 	ldw	r2,-4(fp)
    1728:	10800044 	addi	r2,r2,1
    172c:	e0bfff15 	stw	r2,-4(fp)
    1730:	e0bfff17 	ldw	r2,-4(fp)
    1734:	10800058 	cmpnei	r2,r2,1
    1738:	10000e1e 	bne	r2,zero,1774 <producer+0x29c>
				printf("Bye!\n");
    173c:	01000074 	movhi	r4,1
    1740:	2138c504 	addi	r4,r4,-7404
    1744:	00026f00 	call	26f0 <puts>
				displayNumber(0, 10);
    1748:	0009883a 	mov	r4,zero
    174c:	01400284 	movi	r5,10
    1750:	00013800 	call	1380 <displayNumber>
				displayNumber(1, 10);
    1754:	01000044 	movi	r4,1
    1758:	01400284 	movi	r5,10
    175c:	00013800 	call	1380 <displayNumber>
				displayNumber(2, 10);
    1760:	01000084 	movi	r4,2
    1764:	01400284 	movi	r5,10
    1768:	00013800 	call	1380 <displayNumber>
				exit(0);
    176c:	0009883a 	mov	r4,zero
    1770:	0001e380 	call	1e38 <exit>
			}

			IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE,reg); /* reset buttons to 0 */
    1774:	00c08034 	movhi	r3,512
    1778:	18d40304 	addi	r3,r3,20492
    177c:	e0bffb17 	ldw	r2,-20(fp)
    1780:	18800035 	stwio	r2,0(r3)
		}
		exitMonitor();
    1784:	0000d300 	call	d30 <exitMonitor>
		exitMonitor();
    1788:	0000d300 	call	d30 <exitMonitor>
		exitMonitor();
    178c:	0000d300 	call	d30 <exitMonitor>
		yield();
    1790:	00010080 	call	1008 <yield>
	}
    1794:	003f5f06 	br	1514 <producer+0x3c>

00001798 <consumer0>:
}

void consumer0(){
    1798:	defffc04 	addi	sp,sp,-16
    179c:	dfc00315 	stw	ra,12(sp)
    17a0:	df000215 	stw	fp,8(sp)
    17a4:	df000204 	addi	fp,sp,8
	int counter = 0;
    17a8:	e03fff15 	stw	zero,-4(fp)
	int m;

	displayNumber(0, 0);
    17ac:	0009883a 	mov	r4,zero
    17b0:	000b883a 	mov	r5,zero
    17b4:	00013800 	call	1380 <displayNumber>
	printf("Consumer 0 starting...\n");
    17b8:	01000074 	movhi	r4,1
    17bc:	2138c704 	addi	r4,r4,-7396
    17c0:	00026f00 	call	26f0 <puts>
	while(1) {
		m = get(&b0);
    17c4:	01000074 	movhi	r4,1
    17c8:	2107c904 	addi	r4,r4,7972
    17cc:	00012080 	call	1208 <get>
    17d0:	e0bffe15 	stw	r2,-8(fp)
		printf("consumed from 0\n");
    17d4:	01000074 	movhi	r4,1
    17d8:	2138cd04 	addi	r4,r4,-7372
    17dc:	00026f00 	call	26f0 <puts>
		blinkNumber(0, counter);
    17e0:	0009883a 	mov	r4,zero
    17e4:	e17fff17 	ldw	r5,-4(fp)
    17e8:	00013e80 	call	13e8 <blinkNumber>
		counter = (counter + 1) % 10;
    17ec:	e0bfff17 	ldw	r2,-4(fp)
    17f0:	11000044 	addi	r4,r2,1
    17f4:	01400284 	movi	r5,10
    17f8:	0001dc80 	call	1dc8 <__modsi3>
    17fc:	e0bfff15 	stw	r2,-4(fp)
	 	displayNumber(0, counter);
    1800:	0009883a 	mov	r4,zero
    1804:	e17fff17 	ldw	r5,-4(fp)
    1808:	00013800 	call	1380 <displayNumber>
	}
    180c:	003fed06 	br	17c4 <consumer0+0x2c>

00001810 <consumer1>:
}

void consumer1(){
    1810:	defffc04 	addi	sp,sp,-16
    1814:	dfc00315 	stw	ra,12(sp)
    1818:	df000215 	stw	fp,8(sp)
    181c:	df000204 	addi	fp,sp,8
	int counter = 0;
    1820:	e03fff15 	stw	zero,-4(fp)
	int m;

	displayNumber(1, 0);
    1824:	01000044 	movi	r4,1
    1828:	000b883a 	mov	r5,zero
    182c:	00013800 	call	1380 <displayNumber>
	printf("Consumer 1 starting...\n");
    1830:	01000074 	movhi	r4,1
    1834:	2138d104 	addi	r4,r4,-7356
    1838:	00026f00 	call	26f0 <puts>
	while(1) {
		m = get(&b1);
    183c:	01000074 	movhi	r4,1
    1840:	2107c604 	addi	r4,r4,7960
    1844:	00012080 	call	1208 <get>
    1848:	e0bffe15 	stw	r2,-8(fp)
		printf("consumed from 1\n");
    184c:	01000074 	movhi	r4,1
    1850:	2138d704 	addi	r4,r4,-7332
    1854:	00026f00 	call	26f0 <puts>
		blinkNumber(1, counter);
    1858:	01000044 	movi	r4,1
    185c:	e17fff17 	ldw	r5,-4(fp)
    1860:	00013e80 	call	13e8 <blinkNumber>
		counter = (counter + 1) % 10;
    1864:	e0bfff17 	ldw	r2,-4(fp)
    1868:	11000044 	addi	r4,r2,1
    186c:	01400284 	movi	r5,10
    1870:	0001dc80 	call	1dc8 <__modsi3>
    1874:	e0bfff15 	stw	r2,-4(fp)
		displayNumber(1, counter);
    1878:	01000044 	movi	r4,1
    187c:	e17fff17 	ldw	r5,-4(fp)
    1880:	00013800 	call	1380 <displayNumber>
	}
    1884:	003fed06 	br	183c <consumer1+0x2c>

00001888 <consumer2>:
}

void consumer2(){
    1888:	defffc04 	addi	sp,sp,-16
    188c:	dfc00315 	stw	ra,12(sp)
    1890:	df000215 	stw	fp,8(sp)
    1894:	df000204 	addi	fp,sp,8
	int counter = 0;
    1898:	e03fff15 	stw	zero,-4(fp)
	int m;

	displayNumber(2, 0);
    189c:	01000084 	movi	r4,2
    18a0:	000b883a 	mov	r5,zero
    18a4:	00013800 	call	1380 <displayNumber>
	printf("Consumer 2 starting...\n");
    18a8:	01000074 	movhi	r4,1
    18ac:	2138db04 	addi	r4,r4,-7316
    18b0:	00026f00 	call	26f0 <puts>
	while(1) {
		m = eget(&b2);
    18b4:	01000074 	movhi	r4,1
    18b8:	2107c304 	addi	r4,r4,7948
    18bc:	00013240 	call	1324 <eget>
    18c0:	e0bffe15 	stw	r2,-8(fp)
		printf("consumed from 2\n");
    18c4:	01000074 	movhi	r4,1
    18c8:	2138e104 	addi	r4,r4,-7292
    18cc:	00026f00 	call	26f0 <puts>
		blinkNumber(2, counter);
    18d0:	01000084 	movi	r4,2
    18d4:	e17fff17 	ldw	r5,-4(fp)
    18d8:	00013e80 	call	13e8 <blinkNumber>
		counter = (counter + 1) % 10;
    18dc:	e0bfff17 	ldw	r2,-4(fp)
    18e0:	11000044 	addi	r4,r2,1
    18e4:	01400284 	movi	r5,10
    18e8:	0001dc80 	call	1dc8 <__modsi3>
    18ec:	e0bfff15 	stw	r2,-4(fp)
		displayNumber(2, counter);
    18f0:	01000084 	movi	r4,2
    18f4:	e17fff17 	ldw	r5,-4(fp)
    18f8:	00013800 	call	1380 <displayNumber>
	}
    18fc:	003fed06 	br	18b4 <consumer2+0x2c>

00001900 <test0>:
}

void test0() {
    1900:	defffc04 	addi	sp,sp,-16
    1904:	dfc00315 	stw	ra,12(sp)
    1908:	df000215 	stw	fp,8(sp)
    190c:	df000204 	addi	fp,sp,8
	int i, j;
	while (1) {
		for (i = 0; i < BLINKS; i++) {
    1910:	e03fff15 	stw	zero,-4(fp)
    1914:	00002306 	br	19a4 <test0+0xa4>
			enterMonitor(dummyMonitor1);
    1918:	d126bd17 	ldw	r4,-25868(gp)
    191c:	0000b780 	call	b78 <enterMonitor>
			//IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[0], 0);
			yield();
    1920:	00010080 	call	1008 <yield>
			for (j = 0; j < PAUSE; j++);
    1924:	e03ffe15 	stw	zero,-8(fp)
    1928:	00000306 	br	1938 <test0+0x38>
    192c:	e0bffe17 	ldw	r2,-8(fp)
    1930:	10800044 	addi	r2,r2,1
    1934:	e0bffe15 	stw	r2,-8(fp)
    1938:	e0fffe17 	ldw	r3,-8(fp)
    193c:	00800234 	movhi	r2,8
    1940:	10a847c4 	addi	r2,r2,-24289
    1944:	10fff90e 	bge	r2,r3,192c <test0+0x2c>
			IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[0], digitCodes[0]);
    1948:	00800074 	movhi	r2,1
    194c:	10b9c104 	addi	r2,r2,-6396
    1950:	10800017 	ldw	r2,0(r2)
    1954:	1009883a 	mov	r4,r2
    1958:	00800074 	movhi	r2,1
    195c:	10b9b604 	addi	r2,r2,-6440
    1960:	10c00017 	ldw	r3,0(r2)
    1964:	2005883a 	mov	r2,r4
    1968:	10c00035 	stwio	r3,0(r2)
			yield();
    196c:	00010080 	call	1008 <yield>
			for (j = 0; j < PAUSE; j++);
    1970:	e03ffe15 	stw	zero,-8(fp)
    1974:	00000306 	br	1984 <test0+0x84>
    1978:	e0bffe17 	ldw	r2,-8(fp)
    197c:	10800044 	addi	r2,r2,1
    1980:	e0bffe15 	stw	r2,-8(fp)
    1984:	e0fffe17 	ldw	r3,-8(fp)
    1988:	00800234 	movhi	r2,8
    198c:	10a847c4 	addi	r2,r2,-24289
    1990:	10fff90e 	bge	r2,r3,1978 <test0+0x78>
			exitMonitor();
    1994:	0000d300 	call	d30 <exitMonitor>
}

void test0() {
	int i, j;
	while (1) {
		for (i = 0; i < BLINKS; i++) {
    1998:	e0bfff17 	ldw	r2,-4(fp)
    199c:	10800044 	addi	r2,r2,1
    19a0:	e0bfff15 	stw	r2,-4(fp)
    19a4:	e0bfff17 	ldw	r2,-4(fp)
    19a8:	10800110 	cmplti	r2,r2,4
    19ac:	103fda1e 	bne	r2,zero,1918 <test0+0x18>
			yield();
			for (j = 0; j < PAUSE; j++);
			exitMonitor();
		}

	}
    19b0:	003fd706 	br	1910 <test0+0x10>

000019b4 <test1>:
}

void test1() {
    19b4:	defffc04 	addi	sp,sp,-16
    19b8:	dfc00315 	stw	ra,12(sp)
    19bc:	df000215 	stw	fp,8(sp)
    19c0:	df000204 	addi	fp,sp,8
	int i, j;
	while (1) {
		enterMonitor(dummyMonitor1);
    19c4:	d126bd17 	ldw	r4,-25868(gp)
    19c8:	0000b780 	call	b78 <enterMonitor>
		for (i = 0; i < BLINKS; i++) {
    19cc:	e03fff15 	stw	zero,-4(fp)
    19d0:	00002406 	br	1a64 <test1+0xb0>
			IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[1], 0);
    19d4:	00800074 	movhi	r2,1
    19d8:	10b9c104 	addi	r2,r2,-6396
    19dc:	10800117 	ldw	r2,4(r2)
    19e0:	10000035 	stwio	zero,0(r2)
			yield();
    19e4:	00010080 	call	1008 <yield>
			for (j = 0; j < PAUSE; j++);
    19e8:	e03ffe15 	stw	zero,-8(fp)
    19ec:	00000306 	br	19fc <test1+0x48>
    19f0:	e0bffe17 	ldw	r2,-8(fp)
    19f4:	10800044 	addi	r2,r2,1
    19f8:	e0bffe15 	stw	r2,-8(fp)
    19fc:	e0fffe17 	ldw	r3,-8(fp)
    1a00:	00800234 	movhi	r2,8
    1a04:	10a847c4 	addi	r2,r2,-24289
    1a08:	10fff90e 	bge	r2,r3,19f0 <test1+0x3c>
			IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[1], digitCodes[1]);
    1a0c:	00800074 	movhi	r2,1
    1a10:	10b9c104 	addi	r2,r2,-6396
    1a14:	10800117 	ldw	r2,4(r2)
    1a18:	1009883a 	mov	r4,r2
    1a1c:	00800074 	movhi	r2,1
    1a20:	10b9b604 	addi	r2,r2,-6440
    1a24:	10c00117 	ldw	r3,4(r2)
    1a28:	2005883a 	mov	r2,r4
    1a2c:	10c00035 	stwio	r3,0(r2)
			yield();
    1a30:	00010080 	call	1008 <yield>
			for (j = 0; j < PAUSE; j++);
    1a34:	e03ffe15 	stw	zero,-8(fp)
    1a38:	00000306 	br	1a48 <test1+0x94>
    1a3c:	e0bffe17 	ldw	r2,-8(fp)
    1a40:	10800044 	addi	r2,r2,1
    1a44:	e0bffe15 	stw	r2,-8(fp)
    1a48:	e0fffe17 	ldw	r3,-8(fp)
    1a4c:	00800234 	movhi	r2,8
    1a50:	10a847c4 	addi	r2,r2,-24289
    1a54:	10fff90e 	bge	r2,r3,1a3c <test1+0x88>

void test1() {
	int i, j;
	while (1) {
		enterMonitor(dummyMonitor1);
		for (i = 0; i < BLINKS; i++) {
    1a58:	e0bfff17 	ldw	r2,-4(fp)
    1a5c:	10800044 	addi	r2,r2,1
    1a60:	e0bfff15 	stw	r2,-4(fp)
    1a64:	e0bfff17 	ldw	r2,-4(fp)
    1a68:	10800110 	cmplti	r2,r2,4
    1a6c:	103fd91e 	bne	r2,zero,19d4 <test1+0x20>
			for (j = 0; j < PAUSE; j++);
			IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[1], digitCodes[1]);
			yield();
			for (j = 0; j < PAUSE; j++);
		}
		exitMonitor();
    1a70:	0000d300 	call	d30 <exitMonitor>
	}
    1a74:	003fd306 	br	19c4 <test1+0x10>

00001a78 <main>:
//
//	start();
//	return 0;
//}

int main(void) {
    1a78:	defffe04 	addi	sp,sp,-8
    1a7c:	dfc00115 	stw	ra,4(sp)
    1a80:	df000015 	stw	fp,0(sp)
    1a84:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LED_COLOR_BASE, LED_COLOR_RESET_VALUE);
    1a88:	00c08034 	movhi	r3,512
    1a8c:	18d43c04 	addi	r3,r3,20720
    1a90:	00803ff4 	movhi	r2,255
    1a94:	18800035 	stwio	r2,0(r3)

	dummyMonitor1 = createMonitor();
    1a98:	0000ac80 	call	ac8 <createMonitor>
    1a9c:	d0a6bd15 	stw	r2,-25868(gp)

	createProcess(test0, STACK_SIZE);
    1aa0:	01000034 	movhi	r4,0
    1aa4:	21064004 	addi	r4,r4,6400
    1aa8:	0149c404 	movi	r5,10000
    1aac:	00007b80 	call	7b8 <createProcess>
	createProcess(test1, STACK_SIZE);
    1ab0:	01000034 	movhi	r4,0
    1ab4:	21066d04 	addi	r4,r4,6580
    1ab8:	0149c404 	movi	r5,10000
    1abc:	00007b80 	call	7b8 <createProcess>

	start();
    1ac0:	0000a4c0 	call	a4c <start>
	return 0;
    1ac4:	0005883a 	mov	r2,zero
}
    1ac8:	e037883a 	mov	sp,fp
    1acc:	dfc00117 	ldw	ra,4(sp)
    1ad0:	df000017 	ldw	fp,0(sp)
    1ad4:	dec00204 	addi	sp,sp,8
    1ad8:	f800283a 	ret

00001adc <newProcess>:


Process running = NULL;  // pointer to the current process.
Process nextP = NULL;  // variable used internally to implement transfer and iotransfer procedures

Process newProcess(void (*f), unsigned int* stack, int stackSize){
    1adc:	defff804 	addi	sp,sp,-32
    1ae0:	dfc00715 	stw	ra,28(sp)
    1ae4:	df000615 	stw	fp,24(sp)
    1ae8:	df000604 	addi	fp,sp,24
    1aec:	e13ffd15 	stw	r4,-12(fp)
    1af0:	e17ffe15 	stw	r5,-8(fp)
    1af4:	e1bfff15 	stw	r6,-4(fp)
    
    unsigned int* newPC = f;
    1af8:	e0bffd17 	ldw	r2,-12(fp)
    1afc:	e0bffc15 	stw	r2,-16(fp)
    int size = stackSize - 4;
    1b00:	e0bfff17 	ldw	r2,-4(fp)
    1b04:	10bfff04 	addi	r2,r2,-4
    1b08:	e0bffb15 	stw	r2,-20(fp)
    
    Process process = _createStack(stack,newPC,size);
    1b0c:	e13ffe17 	ldw	r4,-8(fp)
    1b10:	e17ffc17 	ldw	r5,-16(fp)
    1b14:	e1bffb17 	ldw	r6,-20(fp)
    1b18:	0001bc80 	call	1bc8 <_createStack>
    1b1c:	e0bffa15 	stw	r2,-24(fp)
    return process;
    1b20:	e0bffa17 	ldw	r2,-24(fp)
}
    1b24:	e037883a 	mov	sp,fp
    1b28:	dfc00117 	ldw	ra,4(sp)
    1b2c:	df000017 	ldw	fp,0(sp)
    1b30:	dec00204 	addi	sp,sp,8
    1b34:	f800283a 	ret

00001b38 <transfer>:

/**
 * Called mainly from interrupt routine.
 * (Except for the first call)
 */
void transfer(Process p){
    1b38:	defffd04 	addi	sp,sp,-12
    1b3c:	dfc00215 	stw	ra,8(sp)
    1b40:	df000115 	stw	fp,4(sp)
    1b44:	df000104 	addi	fp,sp,4
    1b48:	e13fff15 	stw	r4,-4(fp)
    
    if(running == NULL){
    1b4c:	d0a6bf17 	ldw	r2,-25860(gp)
    1b50:	1004c03a 	cmpne	r2,r2,zero
    1b54:	1000031e 	bne	r2,zero,1b64 <transfer+0x2c>
        running = malloc(sizeof(Process));
    1b58:	01000104 	movi	r4,4
    1b5c:	0001e840 	call	1e84 <malloc>
    1b60:	d0a6bf15 	stw	r2,-25860(gp)
    }
    nextP = p ;
    1b64:	e0bfff17 	ldw	r2,-4(fp)
    1b68:	d0a6c015 	stw	r2,-25856(gp)
    _transfer();
    1b6c:	0001be40 	call	1be4 <_transfer>
   
}
    1b70:	e037883a 	mov	sp,fp
    1b74:	dfc00117 	ldw	ra,4(sp)
    1b78:	df000017 	ldw	fp,0(sp)
    1b7c:	dec00204 	addi	sp,sp,8
    1b80:	f800283a 	ret

00001b84 <iotransfer>:

/**
 * Called from kernel thread.
 */
void iotransfer(Process p, int interruptV){
    1b84:	defffc04 	addi	sp,sp,-16
    1b88:	dfc00315 	stw	ra,12(sp)
    1b8c:	df000215 	stw	fp,8(sp)
    1b90:	df000204 	addi	fp,sp,8
    1b94:	e13ffe15 	stw	r4,-8(fp)
    1b98:	e17fff15 	stw	r5,-4(fp)
    
    insertTail(interruptV, running);
    1b9c:	d166bf17 	ldw	r5,-25860(gp)
    1ba0:	e13fff17 	ldw	r4,-4(fp)
    1ba4:	00002a40 	call	2a4 <insertTail>
    nextP = p;
    1ba8:	e0bffe17 	ldw	r2,-8(fp)
    1bac:	d0a6c015 	stw	r2,-25856(gp)
    _transfer();
    1bb0:	0001be40 	call	1be4 <_transfer>
   
}
    1bb4:	e037883a 	mov	sp,fp
    1bb8:	dfc00117 	ldw	ra,4(sp)
    1bbc:	df000017 	ldw	fp,0(sp)
    1bc0:	dec00204 	addi	sp,sp,8
    1bc4:	f800283a 	ret

00001bc8 <_createStack>:
.text
_createStack: #r4 = newSP
			  #r5 = newPC
			  #r6 = stackSize - 4
	   # pointer to the bottom of the stack
	   add r2, r4, r6
    1bc8:	2185883a 	add	r2,r4,r6
	   # init sp with r8
	   addi r8, r2, -100 # sp
    1bcc:	123fe704 	addi	r8,r2,-100
	   stw  r5, 0(r8)   # sp[0] = PC
    1bd0:	41400015 	stw	r5,0(r8)
	   addi r9, r0, 1
    1bd4:	02400044 	movi	r9,1
	   stw  r9, 96(r8)  # sp[24] = status = 1
    1bd8:	42401815 	stw	r9,96(r8)
	   # store sp on the stack bottom
	   stw  r8, 0(r2)
    1bdc:	12000015 	stw	r8,0(r2)
	   # return pointer to stack address
	   ret
    1be0:	f800283a 	ret

00001be4 <_transfer>:
 * (eret instruction retores estatus into status register, while jumping at ea)
 */
.global _transfer
.text
_transfer:
	addi sp, sp, -100
    1be4:	deffe704 	addi	sp,sp,-100
	stw ra,  0(sp)
    1be8:	dfc00015 	stw	ra,0(sp)
    stw fp,  4(sp)
    1bec:	df000115 	stw	fp,4(sp)
    stw r2,  8(sp)
    1bf0:	d8800215 	stw	r2,8(sp)
    stw r3,  12(sp)
    1bf4:	d8c00315 	stw	r3,12(sp)
    stw r4,  16(sp)
    1bf8:	d9000415 	stw	r4,16(sp)
    stw r5,  20(sp)
    1bfc:	d9400515 	stw	r5,20(sp)
    stw r6,  24(sp)
    1c00:	d9800615 	stw	r6,24(sp)
    stw r7,  28(sp)
    1c04:	d9c00715 	stw	r7,28(sp)
    stw r8,  32(sp)
    1c08:	da000815 	stw	r8,32(sp)
    stw r9,  36(sp)
    1c0c:	da400915 	stw	r9,36(sp)
    stw r10, 40(sp)
    1c10:	da800a15 	stw	r10,40(sp)
    stw r11, 44(sp)
    1c14:	dac00b15 	stw	r11,44(sp)
    stw r12, 48(sp)
    1c18:	db000c15 	stw	r12,48(sp)
    stw r13, 52(sp)
    1c1c:	db400d15 	stw	r13,52(sp)
    stw r14, 56(sp)
    1c20:	db800e15 	stw	r14,56(sp)
    stw r15, 60(sp)
    1c24:	dbc00f15 	stw	r15,60(sp)
    stw r16, 64(sp)
    1c28:	dc001015 	stw	r16,64(sp)
    stw r17, 68(sp)
    1c2c:	dc401115 	stw	r17,68(sp)
    stw r18, 72(sp)
    1c30:	dc801215 	stw	r18,72(sp)
    stw r19, 76(sp)
    1c34:	dcc01315 	stw	r19,76(sp)
    stw r20, 80(sp)
    1c38:	dd001415 	stw	r20,80(sp)
    stw r21, 84(sp)
    1c3c:	dd401515 	stw	r21,84(sp)
    stw r22, 88(sp)
    1c40:	dd801615 	stw	r22,88(sp)
    stw r23, 92(sp)
    1c44:	ddc01715 	stw	r23,92(sp)
	# save the current interrupt switch status
    rdctl r2, status
    1c48:	0005303a 	rdctl	r2,status
    stw   r2, 96(sp)
    1c4c:	d8801815 	stw	r2,96(sp)
    # running->sp = sp
    ldw r2, %gprel(running)(gp)
    1c50:	d0a6bf17 	ldw	r2,-25860(gp)
    stw sp, (r2)
    1c54:	16c00015 	stw	sp,0(r2)
    # running = nextP
	ldw r2, %gprel(nextP)(gp)
    1c58:	d0a6c017 	ldw	r2,-25856(gp)
	stw r2, %gprel(running)(gp)
    1c5c:	d0a6bf15 	stw	r2,-25860(gp)
	# set sp to the sp from the nextP
	ldw sp, (r2)
    1c60:	16c00017 	ldw	sp,0(r2)
	# return using bret -> ba
	ldw ba,  0(sp)
    1c64:	df800017 	ldw	r30,0(sp)
    ldw fp,  4(sp)
    1c68:	df000117 	ldw	fp,4(sp)
    ldw r2,  8(sp)
    1c6c:	d8800217 	ldw	r2,8(sp)
    ldw r3,  12(sp)
    1c70:	d8c00317 	ldw	r3,12(sp)
    ldw r4,  16(sp)
    1c74:	d9000417 	ldw	r4,16(sp)
    ldw r5,  20(sp)
    1c78:	d9400517 	ldw	r5,20(sp)
    ldw r6,  24(sp)
    1c7c:	d9800617 	ldw	r6,24(sp)
    ldw r7,  28(sp)
    1c80:	d9c00717 	ldw	r7,28(sp)
    ldw r8,  32(sp)
    1c84:	da000817 	ldw	r8,32(sp)
    ldw r9,  36(sp)
    1c88:	da400917 	ldw	r9,36(sp)
    ldw r10, 40(sp)
    1c8c:	da800a17 	ldw	r10,40(sp)
    ldw r11, 44(sp)
    1c90:	dac00b17 	ldw	r11,44(sp)
    ldw r12, 48(sp)
    1c94:	db000c17 	ldw	r12,48(sp)
    ldw r13, 52(sp)
    1c98:	db400d17 	ldw	r13,52(sp)
    ldw r14, 56(sp)
    1c9c:	db800e17 	ldw	r14,56(sp)
    ldw r15, 60(sp)
    1ca0:	dbc00f17 	ldw	r15,60(sp)
    ldw r16, 64(sp)
    1ca4:	dc001017 	ldw	r16,64(sp)
    ldw r17, 68(sp)
    1ca8:	dc401117 	ldw	r17,68(sp)
    ldw r18, 72(sp)
    1cac:	dc801217 	ldw	r18,72(sp)
    ldw r19, 76(sp)
    1cb0:	dcc01317 	ldw	r19,76(sp)
    ldw r20, 80(sp)
    1cb4:	dd001417 	ldw	r20,80(sp)
    ldw r21, 84(sp)
    1cb8:	dd401517 	ldw	r21,84(sp)
    ldw r22, 88(sp)
    1cbc:	dd801617 	ldw	r22,88(sp)
	# restore interrupt switch status into bstatus
    ldw r23, 96(sp)
    1cc0:	ddc01817 	ldw	r23,96(sp)
    wrctl bstatus, r23
    1cc4:	b80170ba 	wrctl	bstatus,r23
    ldw r23, 92(sp)
    1cc8:	ddc01717 	ldw	r23,92(sp)

	addi sp, sp, 100
    1ccc:	dec01904 	addi	sp,sp,100
	# bret will copy back bstatus into status and go to ba
	bret
    1cd0:	f000483a 	bret

00001cd4 <maskInterrupts>:


.global maskInterrupts
.text
maskInterrupts:
	addi r9, r0, 0
    1cd4:	02400004 	movi	r9,0
	wrctl status, r9
    1cd8:	4801703a 	wrctl	status,r9
	ret
    1cdc:	f800283a 	ret

00001ce0 <allowInterrupts>:

.global allowInterrupts
.text
allowInterrupts:
	addi r9, r0, 1
    1ce0:	02400044 	movi	r9,1
	wrctl status, r9
    1ce4:	4801703a 	wrctl	status,r9
	ret
    1ce8:	f800283a 	ret

00001cec <udivmodsi4>:
    1cec:	29001b2e 	bgeu	r5,r4,1d5c <udivmodsi4+0x70>
    1cf0:	28001a16 	blt	r5,zero,1d5c <udivmodsi4+0x70>
    1cf4:	00800044 	movi	r2,1
    1cf8:	0007883a 	mov	r3,zero
    1cfc:	01c007c4 	movi	r7,31
    1d00:	00000306 	br	1d10 <udivmodsi4+0x24>
    1d04:	19c01326 	beq	r3,r7,1d54 <udivmodsi4+0x68>
    1d08:	18c00044 	addi	r3,r3,1
    1d0c:	28000416 	blt	r5,zero,1d20 <udivmodsi4+0x34>
    1d10:	294b883a 	add	r5,r5,r5
    1d14:	1085883a 	add	r2,r2,r2
    1d18:	293ffa36 	bltu	r5,r4,1d04 <udivmodsi4+0x18>
    1d1c:	10000d26 	beq	r2,zero,1d54 <udivmodsi4+0x68>
    1d20:	0007883a 	mov	r3,zero
    1d24:	21400236 	bltu	r4,r5,1d30 <udivmodsi4+0x44>
    1d28:	2149c83a 	sub	r4,r4,r5
    1d2c:	1886b03a 	or	r3,r3,r2
    1d30:	1004d07a 	srli	r2,r2,1
    1d34:	280ad07a 	srli	r5,r5,1
    1d38:	103ffa1e 	bne	r2,zero,1d24 <udivmodsi4+0x38>
    1d3c:	30000226 	beq	r6,zero,1d48 <udivmodsi4+0x5c>
    1d40:	2005883a 	mov	r2,r4
    1d44:	f800283a 	ret
    1d48:	1809883a 	mov	r4,r3
    1d4c:	2005883a 	mov	r2,r4
    1d50:	f800283a 	ret
    1d54:	0007883a 	mov	r3,zero
    1d58:	003ff806 	br	1d3c <udivmodsi4+0x50>
    1d5c:	00800044 	movi	r2,1
    1d60:	0007883a 	mov	r3,zero
    1d64:	003fef06 	br	1d24 <udivmodsi4+0x38>

00001d68 <__divsi3>:
    1d68:	defffe04 	addi	sp,sp,-8
    1d6c:	dc000015 	stw	r16,0(sp)
    1d70:	dfc00115 	stw	ra,4(sp)
    1d74:	0021883a 	mov	r16,zero
    1d78:	20000c16 	blt	r4,zero,1dac <__divsi3+0x44>
    1d7c:	000d883a 	mov	r6,zero
    1d80:	28000e16 	blt	r5,zero,1dbc <__divsi3+0x54>
    1d84:	0001cec0 	call	1cec <udivmodsi4>
    1d88:	1007883a 	mov	r3,r2
    1d8c:	8005003a 	cmpeq	r2,r16,zero
    1d90:	1000011e 	bne	r2,zero,1d98 <__divsi3+0x30>
    1d94:	00c7c83a 	sub	r3,zero,r3
    1d98:	1805883a 	mov	r2,r3
    1d9c:	dfc00117 	ldw	ra,4(sp)
    1da0:	dc000017 	ldw	r16,0(sp)
    1da4:	dec00204 	addi	sp,sp,8
    1da8:	f800283a 	ret
    1dac:	0109c83a 	sub	r4,zero,r4
    1db0:	04000044 	movi	r16,1
    1db4:	000d883a 	mov	r6,zero
    1db8:	283ff20e 	bge	r5,zero,1d84 <__divsi3+0x1c>
    1dbc:	014bc83a 	sub	r5,zero,r5
    1dc0:	8021003a 	cmpeq	r16,r16,zero
    1dc4:	003fef06 	br	1d84 <__divsi3+0x1c>

00001dc8 <__modsi3>:
    1dc8:	deffff04 	addi	sp,sp,-4
    1dcc:	dfc00015 	stw	ra,0(sp)
    1dd0:	01800044 	movi	r6,1
    1dd4:	2807883a 	mov	r3,r5
    1dd8:	20000416 	blt	r4,zero,1dec <__modsi3+0x24>
    1ddc:	28000c16 	blt	r5,zero,1e10 <__modsi3+0x48>
    1de0:	dfc00017 	ldw	ra,0(sp)
    1de4:	dec00104 	addi	sp,sp,4
    1de8:	0001cec1 	jmpi	1cec <udivmodsi4>
    1dec:	0109c83a 	sub	r4,zero,r4
    1df0:	28000b16 	blt	r5,zero,1e20 <__modsi3+0x58>
    1df4:	180b883a 	mov	r5,r3
    1df8:	01800044 	movi	r6,1
    1dfc:	0001cec0 	call	1cec <udivmodsi4>
    1e00:	0085c83a 	sub	r2,zero,r2
    1e04:	dfc00017 	ldw	ra,0(sp)
    1e08:	dec00104 	addi	sp,sp,4
    1e0c:	f800283a 	ret
    1e10:	014bc83a 	sub	r5,zero,r5
    1e14:	dfc00017 	ldw	ra,0(sp)
    1e18:	dec00104 	addi	sp,sp,4
    1e1c:	0001cec1 	jmpi	1cec <udivmodsi4>
    1e20:	0147c83a 	sub	r3,zero,r5
    1e24:	003ff306 	br	1df4 <__modsi3+0x2c>

00001e28 <__udivsi3>:
    1e28:	000d883a 	mov	r6,zero
    1e2c:	0001cec1 	jmpi	1cec <udivmodsi4>

00001e30 <__umodsi3>:
    1e30:	01800044 	movi	r6,1
    1e34:	0001cec1 	jmpi	1cec <udivmodsi4>

00001e38 <exit>:
    1e38:	defffe04 	addi	sp,sp,-8
    1e3c:	000b883a 	mov	r5,zero
    1e40:	dc000015 	stw	r16,0(sp)
    1e44:	dfc00115 	stw	ra,4(sp)
    1e48:	2021883a 	mov	r16,r4
    1e4c:	00048500 	call	4850 <__call_exitprocs>
    1e50:	00800074 	movhi	r2,1
    1e54:	10804d04 	addi	r2,r2,308
    1e58:	11000017 	ldw	r4,0(r2)
    1e5c:	20800f17 	ldw	r2,60(r4)
    1e60:	10000126 	beq	r2,zero,1e68 <exit+0x30>
    1e64:	103ee83a 	callr	r2
    1e68:	8009883a 	mov	r4,r16
    1e6c:	000b80c0 	call	b80c <_exit>

00001e70 <free>:
    1e70:	00800074 	movhi	r2,1
    1e74:	10804c04 	addi	r2,r2,304
    1e78:	200b883a 	mov	r5,r4
    1e7c:	11000017 	ldw	r4,0(r2)
    1e80:	00067e81 	jmpi	67e8 <_free_r>

00001e84 <malloc>:
    1e84:	00800074 	movhi	r2,1
    1e88:	10804c04 	addi	r2,r2,304
    1e8c:	200b883a 	mov	r5,r4
    1e90:	11000017 	ldw	r4,0(r2)
    1e94:	0001e981 	jmpi	1e98 <_malloc_r>

00001e98 <_malloc_r>:
    1e98:	defff604 	addi	sp,sp,-40
    1e9c:	28c002c4 	addi	r3,r5,11
    1ea0:	00800584 	movi	r2,22
    1ea4:	dc800215 	stw	r18,8(sp)
    1ea8:	dfc00915 	stw	ra,36(sp)
    1eac:	df000815 	stw	fp,32(sp)
    1eb0:	ddc00715 	stw	r23,28(sp)
    1eb4:	dd800615 	stw	r22,24(sp)
    1eb8:	dd400515 	stw	r21,20(sp)
    1ebc:	dd000415 	stw	r20,16(sp)
    1ec0:	dcc00315 	stw	r19,12(sp)
    1ec4:	dc400115 	stw	r17,4(sp)
    1ec8:	dc000015 	stw	r16,0(sp)
    1ecc:	2025883a 	mov	r18,r4
    1ed0:	10c01236 	bltu	r2,r3,1f1c <_malloc_r+0x84>
    1ed4:	04400404 	movi	r17,16
    1ed8:	8940142e 	bgeu	r17,r5,1f2c <_malloc_r+0x94>
    1edc:	00800304 	movi	r2,12
    1ee0:	0007883a 	mov	r3,zero
    1ee4:	90800015 	stw	r2,0(r18)
    1ee8:	1805883a 	mov	r2,r3
    1eec:	dfc00917 	ldw	ra,36(sp)
    1ef0:	df000817 	ldw	fp,32(sp)
    1ef4:	ddc00717 	ldw	r23,28(sp)
    1ef8:	dd800617 	ldw	r22,24(sp)
    1efc:	dd400517 	ldw	r21,20(sp)
    1f00:	dd000417 	ldw	r20,16(sp)
    1f04:	dcc00317 	ldw	r19,12(sp)
    1f08:	dc800217 	ldw	r18,8(sp)
    1f0c:	dc400117 	ldw	r17,4(sp)
    1f10:	dc000017 	ldw	r16,0(sp)
    1f14:	dec00a04 	addi	sp,sp,40
    1f18:	f800283a 	ret
    1f1c:	00bffe04 	movi	r2,-8
    1f20:	18a2703a 	and	r17,r3,r2
    1f24:	883fed16 	blt	r17,zero,1edc <_malloc_r+0x44>
    1f28:	897fec36 	bltu	r17,r5,1edc <_malloc_r+0x44>
    1f2c:	9009883a 	mov	r4,r18
    1f30:	000bee80 	call	bee8 <__malloc_lock>
    1f34:	00807dc4 	movi	r2,503
    1f38:	14402b2e 	bgeu	r2,r17,1fe8 <_malloc_r+0x150>
    1f3c:	8806d27a 	srli	r3,r17,9
    1f40:	18003f1e 	bne	r3,zero,2040 <_malloc_r+0x1a8>
    1f44:	880cd0fa 	srli	r6,r17,3
    1f48:	300490fa 	slli	r2,r6,3
    1f4c:	02c00074 	movhi	r11,1
    1f50:	5afac404 	addi	r11,r11,-5360
    1f54:	12cb883a 	add	r5,r2,r11
    1f58:	2c000317 	ldw	r16,12(r5)
    1f5c:	580f883a 	mov	r7,r11
    1f60:	2c00041e 	bne	r5,r16,1f74 <_malloc_r+0xdc>
    1f64:	00000a06 	br	1f90 <_malloc_r+0xf8>
    1f68:	1800860e 	bge	r3,zero,2184 <_malloc_r+0x2ec>
    1f6c:	84000317 	ldw	r16,12(r16)
    1f70:	2c000726 	beq	r5,r16,1f90 <_malloc_r+0xf8>
    1f74:	80800117 	ldw	r2,4(r16)
    1f78:	00ffff04 	movi	r3,-4
    1f7c:	10c8703a 	and	r4,r2,r3
    1f80:	2447c83a 	sub	r3,r4,r17
    1f84:	008003c4 	movi	r2,15
    1f88:	10fff70e 	bge	r2,r3,1f68 <_malloc_r+0xd0>
    1f8c:	31bfffc4 	addi	r6,r6,-1
    1f90:	32400044 	addi	r9,r6,1
    1f94:	02800074 	movhi	r10,1
    1f98:	52bac604 	addi	r10,r10,-5352
    1f9c:	54000217 	ldw	r16,8(r10)
    1fa0:	8280a026 	beq	r16,r10,2224 <_malloc_r+0x38c>
    1fa4:	80800117 	ldw	r2,4(r16)
    1fa8:	00ffff04 	movi	r3,-4
    1fac:	10ca703a 	and	r5,r2,r3
    1fb0:	2c4dc83a 	sub	r6,r5,r17
    1fb4:	008003c4 	movi	r2,15
    1fb8:	11808316 	blt	r2,r6,21c8 <_malloc_r+0x330>
    1fbc:	52800315 	stw	r10,12(r10)
    1fc0:	52800215 	stw	r10,8(r10)
    1fc4:	30002916 	blt	r6,zero,206c <_malloc_r+0x1d4>
    1fc8:	8147883a 	add	r3,r16,r5
    1fcc:	18800117 	ldw	r2,4(r3)
    1fd0:	9009883a 	mov	r4,r18
    1fd4:	10800054 	ori	r2,r2,1
    1fd8:	18800115 	stw	r2,4(r3)
    1fdc:	000bf080 	call	bf08 <__malloc_unlock>
    1fe0:	80c00204 	addi	r3,r16,8
    1fe4:	003fc006 	br	1ee8 <_malloc_r+0x50>
    1fe8:	02c00074 	movhi	r11,1
    1fec:	5afac404 	addi	r11,r11,-5360
    1ff0:	8ac5883a 	add	r2,r17,r11
    1ff4:	14000317 	ldw	r16,12(r2)
    1ff8:	580f883a 	mov	r7,r11
    1ffc:	8806d0fa 	srli	r3,r17,3
    2000:	14006c26 	beq	r2,r16,21b4 <_malloc_r+0x31c>
    2004:	80c00117 	ldw	r3,4(r16)
    2008:	00bfff04 	movi	r2,-4
    200c:	81800317 	ldw	r6,12(r16)
    2010:	1886703a 	and	r3,r3,r2
    2014:	80c7883a 	add	r3,r16,r3
    2018:	18800117 	ldw	r2,4(r3)
    201c:	81400217 	ldw	r5,8(r16)
    2020:	9009883a 	mov	r4,r18
    2024:	10800054 	ori	r2,r2,1
    2028:	18800115 	stw	r2,4(r3)
    202c:	31400215 	stw	r5,8(r6)
    2030:	29800315 	stw	r6,12(r5)
    2034:	000bf080 	call	bf08 <__malloc_unlock>
    2038:	80c00204 	addi	r3,r16,8
    203c:	003faa06 	br	1ee8 <_malloc_r+0x50>
    2040:	00800104 	movi	r2,4
    2044:	10c0052e 	bgeu	r2,r3,205c <_malloc_r+0x1c4>
    2048:	00800504 	movi	r2,20
    204c:	10c07836 	bltu	r2,r3,2230 <_malloc_r+0x398>
    2050:	198016c4 	addi	r6,r3,91
    2054:	300490fa 	slli	r2,r6,3
    2058:	003fbc06 	br	1f4c <_malloc_r+0xb4>
    205c:	8804d1ba 	srli	r2,r17,6
    2060:	11800e04 	addi	r6,r2,56
    2064:	300490fa 	slli	r2,r6,3
    2068:	003fb806 	br	1f4c <_malloc_r+0xb4>
    206c:	00807fc4 	movi	r2,511
    2070:	1140bb36 	bltu	r2,r5,2360 <_malloc_r+0x4c8>
    2074:	2806d0fa 	srli	r3,r5,3
    2078:	573ffe04 	addi	fp,r10,-8
    207c:	00800044 	movi	r2,1
    2080:	180890fa 	slli	r4,r3,3
    2084:	1807d0ba 	srai	r3,r3,2
    2088:	e1c00117 	ldw	r7,4(fp)
    208c:	5909883a 	add	r4,r11,r4
    2090:	21400217 	ldw	r5,8(r4)
    2094:	10c4983a 	sll	r2,r2,r3
    2098:	81000315 	stw	r4,12(r16)
    209c:	81400215 	stw	r5,8(r16)
    20a0:	388eb03a 	or	r7,r7,r2
    20a4:	2c000315 	stw	r16,12(r5)
    20a8:	24000215 	stw	r16,8(r4)
    20ac:	e1c00115 	stw	r7,4(fp)
    20b0:	4807883a 	mov	r3,r9
    20b4:	4800cd16 	blt	r9,zero,23ec <_malloc_r+0x554>
    20b8:	1807d0ba 	srai	r3,r3,2
    20bc:	00800044 	movi	r2,1
    20c0:	10c8983a 	sll	r4,r2,r3
    20c4:	39004436 	bltu	r7,r4,21d8 <_malloc_r+0x340>
    20c8:	21c4703a 	and	r2,r4,r7
    20cc:	10000a1e 	bne	r2,zero,20f8 <_malloc_r+0x260>
    20d0:	2109883a 	add	r4,r4,r4
    20d4:	00bfff04 	movi	r2,-4
    20d8:	4884703a 	and	r2,r9,r2
    20dc:	3906703a 	and	r3,r7,r4
    20e0:	12400104 	addi	r9,r2,4
    20e4:	1800041e 	bne	r3,zero,20f8 <_malloc_r+0x260>
    20e8:	2109883a 	add	r4,r4,r4
    20ec:	3904703a 	and	r2,r7,r4
    20f0:	4a400104 	addi	r9,r9,4
    20f4:	103ffc26 	beq	r2,zero,20e8 <_malloc_r+0x250>
    20f8:	480490fa 	slli	r2,r9,3
    20fc:	4819883a 	mov	r12,r9
    2100:	023fff04 	movi	r8,-4
    2104:	589b883a 	add	r13,r11,r2
    2108:	6807883a 	mov	r3,r13
    210c:	014003c4 	movi	r5,15
    2110:	1c000317 	ldw	r16,12(r3)
    2114:	1c00041e 	bne	r3,r16,2128 <_malloc_r+0x290>
    2118:	0000a706 	br	23b8 <_malloc_r+0x520>
    211c:	3000ab0e 	bge	r6,zero,23cc <_malloc_r+0x534>
    2120:	84000317 	ldw	r16,12(r16)
    2124:	1c00a426 	beq	r3,r16,23b8 <_malloc_r+0x520>
    2128:	80800117 	ldw	r2,4(r16)
    212c:	1204703a 	and	r2,r2,r8
    2130:	144dc83a 	sub	r6,r2,r17
    2134:	29bff90e 	bge	r5,r6,211c <_malloc_r+0x284>
    2138:	81000317 	ldw	r4,12(r16)
    213c:	80c00217 	ldw	r3,8(r16)
    2140:	89400054 	ori	r5,r17,1
    2144:	8445883a 	add	r2,r16,r17
    2148:	20c00215 	stw	r3,8(r4)
    214c:	19000315 	stw	r4,12(r3)
    2150:	81400115 	stw	r5,4(r16)
    2154:	1187883a 	add	r3,r2,r6
    2158:	31000054 	ori	r4,r6,1
    215c:	50800315 	stw	r2,12(r10)
    2160:	50800215 	stw	r2,8(r10)
    2164:	19800015 	stw	r6,0(r3)
    2168:	11000115 	stw	r4,4(r2)
    216c:	12800215 	stw	r10,8(r2)
    2170:	12800315 	stw	r10,12(r2)
    2174:	9009883a 	mov	r4,r18
    2178:	000bf080 	call	bf08 <__malloc_unlock>
    217c:	80c00204 	addi	r3,r16,8
    2180:	003f5906 	br	1ee8 <_malloc_r+0x50>
    2184:	8109883a 	add	r4,r16,r4
    2188:	20800117 	ldw	r2,4(r4)
    218c:	80c00217 	ldw	r3,8(r16)
    2190:	81400317 	ldw	r5,12(r16)
    2194:	10800054 	ori	r2,r2,1
    2198:	20800115 	stw	r2,4(r4)
    219c:	28c00215 	stw	r3,8(r5)
    21a0:	19400315 	stw	r5,12(r3)
    21a4:	9009883a 	mov	r4,r18
    21a8:	000bf080 	call	bf08 <__malloc_unlock>
    21ac:	80c00204 	addi	r3,r16,8
    21b0:	003f4d06 	br	1ee8 <_malloc_r+0x50>
    21b4:	80800204 	addi	r2,r16,8
    21b8:	14000317 	ldw	r16,12(r2)
    21bc:	143f911e 	bne	r2,r16,2004 <_malloc_r+0x16c>
    21c0:	1a400084 	addi	r9,r3,2
    21c4:	003f7306 	br	1f94 <_malloc_r+0xfc>
    21c8:	88c00054 	ori	r3,r17,1
    21cc:	8445883a 	add	r2,r16,r17
    21d0:	80c00115 	stw	r3,4(r16)
    21d4:	003fdf06 	br	2154 <_malloc_r+0x2bc>
    21d8:	e4000217 	ldw	r16,8(fp)
    21dc:	00bfff04 	movi	r2,-4
    21e0:	80c00117 	ldw	r3,4(r16)
    21e4:	802d883a 	mov	r22,r16
    21e8:	18aa703a 	and	r21,r3,r2
    21ec:	ac401636 	bltu	r21,r17,2248 <_malloc_r+0x3b0>
    21f0:	ac49c83a 	sub	r4,r21,r17
    21f4:	008003c4 	movi	r2,15
    21f8:	1100130e 	bge	r2,r4,2248 <_malloc_r+0x3b0>
    21fc:	88800054 	ori	r2,r17,1
    2200:	8447883a 	add	r3,r16,r17
    2204:	80800115 	stw	r2,4(r16)
    2208:	20800054 	ori	r2,r4,1
    220c:	18800115 	stw	r2,4(r3)
    2210:	e0c00215 	stw	r3,8(fp)
    2214:	9009883a 	mov	r4,r18
    2218:	000bf080 	call	bf08 <__malloc_unlock>
    221c:	80c00204 	addi	r3,r16,8
    2220:	003f3106 	br	1ee8 <_malloc_r+0x50>
    2224:	39c00117 	ldw	r7,4(r7)
    2228:	573ffe04 	addi	fp,r10,-8
    222c:	003fa006 	br	20b0 <_malloc_r+0x218>
    2230:	00801504 	movi	r2,84
    2234:	10c06736 	bltu	r2,r3,23d4 <_malloc_r+0x53c>
    2238:	8804d33a 	srli	r2,r17,12
    223c:	11801b84 	addi	r6,r2,110
    2240:	300490fa 	slli	r2,r6,3
    2244:	003f4106 	br	1f4c <_malloc_r+0xb4>
    2248:	d0a6c117 	ldw	r2,-25852(gp)
    224c:	d0e00417 	ldw	r3,-32752(gp)
    2250:	053fffc4 	movi	r20,-1
    2254:	10800404 	addi	r2,r2,16
    2258:	88a7883a 	add	r19,r17,r2
    225c:	1d000326 	beq	r3,r20,226c <_malloc_r+0x3d4>
    2260:	98c3ffc4 	addi	r3,r19,4095
    2264:	00bc0004 	movi	r2,-4096
    2268:	18a6703a 	and	r19,r3,r2
    226c:	9009883a 	mov	r4,r18
    2270:	980b883a 	mov	r5,r19
    2274:	00027040 	call	2704 <_sbrk_r>
    2278:	1009883a 	mov	r4,r2
    227c:	15000426 	beq	r2,r20,2290 <_malloc_r+0x3f8>
    2280:	854b883a 	add	r5,r16,r21
    2284:	1029883a 	mov	r20,r2
    2288:	11405a2e 	bgeu	r2,r5,23f4 <_malloc_r+0x55c>
    228c:	87000c26 	beq	r16,fp,22c0 <_malloc_r+0x428>
    2290:	e4000217 	ldw	r16,8(fp)
    2294:	80c00117 	ldw	r3,4(r16)
    2298:	00bfff04 	movi	r2,-4
    229c:	1884703a 	and	r2,r3,r2
    22a0:	14400336 	bltu	r2,r17,22b0 <_malloc_r+0x418>
    22a4:	1449c83a 	sub	r4,r2,r17
    22a8:	008003c4 	movi	r2,15
    22ac:	113fd316 	blt	r2,r4,21fc <_malloc_r+0x364>
    22b0:	9009883a 	mov	r4,r18
    22b4:	000bf080 	call	bf08 <__malloc_unlock>
    22b8:	0007883a 	mov	r3,zero
    22bc:	003f0a06 	br	1ee8 <_malloc_r+0x50>
    22c0:	05c00074 	movhi	r23,1
    22c4:	bdc71904 	addi	r23,r23,7268
    22c8:	b8800017 	ldw	r2,0(r23)
    22cc:	988d883a 	add	r6,r19,r2
    22d0:	b9800015 	stw	r6,0(r23)
    22d4:	d0e00417 	ldw	r3,-32752(gp)
    22d8:	00bfffc4 	movi	r2,-1
    22dc:	18808e26 	beq	r3,r2,2518 <_malloc_r+0x680>
    22e0:	2145c83a 	sub	r2,r4,r5
    22e4:	3085883a 	add	r2,r6,r2
    22e8:	b8800015 	stw	r2,0(r23)
    22ec:	20c001cc 	andi	r3,r4,7
    22f0:	18005f1e 	bne	r3,zero,2470 <_malloc_r+0x5d8>
    22f4:	000b883a 	mov	r5,zero
    22f8:	a4c5883a 	add	r2,r20,r19
    22fc:	1083ffcc 	andi	r2,r2,4095
    2300:	00c40004 	movi	r3,4096
    2304:	1887c83a 	sub	r3,r3,r2
    2308:	28e7883a 	add	r19,r5,r3
    230c:	9009883a 	mov	r4,r18
    2310:	980b883a 	mov	r5,r19
    2314:	00027040 	call	2704 <_sbrk_r>
    2318:	1007883a 	mov	r3,r2
    231c:	00bfffc4 	movi	r2,-1
    2320:	18807a26 	beq	r3,r2,250c <_malloc_r+0x674>
    2324:	1d05c83a 	sub	r2,r3,r20
    2328:	9885883a 	add	r2,r19,r2
    232c:	10c00054 	ori	r3,r2,1
    2330:	b8800017 	ldw	r2,0(r23)
    2334:	a021883a 	mov	r16,r20
    2338:	a0c00115 	stw	r3,4(r20)
    233c:	9885883a 	add	r2,r19,r2
    2340:	b8800015 	stw	r2,0(r23)
    2344:	e5000215 	stw	r20,8(fp)
    2348:	b7003626 	beq	r22,fp,2424 <_malloc_r+0x58c>
    234c:	018003c4 	movi	r6,15
    2350:	35404b36 	bltu	r6,r21,2480 <_malloc_r+0x5e8>
    2354:	00800044 	movi	r2,1
    2358:	a0800115 	stw	r2,4(r20)
    235c:	003fcd06 	br	2294 <_malloc_r+0x3fc>
    2360:	2808d27a 	srli	r4,r5,9
    2364:	2000371e 	bne	r4,zero,2444 <_malloc_r+0x5ac>
    2368:	2808d0fa 	srli	r4,r5,3
    236c:	200690fa 	slli	r3,r4,3
    2370:	1ad1883a 	add	r8,r3,r11
    2374:	41800217 	ldw	r6,8(r8)
    2378:	41805b26 	beq	r8,r6,24e8 <_malloc_r+0x650>
    237c:	30800117 	ldw	r2,4(r6)
    2380:	00ffff04 	movi	r3,-4
    2384:	10c4703a 	and	r2,r2,r3
    2388:	2880022e 	bgeu	r5,r2,2394 <_malloc_r+0x4fc>
    238c:	31800217 	ldw	r6,8(r6)
    2390:	41bffa1e 	bne	r8,r6,237c <_malloc_r+0x4e4>
    2394:	32000317 	ldw	r8,12(r6)
    2398:	39c00117 	ldw	r7,4(r7)
    239c:	82000315 	stw	r8,12(r16)
    23a0:	81800215 	stw	r6,8(r16)
    23a4:	07000074 	movhi	fp,1
    23a8:	e73ac404 	addi	fp,fp,-5360
    23ac:	34000315 	stw	r16,12(r6)
    23b0:	44000215 	stw	r16,8(r8)
    23b4:	003f3e06 	br	20b0 <_malloc_r+0x218>
    23b8:	63000044 	addi	r12,r12,1
    23bc:	608000cc 	andi	r2,r12,3
    23c0:	10005d26 	beq	r2,zero,2538 <_malloc_r+0x6a0>
    23c4:	18c00204 	addi	r3,r3,8
    23c8:	003f5106 	br	2110 <_malloc_r+0x278>
    23cc:	8089883a 	add	r4,r16,r2
    23d0:	003f6d06 	br	2188 <_malloc_r+0x2f0>
    23d4:	00805504 	movi	r2,340
    23d8:	10c02036 	bltu	r2,r3,245c <_malloc_r+0x5c4>
    23dc:	8804d3fa 	srli	r2,r17,15
    23e0:	11801dc4 	addi	r6,r2,119
    23e4:	300490fa 	slli	r2,r6,3
    23e8:	003ed806 	br	1f4c <_malloc_r+0xb4>
    23ec:	48c000c4 	addi	r3,r9,3
    23f0:	003f3106 	br	20b8 <_malloc_r+0x220>
    23f4:	05c00074 	movhi	r23,1
    23f8:	bdc71904 	addi	r23,r23,7268
    23fc:	b8800017 	ldw	r2,0(r23)
    2400:	988d883a 	add	r6,r19,r2
    2404:	b9800015 	stw	r6,0(r23)
    2408:	293fb21e 	bne	r5,r4,22d4 <_malloc_r+0x43c>
    240c:	2083ffcc 	andi	r2,r4,4095
    2410:	103fb01e 	bne	r2,zero,22d4 <_malloc_r+0x43c>
    2414:	e4000217 	ldw	r16,8(fp)
    2418:	9d45883a 	add	r2,r19,r21
    241c:	10800054 	ori	r2,r2,1
    2420:	80800115 	stw	r2,4(r16)
    2424:	b8c00017 	ldw	r3,0(r23)
    2428:	d0a6c217 	ldw	r2,-25848(gp)
    242c:	10c0012e 	bgeu	r2,r3,2434 <_malloc_r+0x59c>
    2430:	d0e6c215 	stw	r3,-25848(gp)
    2434:	d0a6c317 	ldw	r2,-25844(gp)
    2438:	10ff962e 	bgeu	r2,r3,2294 <_malloc_r+0x3fc>
    243c:	d0e6c315 	stw	r3,-25844(gp)
    2440:	003f9406 	br	2294 <_malloc_r+0x3fc>
    2444:	00800104 	movi	r2,4
    2448:	11001e36 	bltu	r2,r4,24c4 <_malloc_r+0x62c>
    244c:	2804d1ba 	srli	r2,r5,6
    2450:	11000e04 	addi	r4,r2,56
    2454:	200690fa 	slli	r3,r4,3
    2458:	003fc506 	br	2370 <_malloc_r+0x4d8>
    245c:	00815504 	movi	r2,1364
    2460:	10c01d2e 	bgeu	r2,r3,24d8 <_malloc_r+0x640>
    2464:	01801f84 	movi	r6,126
    2468:	0080fc04 	movi	r2,1008
    246c:	003eb706 	br	1f4c <_malloc_r+0xb4>
    2470:	00800204 	movi	r2,8
    2474:	10cbc83a 	sub	r5,r2,r3
    2478:	2169883a 	add	r20,r4,r5
    247c:	003f9e06 	br	22f8 <_malloc_r+0x460>
    2480:	00bffe04 	movi	r2,-8
    2484:	a93ffd04 	addi	r4,r21,-12
    2488:	2088703a 	and	r4,r4,r2
    248c:	b10b883a 	add	r5,r22,r4
    2490:	00c00144 	movi	r3,5
    2494:	28c00215 	stw	r3,8(r5)
    2498:	28c00115 	stw	r3,4(r5)
    249c:	b0800117 	ldw	r2,4(r22)
    24a0:	1080004c 	andi	r2,r2,1
    24a4:	2084b03a 	or	r2,r4,r2
    24a8:	b0800115 	stw	r2,4(r22)
    24ac:	313fdd2e 	bgeu	r6,r4,2424 <_malloc_r+0x58c>
    24b0:	b1400204 	addi	r5,r22,8
    24b4:	9009883a 	mov	r4,r18
    24b8:	00067e80 	call	67e8 <_free_r>
    24bc:	e4000217 	ldw	r16,8(fp)
    24c0:	003fd806 	br	2424 <_malloc_r+0x58c>
    24c4:	00800504 	movi	r2,20
    24c8:	11001536 	bltu	r2,r4,2520 <_malloc_r+0x688>
    24cc:	210016c4 	addi	r4,r4,91
    24d0:	200690fa 	slli	r3,r4,3
    24d4:	003fa606 	br	2370 <_malloc_r+0x4d8>
    24d8:	8804d4ba 	srli	r2,r17,18
    24dc:	11801f04 	addi	r6,r2,124
    24e0:	300490fa 	slli	r2,r6,3
    24e4:	003e9906 	br	1f4c <_malloc_r+0xb4>
    24e8:	2009d0ba 	srai	r4,r4,2
    24ec:	01400074 	movhi	r5,1
    24f0:	297ac404 	addi	r5,r5,-5360
    24f4:	00c00044 	movi	r3,1
    24f8:	28800117 	ldw	r2,4(r5)
    24fc:	1906983a 	sll	r3,r3,r4
    2500:	10c4b03a 	or	r2,r2,r3
    2504:	28800115 	stw	r2,4(r5)
    2508:	003fa306 	br	2398 <_malloc_r+0x500>
    250c:	0027883a 	mov	r19,zero
    2510:	00c00044 	movi	r3,1
    2514:	003f8606 	br	2330 <_malloc_r+0x498>
    2518:	d1200415 	stw	r4,-32752(gp)
    251c:	003f7306 	br	22ec <_malloc_r+0x454>
    2520:	00801504 	movi	r2,84
    2524:	11001936 	bltu	r2,r4,258c <_malloc_r+0x6f4>
    2528:	2804d33a 	srli	r2,r5,12
    252c:	11001b84 	addi	r4,r2,110
    2530:	200690fa 	slli	r3,r4,3
    2534:	003f8e06 	br	2370 <_malloc_r+0x4d8>
    2538:	480b883a 	mov	r5,r9
    253c:	6807883a 	mov	r3,r13
    2540:	288000cc 	andi	r2,r5,3
    2544:	18fffe04 	addi	r3,r3,-8
    2548:	297fffc4 	addi	r5,r5,-1
    254c:	10001526 	beq	r2,zero,25a4 <_malloc_r+0x70c>
    2550:	18800217 	ldw	r2,8(r3)
    2554:	10fffa26 	beq	r2,r3,2540 <_malloc_r+0x6a8>
    2558:	2109883a 	add	r4,r4,r4
    255c:	393f1e36 	bltu	r7,r4,21d8 <_malloc_r+0x340>
    2560:	203f1d26 	beq	r4,zero,21d8 <_malloc_r+0x340>
    2564:	21c4703a 	and	r2,r4,r7
    2568:	10000226 	beq	r2,zero,2574 <_malloc_r+0x6dc>
    256c:	6013883a 	mov	r9,r12
    2570:	003ee106 	br	20f8 <_malloc_r+0x260>
    2574:	2109883a 	add	r4,r4,r4
    2578:	3904703a 	and	r2,r7,r4
    257c:	63000104 	addi	r12,r12,4
    2580:	103ffc26 	beq	r2,zero,2574 <_malloc_r+0x6dc>
    2584:	6013883a 	mov	r9,r12
    2588:	003edb06 	br	20f8 <_malloc_r+0x260>
    258c:	00805504 	movi	r2,340
    2590:	11000836 	bltu	r2,r4,25b4 <_malloc_r+0x71c>
    2594:	2804d3fa 	srli	r2,r5,15
    2598:	11001dc4 	addi	r4,r2,119
    259c:	200690fa 	slli	r3,r4,3
    25a0:	003f7306 	br	2370 <_malloc_r+0x4d8>
    25a4:	0104303a 	nor	r2,zero,r4
    25a8:	388e703a 	and	r7,r7,r2
    25ac:	e1c00115 	stw	r7,4(fp)
    25b0:	003fe906 	br	2558 <_malloc_r+0x6c0>
    25b4:	00815504 	movi	r2,1364
    25b8:	1100032e 	bgeu	r2,r4,25c8 <_malloc_r+0x730>
    25bc:	01001f84 	movi	r4,126
    25c0:	00c0fc04 	movi	r3,1008
    25c4:	003f6a06 	br	2370 <_malloc_r+0x4d8>
    25c8:	2804d4ba 	srli	r2,r5,18
    25cc:	11001f04 	addi	r4,r2,124
    25d0:	200690fa 	slli	r3,r4,3
    25d4:	003f6606 	br	2370 <_malloc_r+0x4d8>

000025d8 <printf>:
    25d8:	defffb04 	addi	sp,sp,-20
    25dc:	dfc00115 	stw	ra,4(sp)
    25e0:	d9400215 	stw	r5,8(sp)
    25e4:	d9800315 	stw	r6,12(sp)
    25e8:	d9c00415 	stw	r7,16(sp)
    25ec:	00800074 	movhi	r2,1
    25f0:	10804c04 	addi	r2,r2,304
    25f4:	10c00017 	ldw	r3,0(r2)
    25f8:	200b883a 	mov	r5,r4
    25fc:	d8800204 	addi	r2,sp,8
    2600:	19000217 	ldw	r4,8(r3)
    2604:	100d883a 	mov	r6,r2
    2608:	d8800015 	stw	r2,0(sp)
    260c:	00046ec0 	call	46ec <__vfprintf_internal>
    2610:	dfc00117 	ldw	ra,4(sp)
    2614:	dec00504 	addi	sp,sp,20
    2618:	f800283a 	ret

0000261c <_printf_r>:
    261c:	defffc04 	addi	sp,sp,-16
    2620:	dfc00115 	stw	ra,4(sp)
    2624:	d9800215 	stw	r6,8(sp)
    2628:	d9c00315 	stw	r7,12(sp)
    262c:	280d883a 	mov	r6,r5
    2630:	21400217 	ldw	r5,8(r4)
    2634:	d8c00204 	addi	r3,sp,8
    2638:	180f883a 	mov	r7,r3
    263c:	d8c00015 	stw	r3,0(sp)
    2640:	00028400 	call	2840 <___vfprintf_internal_r>
    2644:	dfc00117 	ldw	ra,4(sp)
    2648:	dec00404 	addi	sp,sp,16
    264c:	f800283a 	ret

00002650 <_puts_r>:
    2650:	defff604 	addi	sp,sp,-40
    2654:	dc400715 	stw	r17,28(sp)
    2658:	2023883a 	mov	r17,r4
    265c:	2809883a 	mov	r4,r5
    2660:	dfc00915 	stw	ra,36(sp)
    2664:	dcc00815 	stw	r19,32(sp)
    2668:	2827883a 	mov	r19,r5
    266c:	00027740 	call	2774 <strlen>
    2670:	89400217 	ldw	r5,8(r17)
    2674:	00c00074 	movhi	r3,1
    2678:	18f8e604 	addi	r3,r3,-7272
    267c:	01c00044 	movi	r7,1
    2680:	12000044 	addi	r8,r2,1
    2684:	d8c00515 	stw	r3,20(sp)
    2688:	d9c00615 	stw	r7,24(sp)
    268c:	d8c00304 	addi	r3,sp,12
    2690:	01c00084 	movi	r7,2
    2694:	8809883a 	mov	r4,r17
    2698:	d80d883a 	mov	r6,sp
    269c:	d8c00015 	stw	r3,0(sp)
    26a0:	dcc00315 	stw	r19,12(sp)
    26a4:	da000215 	stw	r8,8(sp)
    26a8:	d9c00115 	stw	r7,4(sp)
    26ac:	d8800415 	stw	r2,16(sp)
    26b0:	0006afc0 	call	6afc <__sfvwrite_r>
    26b4:	00ffffc4 	movi	r3,-1
    26b8:	10000626 	beq	r2,zero,26d4 <_puts_r+0x84>
    26bc:	1805883a 	mov	r2,r3
    26c0:	dfc00917 	ldw	ra,36(sp)
    26c4:	dcc00817 	ldw	r19,32(sp)
    26c8:	dc400717 	ldw	r17,28(sp)
    26cc:	dec00a04 	addi	sp,sp,40
    26d0:	f800283a 	ret
    26d4:	00c00284 	movi	r3,10
    26d8:	1805883a 	mov	r2,r3
    26dc:	dfc00917 	ldw	ra,36(sp)
    26e0:	dcc00817 	ldw	r19,32(sp)
    26e4:	dc400717 	ldw	r17,28(sp)
    26e8:	dec00a04 	addi	sp,sp,40
    26ec:	f800283a 	ret

000026f0 <puts>:
    26f0:	00800074 	movhi	r2,1
    26f4:	10804c04 	addi	r2,r2,304
    26f8:	200b883a 	mov	r5,r4
    26fc:	11000017 	ldw	r4,0(r2)
    2700:	00026501 	jmpi	2650 <_puts_r>

00002704 <_sbrk_r>:
    2704:	defffd04 	addi	sp,sp,-12
    2708:	dc000015 	stw	r16,0(sp)
    270c:	04000074 	movhi	r16,1
    2710:	84070f04 	addi	r16,r16,7228
    2714:	dc400115 	stw	r17,4(sp)
    2718:	80000015 	stw	zero,0(r16)
    271c:	2023883a 	mov	r17,r4
    2720:	2809883a 	mov	r4,r5
    2724:	dfc00215 	stw	ra,8(sp)
    2728:	000c1080 	call	c108 <sbrk>
    272c:	1007883a 	mov	r3,r2
    2730:	00bfffc4 	movi	r2,-1
    2734:	18800626 	beq	r3,r2,2750 <_sbrk_r+0x4c>
    2738:	1805883a 	mov	r2,r3
    273c:	dfc00217 	ldw	ra,8(sp)
    2740:	dc400117 	ldw	r17,4(sp)
    2744:	dc000017 	ldw	r16,0(sp)
    2748:	dec00304 	addi	sp,sp,12
    274c:	f800283a 	ret
    2750:	80800017 	ldw	r2,0(r16)
    2754:	103ff826 	beq	r2,zero,2738 <_sbrk_r+0x34>
    2758:	88800015 	stw	r2,0(r17)
    275c:	1805883a 	mov	r2,r3
    2760:	dfc00217 	ldw	ra,8(sp)
    2764:	dc400117 	ldw	r17,4(sp)
    2768:	dc000017 	ldw	r16,0(sp)
    276c:	dec00304 	addi	sp,sp,12
    2770:	f800283a 	ret

00002774 <strlen>:
    2774:	208000cc 	andi	r2,r4,3
    2778:	2011883a 	mov	r8,r4
    277c:	1000161e 	bne	r2,zero,27d8 <strlen+0x64>
    2780:	20c00017 	ldw	r3,0(r4)
    2784:	017fbff4 	movhi	r5,65279
    2788:	297fbfc4 	addi	r5,r5,-257
    278c:	01e02074 	movhi	r7,32897
    2790:	39e02004 	addi	r7,r7,-32640
    2794:	1945883a 	add	r2,r3,r5
    2798:	11c4703a 	and	r2,r2,r7
    279c:	00c6303a 	nor	r3,zero,r3
    27a0:	1886703a 	and	r3,r3,r2
    27a4:	18000c1e 	bne	r3,zero,27d8 <strlen+0x64>
    27a8:	280d883a 	mov	r6,r5
    27ac:	380b883a 	mov	r5,r7
    27b0:	21000104 	addi	r4,r4,4
    27b4:	20800017 	ldw	r2,0(r4)
    27b8:	1187883a 	add	r3,r2,r6
    27bc:	1946703a 	and	r3,r3,r5
    27c0:	0084303a 	nor	r2,zero,r2
    27c4:	10c4703a 	and	r2,r2,r3
    27c8:	103ff926 	beq	r2,zero,27b0 <strlen+0x3c>
    27cc:	20800007 	ldb	r2,0(r4)
    27d0:	10000326 	beq	r2,zero,27e0 <strlen+0x6c>
    27d4:	21000044 	addi	r4,r4,1
    27d8:	20800007 	ldb	r2,0(r4)
    27dc:	103ffd1e 	bne	r2,zero,27d4 <strlen+0x60>
    27e0:	2205c83a 	sub	r2,r4,r8
    27e4:	f800283a 	ret

000027e8 <__sprint_r>:
    27e8:	30800217 	ldw	r2,8(r6)
    27ec:	defffe04 	addi	sp,sp,-8
    27f0:	dc000015 	stw	r16,0(sp)
    27f4:	dfc00115 	stw	ra,4(sp)
    27f8:	3021883a 	mov	r16,r6
    27fc:	0007883a 	mov	r3,zero
    2800:	1000061e 	bne	r2,zero,281c <__sprint_r+0x34>
    2804:	1805883a 	mov	r2,r3
    2808:	30000115 	stw	zero,4(r6)
    280c:	dfc00117 	ldw	ra,4(sp)
    2810:	dc000017 	ldw	r16,0(sp)
    2814:	dec00204 	addi	sp,sp,8
    2818:	f800283a 	ret
    281c:	0006afc0 	call	6afc <__sfvwrite_r>
    2820:	1007883a 	mov	r3,r2
    2824:	1805883a 	mov	r2,r3
    2828:	80000115 	stw	zero,4(r16)
    282c:	80000215 	stw	zero,8(r16)
    2830:	dfc00117 	ldw	ra,4(sp)
    2834:	dc000017 	ldw	r16,0(sp)
    2838:	dec00204 	addi	sp,sp,8
    283c:	f800283a 	ret

00002840 <___vfprintf_internal_r>:
    2840:	defea404 	addi	sp,sp,-1392
    2844:	dd815815 	stw	r22,1376(sp)
    2848:	dc015215 	stw	r16,1352(sp)
    284c:	d9c15115 	stw	r7,1348(sp)
    2850:	dfc15b15 	stw	ra,1388(sp)
    2854:	df015a15 	stw	fp,1384(sp)
    2858:	ddc15915 	stw	r23,1380(sp)
    285c:	dd415715 	stw	r21,1372(sp)
    2860:	dd015615 	stw	r20,1368(sp)
    2864:	dcc15515 	stw	r19,1364(sp)
    2868:	dc815415 	stw	r18,1360(sp)
    286c:	dc415315 	stw	r17,1356(sp)
    2870:	282d883a 	mov	r22,r5
    2874:	3021883a 	mov	r16,r6
    2878:	d9014f15 	stw	r4,1340(sp)
    287c:	00071200 	call	7120 <_localeconv_r>
    2880:	10800017 	ldw	r2,0(r2)
    2884:	d9c15117 	ldw	r7,1348(sp)
    2888:	d8814915 	stw	r2,1316(sp)
    288c:	d8814f17 	ldw	r2,1340(sp)
    2890:	10000226 	beq	r2,zero,289c <___vfprintf_internal_r+0x5c>
    2894:	10800e17 	ldw	r2,56(r2)
    2898:	10020d26 	beq	r2,zero,30d0 <___vfprintf_internal_r+0x890>
    289c:	b080030b 	ldhu	r2,12(r22)
    28a0:	1080020c 	andi	r2,r2,8
    28a4:	10020e26 	beq	r2,zero,30e0 <___vfprintf_internal_r+0x8a0>
    28a8:	b0800417 	ldw	r2,16(r22)
    28ac:	10020c26 	beq	r2,zero,30e0 <___vfprintf_internal_r+0x8a0>
    28b0:	b200030b 	ldhu	r8,12(r22)
    28b4:	00800284 	movi	r2,10
    28b8:	40c0068c 	andi	r3,r8,26
    28bc:	18802f1e 	bne	r3,r2,297c <___vfprintf_internal_r+0x13c>
    28c0:	b080038f 	ldh	r2,14(r22)
    28c4:	10002d16 	blt	r2,zero,297c <___vfprintf_internal_r+0x13c>
    28c8:	b240038b 	ldhu	r9,14(r22)
    28cc:	b2800717 	ldw	r10,28(r22)
    28d0:	b2c00917 	ldw	r11,36(r22)
    28d4:	d9014f17 	ldw	r4,1340(sp)
    28d8:	dc402904 	addi	r17,sp,164
    28dc:	d8804004 	addi	r2,sp,256
    28e0:	00c10004 	movi	r3,1024
    28e4:	423fff4c 	andi	r8,r8,65533
    28e8:	800d883a 	mov	r6,r16
    28ec:	880b883a 	mov	r5,r17
    28f0:	da002c0d 	sth	r8,176(sp)
    28f4:	da402c8d 	sth	r9,178(sp)
    28f8:	da803015 	stw	r10,192(sp)
    28fc:	dac03215 	stw	r11,200(sp)
    2900:	d8802d15 	stw	r2,180(sp)
    2904:	d8c02e15 	stw	r3,184(sp)
    2908:	d8802915 	stw	r2,164(sp)
    290c:	d8c02b15 	stw	r3,172(sp)
    2910:	d8002f15 	stw	zero,188(sp)
    2914:	00028400 	call	2840 <___vfprintf_internal_r>
    2918:	d8814b15 	stw	r2,1324(sp)
    291c:	10000416 	blt	r2,zero,2930 <___vfprintf_internal_r+0xf0>
    2920:	d9014f17 	ldw	r4,1340(sp)
    2924:	880b883a 	mov	r5,r17
    2928:	00061cc0 	call	61cc <_fflush_r>
    292c:	1002321e 	bne	r2,zero,31f8 <___vfprintf_internal_r+0x9b8>
    2930:	d8802c0b 	ldhu	r2,176(sp)
    2934:	1080100c 	andi	r2,r2,64
    2938:	10000326 	beq	r2,zero,2948 <___vfprintf_internal_r+0x108>
    293c:	b080030b 	ldhu	r2,12(r22)
    2940:	10801014 	ori	r2,r2,64
    2944:	b080030d 	sth	r2,12(r22)
    2948:	d8814b17 	ldw	r2,1324(sp)
    294c:	dfc15b17 	ldw	ra,1388(sp)
    2950:	df015a17 	ldw	fp,1384(sp)
    2954:	ddc15917 	ldw	r23,1380(sp)
    2958:	dd815817 	ldw	r22,1376(sp)
    295c:	dd415717 	ldw	r21,1372(sp)
    2960:	dd015617 	ldw	r20,1368(sp)
    2964:	dcc15517 	ldw	r19,1364(sp)
    2968:	dc815417 	ldw	r18,1360(sp)
    296c:	dc415317 	ldw	r17,1356(sp)
    2970:	dc015217 	ldw	r16,1352(sp)
    2974:	dec15c04 	addi	sp,sp,1392
    2978:	f800283a 	ret
    297c:	0005883a 	mov	r2,zero
    2980:	0007883a 	mov	r3,zero
    2984:	dd401904 	addi	r21,sp,100
    2988:	d8814215 	stw	r2,1288(sp)
    298c:	802f883a 	mov	r23,r16
    2990:	d8c14315 	stw	r3,1292(sp)
    2994:	d8014b15 	stw	zero,1324(sp)
    2998:	d8014815 	stw	zero,1312(sp)
    299c:	d8014415 	stw	zero,1296(sp)
    29a0:	d8014715 	stw	zero,1308(sp)
    29a4:	dd400c15 	stw	r21,48(sp)
    29a8:	d8000e15 	stw	zero,56(sp)
    29ac:	d8000d15 	stw	zero,52(sp)
    29b0:	b8800007 	ldb	r2,0(r23)
    29b4:	10001926 	beq	r2,zero,2a1c <___vfprintf_internal_r+0x1dc>
    29b8:	00c00944 	movi	r3,37
    29bc:	10c01726 	beq	r2,r3,2a1c <___vfprintf_internal_r+0x1dc>
    29c0:	b821883a 	mov	r16,r23
    29c4:	00000106 	br	29cc <___vfprintf_internal_r+0x18c>
    29c8:	10c00326 	beq	r2,r3,29d8 <___vfprintf_internal_r+0x198>
    29cc:	84000044 	addi	r16,r16,1
    29d0:	80800007 	ldb	r2,0(r16)
    29d4:	103ffc1e 	bne	r2,zero,29c8 <___vfprintf_internal_r+0x188>
    29d8:	85e7c83a 	sub	r19,r16,r23
    29dc:	98000e26 	beq	r19,zero,2a18 <___vfprintf_internal_r+0x1d8>
    29e0:	dc800e17 	ldw	r18,56(sp)
    29e4:	dc400d17 	ldw	r17,52(sp)
    29e8:	008001c4 	movi	r2,7
    29ec:	94e5883a 	add	r18,r18,r19
    29f0:	8c400044 	addi	r17,r17,1
    29f4:	adc00015 	stw	r23,0(r21)
    29f8:	dc800e15 	stw	r18,56(sp)
    29fc:	acc00115 	stw	r19,4(r21)
    2a00:	dc400d15 	stw	r17,52(sp)
    2a04:	14428b16 	blt	r2,r17,3434 <___vfprintf_internal_r+0xbf4>
    2a08:	ad400204 	addi	r21,r21,8
    2a0c:	d9014b17 	ldw	r4,1324(sp)
    2a10:	24c9883a 	add	r4,r4,r19
    2a14:	d9014b15 	stw	r4,1324(sp)
    2a18:	802f883a 	mov	r23,r16
    2a1c:	b8800007 	ldb	r2,0(r23)
    2a20:	10013c26 	beq	r2,zero,2f14 <___vfprintf_internal_r+0x6d4>
    2a24:	bdc00044 	addi	r23,r23,1
    2a28:	d8000405 	stb	zero,16(sp)
    2a2c:	b8c00007 	ldb	r3,0(r23)
    2a30:	04ffffc4 	movi	r19,-1
    2a34:	d8014c15 	stw	zero,1328(sp)
    2a38:	d8014a15 	stw	zero,1320(sp)
    2a3c:	d8c14d15 	stw	r3,1332(sp)
    2a40:	bdc00044 	addi	r23,r23,1
    2a44:	d9414d17 	ldw	r5,1332(sp)
    2a48:	00801604 	movi	r2,88
    2a4c:	28fff804 	addi	r3,r5,-32
    2a50:	10c06036 	bltu	r2,r3,2bd4 <___vfprintf_internal_r+0x394>
    2a54:	18c5883a 	add	r2,r3,r3
    2a58:	1085883a 	add	r2,r2,r2
    2a5c:	00c00034 	movhi	r3,0
    2a60:	18ca9c04 	addi	r3,r3,10864
    2a64:	10c5883a 	add	r2,r2,r3
    2a68:	11000017 	ldw	r4,0(r2)
    2a6c:	2000683a 	jmp	r4
    2a70:	000039e4 	muli	zero,zero,231
    2a74:	00002bd4 	movui	zero,175
    2a78:	00002bd4 	movui	zero,175
    2a7c:	000039d0 	cmplti	zero,zero,231
    2a80:	00002bd4 	movui	zero,175
    2a84:	00002bd4 	movui	zero,175
    2a88:	00002bd4 	movui	zero,175
    2a8c:	00002bd4 	movui	zero,175
    2a90:	00002bd4 	movui	zero,175
    2a94:	00002bd4 	movui	zero,175
    2a98:	000037b0 	cmpltui	zero,zero,222
    2a9c:	000039c0 	call	39c <handle_button_interrupts+0x20>
    2aa0:	00002bd4 	movui	zero,175
    2aa4:	000037c8 	cmpgei	zero,zero,223
    2aa8:	00003a5c 	xori	zero,zero,233
    2aac:	00002bd4 	movui	zero,175
    2ab0:	00003a48 	cmpgei	zero,zero,233
    2ab4:	00003a10 	cmplti	zero,zero,232
    2ab8:	00003a10 	cmplti	zero,zero,232
    2abc:	00003a10 	cmplti	zero,zero,232
    2ac0:	00003a10 	cmplti	zero,zero,232
    2ac4:	00003a10 	cmplti	zero,zero,232
    2ac8:	00003a10 	cmplti	zero,zero,232
    2acc:	00003a10 	cmplti	zero,zero,232
    2ad0:	00003a10 	cmplti	zero,zero,232
    2ad4:	00003a10 	cmplti	zero,zero,232
    2ad8:	00002bd4 	movui	zero,175
    2adc:	00002bd4 	movui	zero,175
    2ae0:	00002bd4 	movui	zero,175
    2ae4:	00002bd4 	movui	zero,175
    2ae8:	00002bd4 	movui	zero,175
    2aec:	00002bd4 	movui	zero,175
    2af0:	00002bd4 	movui	zero,175
    2af4:	00002bd4 	movui	zero,175
    2af8:	00002bd4 	movui	zero,175
    2afc:	00002bd4 	movui	zero,175
    2b00:	0000322c 	andhi	zero,zero,200
    2b04:	00003898 	cmpnei	zero,zero,226
    2b08:	00002bd4 	movui	zero,175
    2b0c:	00003898 	cmpnei	zero,zero,226
    2b10:	00002bd4 	movui	zero,175
    2b14:	00002bd4 	movui	zero,175
    2b18:	00002bd4 	movui	zero,175
    2b1c:	00002bd4 	movui	zero,175
    2b20:	000039fc 	xorhi	zero,zero,231
    2b24:	00002bd4 	movui	zero,175
    2b28:	00002bd4 	movui	zero,175
    2b2c:	000032e0 	cmpeqi	zero,zero,203
    2b30:	00002bd4 	movui	zero,175
    2b34:	00002bd4 	movui	zero,175
    2b38:	00002bd4 	movui	zero,175
    2b3c:	00002bd4 	movui	zero,175
    2b40:	00002bd4 	movui	zero,175
    2b44:	0000332c 	andhi	zero,zero,204
    2b48:	00002bd4 	movui	zero,175
    2b4c:	00002bd4 	movui	zero,175
    2b50:	0000394c 	andi	zero,zero,229
    2b54:	00002bd4 	movui	zero,175
    2b58:	00002bd4 	movui	zero,175
    2b5c:	00002bd4 	movui	zero,175
    2b60:	00002bd4 	movui	zero,175
    2b64:	00002bd4 	movui	zero,175
    2b68:	00002bd4 	movui	zero,175
    2b6c:	00002bd4 	movui	zero,175
    2b70:	00002bd4 	movui	zero,175
    2b74:	00002bd4 	movui	zero,175
    2b78:	00002bd4 	movui	zero,175
    2b7c:	00003920 	cmpeqi	zero,zero,228
    2b80:	00003238 	rdprs	zero,zero,200
    2b84:	00003898 	cmpnei	zero,zero,226
    2b88:	00003898 	cmpnei	zero,zero,226
    2b8c:	00003898 	cmpnei	zero,zero,226
    2b90:	00003884 	movi	zero,226
    2b94:	00003238 	rdprs	zero,zero,200
    2b98:	00002bd4 	movui	zero,175
    2b9c:	00002bd4 	movui	zero,175
    2ba0:	0000380c 	andi	zero,zero,224
    2ba4:	00002bd4 	movui	zero,175
    2ba8:	000037dc 	xori	zero,zero,223
    2bac:	000032ec 	andhi	zero,zero,203
    2bb0:	0000383c 	xorhi	zero,zero,224
    2bb4:	00003828 	cmpgeui	zero,zero,224
    2bb8:	00002bd4 	movui	zero,175
    2bbc:	00003ab8 	rdprs	zero,zero,234
    2bc0:	00002bd4 	movui	zero,175
    2bc4:	00003338 	rdprs	zero,zero,204
    2bc8:	00002bd4 	movui	zero,175
    2bcc:	00002bd4 	movui	zero,175
    2bd0:	000039b0 	cmpltui	zero,zero,230
    2bd4:	d9014d17 	ldw	r4,1332(sp)
    2bd8:	2000ce26 	beq	r4,zero,2f14 <___vfprintf_internal_r+0x6d4>
    2bdc:	01400044 	movi	r5,1
    2be0:	d9800f04 	addi	r6,sp,60
    2be4:	d9c14015 	stw	r7,1280(sp)
    2be8:	d9414515 	stw	r5,1300(sp)
    2bec:	d9814115 	stw	r6,1284(sp)
    2bf0:	280f883a 	mov	r7,r5
    2bf4:	d9000f05 	stb	r4,60(sp)
    2bf8:	d8000405 	stb	zero,16(sp)
    2bfc:	d8014615 	stw	zero,1304(sp)
    2c00:	d8c14c17 	ldw	r3,1328(sp)
    2c04:	1880008c 	andi	r2,r3,2
    2c08:	1005003a 	cmpeq	r2,r2,zero
    2c0c:	d8815015 	stw	r2,1344(sp)
    2c10:	1000031e 	bne	r2,zero,2c20 <___vfprintf_internal_r+0x3e0>
    2c14:	d9014517 	ldw	r4,1300(sp)
    2c18:	21000084 	addi	r4,r4,2
    2c1c:	d9014515 	stw	r4,1300(sp)
    2c20:	d9414c17 	ldw	r5,1328(sp)
    2c24:	2940210c 	andi	r5,r5,132
    2c28:	d9414e15 	stw	r5,1336(sp)
    2c2c:	28002d1e 	bne	r5,zero,2ce4 <___vfprintf_internal_r+0x4a4>
    2c30:	d9814a17 	ldw	r6,1320(sp)
    2c34:	d8814517 	ldw	r2,1300(sp)
    2c38:	30a1c83a 	sub	r16,r6,r2
    2c3c:	0400290e 	bge	zero,r16,2ce4 <___vfprintf_internal_r+0x4a4>
    2c40:	00800404 	movi	r2,16
    2c44:	1404580e 	bge	r2,r16,3da8 <___vfprintf_internal_r+0x1568>
    2c48:	dc800e17 	ldw	r18,56(sp)
    2c4c:	dc400d17 	ldw	r17,52(sp)
    2c50:	1027883a 	mov	r19,r2
    2c54:	07000074 	movhi	fp,1
    2c58:	e7390284 	addi	fp,fp,-7158
    2c5c:	050001c4 	movi	r20,7
    2c60:	00000306 	br	2c70 <___vfprintf_internal_r+0x430>
    2c64:	843ffc04 	addi	r16,r16,-16
    2c68:	ad400204 	addi	r21,r21,8
    2c6c:	9c00130e 	bge	r19,r16,2cbc <___vfprintf_internal_r+0x47c>
    2c70:	94800404 	addi	r18,r18,16
    2c74:	8c400044 	addi	r17,r17,1
    2c78:	af000015 	stw	fp,0(r21)
    2c7c:	acc00115 	stw	r19,4(r21)
    2c80:	dc800e15 	stw	r18,56(sp)
    2c84:	dc400d15 	stw	r17,52(sp)
    2c88:	a47ff60e 	bge	r20,r17,2c64 <___vfprintf_internal_r+0x424>
    2c8c:	d9014f17 	ldw	r4,1340(sp)
    2c90:	b00b883a 	mov	r5,r22
    2c94:	d9800c04 	addi	r6,sp,48
    2c98:	d9c15115 	stw	r7,1348(sp)
    2c9c:	00027e80 	call	27e8 <__sprint_r>
    2ca0:	d9c15117 	ldw	r7,1348(sp)
    2ca4:	10009e1e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    2ca8:	843ffc04 	addi	r16,r16,-16
    2cac:	dc800e17 	ldw	r18,56(sp)
    2cb0:	dc400d17 	ldw	r17,52(sp)
    2cb4:	dd401904 	addi	r21,sp,100
    2cb8:	9c3fed16 	blt	r19,r16,2c70 <___vfprintf_internal_r+0x430>
    2cbc:	9425883a 	add	r18,r18,r16
    2cc0:	8c400044 	addi	r17,r17,1
    2cc4:	008001c4 	movi	r2,7
    2cc8:	af000015 	stw	fp,0(r21)
    2ccc:	ac000115 	stw	r16,4(r21)
    2cd0:	dc800e15 	stw	r18,56(sp)
    2cd4:	dc400d15 	stw	r17,52(sp)
    2cd8:	1441f516 	blt	r2,r17,34b0 <___vfprintf_internal_r+0xc70>
    2cdc:	ad400204 	addi	r21,r21,8
    2ce0:	00000206 	br	2cec <___vfprintf_internal_r+0x4ac>
    2ce4:	dc800e17 	ldw	r18,56(sp)
    2ce8:	dc400d17 	ldw	r17,52(sp)
    2cec:	d8800407 	ldb	r2,16(sp)
    2cf0:	10000b26 	beq	r2,zero,2d20 <___vfprintf_internal_r+0x4e0>
    2cf4:	00800044 	movi	r2,1
    2cf8:	94800044 	addi	r18,r18,1
    2cfc:	8c400044 	addi	r17,r17,1
    2d00:	a8800115 	stw	r2,4(r21)
    2d04:	d8c00404 	addi	r3,sp,16
    2d08:	008001c4 	movi	r2,7
    2d0c:	a8c00015 	stw	r3,0(r21)
    2d10:	dc800e15 	stw	r18,56(sp)
    2d14:	dc400d15 	stw	r17,52(sp)
    2d18:	1441da16 	blt	r2,r17,3484 <___vfprintf_internal_r+0xc44>
    2d1c:	ad400204 	addi	r21,r21,8
    2d20:	d9015017 	ldw	r4,1344(sp)
    2d24:	20000b1e 	bne	r4,zero,2d54 <___vfprintf_internal_r+0x514>
    2d28:	d8800444 	addi	r2,sp,17
    2d2c:	94800084 	addi	r18,r18,2
    2d30:	8c400044 	addi	r17,r17,1
    2d34:	a8800015 	stw	r2,0(r21)
    2d38:	00c00084 	movi	r3,2
    2d3c:	008001c4 	movi	r2,7
    2d40:	a8c00115 	stw	r3,4(r21)
    2d44:	dc800e15 	stw	r18,56(sp)
    2d48:	dc400d15 	stw	r17,52(sp)
    2d4c:	1441c216 	blt	r2,r17,3458 <___vfprintf_internal_r+0xc18>
    2d50:	ad400204 	addi	r21,r21,8
    2d54:	d9414e17 	ldw	r5,1336(sp)
    2d58:	00802004 	movi	r2,128
    2d5c:	2880b126 	beq	r5,r2,3024 <___vfprintf_internal_r+0x7e4>
    2d60:	d8c14617 	ldw	r3,1304(sp)
    2d64:	19e1c83a 	sub	r16,r3,r7
    2d68:	0400260e 	bge	zero,r16,2e04 <___vfprintf_internal_r+0x5c4>
    2d6c:	00800404 	movi	r2,16
    2d70:	1403c90e 	bge	r2,r16,3c98 <___vfprintf_internal_r+0x1458>
    2d74:	1027883a 	mov	r19,r2
    2d78:	07000074 	movhi	fp,1
    2d7c:	e738fe84 	addi	fp,fp,-7174
    2d80:	050001c4 	movi	r20,7
    2d84:	00000306 	br	2d94 <___vfprintf_internal_r+0x554>
    2d88:	843ffc04 	addi	r16,r16,-16
    2d8c:	ad400204 	addi	r21,r21,8
    2d90:	9c00130e 	bge	r19,r16,2de0 <___vfprintf_internal_r+0x5a0>
    2d94:	94800404 	addi	r18,r18,16
    2d98:	8c400044 	addi	r17,r17,1
    2d9c:	af000015 	stw	fp,0(r21)
    2da0:	acc00115 	stw	r19,4(r21)
    2da4:	dc800e15 	stw	r18,56(sp)
    2da8:	dc400d15 	stw	r17,52(sp)
    2dac:	a47ff60e 	bge	r20,r17,2d88 <___vfprintf_internal_r+0x548>
    2db0:	d9014f17 	ldw	r4,1340(sp)
    2db4:	b00b883a 	mov	r5,r22
    2db8:	d9800c04 	addi	r6,sp,48
    2dbc:	d9c15115 	stw	r7,1348(sp)
    2dc0:	00027e80 	call	27e8 <__sprint_r>
    2dc4:	d9c15117 	ldw	r7,1348(sp)
    2dc8:	1000551e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    2dcc:	843ffc04 	addi	r16,r16,-16
    2dd0:	dc800e17 	ldw	r18,56(sp)
    2dd4:	dc400d17 	ldw	r17,52(sp)
    2dd8:	dd401904 	addi	r21,sp,100
    2ddc:	9c3fed16 	blt	r19,r16,2d94 <___vfprintf_internal_r+0x554>
    2de0:	9425883a 	add	r18,r18,r16
    2de4:	8c400044 	addi	r17,r17,1
    2de8:	008001c4 	movi	r2,7
    2dec:	af000015 	stw	fp,0(r21)
    2df0:	ac000115 	stw	r16,4(r21)
    2df4:	dc800e15 	stw	r18,56(sp)
    2df8:	dc400d15 	stw	r17,52(sp)
    2dfc:	14418216 	blt	r2,r17,3408 <___vfprintf_internal_r+0xbc8>
    2e00:	ad400204 	addi	r21,r21,8
    2e04:	d9014c17 	ldw	r4,1328(sp)
    2e08:	2080400c 	andi	r2,r4,256
    2e0c:	10004a1e 	bne	r2,zero,2f38 <___vfprintf_internal_r+0x6f8>
    2e10:	d9414117 	ldw	r5,1284(sp)
    2e14:	91e5883a 	add	r18,r18,r7
    2e18:	8c400044 	addi	r17,r17,1
    2e1c:	008001c4 	movi	r2,7
    2e20:	a9400015 	stw	r5,0(r21)
    2e24:	a9c00115 	stw	r7,4(r21)
    2e28:	dc800e15 	stw	r18,56(sp)
    2e2c:	dc400d15 	stw	r17,52(sp)
    2e30:	14416716 	blt	r2,r17,33d0 <___vfprintf_internal_r+0xb90>
    2e34:	a8c00204 	addi	r3,r21,8
    2e38:	d9814c17 	ldw	r6,1328(sp)
    2e3c:	3080010c 	andi	r2,r6,4
    2e40:	10002826 	beq	r2,zero,2ee4 <___vfprintf_internal_r+0x6a4>
    2e44:	d8814a17 	ldw	r2,1320(sp)
    2e48:	d9014517 	ldw	r4,1300(sp)
    2e4c:	1121c83a 	sub	r16,r2,r4
    2e50:	0400240e 	bge	zero,r16,2ee4 <___vfprintf_internal_r+0x6a4>
    2e54:	00800404 	movi	r2,16
    2e58:	14044f0e 	bge	r2,r16,3f98 <___vfprintf_internal_r+0x1758>
    2e5c:	dc400d17 	ldw	r17,52(sp)
    2e60:	1027883a 	mov	r19,r2
    2e64:	07000074 	movhi	fp,1
    2e68:	e7390284 	addi	fp,fp,-7158
    2e6c:	050001c4 	movi	r20,7
    2e70:	00000306 	br	2e80 <___vfprintf_internal_r+0x640>
    2e74:	843ffc04 	addi	r16,r16,-16
    2e78:	18c00204 	addi	r3,r3,8
    2e7c:	9c00110e 	bge	r19,r16,2ec4 <___vfprintf_internal_r+0x684>
    2e80:	94800404 	addi	r18,r18,16
    2e84:	8c400044 	addi	r17,r17,1
    2e88:	1f000015 	stw	fp,0(r3)
    2e8c:	1cc00115 	stw	r19,4(r3)
    2e90:	dc800e15 	stw	r18,56(sp)
    2e94:	dc400d15 	stw	r17,52(sp)
    2e98:	a47ff60e 	bge	r20,r17,2e74 <___vfprintf_internal_r+0x634>
    2e9c:	d9014f17 	ldw	r4,1340(sp)
    2ea0:	b00b883a 	mov	r5,r22
    2ea4:	d9800c04 	addi	r6,sp,48
    2ea8:	00027e80 	call	27e8 <__sprint_r>
    2eac:	10001c1e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    2eb0:	843ffc04 	addi	r16,r16,-16
    2eb4:	dc800e17 	ldw	r18,56(sp)
    2eb8:	dc400d17 	ldw	r17,52(sp)
    2ebc:	d8c01904 	addi	r3,sp,100
    2ec0:	9c3fef16 	blt	r19,r16,2e80 <___vfprintf_internal_r+0x640>
    2ec4:	9425883a 	add	r18,r18,r16
    2ec8:	8c400044 	addi	r17,r17,1
    2ecc:	008001c4 	movi	r2,7
    2ed0:	1f000015 	stw	fp,0(r3)
    2ed4:	1c000115 	stw	r16,4(r3)
    2ed8:	dc800e15 	stw	r18,56(sp)
    2edc:	dc400d15 	stw	r17,52(sp)
    2ee0:	1440cb16 	blt	r2,r17,3210 <___vfprintf_internal_r+0x9d0>
    2ee4:	d8814a17 	ldw	r2,1320(sp)
    2ee8:	d9414517 	ldw	r5,1300(sp)
    2eec:	1140010e 	bge	r2,r5,2ef4 <___vfprintf_internal_r+0x6b4>
    2ef0:	2805883a 	mov	r2,r5
    2ef4:	d9814b17 	ldw	r6,1324(sp)
    2ef8:	308d883a 	add	r6,r6,r2
    2efc:	d9814b15 	stw	r6,1324(sp)
    2f00:	90013b1e 	bne	r18,zero,33f0 <___vfprintf_internal_r+0xbb0>
    2f04:	d9c14017 	ldw	r7,1280(sp)
    2f08:	dd401904 	addi	r21,sp,100
    2f0c:	d8000d15 	stw	zero,52(sp)
    2f10:	003ea706 	br	29b0 <___vfprintf_internal_r+0x170>
    2f14:	d8800e17 	ldw	r2,56(sp)
    2f18:	10053f1e 	bne	r2,zero,4418 <___vfprintf_internal_r+0x1bd8>
    2f1c:	d8000d15 	stw	zero,52(sp)
    2f20:	b080030b 	ldhu	r2,12(r22)
    2f24:	1080100c 	andi	r2,r2,64
    2f28:	103e8726 	beq	r2,zero,2948 <___vfprintf_internal_r+0x108>
    2f2c:	00bfffc4 	movi	r2,-1
    2f30:	d8814b15 	stw	r2,1324(sp)
    2f34:	003e8406 	br	2948 <___vfprintf_internal_r+0x108>
    2f38:	d9814d17 	ldw	r6,1332(sp)
    2f3c:	00801944 	movi	r2,101
    2f40:	11806e16 	blt	r2,r6,30fc <___vfprintf_internal_r+0x8bc>
    2f44:	d9414717 	ldw	r5,1308(sp)
    2f48:	00c00044 	movi	r3,1
    2f4c:	1943430e 	bge	r3,r5,3c5c <___vfprintf_internal_r+0x141c>
    2f50:	d8814117 	ldw	r2,1284(sp)
    2f54:	94800044 	addi	r18,r18,1
    2f58:	8c400044 	addi	r17,r17,1
    2f5c:	a8800015 	stw	r2,0(r21)
    2f60:	008001c4 	movi	r2,7
    2f64:	a8c00115 	stw	r3,4(r21)
    2f68:	dc800e15 	stw	r18,56(sp)
    2f6c:	dc400d15 	stw	r17,52(sp)
    2f70:	1441ca16 	blt	r2,r17,369c <___vfprintf_internal_r+0xe5c>
    2f74:	a8c00204 	addi	r3,r21,8
    2f78:	d9014917 	ldw	r4,1316(sp)
    2f7c:	00800044 	movi	r2,1
    2f80:	94800044 	addi	r18,r18,1
    2f84:	8c400044 	addi	r17,r17,1
    2f88:	18800115 	stw	r2,4(r3)
    2f8c:	008001c4 	movi	r2,7
    2f90:	19000015 	stw	r4,0(r3)
    2f94:	dc800e15 	stw	r18,56(sp)
    2f98:	dc400d15 	stw	r17,52(sp)
    2f9c:	1441b616 	blt	r2,r17,3678 <___vfprintf_internal_r+0xe38>
    2fa0:	1cc00204 	addi	r19,r3,8
    2fa4:	d9014217 	ldw	r4,1288(sp)
    2fa8:	d9414317 	ldw	r5,1292(sp)
    2fac:	000d883a 	mov	r6,zero
    2fb0:	000f883a 	mov	r7,zero
    2fb4:	000aa940 	call	aa94 <__nedf2>
    2fb8:	10017426 	beq	r2,zero,358c <___vfprintf_internal_r+0xd4c>
    2fbc:	d9414717 	ldw	r5,1308(sp)
    2fc0:	d9814117 	ldw	r6,1284(sp)
    2fc4:	8c400044 	addi	r17,r17,1
    2fc8:	2c85883a 	add	r2,r5,r18
    2fcc:	14bfffc4 	addi	r18,r2,-1
    2fd0:	28bfffc4 	addi	r2,r5,-1
    2fd4:	30c00044 	addi	r3,r6,1
    2fd8:	98800115 	stw	r2,4(r19)
    2fdc:	008001c4 	movi	r2,7
    2fe0:	98c00015 	stw	r3,0(r19)
    2fe4:	dc800e15 	stw	r18,56(sp)
    2fe8:	dc400d15 	stw	r17,52(sp)
    2fec:	14418e16 	blt	r2,r17,3628 <___vfprintf_internal_r+0xde8>
    2ff0:	9cc00204 	addi	r19,r19,8
    2ff4:	d9414817 	ldw	r5,1312(sp)
    2ff8:	d8800804 	addi	r2,sp,32
    2ffc:	8c400044 	addi	r17,r17,1
    3000:	9165883a 	add	r18,r18,r5
    3004:	98800015 	stw	r2,0(r19)
    3008:	008001c4 	movi	r2,7
    300c:	99400115 	stw	r5,4(r19)
    3010:	dc800e15 	stw	r18,56(sp)
    3014:	dc400d15 	stw	r17,52(sp)
    3018:	1440ed16 	blt	r2,r17,33d0 <___vfprintf_internal_r+0xb90>
    301c:	98c00204 	addi	r3,r19,8
    3020:	003f8506 	br	2e38 <___vfprintf_internal_r+0x5f8>
    3024:	d9814a17 	ldw	r6,1320(sp)
    3028:	d8814517 	ldw	r2,1300(sp)
    302c:	30a1c83a 	sub	r16,r6,r2
    3030:	043f4b0e 	bge	zero,r16,2d60 <___vfprintf_internal_r+0x520>
    3034:	00800404 	movi	r2,16
    3038:	1404340e 	bge	r2,r16,410c <___vfprintf_internal_r+0x18cc>
    303c:	1027883a 	mov	r19,r2
    3040:	07000074 	movhi	fp,1
    3044:	e738fe84 	addi	fp,fp,-7174
    3048:	050001c4 	movi	r20,7
    304c:	00000306 	br	305c <___vfprintf_internal_r+0x81c>
    3050:	843ffc04 	addi	r16,r16,-16
    3054:	ad400204 	addi	r21,r21,8
    3058:	9c00130e 	bge	r19,r16,30a8 <___vfprintf_internal_r+0x868>
    305c:	94800404 	addi	r18,r18,16
    3060:	8c400044 	addi	r17,r17,1
    3064:	af000015 	stw	fp,0(r21)
    3068:	acc00115 	stw	r19,4(r21)
    306c:	dc800e15 	stw	r18,56(sp)
    3070:	dc400d15 	stw	r17,52(sp)
    3074:	a47ff60e 	bge	r20,r17,3050 <___vfprintf_internal_r+0x810>
    3078:	d9014f17 	ldw	r4,1340(sp)
    307c:	b00b883a 	mov	r5,r22
    3080:	d9800c04 	addi	r6,sp,48
    3084:	d9c15115 	stw	r7,1348(sp)
    3088:	00027e80 	call	27e8 <__sprint_r>
    308c:	d9c15117 	ldw	r7,1348(sp)
    3090:	103fa31e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    3094:	843ffc04 	addi	r16,r16,-16
    3098:	dc800e17 	ldw	r18,56(sp)
    309c:	dc400d17 	ldw	r17,52(sp)
    30a0:	dd401904 	addi	r21,sp,100
    30a4:	9c3fed16 	blt	r19,r16,305c <___vfprintf_internal_r+0x81c>
    30a8:	9425883a 	add	r18,r18,r16
    30ac:	8c400044 	addi	r17,r17,1
    30b0:	008001c4 	movi	r2,7
    30b4:	af000015 	stw	fp,0(r21)
    30b8:	ac000115 	stw	r16,4(r21)
    30bc:	dc800e15 	stw	r18,56(sp)
    30c0:	dc400d15 	stw	r17,52(sp)
    30c4:	14416116 	blt	r2,r17,364c <___vfprintf_internal_r+0xe0c>
    30c8:	ad400204 	addi	r21,r21,8
    30cc:	003f2406 	br	2d60 <___vfprintf_internal_r+0x520>
    30d0:	d9014f17 	ldw	r4,1340(sp)
    30d4:	00064640 	call	6464 <__sinit>
    30d8:	d9c15117 	ldw	r7,1348(sp)
    30dc:	003def06 	br	289c <___vfprintf_internal_r+0x5c>
    30e0:	d9014f17 	ldw	r4,1340(sp)
    30e4:	b00b883a 	mov	r5,r22
    30e8:	d9c15115 	stw	r7,1348(sp)
    30ec:	00047100 	call	4710 <__swsetup_r>
    30f0:	d9c15117 	ldw	r7,1348(sp)
    30f4:	103dee26 	beq	r2,zero,28b0 <___vfprintf_internal_r+0x70>
    30f8:	003f8c06 	br	2f2c <___vfprintf_internal_r+0x6ec>
    30fc:	d9014217 	ldw	r4,1288(sp)
    3100:	d9414317 	ldw	r5,1292(sp)
    3104:	000d883a 	mov	r6,zero
    3108:	000f883a 	mov	r7,zero
    310c:	000aa0c0 	call	aa0c <__eqdf2>
    3110:	1000f21e 	bne	r2,zero,34dc <___vfprintf_internal_r+0xc9c>
    3114:	00800074 	movhi	r2,1
    3118:	10b8fe04 	addi	r2,r2,-7176
    311c:	94800044 	addi	r18,r18,1
    3120:	8c400044 	addi	r17,r17,1
    3124:	a8800015 	stw	r2,0(r21)
    3128:	00c00044 	movi	r3,1
    312c:	008001c4 	movi	r2,7
    3130:	a8c00115 	stw	r3,4(r21)
    3134:	dc800e15 	stw	r18,56(sp)
    3138:	dc400d15 	stw	r17,52(sp)
    313c:	1442fa16 	blt	r2,r17,3d28 <___vfprintf_internal_r+0x14e8>
    3140:	a8c00204 	addi	r3,r21,8
    3144:	d8800517 	ldw	r2,20(sp)
    3148:	d9014717 	ldw	r4,1308(sp)
    314c:	11015c0e 	bge	r2,r4,36c0 <___vfprintf_internal_r+0xe80>
    3150:	dc400d17 	ldw	r17,52(sp)
    3154:	d9814917 	ldw	r6,1316(sp)
    3158:	00800044 	movi	r2,1
    315c:	94800044 	addi	r18,r18,1
    3160:	8c400044 	addi	r17,r17,1
    3164:	18800115 	stw	r2,4(r3)
    3168:	008001c4 	movi	r2,7
    316c:	19800015 	stw	r6,0(r3)
    3170:	dc800e15 	stw	r18,56(sp)
    3174:	dc400d15 	stw	r17,52(sp)
    3178:	14431016 	blt	r2,r17,3dbc <___vfprintf_internal_r+0x157c>
    317c:	18c00204 	addi	r3,r3,8
    3180:	d8814717 	ldw	r2,1308(sp)
    3184:	143fffc4 	addi	r16,r2,-1
    3188:	043f2b0e 	bge	zero,r16,2e38 <___vfprintf_internal_r+0x5f8>
    318c:	00800404 	movi	r2,16
    3190:	1402a20e 	bge	r2,r16,3c1c <___vfprintf_internal_r+0x13dc>
    3194:	dc400d17 	ldw	r17,52(sp)
    3198:	1027883a 	mov	r19,r2
    319c:	07000074 	movhi	fp,1
    31a0:	e738fe84 	addi	fp,fp,-7174
    31a4:	050001c4 	movi	r20,7
    31a8:	00000306 	br	31b8 <___vfprintf_internal_r+0x978>
    31ac:	18c00204 	addi	r3,r3,8
    31b0:	843ffc04 	addi	r16,r16,-16
    31b4:	9c029c0e 	bge	r19,r16,3c28 <___vfprintf_internal_r+0x13e8>
    31b8:	94800404 	addi	r18,r18,16
    31bc:	8c400044 	addi	r17,r17,1
    31c0:	1f000015 	stw	fp,0(r3)
    31c4:	1cc00115 	stw	r19,4(r3)
    31c8:	dc800e15 	stw	r18,56(sp)
    31cc:	dc400d15 	stw	r17,52(sp)
    31d0:	a47ff60e 	bge	r20,r17,31ac <___vfprintf_internal_r+0x96c>
    31d4:	d9014f17 	ldw	r4,1340(sp)
    31d8:	b00b883a 	mov	r5,r22
    31dc:	d9800c04 	addi	r6,sp,48
    31e0:	00027e80 	call	27e8 <__sprint_r>
    31e4:	103f4e1e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    31e8:	dc800e17 	ldw	r18,56(sp)
    31ec:	dc400d17 	ldw	r17,52(sp)
    31f0:	d8c01904 	addi	r3,sp,100
    31f4:	003fee06 	br	31b0 <___vfprintf_internal_r+0x970>
    31f8:	d8802c0b 	ldhu	r2,176(sp)
    31fc:	00ffffc4 	movi	r3,-1
    3200:	d8c14b15 	stw	r3,1324(sp)
    3204:	1080100c 	andi	r2,r2,64
    3208:	103dcc1e 	bne	r2,zero,293c <___vfprintf_internal_r+0xfc>
    320c:	003dce06 	br	2948 <___vfprintf_internal_r+0x108>
    3210:	d9014f17 	ldw	r4,1340(sp)
    3214:	b00b883a 	mov	r5,r22
    3218:	d9800c04 	addi	r6,sp,48
    321c:	00027e80 	call	27e8 <__sprint_r>
    3220:	103f3f1e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    3224:	dc800e17 	ldw	r18,56(sp)
    3228:	003f2e06 	br	2ee4 <___vfprintf_internal_r+0x6a4>
    322c:	d9414c17 	ldw	r5,1328(sp)
    3230:	29400414 	ori	r5,r5,16
    3234:	d9414c15 	stw	r5,1328(sp)
    3238:	d9814c17 	ldw	r6,1328(sp)
    323c:	3080080c 	andi	r2,r6,32
    3240:	10014f1e 	bne	r2,zero,3780 <___vfprintf_internal_r+0xf40>
    3244:	d8c14c17 	ldw	r3,1328(sp)
    3248:	1880040c 	andi	r2,r3,16
    324c:	1002ea1e 	bne	r2,zero,3df8 <___vfprintf_internal_r+0x15b8>
    3250:	d9014c17 	ldw	r4,1328(sp)
    3254:	2080100c 	andi	r2,r4,64
    3258:	1002e726 	beq	r2,zero,3df8 <___vfprintf_internal_r+0x15b8>
    325c:	3880000f 	ldh	r2,0(r7)
    3260:	39c00104 	addi	r7,r7,4
    3264:	d9c14015 	stw	r7,1280(sp)
    3268:	1023d7fa 	srai	r17,r2,31
    326c:	1021883a 	mov	r16,r2
    3270:	88037216 	blt	r17,zero,403c <___vfprintf_internal_r+0x17fc>
    3274:	01000044 	movi	r4,1
    3278:	98000416 	blt	r19,zero,328c <___vfprintf_internal_r+0xa4c>
    327c:	d8c14c17 	ldw	r3,1328(sp)
    3280:	00bfdfc4 	movi	r2,-129
    3284:	1886703a 	and	r3,r3,r2
    3288:	d8c14c15 	stw	r3,1328(sp)
    328c:	8444b03a 	or	r2,r16,r17
    3290:	1002261e 	bne	r2,zero,3b2c <___vfprintf_internal_r+0x12ec>
    3294:	9802251e 	bne	r19,zero,3b2c <___vfprintf_internal_r+0x12ec>
    3298:	20803fcc 	andi	r2,r4,255
    329c:	10029b26 	beq	r2,zero,3d0c <___vfprintf_internal_r+0x14cc>
    32a0:	d8c01904 	addi	r3,sp,100
    32a4:	dd000f04 	addi	r20,sp,60
    32a8:	d8c14115 	stw	r3,1284(sp)
    32ac:	d8c14117 	ldw	r3,1284(sp)
    32b0:	dcc14515 	stw	r19,1300(sp)
    32b4:	a0c5c83a 	sub	r2,r20,r3
    32b8:	11c00a04 	addi	r7,r2,40
    32bc:	99c0010e 	bge	r19,r7,32c4 <___vfprintf_internal_r+0xa84>
    32c0:	d9c14515 	stw	r7,1300(sp)
    32c4:	dcc14615 	stw	r19,1304(sp)
    32c8:	d8800407 	ldb	r2,16(sp)
    32cc:	103e4c26 	beq	r2,zero,2c00 <___vfprintf_internal_r+0x3c0>
    32d0:	d8814517 	ldw	r2,1300(sp)
    32d4:	10800044 	addi	r2,r2,1
    32d8:	d8814515 	stw	r2,1300(sp)
    32dc:	003e4806 	br	2c00 <___vfprintf_internal_r+0x3c0>
    32e0:	d9814c17 	ldw	r6,1328(sp)
    32e4:	31800414 	ori	r6,r6,16
    32e8:	d9814c15 	stw	r6,1328(sp)
    32ec:	d8c14c17 	ldw	r3,1328(sp)
    32f0:	1880080c 	andi	r2,r3,32
    32f4:	1001271e 	bne	r2,zero,3794 <___vfprintf_internal_r+0xf54>
    32f8:	d9414c17 	ldw	r5,1328(sp)
    32fc:	2880040c 	andi	r2,r5,16
    3300:	1002b61e 	bne	r2,zero,3ddc <___vfprintf_internal_r+0x159c>
    3304:	d9814c17 	ldw	r6,1328(sp)
    3308:	3080100c 	andi	r2,r6,64
    330c:	1002b326 	beq	r2,zero,3ddc <___vfprintf_internal_r+0x159c>
    3310:	3c00000b 	ldhu	r16,0(r7)
    3314:	0009883a 	mov	r4,zero
    3318:	39c00104 	addi	r7,r7,4
    331c:	0023883a 	mov	r17,zero
    3320:	d9c14015 	stw	r7,1280(sp)
    3324:	d8000405 	stb	zero,16(sp)
    3328:	003fd306 	br	3278 <___vfprintf_internal_r+0xa38>
    332c:	d9014c17 	ldw	r4,1328(sp)
    3330:	21000414 	ori	r4,r4,16
    3334:	d9014c15 	stw	r4,1328(sp)
    3338:	d9414c17 	ldw	r5,1328(sp)
    333c:	2880080c 	andi	r2,r5,32
    3340:	1001081e 	bne	r2,zero,3764 <___vfprintf_internal_r+0xf24>
    3344:	d8c14c17 	ldw	r3,1328(sp)
    3348:	1880040c 	andi	r2,r3,16
    334c:	1002b01e 	bne	r2,zero,3e10 <___vfprintf_internal_r+0x15d0>
    3350:	d9014c17 	ldw	r4,1328(sp)
    3354:	2080100c 	andi	r2,r4,64
    3358:	1002ad26 	beq	r2,zero,3e10 <___vfprintf_internal_r+0x15d0>
    335c:	3c00000b 	ldhu	r16,0(r7)
    3360:	01000044 	movi	r4,1
    3364:	39c00104 	addi	r7,r7,4
    3368:	0023883a 	mov	r17,zero
    336c:	d9c14015 	stw	r7,1280(sp)
    3370:	d8000405 	stb	zero,16(sp)
    3374:	003fc006 	br	3278 <___vfprintf_internal_r+0xa38>
    3378:	d9014f17 	ldw	r4,1340(sp)
    337c:	b00b883a 	mov	r5,r22
    3380:	d9800c04 	addi	r6,sp,48
    3384:	00027e80 	call	27e8 <__sprint_r>
    3388:	103ee51e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    338c:	dc800e17 	ldw	r18,56(sp)
    3390:	d8c01904 	addi	r3,sp,100
    3394:	d9814c17 	ldw	r6,1328(sp)
    3398:	3080004c 	andi	r2,r6,1
    339c:	1005003a 	cmpeq	r2,r2,zero
    33a0:	103ea51e 	bne	r2,zero,2e38 <___vfprintf_internal_r+0x5f8>
    33a4:	00800044 	movi	r2,1
    33a8:	dc400d17 	ldw	r17,52(sp)
    33ac:	18800115 	stw	r2,4(r3)
    33b0:	d8814917 	ldw	r2,1316(sp)
    33b4:	94800044 	addi	r18,r18,1
    33b8:	8c400044 	addi	r17,r17,1
    33bc:	18800015 	stw	r2,0(r3)
    33c0:	008001c4 	movi	r2,7
    33c4:	dc800e15 	stw	r18,56(sp)
    33c8:	dc400d15 	stw	r17,52(sp)
    33cc:	14421e0e 	bge	r2,r17,3c48 <___vfprintf_internal_r+0x1408>
    33d0:	d9014f17 	ldw	r4,1340(sp)
    33d4:	b00b883a 	mov	r5,r22
    33d8:	d9800c04 	addi	r6,sp,48
    33dc:	00027e80 	call	27e8 <__sprint_r>
    33e0:	103ecf1e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    33e4:	dc800e17 	ldw	r18,56(sp)
    33e8:	d8c01904 	addi	r3,sp,100
    33ec:	003e9206 	br	2e38 <___vfprintf_internal_r+0x5f8>
    33f0:	d9014f17 	ldw	r4,1340(sp)
    33f4:	b00b883a 	mov	r5,r22
    33f8:	d9800c04 	addi	r6,sp,48
    33fc:	00027e80 	call	27e8 <__sprint_r>
    3400:	103ec026 	beq	r2,zero,2f04 <___vfprintf_internal_r+0x6c4>
    3404:	003ec606 	br	2f20 <___vfprintf_internal_r+0x6e0>
    3408:	d9014f17 	ldw	r4,1340(sp)
    340c:	b00b883a 	mov	r5,r22
    3410:	d9800c04 	addi	r6,sp,48
    3414:	d9c15115 	stw	r7,1348(sp)
    3418:	00027e80 	call	27e8 <__sprint_r>
    341c:	d9c15117 	ldw	r7,1348(sp)
    3420:	103ebf1e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    3424:	dc800e17 	ldw	r18,56(sp)
    3428:	dc400d17 	ldw	r17,52(sp)
    342c:	dd401904 	addi	r21,sp,100
    3430:	003e7406 	br	2e04 <___vfprintf_internal_r+0x5c4>
    3434:	d9014f17 	ldw	r4,1340(sp)
    3438:	b00b883a 	mov	r5,r22
    343c:	d9800c04 	addi	r6,sp,48
    3440:	d9c15115 	stw	r7,1348(sp)
    3444:	00027e80 	call	27e8 <__sprint_r>
    3448:	d9c15117 	ldw	r7,1348(sp)
    344c:	103eb41e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    3450:	dd401904 	addi	r21,sp,100
    3454:	003d6d06 	br	2a0c <___vfprintf_internal_r+0x1cc>
    3458:	d9014f17 	ldw	r4,1340(sp)
    345c:	b00b883a 	mov	r5,r22
    3460:	d9800c04 	addi	r6,sp,48
    3464:	d9c15115 	stw	r7,1348(sp)
    3468:	00027e80 	call	27e8 <__sprint_r>
    346c:	d9c15117 	ldw	r7,1348(sp)
    3470:	103eab1e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    3474:	dc800e17 	ldw	r18,56(sp)
    3478:	dc400d17 	ldw	r17,52(sp)
    347c:	dd401904 	addi	r21,sp,100
    3480:	003e3406 	br	2d54 <___vfprintf_internal_r+0x514>
    3484:	d9014f17 	ldw	r4,1340(sp)
    3488:	b00b883a 	mov	r5,r22
    348c:	d9800c04 	addi	r6,sp,48
    3490:	d9c15115 	stw	r7,1348(sp)
    3494:	00027e80 	call	27e8 <__sprint_r>
    3498:	d9c15117 	ldw	r7,1348(sp)
    349c:	103ea01e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    34a0:	dc800e17 	ldw	r18,56(sp)
    34a4:	dc400d17 	ldw	r17,52(sp)
    34a8:	dd401904 	addi	r21,sp,100
    34ac:	003e1c06 	br	2d20 <___vfprintf_internal_r+0x4e0>
    34b0:	d9014f17 	ldw	r4,1340(sp)
    34b4:	b00b883a 	mov	r5,r22
    34b8:	d9800c04 	addi	r6,sp,48
    34bc:	d9c15115 	stw	r7,1348(sp)
    34c0:	00027e80 	call	27e8 <__sprint_r>
    34c4:	d9c15117 	ldw	r7,1348(sp)
    34c8:	103e951e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    34cc:	dc800e17 	ldw	r18,56(sp)
    34d0:	dc400d17 	ldw	r17,52(sp)
    34d4:	dd401904 	addi	r21,sp,100
    34d8:	003e0406 	br	2cec <___vfprintf_internal_r+0x4ac>
    34dc:	d9000517 	ldw	r4,20(sp)
    34e0:	0102520e 	bge	zero,r4,3e2c <___vfprintf_internal_r+0x15ec>
    34e4:	d9814717 	ldw	r6,1308(sp)
    34e8:	21807a16 	blt	r4,r6,36d4 <___vfprintf_internal_r+0xe94>
    34ec:	d8814117 	ldw	r2,1284(sp)
    34f0:	91a5883a 	add	r18,r18,r6
    34f4:	8c400044 	addi	r17,r17,1
    34f8:	a8800015 	stw	r2,0(r21)
    34fc:	008001c4 	movi	r2,7
    3500:	a9800115 	stw	r6,4(r21)
    3504:	dc800e15 	stw	r18,56(sp)
    3508:	dc400d15 	stw	r17,52(sp)
    350c:	1442f616 	blt	r2,r17,40e8 <___vfprintf_internal_r+0x18a8>
    3510:	a8c00204 	addi	r3,r21,8
    3514:	d9414717 	ldw	r5,1308(sp)
    3518:	2161c83a 	sub	r16,r4,r5
    351c:	043f9d0e 	bge	zero,r16,3394 <___vfprintf_internal_r+0xb54>
    3520:	00800404 	movi	r2,16
    3524:	1402130e 	bge	r2,r16,3d74 <___vfprintf_internal_r+0x1534>
    3528:	dc400d17 	ldw	r17,52(sp)
    352c:	1027883a 	mov	r19,r2
    3530:	07000074 	movhi	fp,1
    3534:	e738fe84 	addi	fp,fp,-7174
    3538:	050001c4 	movi	r20,7
    353c:	00000306 	br	354c <___vfprintf_internal_r+0xd0c>
    3540:	18c00204 	addi	r3,r3,8
    3544:	843ffc04 	addi	r16,r16,-16
    3548:	9c020d0e 	bge	r19,r16,3d80 <___vfprintf_internal_r+0x1540>
    354c:	94800404 	addi	r18,r18,16
    3550:	8c400044 	addi	r17,r17,1
    3554:	1f000015 	stw	fp,0(r3)
    3558:	1cc00115 	stw	r19,4(r3)
    355c:	dc800e15 	stw	r18,56(sp)
    3560:	dc400d15 	stw	r17,52(sp)
    3564:	a47ff60e 	bge	r20,r17,3540 <___vfprintf_internal_r+0xd00>
    3568:	d9014f17 	ldw	r4,1340(sp)
    356c:	b00b883a 	mov	r5,r22
    3570:	d9800c04 	addi	r6,sp,48
    3574:	00027e80 	call	27e8 <__sprint_r>
    3578:	103e691e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    357c:	dc800e17 	ldw	r18,56(sp)
    3580:	dc400d17 	ldw	r17,52(sp)
    3584:	d8c01904 	addi	r3,sp,100
    3588:	003fee06 	br	3544 <___vfprintf_internal_r+0xd04>
    358c:	d8814717 	ldw	r2,1308(sp)
    3590:	143fffc4 	addi	r16,r2,-1
    3594:	043e970e 	bge	zero,r16,2ff4 <___vfprintf_internal_r+0x7b4>
    3598:	00800404 	movi	r2,16
    359c:	1400180e 	bge	r2,r16,3600 <___vfprintf_internal_r+0xdc0>
    35a0:	1029883a 	mov	r20,r2
    35a4:	07000074 	movhi	fp,1
    35a8:	e738fe84 	addi	fp,fp,-7174
    35ac:	054001c4 	movi	r21,7
    35b0:	00000306 	br	35c0 <___vfprintf_internal_r+0xd80>
    35b4:	9cc00204 	addi	r19,r19,8
    35b8:	843ffc04 	addi	r16,r16,-16
    35bc:	a400120e 	bge	r20,r16,3608 <___vfprintf_internal_r+0xdc8>
    35c0:	94800404 	addi	r18,r18,16
    35c4:	8c400044 	addi	r17,r17,1
    35c8:	9f000015 	stw	fp,0(r19)
    35cc:	9d000115 	stw	r20,4(r19)
    35d0:	dc800e15 	stw	r18,56(sp)
    35d4:	dc400d15 	stw	r17,52(sp)
    35d8:	ac7ff60e 	bge	r21,r17,35b4 <___vfprintf_internal_r+0xd74>
    35dc:	d9014f17 	ldw	r4,1340(sp)
    35e0:	b00b883a 	mov	r5,r22
    35e4:	d9800c04 	addi	r6,sp,48
    35e8:	00027e80 	call	27e8 <__sprint_r>
    35ec:	103e4c1e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    35f0:	dc800e17 	ldw	r18,56(sp)
    35f4:	dc400d17 	ldw	r17,52(sp)
    35f8:	dcc01904 	addi	r19,sp,100
    35fc:	003fee06 	br	35b8 <___vfprintf_internal_r+0xd78>
    3600:	07000074 	movhi	fp,1
    3604:	e738fe84 	addi	fp,fp,-7174
    3608:	9425883a 	add	r18,r18,r16
    360c:	8c400044 	addi	r17,r17,1
    3610:	008001c4 	movi	r2,7
    3614:	9f000015 	stw	fp,0(r19)
    3618:	9c000115 	stw	r16,4(r19)
    361c:	dc800e15 	stw	r18,56(sp)
    3620:	dc400d15 	stw	r17,52(sp)
    3624:	147e720e 	bge	r2,r17,2ff0 <___vfprintf_internal_r+0x7b0>
    3628:	d9014f17 	ldw	r4,1340(sp)
    362c:	b00b883a 	mov	r5,r22
    3630:	d9800c04 	addi	r6,sp,48
    3634:	00027e80 	call	27e8 <__sprint_r>
    3638:	103e391e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    363c:	dc800e17 	ldw	r18,56(sp)
    3640:	dc400d17 	ldw	r17,52(sp)
    3644:	dcc01904 	addi	r19,sp,100
    3648:	003e6a06 	br	2ff4 <___vfprintf_internal_r+0x7b4>
    364c:	d9014f17 	ldw	r4,1340(sp)
    3650:	b00b883a 	mov	r5,r22
    3654:	d9800c04 	addi	r6,sp,48
    3658:	d9c15115 	stw	r7,1348(sp)
    365c:	00027e80 	call	27e8 <__sprint_r>
    3660:	d9c15117 	ldw	r7,1348(sp)
    3664:	103e2e1e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    3668:	dc800e17 	ldw	r18,56(sp)
    366c:	dc400d17 	ldw	r17,52(sp)
    3670:	dd401904 	addi	r21,sp,100
    3674:	003dba06 	br	2d60 <___vfprintf_internal_r+0x520>
    3678:	d9014f17 	ldw	r4,1340(sp)
    367c:	b00b883a 	mov	r5,r22
    3680:	d9800c04 	addi	r6,sp,48
    3684:	00027e80 	call	27e8 <__sprint_r>
    3688:	103e251e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    368c:	dc800e17 	ldw	r18,56(sp)
    3690:	dc400d17 	ldw	r17,52(sp)
    3694:	dcc01904 	addi	r19,sp,100
    3698:	003e4206 	br	2fa4 <___vfprintf_internal_r+0x764>
    369c:	d9014f17 	ldw	r4,1340(sp)
    36a0:	b00b883a 	mov	r5,r22
    36a4:	d9800c04 	addi	r6,sp,48
    36a8:	00027e80 	call	27e8 <__sprint_r>
    36ac:	103e1c1e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    36b0:	dc800e17 	ldw	r18,56(sp)
    36b4:	dc400d17 	ldw	r17,52(sp)
    36b8:	d8c01904 	addi	r3,sp,100
    36bc:	003e2e06 	br	2f78 <___vfprintf_internal_r+0x738>
    36c0:	d9414c17 	ldw	r5,1328(sp)
    36c4:	2880004c 	andi	r2,r5,1
    36c8:	1005003a 	cmpeq	r2,r2,zero
    36cc:	103dda1e 	bne	r2,zero,2e38 <___vfprintf_internal_r+0x5f8>
    36d0:	003e9f06 	br	3150 <___vfprintf_internal_r+0x910>
    36d4:	d8c14117 	ldw	r3,1284(sp)
    36d8:	9125883a 	add	r18,r18,r4
    36dc:	8c400044 	addi	r17,r17,1
    36e0:	008001c4 	movi	r2,7
    36e4:	a8c00015 	stw	r3,0(r21)
    36e8:	a9000115 	stw	r4,4(r21)
    36ec:	dc800e15 	stw	r18,56(sp)
    36f0:	dc400d15 	stw	r17,52(sp)
    36f4:	14426616 	blt	r2,r17,4090 <___vfprintf_internal_r+0x1850>
    36f8:	a8c00204 	addi	r3,r21,8
    36fc:	d9414917 	ldw	r5,1316(sp)
    3700:	00800044 	movi	r2,1
    3704:	94800044 	addi	r18,r18,1
    3708:	8c400044 	addi	r17,r17,1
    370c:	18800115 	stw	r2,4(r3)
    3710:	008001c4 	movi	r2,7
    3714:	19400015 	stw	r5,0(r3)
    3718:	dc800e15 	stw	r18,56(sp)
    371c:	dc400d15 	stw	r17,52(sp)
    3720:	2021883a 	mov	r16,r4
    3724:	14425016 	blt	r2,r17,4068 <___vfprintf_internal_r+0x1828>
    3728:	19400204 	addi	r5,r3,8
    372c:	d9814717 	ldw	r6,1308(sp)
    3730:	8c400044 	addi	r17,r17,1
    3734:	dc400d15 	stw	r17,52(sp)
    3738:	3107c83a 	sub	r3,r6,r4
    373c:	d9014117 	ldw	r4,1284(sp)
    3740:	90e5883a 	add	r18,r18,r3
    3744:	28c00115 	stw	r3,4(r5)
    3748:	8105883a 	add	r2,r16,r4
    374c:	28800015 	stw	r2,0(r5)
    3750:	008001c4 	movi	r2,7
    3754:	dc800e15 	stw	r18,56(sp)
    3758:	147f1d16 	blt	r2,r17,33d0 <___vfprintf_internal_r+0xb90>
    375c:	28c00204 	addi	r3,r5,8
    3760:	003db506 	br	2e38 <___vfprintf_internal_r+0x5f8>
    3764:	3c000017 	ldw	r16,0(r7)
    3768:	3c400117 	ldw	r17,4(r7)
    376c:	39800204 	addi	r6,r7,8
    3770:	01000044 	movi	r4,1
    3774:	d9814015 	stw	r6,1280(sp)
    3778:	d8000405 	stb	zero,16(sp)
    377c:	003ebe06 	br	3278 <___vfprintf_internal_r+0xa38>
    3780:	3c000017 	ldw	r16,0(r7)
    3784:	3c400117 	ldw	r17,4(r7)
    3788:	38800204 	addi	r2,r7,8
    378c:	d8814015 	stw	r2,1280(sp)
    3790:	003eb706 	br	3270 <___vfprintf_internal_r+0xa30>
    3794:	3c000017 	ldw	r16,0(r7)
    3798:	3c400117 	ldw	r17,4(r7)
    379c:	39000204 	addi	r4,r7,8
    37a0:	d9014015 	stw	r4,1280(sp)
    37a4:	0009883a 	mov	r4,zero
    37a8:	d8000405 	stb	zero,16(sp)
    37ac:	003eb206 	br	3278 <___vfprintf_internal_r+0xa38>
    37b0:	38c00017 	ldw	r3,0(r7)
    37b4:	39c00104 	addi	r7,r7,4
    37b8:	d8c14a15 	stw	r3,1320(sp)
    37bc:	1800d10e 	bge	r3,zero,3b04 <___vfprintf_internal_r+0x12c4>
    37c0:	00c7c83a 	sub	r3,zero,r3
    37c4:	d8c14a15 	stw	r3,1320(sp)
    37c8:	d9014c17 	ldw	r4,1328(sp)
    37cc:	b8c00007 	ldb	r3,0(r23)
    37d0:	21000114 	ori	r4,r4,4
    37d4:	d9014c15 	stw	r4,1328(sp)
    37d8:	003c9806 	br	2a3c <___vfprintf_internal_r+0x1fc>
    37dc:	d9814c17 	ldw	r6,1328(sp)
    37e0:	3080080c 	andi	r2,r6,32
    37e4:	1001f026 	beq	r2,zero,3fa8 <___vfprintf_internal_r+0x1768>
    37e8:	d9014b17 	ldw	r4,1324(sp)
    37ec:	38800017 	ldw	r2,0(r7)
    37f0:	39c00104 	addi	r7,r7,4
    37f4:	d9c14015 	stw	r7,1280(sp)
    37f8:	2007d7fa 	srai	r3,r4,31
    37fc:	d9c14017 	ldw	r7,1280(sp)
    3800:	11000015 	stw	r4,0(r2)
    3804:	10c00115 	stw	r3,4(r2)
    3808:	003c6906 	br	29b0 <___vfprintf_internal_r+0x170>
    380c:	b8c00007 	ldb	r3,0(r23)
    3810:	00801b04 	movi	r2,108
    3814:	18824f26 	beq	r3,r2,4154 <___vfprintf_internal_r+0x1914>
    3818:	d9414c17 	ldw	r5,1328(sp)
    381c:	29400414 	ori	r5,r5,16
    3820:	d9414c15 	stw	r5,1328(sp)
    3824:	003c8506 	br	2a3c <___vfprintf_internal_r+0x1fc>
    3828:	d9814c17 	ldw	r6,1328(sp)
    382c:	b8c00007 	ldb	r3,0(r23)
    3830:	31800814 	ori	r6,r6,32
    3834:	d9814c15 	stw	r6,1328(sp)
    3838:	003c8006 	br	2a3c <___vfprintf_internal_r+0x1fc>
    383c:	d8814c17 	ldw	r2,1328(sp)
    3840:	3c000017 	ldw	r16,0(r7)
    3844:	00c01e04 	movi	r3,120
    3848:	10800094 	ori	r2,r2,2
    384c:	d8814c15 	stw	r2,1328(sp)
    3850:	39c00104 	addi	r7,r7,4
    3854:	01400074 	movhi	r5,1
    3858:	2978e704 	addi	r5,r5,-7268
    385c:	00800c04 	movi	r2,48
    3860:	0023883a 	mov	r17,zero
    3864:	01000084 	movi	r4,2
    3868:	d9c14015 	stw	r7,1280(sp)
    386c:	d8c14d15 	stw	r3,1332(sp)
    3870:	d9414415 	stw	r5,1296(sp)
    3874:	d8800445 	stb	r2,17(sp)
    3878:	d8c00485 	stb	r3,18(sp)
    387c:	d8000405 	stb	zero,16(sp)
    3880:	003e7d06 	br	3278 <___vfprintf_internal_r+0xa38>
    3884:	d8814c17 	ldw	r2,1328(sp)
    3888:	b8c00007 	ldb	r3,0(r23)
    388c:	10801014 	ori	r2,r2,64
    3890:	d8814c15 	stw	r2,1328(sp)
    3894:	003c6906 	br	2a3c <___vfprintf_internal_r+0x1fc>
    3898:	d9414c17 	ldw	r5,1328(sp)
    389c:	2880020c 	andi	r2,r5,8
    38a0:	1001df26 	beq	r2,zero,4020 <___vfprintf_internal_r+0x17e0>
    38a4:	39800017 	ldw	r6,0(r7)
    38a8:	38800204 	addi	r2,r7,8
    38ac:	d8814015 	stw	r2,1280(sp)
    38b0:	d9814215 	stw	r6,1288(sp)
    38b4:	39c00117 	ldw	r7,4(r7)
    38b8:	d9c14315 	stw	r7,1292(sp)
    38bc:	d9014217 	ldw	r4,1288(sp)
    38c0:	d9414317 	ldw	r5,1292(sp)
    38c4:	0008c540 	call	8c54 <__isinfd>
    38c8:	10021726 	beq	r2,zero,4128 <___vfprintf_internal_r+0x18e8>
    38cc:	d9014217 	ldw	r4,1288(sp)
    38d0:	d9414317 	ldw	r5,1292(sp)
    38d4:	000d883a 	mov	r6,zero
    38d8:	000f883a 	mov	r7,zero
    38dc:	000ac2c0 	call	ac2c <__ltdf2>
    38e0:	1002ca16 	blt	r2,zero,440c <___vfprintf_internal_r+0x1bcc>
    38e4:	d9414d17 	ldw	r5,1332(sp)
    38e8:	008011c4 	movi	r2,71
    38ec:	11420a16 	blt	r2,r5,4118 <___vfprintf_internal_r+0x18d8>
    38f0:	01800074 	movhi	r6,1
    38f4:	31b8ec04 	addi	r6,r6,-7248
    38f8:	d9814115 	stw	r6,1284(sp)
    38fc:	d9014c17 	ldw	r4,1328(sp)
    3900:	00c000c4 	movi	r3,3
    3904:	00bfdfc4 	movi	r2,-129
    3908:	2088703a 	and	r4,r4,r2
    390c:	180f883a 	mov	r7,r3
    3910:	d8c14515 	stw	r3,1300(sp)
    3914:	d9014c15 	stw	r4,1328(sp)
    3918:	d8014615 	stw	zero,1304(sp)
    391c:	003e6a06 	br	32c8 <___vfprintf_internal_r+0xa88>
    3920:	38800017 	ldw	r2,0(r7)
    3924:	00c00044 	movi	r3,1
    3928:	39c00104 	addi	r7,r7,4
    392c:	d9c14015 	stw	r7,1280(sp)
    3930:	d9000f04 	addi	r4,sp,60
    3934:	180f883a 	mov	r7,r3
    3938:	d8c14515 	stw	r3,1300(sp)
    393c:	d9014115 	stw	r4,1284(sp)
    3940:	d8800f05 	stb	r2,60(sp)
    3944:	d8000405 	stb	zero,16(sp)
    3948:	003cac06 	br	2bfc <___vfprintf_internal_r+0x3bc>
    394c:	01400074 	movhi	r5,1
    3950:	2978f204 	addi	r5,r5,-7224
    3954:	d9414415 	stw	r5,1296(sp)
    3958:	d9814c17 	ldw	r6,1328(sp)
    395c:	3080080c 	andi	r2,r6,32
    3960:	1000f926 	beq	r2,zero,3d48 <___vfprintf_internal_r+0x1508>
    3964:	3c000017 	ldw	r16,0(r7)
    3968:	3c400117 	ldw	r17,4(r7)
    396c:	38800204 	addi	r2,r7,8
    3970:	d8814015 	stw	r2,1280(sp)
    3974:	d9414c17 	ldw	r5,1328(sp)
    3978:	2880004c 	andi	r2,r5,1
    397c:	1005003a 	cmpeq	r2,r2,zero
    3980:	1000b31e 	bne	r2,zero,3c50 <___vfprintf_internal_r+0x1410>
    3984:	8444b03a 	or	r2,r16,r17
    3988:	1000b126 	beq	r2,zero,3c50 <___vfprintf_internal_r+0x1410>
    398c:	d9814d17 	ldw	r6,1332(sp)
    3990:	29400094 	ori	r5,r5,2
    3994:	00800c04 	movi	r2,48
    3998:	01000084 	movi	r4,2
    399c:	d9414c15 	stw	r5,1328(sp)
    39a0:	d8800445 	stb	r2,17(sp)
    39a4:	d9800485 	stb	r6,18(sp)
    39a8:	d8000405 	stb	zero,16(sp)
    39ac:	003e3206 	br	3278 <___vfprintf_internal_r+0xa38>
    39b0:	01800074 	movhi	r6,1
    39b4:	31b8e704 	addi	r6,r6,-7268
    39b8:	d9814415 	stw	r6,1296(sp)
    39bc:	003fe606 	br	3958 <___vfprintf_internal_r+0x1118>
    39c0:	00800ac4 	movi	r2,43
    39c4:	d8800405 	stb	r2,16(sp)
    39c8:	b8c00007 	ldb	r3,0(r23)
    39cc:	003c1b06 	br	2a3c <___vfprintf_internal_r+0x1fc>
    39d0:	d8814c17 	ldw	r2,1328(sp)
    39d4:	b8c00007 	ldb	r3,0(r23)
    39d8:	10800054 	ori	r2,r2,1
    39dc:	d8814c15 	stw	r2,1328(sp)
    39e0:	003c1606 	br	2a3c <___vfprintf_internal_r+0x1fc>
    39e4:	d8800407 	ldb	r2,16(sp)
    39e8:	1000461e 	bne	r2,zero,3b04 <___vfprintf_internal_r+0x12c4>
    39ec:	00800804 	movi	r2,32
    39f0:	d8800405 	stb	r2,16(sp)
    39f4:	b8c00007 	ldb	r3,0(r23)
    39f8:	003c1006 	br	2a3c <___vfprintf_internal_r+0x1fc>
    39fc:	d9814c17 	ldw	r6,1328(sp)
    3a00:	b8c00007 	ldb	r3,0(r23)
    3a04:	31800214 	ori	r6,r6,8
    3a08:	d9814c15 	stw	r6,1328(sp)
    3a0c:	003c0b06 	br	2a3c <___vfprintf_internal_r+0x1fc>
    3a10:	0007883a 	mov	r3,zero
    3a14:	01000244 	movi	r4,9
    3a18:	188002a4 	muli	r2,r3,10
    3a1c:	b8c00007 	ldb	r3,0(r23)
    3a20:	d9814d17 	ldw	r6,1332(sp)
    3a24:	bdc00044 	addi	r23,r23,1
    3a28:	d8c14d15 	stw	r3,1332(sp)
    3a2c:	d9414d17 	ldw	r5,1332(sp)
    3a30:	3085883a 	add	r2,r6,r2
    3a34:	10fff404 	addi	r3,r2,-48
    3a38:	28bff404 	addi	r2,r5,-48
    3a3c:	20bff62e 	bgeu	r4,r2,3a18 <___vfprintf_internal_r+0x11d8>
    3a40:	d8c14a15 	stw	r3,1320(sp)
    3a44:	003bff06 	br	2a44 <___vfprintf_internal_r+0x204>
    3a48:	d9414c17 	ldw	r5,1328(sp)
    3a4c:	b8c00007 	ldb	r3,0(r23)
    3a50:	29402014 	ori	r5,r5,128
    3a54:	d9414c15 	stw	r5,1328(sp)
    3a58:	003bf806 	br	2a3c <___vfprintf_internal_r+0x1fc>
    3a5c:	b8c00007 	ldb	r3,0(r23)
    3a60:	00800a84 	movi	r2,42
    3a64:	bdc00044 	addi	r23,r23,1
    3a68:	18831526 	beq	r3,r2,46c0 <___vfprintf_internal_r+0x1e80>
    3a6c:	d8c14d15 	stw	r3,1332(sp)
    3a70:	18bff404 	addi	r2,r3,-48
    3a74:	00c00244 	movi	r3,9
    3a78:	18827836 	bltu	r3,r2,445c <___vfprintf_internal_r+0x1c1c>
    3a7c:	000d883a 	mov	r6,zero
    3a80:	308002a4 	muli	r2,r6,10
    3a84:	b9800007 	ldb	r6,0(r23)
    3a88:	d9414d17 	ldw	r5,1332(sp)
    3a8c:	bdc00044 	addi	r23,r23,1
    3a90:	d9814d15 	stw	r6,1332(sp)
    3a94:	d9014d17 	ldw	r4,1332(sp)
    3a98:	1145883a 	add	r2,r2,r5
    3a9c:	11bff404 	addi	r6,r2,-48
    3aa0:	20bff404 	addi	r2,r4,-48
    3aa4:	18bff62e 	bgeu	r3,r2,3a80 <___vfprintf_internal_r+0x1240>
    3aa8:	3027883a 	mov	r19,r6
    3aac:	303be50e 	bge	r6,zero,2a44 <___vfprintf_internal_r+0x204>
    3ab0:	04ffffc4 	movi	r19,-1
    3ab4:	003be306 	br	2a44 <___vfprintf_internal_r+0x204>
    3ab8:	d8000405 	stb	zero,16(sp)
    3abc:	39800017 	ldw	r6,0(r7)
    3ac0:	39c00104 	addi	r7,r7,4
    3ac4:	d9c14015 	stw	r7,1280(sp)
    3ac8:	d9814115 	stw	r6,1284(sp)
    3acc:	3001c926 	beq	r6,zero,41f4 <___vfprintf_internal_r+0x19b4>
    3ad0:	98000e16 	blt	r19,zero,3b0c <___vfprintf_internal_r+0x12cc>
    3ad4:	d9014117 	ldw	r4,1284(sp)
    3ad8:	000b883a 	mov	r5,zero
    3adc:	980d883a 	mov	r6,r19
    3ae0:	00073700 	call	7370 <memchr>
    3ae4:	10025926 	beq	r2,zero,444c <___vfprintf_internal_r+0x1c0c>
    3ae8:	d8c14117 	ldw	r3,1284(sp)
    3aec:	10cfc83a 	sub	r7,r2,r3
    3af0:	99c19e16 	blt	r19,r7,416c <___vfprintf_internal_r+0x192c>
    3af4:	d9c14515 	stw	r7,1300(sp)
    3af8:	38000916 	blt	r7,zero,3b20 <___vfprintf_internal_r+0x12e0>
    3afc:	d8014615 	stw	zero,1304(sp)
    3b00:	003df106 	br	32c8 <___vfprintf_internal_r+0xa88>
    3b04:	b8c00007 	ldb	r3,0(r23)
    3b08:	003bcc06 	br	2a3c <___vfprintf_internal_r+0x1fc>
    3b0c:	d9014117 	ldw	r4,1284(sp)
    3b10:	00027740 	call	2774 <strlen>
    3b14:	d8814515 	stw	r2,1300(sp)
    3b18:	100f883a 	mov	r7,r2
    3b1c:	103ff70e 	bge	r2,zero,3afc <___vfprintf_internal_r+0x12bc>
    3b20:	d8014515 	stw	zero,1300(sp)
    3b24:	d8014615 	stw	zero,1304(sp)
    3b28:	003de706 	br	32c8 <___vfprintf_internal_r+0xa88>
    3b2c:	20c03fcc 	andi	r3,r4,255
    3b30:	00800044 	movi	r2,1
    3b34:	18802d26 	beq	r3,r2,3bec <___vfprintf_internal_r+0x13ac>
    3b38:	18800e36 	bltu	r3,r2,3b74 <___vfprintf_internal_r+0x1334>
    3b3c:	00800084 	movi	r2,2
    3b40:	1880fa26 	beq	r3,r2,3f2c <___vfprintf_internal_r+0x16ec>
    3b44:	01000074 	movhi	r4,1
    3b48:	2138f704 	addi	r4,r4,-7204
    3b4c:	00027740 	call	2774 <strlen>
    3b50:	100f883a 	mov	r7,r2
    3b54:	dcc14515 	stw	r19,1300(sp)
    3b58:	9880010e 	bge	r19,r2,3b60 <___vfprintf_internal_r+0x1320>
    3b5c:	d8814515 	stw	r2,1300(sp)
    3b60:	00800074 	movhi	r2,1
    3b64:	10b8f704 	addi	r2,r2,-7204
    3b68:	dcc14615 	stw	r19,1304(sp)
    3b6c:	d8814115 	stw	r2,1284(sp)
    3b70:	003dd506 	br	32c8 <___vfprintf_internal_r+0xa88>
    3b74:	d9401904 	addi	r5,sp,100
    3b78:	dd000f04 	addi	r20,sp,60
    3b7c:	d9414115 	stw	r5,1284(sp)
    3b80:	880a977a 	slli	r5,r17,29
    3b84:	d9814117 	ldw	r6,1284(sp)
    3b88:	8004d0fa 	srli	r2,r16,3
    3b8c:	8806d0fa 	srli	r3,r17,3
    3b90:	810001cc 	andi	r4,r16,7
    3b94:	2884b03a 	or	r2,r5,r2
    3b98:	31bfffc4 	addi	r6,r6,-1
    3b9c:	21000c04 	addi	r4,r4,48
    3ba0:	d9814115 	stw	r6,1284(sp)
    3ba4:	10cab03a 	or	r5,r2,r3
    3ba8:	31000005 	stb	r4,0(r6)
    3bac:	1021883a 	mov	r16,r2
    3bb0:	1823883a 	mov	r17,r3
    3bb4:	283ff21e 	bne	r5,zero,3b80 <___vfprintf_internal_r+0x1340>
    3bb8:	d8c14c17 	ldw	r3,1328(sp)
    3bbc:	1880004c 	andi	r2,r3,1
    3bc0:	1005003a 	cmpeq	r2,r2,zero
    3bc4:	103db91e 	bne	r2,zero,32ac <___vfprintf_internal_r+0xa6c>
    3bc8:	20803fcc 	andi	r2,r4,255
    3bcc:	1080201c 	xori	r2,r2,128
    3bd0:	10bfe004 	addi	r2,r2,-128
    3bd4:	00c00c04 	movi	r3,48
    3bd8:	10fdb426 	beq	r2,r3,32ac <___vfprintf_internal_r+0xa6c>
    3bdc:	31bfffc4 	addi	r6,r6,-1
    3be0:	d9814115 	stw	r6,1284(sp)
    3be4:	30c00005 	stb	r3,0(r6)
    3be8:	003db006 	br	32ac <___vfprintf_internal_r+0xa6c>
    3bec:	88800068 	cmpgeui	r2,r17,1
    3bf0:	10002c1e 	bne	r2,zero,3ca4 <___vfprintf_internal_r+0x1464>
    3bf4:	8800021e 	bne	r17,zero,3c00 <___vfprintf_internal_r+0x13c0>
    3bf8:	00800244 	movi	r2,9
    3bfc:	14002936 	bltu	r2,r16,3ca4 <___vfprintf_internal_r+0x1464>
    3c00:	d90018c4 	addi	r4,sp,99
    3c04:	dd000f04 	addi	r20,sp,60
    3c08:	d9014115 	stw	r4,1284(sp)
    3c0c:	d9014117 	ldw	r4,1284(sp)
    3c10:	80800c04 	addi	r2,r16,48
    3c14:	20800005 	stb	r2,0(r4)
    3c18:	003da406 	br	32ac <___vfprintf_internal_r+0xa6c>
    3c1c:	dc400d17 	ldw	r17,52(sp)
    3c20:	07000074 	movhi	fp,1
    3c24:	e738fe84 	addi	fp,fp,-7174
    3c28:	9425883a 	add	r18,r18,r16
    3c2c:	8c400044 	addi	r17,r17,1
    3c30:	008001c4 	movi	r2,7
    3c34:	1f000015 	stw	fp,0(r3)
    3c38:	1c000115 	stw	r16,4(r3)
    3c3c:	dc800e15 	stw	r18,56(sp)
    3c40:	dc400d15 	stw	r17,52(sp)
    3c44:	147de216 	blt	r2,r17,33d0 <___vfprintf_internal_r+0xb90>
    3c48:	18c00204 	addi	r3,r3,8
    3c4c:	003c7a06 	br	2e38 <___vfprintf_internal_r+0x5f8>
    3c50:	01000084 	movi	r4,2
    3c54:	d8000405 	stb	zero,16(sp)
    3c58:	003d8706 	br	3278 <___vfprintf_internal_r+0xa38>
    3c5c:	d9814c17 	ldw	r6,1328(sp)
    3c60:	30c4703a 	and	r2,r6,r3
    3c64:	1005003a 	cmpeq	r2,r2,zero
    3c68:	103cb926 	beq	r2,zero,2f50 <___vfprintf_internal_r+0x710>
    3c6c:	d9014117 	ldw	r4,1284(sp)
    3c70:	94800044 	addi	r18,r18,1
    3c74:	8c400044 	addi	r17,r17,1
    3c78:	008001c4 	movi	r2,7
    3c7c:	a9000015 	stw	r4,0(r21)
    3c80:	a8c00115 	stw	r3,4(r21)
    3c84:	dc800e15 	stw	r18,56(sp)
    3c88:	dc400d15 	stw	r17,52(sp)
    3c8c:	147e6616 	blt	r2,r17,3628 <___vfprintf_internal_r+0xde8>
    3c90:	acc00204 	addi	r19,r21,8
    3c94:	003cd706 	br	2ff4 <___vfprintf_internal_r+0x7b4>
    3c98:	07000074 	movhi	fp,1
    3c9c:	e738fe84 	addi	fp,fp,-7174
    3ca0:	003c4f06 	br	2de0 <___vfprintf_internal_r+0x5a0>
    3ca4:	dd000f04 	addi	r20,sp,60
    3ca8:	dc801904 	addi	r18,sp,100
    3cac:	8009883a 	mov	r4,r16
    3cb0:	880b883a 	mov	r5,r17
    3cb4:	01800284 	movi	r6,10
    3cb8:	000f883a 	mov	r7,zero
    3cbc:	000993c0 	call	993c <__umoddi3>
    3cc0:	12000c04 	addi	r8,r2,48
    3cc4:	94bfffc4 	addi	r18,r18,-1
    3cc8:	8009883a 	mov	r4,r16
    3ccc:	880b883a 	mov	r5,r17
    3cd0:	01800284 	movi	r6,10
    3cd4:	000f883a 	mov	r7,zero
    3cd8:	92000005 	stb	r8,0(r18)
    3cdc:	00093600 	call	9360 <__udivdi3>
    3ce0:	1009883a 	mov	r4,r2
    3ce4:	1021883a 	mov	r16,r2
    3ce8:	18800068 	cmpgeui	r2,r3,1
    3cec:	1823883a 	mov	r17,r3
    3cf0:	103fee1e 	bne	r2,zero,3cac <___vfprintf_internal_r+0x146c>
    3cf4:	1800021e 	bne	r3,zero,3d00 <___vfprintf_internal_r+0x14c0>
    3cf8:	00800244 	movi	r2,9
    3cfc:	113feb36 	bltu	r2,r4,3cac <___vfprintf_internal_r+0x146c>
    3d00:	94bfffc4 	addi	r18,r18,-1
    3d04:	dc814115 	stw	r18,1284(sp)
    3d08:	003fc006 	br	3c0c <___vfprintf_internal_r+0x13cc>
    3d0c:	d9014c17 	ldw	r4,1328(sp)
    3d10:	2080004c 	andi	r2,r4,1
    3d14:	10009a1e 	bne	r2,zero,3f80 <___vfprintf_internal_r+0x1740>
    3d18:	d9401904 	addi	r5,sp,100
    3d1c:	dd000f04 	addi	r20,sp,60
    3d20:	d9414115 	stw	r5,1284(sp)
    3d24:	003d6106 	br	32ac <___vfprintf_internal_r+0xa6c>
    3d28:	d9014f17 	ldw	r4,1340(sp)
    3d2c:	b00b883a 	mov	r5,r22
    3d30:	d9800c04 	addi	r6,sp,48
    3d34:	00027e80 	call	27e8 <__sprint_r>
    3d38:	103c791e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    3d3c:	dc800e17 	ldw	r18,56(sp)
    3d40:	d8c01904 	addi	r3,sp,100
    3d44:	003cff06 	br	3144 <___vfprintf_internal_r+0x904>
    3d48:	d8c14c17 	ldw	r3,1328(sp)
    3d4c:	1880040c 	andi	r2,r3,16
    3d50:	1000711e 	bne	r2,zero,3f18 <___vfprintf_internal_r+0x16d8>
    3d54:	d9014c17 	ldw	r4,1328(sp)
    3d58:	2080100c 	andi	r2,r4,64
    3d5c:	10006e26 	beq	r2,zero,3f18 <___vfprintf_internal_r+0x16d8>
    3d60:	3c00000b 	ldhu	r16,0(r7)
    3d64:	0023883a 	mov	r17,zero
    3d68:	39c00104 	addi	r7,r7,4
    3d6c:	d9c14015 	stw	r7,1280(sp)
    3d70:	003f0006 	br	3974 <___vfprintf_internal_r+0x1134>
    3d74:	dc400d17 	ldw	r17,52(sp)
    3d78:	07000074 	movhi	fp,1
    3d7c:	e738fe84 	addi	fp,fp,-7174
    3d80:	9425883a 	add	r18,r18,r16
    3d84:	8c400044 	addi	r17,r17,1
    3d88:	008001c4 	movi	r2,7
    3d8c:	1f000015 	stw	fp,0(r3)
    3d90:	1c000115 	stw	r16,4(r3)
    3d94:	dc800e15 	stw	r18,56(sp)
    3d98:	dc400d15 	stw	r17,52(sp)
    3d9c:	147d7616 	blt	r2,r17,3378 <___vfprintf_internal_r+0xb38>
    3da0:	18c00204 	addi	r3,r3,8
    3da4:	003d7b06 	br	3394 <___vfprintf_internal_r+0xb54>
    3da8:	dc800e17 	ldw	r18,56(sp)
    3dac:	dc400d17 	ldw	r17,52(sp)
    3db0:	07000074 	movhi	fp,1
    3db4:	e7390284 	addi	fp,fp,-7158
    3db8:	003bc006 	br	2cbc <___vfprintf_internal_r+0x47c>
    3dbc:	d9014f17 	ldw	r4,1340(sp)
    3dc0:	b00b883a 	mov	r5,r22
    3dc4:	d9800c04 	addi	r6,sp,48
    3dc8:	00027e80 	call	27e8 <__sprint_r>
    3dcc:	103c541e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    3dd0:	dc800e17 	ldw	r18,56(sp)
    3dd4:	d8c01904 	addi	r3,sp,100
    3dd8:	003ce906 	br	3180 <___vfprintf_internal_r+0x940>
    3ddc:	3c000017 	ldw	r16,0(r7)
    3de0:	0009883a 	mov	r4,zero
    3de4:	39c00104 	addi	r7,r7,4
    3de8:	0023883a 	mov	r17,zero
    3dec:	d9c14015 	stw	r7,1280(sp)
    3df0:	d8000405 	stb	zero,16(sp)
    3df4:	003d2006 	br	3278 <___vfprintf_internal_r+0xa38>
    3df8:	38800017 	ldw	r2,0(r7)
    3dfc:	39c00104 	addi	r7,r7,4
    3e00:	d9c14015 	stw	r7,1280(sp)
    3e04:	1023d7fa 	srai	r17,r2,31
    3e08:	1021883a 	mov	r16,r2
    3e0c:	003d1806 	br	3270 <___vfprintf_internal_r+0xa30>
    3e10:	3c000017 	ldw	r16,0(r7)
    3e14:	01000044 	movi	r4,1
    3e18:	39c00104 	addi	r7,r7,4
    3e1c:	0023883a 	mov	r17,zero
    3e20:	d9c14015 	stw	r7,1280(sp)
    3e24:	d8000405 	stb	zero,16(sp)
    3e28:	003d1306 	br	3278 <___vfprintf_internal_r+0xa38>
    3e2c:	00800074 	movhi	r2,1
    3e30:	10b8fe04 	addi	r2,r2,-7176
    3e34:	94800044 	addi	r18,r18,1
    3e38:	8c400044 	addi	r17,r17,1
    3e3c:	a8800015 	stw	r2,0(r21)
    3e40:	00c00044 	movi	r3,1
    3e44:	008001c4 	movi	r2,7
    3e48:	a8c00115 	stw	r3,4(r21)
    3e4c:	dc800e15 	stw	r18,56(sp)
    3e50:	dc400d15 	stw	r17,52(sp)
    3e54:	1440ca16 	blt	r2,r17,4180 <___vfprintf_internal_r+0x1940>
    3e58:	a8c00204 	addi	r3,r21,8
    3e5c:	2000061e 	bne	r4,zero,3e78 <___vfprintf_internal_r+0x1638>
    3e60:	d9414717 	ldw	r5,1308(sp)
    3e64:	2800041e 	bne	r5,zero,3e78 <___vfprintf_internal_r+0x1638>
    3e68:	d9814c17 	ldw	r6,1328(sp)
    3e6c:	3080004c 	andi	r2,r6,1
    3e70:	1005003a 	cmpeq	r2,r2,zero
    3e74:	103bf01e 	bne	r2,zero,2e38 <___vfprintf_internal_r+0x5f8>
    3e78:	00800044 	movi	r2,1
    3e7c:	dc400d17 	ldw	r17,52(sp)
    3e80:	18800115 	stw	r2,4(r3)
    3e84:	d8814917 	ldw	r2,1316(sp)
    3e88:	94800044 	addi	r18,r18,1
    3e8c:	8c400044 	addi	r17,r17,1
    3e90:	18800015 	stw	r2,0(r3)
    3e94:	008001c4 	movi	r2,7
    3e98:	dc800e15 	stw	r18,56(sp)
    3e9c:	dc400d15 	stw	r17,52(sp)
    3ea0:	1440ca16 	blt	r2,r17,41cc <___vfprintf_internal_r+0x198c>
    3ea4:	18c00204 	addi	r3,r3,8
    3ea8:	0121c83a 	sub	r16,zero,r4
    3eac:	0400500e 	bge	zero,r16,3ff0 <___vfprintf_internal_r+0x17b0>
    3eb0:	00800404 	movi	r2,16
    3eb4:	1400800e 	bge	r2,r16,40b8 <___vfprintf_internal_r+0x1878>
    3eb8:	1027883a 	mov	r19,r2
    3ebc:	07000074 	movhi	fp,1
    3ec0:	e738fe84 	addi	fp,fp,-7174
    3ec4:	050001c4 	movi	r20,7
    3ec8:	00000306 	br	3ed8 <___vfprintf_internal_r+0x1698>
    3ecc:	18c00204 	addi	r3,r3,8
    3ed0:	843ffc04 	addi	r16,r16,-16
    3ed4:	9c007a0e 	bge	r19,r16,40c0 <___vfprintf_internal_r+0x1880>
    3ed8:	94800404 	addi	r18,r18,16
    3edc:	8c400044 	addi	r17,r17,1
    3ee0:	1f000015 	stw	fp,0(r3)
    3ee4:	1cc00115 	stw	r19,4(r3)
    3ee8:	dc800e15 	stw	r18,56(sp)
    3eec:	dc400d15 	stw	r17,52(sp)
    3ef0:	a47ff60e 	bge	r20,r17,3ecc <___vfprintf_internal_r+0x168c>
    3ef4:	d9014f17 	ldw	r4,1340(sp)
    3ef8:	b00b883a 	mov	r5,r22
    3efc:	d9800c04 	addi	r6,sp,48
    3f00:	00027e80 	call	27e8 <__sprint_r>
    3f04:	103c061e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    3f08:	dc800e17 	ldw	r18,56(sp)
    3f0c:	dc400d17 	ldw	r17,52(sp)
    3f10:	d8c01904 	addi	r3,sp,100
    3f14:	003fee06 	br	3ed0 <___vfprintf_internal_r+0x1690>
    3f18:	3c000017 	ldw	r16,0(r7)
    3f1c:	0023883a 	mov	r17,zero
    3f20:	39c00104 	addi	r7,r7,4
    3f24:	d9c14015 	stw	r7,1280(sp)
    3f28:	003e9206 	br	3974 <___vfprintf_internal_r+0x1134>
    3f2c:	d9401904 	addi	r5,sp,100
    3f30:	dd000f04 	addi	r20,sp,60
    3f34:	d9414115 	stw	r5,1284(sp)
    3f38:	d9814417 	ldw	r6,1296(sp)
    3f3c:	880a973a 	slli	r5,r17,28
    3f40:	8004d13a 	srli	r2,r16,4
    3f44:	810003cc 	andi	r4,r16,15
    3f48:	3109883a 	add	r4,r6,r4
    3f4c:	2884b03a 	or	r2,r5,r2
    3f50:	21400003 	ldbu	r5,0(r4)
    3f54:	d9014117 	ldw	r4,1284(sp)
    3f58:	8806d13a 	srli	r3,r17,4
    3f5c:	1021883a 	mov	r16,r2
    3f60:	213fffc4 	addi	r4,r4,-1
    3f64:	d9014115 	stw	r4,1284(sp)
    3f68:	d9814117 	ldw	r6,1284(sp)
    3f6c:	10c8b03a 	or	r4,r2,r3
    3f70:	1823883a 	mov	r17,r3
    3f74:	31400005 	stb	r5,0(r6)
    3f78:	203fef1e 	bne	r4,zero,3f38 <___vfprintf_internal_r+0x16f8>
    3f7c:	003ccb06 	br	32ac <___vfprintf_internal_r+0xa6c>
    3f80:	00800c04 	movi	r2,48
    3f84:	d98018c4 	addi	r6,sp,99
    3f88:	dd000f04 	addi	r20,sp,60
    3f8c:	d88018c5 	stb	r2,99(sp)
    3f90:	d9814115 	stw	r6,1284(sp)
    3f94:	003cc506 	br	32ac <___vfprintf_internal_r+0xa6c>
    3f98:	dc400d17 	ldw	r17,52(sp)
    3f9c:	07000074 	movhi	fp,1
    3fa0:	e7390284 	addi	fp,fp,-7158
    3fa4:	003bc706 	br	2ec4 <___vfprintf_internal_r+0x684>
    3fa8:	d9414c17 	ldw	r5,1328(sp)
    3fac:	2880040c 	andi	r2,r5,16
    3fb0:	10007c26 	beq	r2,zero,41a4 <___vfprintf_internal_r+0x1964>
    3fb4:	38800017 	ldw	r2,0(r7)
    3fb8:	39c00104 	addi	r7,r7,4
    3fbc:	d9c14015 	stw	r7,1280(sp)
    3fc0:	d9814b17 	ldw	r6,1324(sp)
    3fc4:	d9c14017 	ldw	r7,1280(sp)
    3fc8:	11800015 	stw	r6,0(r2)
    3fcc:	003a7806 	br	29b0 <___vfprintf_internal_r+0x170>
    3fd0:	d9014f17 	ldw	r4,1340(sp)
    3fd4:	b00b883a 	mov	r5,r22
    3fd8:	d9800c04 	addi	r6,sp,48
    3fdc:	00027e80 	call	27e8 <__sprint_r>
    3fe0:	103bcf1e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    3fe4:	dc800e17 	ldw	r18,56(sp)
    3fe8:	dc400d17 	ldw	r17,52(sp)
    3fec:	d8c01904 	addi	r3,sp,100
    3ff0:	d9014717 	ldw	r4,1308(sp)
    3ff4:	d9414117 	ldw	r5,1284(sp)
    3ff8:	8c400044 	addi	r17,r17,1
    3ffc:	9125883a 	add	r18,r18,r4
    4000:	008001c4 	movi	r2,7
    4004:	19400015 	stw	r5,0(r3)
    4008:	19000115 	stw	r4,4(r3)
    400c:	dc800e15 	stw	r18,56(sp)
    4010:	dc400d15 	stw	r17,52(sp)
    4014:	147cee16 	blt	r2,r17,33d0 <___vfprintf_internal_r+0xb90>
    4018:	18c00204 	addi	r3,r3,8
    401c:	003b8606 	br	2e38 <___vfprintf_internal_r+0x5f8>
    4020:	38c00017 	ldw	r3,0(r7)
    4024:	39000204 	addi	r4,r7,8
    4028:	d9014015 	stw	r4,1280(sp)
    402c:	d8c14215 	stw	r3,1288(sp)
    4030:	39c00117 	ldw	r7,4(r7)
    4034:	d9c14315 	stw	r7,1292(sp)
    4038:	003e2006 	br	38bc <___vfprintf_internal_r+0x107c>
    403c:	0005883a 	mov	r2,zero
    4040:	1409c83a 	sub	r4,r2,r16
    4044:	1105803a 	cmpltu	r2,r2,r4
    4048:	044bc83a 	sub	r5,zero,r17
    404c:	2885c83a 	sub	r2,r5,r2
    4050:	2021883a 	mov	r16,r4
    4054:	1023883a 	mov	r17,r2
    4058:	01000044 	movi	r4,1
    405c:	00800b44 	movi	r2,45
    4060:	d8800405 	stb	r2,16(sp)
    4064:	003c8406 	br	3278 <___vfprintf_internal_r+0xa38>
    4068:	d9014f17 	ldw	r4,1340(sp)
    406c:	b00b883a 	mov	r5,r22
    4070:	d9800c04 	addi	r6,sp,48
    4074:	00027e80 	call	27e8 <__sprint_r>
    4078:	103ba91e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    407c:	dc800e17 	ldw	r18,56(sp)
    4080:	dc400d17 	ldw	r17,52(sp)
    4084:	d9000517 	ldw	r4,20(sp)
    4088:	d9401904 	addi	r5,sp,100
    408c:	003da706 	br	372c <___vfprintf_internal_r+0xeec>
    4090:	d9014f17 	ldw	r4,1340(sp)
    4094:	b00b883a 	mov	r5,r22
    4098:	d9800c04 	addi	r6,sp,48
    409c:	00027e80 	call	27e8 <__sprint_r>
    40a0:	103b9f1e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    40a4:	dc800e17 	ldw	r18,56(sp)
    40a8:	dc400d17 	ldw	r17,52(sp)
    40ac:	d9000517 	ldw	r4,20(sp)
    40b0:	d8c01904 	addi	r3,sp,100
    40b4:	003d9106 	br	36fc <___vfprintf_internal_r+0xebc>
    40b8:	07000074 	movhi	fp,1
    40bc:	e738fe84 	addi	fp,fp,-7174
    40c0:	9425883a 	add	r18,r18,r16
    40c4:	8c400044 	addi	r17,r17,1
    40c8:	008001c4 	movi	r2,7
    40cc:	1f000015 	stw	fp,0(r3)
    40d0:	1c000115 	stw	r16,4(r3)
    40d4:	dc800e15 	stw	r18,56(sp)
    40d8:	dc400d15 	stw	r17,52(sp)
    40dc:	147fbc16 	blt	r2,r17,3fd0 <___vfprintf_internal_r+0x1790>
    40e0:	18c00204 	addi	r3,r3,8
    40e4:	003fc206 	br	3ff0 <___vfprintf_internal_r+0x17b0>
    40e8:	d9014f17 	ldw	r4,1340(sp)
    40ec:	b00b883a 	mov	r5,r22
    40f0:	d9800c04 	addi	r6,sp,48
    40f4:	00027e80 	call	27e8 <__sprint_r>
    40f8:	103b891e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    40fc:	dc800e17 	ldw	r18,56(sp)
    4100:	d9000517 	ldw	r4,20(sp)
    4104:	d8c01904 	addi	r3,sp,100
    4108:	003d0206 	br	3514 <___vfprintf_internal_r+0xcd4>
    410c:	07000074 	movhi	fp,1
    4110:	e738fe84 	addi	fp,fp,-7174
    4114:	003be406 	br	30a8 <___vfprintf_internal_r+0x868>
    4118:	00800074 	movhi	r2,1
    411c:	10b8ed04 	addi	r2,r2,-7244
    4120:	d8814115 	stw	r2,1284(sp)
    4124:	003df506 	br	38fc <___vfprintf_internal_r+0x10bc>
    4128:	d9014217 	ldw	r4,1288(sp)
    412c:	d9414317 	ldw	r5,1292(sp)
    4130:	0008c940 	call	8c94 <__isnand>
    4134:	10003926 	beq	r2,zero,421c <___vfprintf_internal_r+0x19dc>
    4138:	d9414d17 	ldw	r5,1332(sp)
    413c:	008011c4 	movi	r2,71
    4140:	1140ce16 	blt	r2,r5,447c <___vfprintf_internal_r+0x1c3c>
    4144:	01800074 	movhi	r6,1
    4148:	31b8ee04 	addi	r6,r6,-7240
    414c:	d9814115 	stw	r6,1284(sp)
    4150:	003dea06 	br	38fc <___vfprintf_internal_r+0x10bc>
    4154:	d9014c17 	ldw	r4,1328(sp)
    4158:	bdc00044 	addi	r23,r23,1
    415c:	b8c00007 	ldb	r3,0(r23)
    4160:	21000814 	ori	r4,r4,32
    4164:	d9014c15 	stw	r4,1328(sp)
    4168:	003a3406 	br	2a3c <___vfprintf_internal_r+0x1fc>
    416c:	dcc14515 	stw	r19,1300(sp)
    4170:	98011016 	blt	r19,zero,45b4 <___vfprintf_internal_r+0x1d74>
    4174:	980f883a 	mov	r7,r19
    4178:	d8014615 	stw	zero,1304(sp)
    417c:	003c5206 	br	32c8 <___vfprintf_internal_r+0xa88>
    4180:	d9014f17 	ldw	r4,1340(sp)
    4184:	b00b883a 	mov	r5,r22
    4188:	d9800c04 	addi	r6,sp,48
    418c:	00027e80 	call	27e8 <__sprint_r>
    4190:	103b631e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    4194:	dc800e17 	ldw	r18,56(sp)
    4198:	d9000517 	ldw	r4,20(sp)
    419c:	d8c01904 	addi	r3,sp,100
    41a0:	003f2e06 	br	3e5c <___vfprintf_internal_r+0x161c>
    41a4:	d8c14c17 	ldw	r3,1328(sp)
    41a8:	1880100c 	andi	r2,r3,64
    41ac:	1000a026 	beq	r2,zero,4430 <___vfprintf_internal_r+0x1bf0>
    41b0:	38800017 	ldw	r2,0(r7)
    41b4:	39c00104 	addi	r7,r7,4
    41b8:	d9c14015 	stw	r7,1280(sp)
    41bc:	d9014b17 	ldw	r4,1324(sp)
    41c0:	d9c14017 	ldw	r7,1280(sp)
    41c4:	1100000d 	sth	r4,0(r2)
    41c8:	0039f906 	br	29b0 <___vfprintf_internal_r+0x170>
    41cc:	d9014f17 	ldw	r4,1340(sp)
    41d0:	b00b883a 	mov	r5,r22
    41d4:	d9800c04 	addi	r6,sp,48
    41d8:	00027e80 	call	27e8 <__sprint_r>
    41dc:	103b501e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    41e0:	dc800e17 	ldw	r18,56(sp)
    41e4:	dc400d17 	ldw	r17,52(sp)
    41e8:	d9000517 	ldw	r4,20(sp)
    41ec:	d8c01904 	addi	r3,sp,100
    41f0:	003f2d06 	br	3ea8 <___vfprintf_internal_r+0x1668>
    41f4:	00800184 	movi	r2,6
    41f8:	14c09a36 	bltu	r2,r19,4464 <___vfprintf_internal_r+0x1c24>
    41fc:	dcc14515 	stw	r19,1300(sp)
    4200:	9800010e 	bge	r19,zero,4208 <___vfprintf_internal_r+0x19c8>
    4204:	d8014515 	stw	zero,1300(sp)
    4208:	00800074 	movhi	r2,1
    420c:	10b8f004 	addi	r2,r2,-7232
    4210:	980f883a 	mov	r7,r19
    4214:	d8814115 	stw	r2,1284(sp)
    4218:	003a7806 	br	2bfc <___vfprintf_internal_r+0x3bc>
    421c:	00bfffc4 	movi	r2,-1
    4220:	9880e226 	beq	r19,r2,45ac <___vfprintf_internal_r+0x1d6c>
    4224:	d9414d17 	ldw	r5,1332(sp)
    4228:	008019c4 	movi	r2,103
    422c:	2880dc26 	beq	r5,r2,45a0 <___vfprintf_internal_r+0x1d60>
    4230:	008011c4 	movi	r2,71
    4234:	2880da26 	beq	r5,r2,45a0 <___vfprintf_internal_r+0x1d60>
    4238:	d9414c17 	ldw	r5,1328(sp)
    423c:	d9014317 	ldw	r4,1292(sp)
    4240:	d9814217 	ldw	r6,1288(sp)
    4244:	29404014 	ori	r5,r5,256
    4248:	d9414c15 	stw	r5,1328(sp)
    424c:	2000cc16 	blt	r4,zero,4580 <___vfprintf_internal_r+0x1d40>
    4250:	3021883a 	mov	r16,r6
    4254:	2023883a 	mov	r17,r4
    4258:	0039883a 	mov	fp,zero
    425c:	d9414d17 	ldw	r5,1332(sp)
    4260:	00801984 	movi	r2,102
    4264:	2880b726 	beq	r5,r2,4544 <___vfprintf_internal_r+0x1d04>
    4268:	00801184 	movi	r2,70
    426c:	2880b526 	beq	r5,r2,4544 <___vfprintf_internal_r+0x1d04>
    4270:	00801944 	movi	r2,101
    4274:	2880c826 	beq	r5,r2,4598 <___vfprintf_internal_r+0x1d58>
    4278:	00801144 	movi	r2,69
    427c:	2880c626 	beq	r5,r2,4598 <___vfprintf_internal_r+0x1d58>
    4280:	9829883a 	mov	r20,r19
    4284:	d9014f17 	ldw	r4,1340(sp)
    4288:	d8800504 	addi	r2,sp,20
    428c:	880d883a 	mov	r6,r17
    4290:	d8800115 	stw	r2,4(sp)
    4294:	d8c00604 	addi	r3,sp,24
    4298:	d8800704 	addi	r2,sp,28
    429c:	800b883a 	mov	r5,r16
    42a0:	01c00084 	movi	r7,2
    42a4:	d8c00215 	stw	r3,8(sp)
    42a8:	d8800315 	stw	r2,12(sp)
    42ac:	dd000015 	stw	r20,0(sp)
    42b0:	0004c180 	call	4c18 <_dtoa_r>
    42b4:	d9814d17 	ldw	r6,1332(sp)
    42b8:	d8814115 	stw	r2,1284(sp)
    42bc:	008019c4 	movi	r2,103
    42c0:	30809526 	beq	r6,r2,4518 <___vfprintf_internal_r+0x1cd8>
    42c4:	d8c14d17 	ldw	r3,1332(sp)
    42c8:	008011c4 	movi	r2,71
    42cc:	18809226 	beq	r3,r2,4518 <___vfprintf_internal_r+0x1cd8>
    42d0:	d9414117 	ldw	r5,1284(sp)
    42d4:	d9814d17 	ldw	r6,1332(sp)
    42d8:	00801984 	movi	r2,102
    42dc:	2d25883a 	add	r18,r5,r20
    42e0:	30808626 	beq	r6,r2,44fc <___vfprintf_internal_r+0x1cbc>
    42e4:	00801184 	movi	r2,70
    42e8:	30808426 	beq	r6,r2,44fc <___vfprintf_internal_r+0x1cbc>
    42ec:	000d883a 	mov	r6,zero
    42f0:	000f883a 	mov	r7,zero
    42f4:	880b883a 	mov	r5,r17
    42f8:	8009883a 	mov	r4,r16
    42fc:	000aa0c0 	call	aa0c <__eqdf2>
    4300:	1000751e 	bne	r2,zero,44d8 <___vfprintf_internal_r+0x1c98>
    4304:	9005883a 	mov	r2,r18
    4308:	dc800715 	stw	r18,28(sp)
    430c:	d9014117 	ldw	r4,1284(sp)
    4310:	d9414d17 	ldw	r5,1332(sp)
    4314:	00c019c4 	movi	r3,103
    4318:	1125c83a 	sub	r18,r2,r4
    431c:	28c06826 	beq	r5,r3,44c0 <___vfprintf_internal_r+0x1c80>
    4320:	008011c4 	movi	r2,71
    4324:	28806626 	beq	r5,r2,44c0 <___vfprintf_internal_r+0x1c80>
    4328:	d9000517 	ldw	r4,20(sp)
    432c:	d8c14d17 	ldw	r3,1332(sp)
    4330:	00801944 	movi	r2,101
    4334:	10c05516 	blt	r2,r3,448c <___vfprintf_internal_r+0x1c4c>
    4338:	213fffc4 	addi	r4,r4,-1
    433c:	d9000515 	stw	r4,20(sp)
    4340:	d8c00805 	stb	r3,32(sp)
    4344:	2021883a 	mov	r16,r4
    4348:	2000c116 	blt	r4,zero,4650 <___vfprintf_internal_r+0x1e10>
    434c:	00800ac4 	movi	r2,43
    4350:	d8800845 	stb	r2,33(sp)
    4354:	00800244 	movi	r2,9
    4358:	1400af0e 	bge	r2,r16,4618 <___vfprintf_internal_r+0x1dd8>
    435c:	1027883a 	mov	r19,r2
    4360:	dc400b84 	addi	r17,sp,46
    4364:	8009883a 	mov	r4,r16
    4368:	01400284 	movi	r5,10
    436c:	0001dc80 	call	1dc8 <__modsi3>
    4370:	10800c04 	addi	r2,r2,48
    4374:	8c7fffc4 	addi	r17,r17,-1
    4378:	8009883a 	mov	r4,r16
    437c:	01400284 	movi	r5,10
    4380:	88800005 	stb	r2,0(r17)
    4384:	0001d680 	call	1d68 <__divsi3>
    4388:	1021883a 	mov	r16,r2
    438c:	98bff516 	blt	r19,r2,4364 <___vfprintf_internal_r+0x1b24>
    4390:	10c00c04 	addi	r3,r2,48
    4394:	d88009c4 	addi	r2,sp,39
    4398:	108001c4 	addi	r2,r2,7
    439c:	897fffc4 	addi	r5,r17,-1
    43a0:	88ffffc5 	stb	r3,-1(r17)
    43a4:	2880a72e 	bgeu	r5,r2,4644 <___vfprintf_internal_r+0x1e04>
    43a8:	1009883a 	mov	r4,r2
    43ac:	d9800804 	addi	r6,sp,32
    43b0:	d8c00884 	addi	r3,sp,34
    43b4:	28800003 	ldbu	r2,0(r5)
    43b8:	29400044 	addi	r5,r5,1
    43bc:	18800005 	stb	r2,0(r3)
    43c0:	18c00044 	addi	r3,r3,1
    43c4:	293ffb36 	bltu	r5,r4,43b4 <___vfprintf_internal_r+0x1b74>
    43c8:	1987c83a 	sub	r3,r3,r6
    43cc:	00800044 	movi	r2,1
    43d0:	d8c14815 	stw	r3,1312(sp)
    43d4:	90cf883a 	add	r7,r18,r3
    43d8:	1480960e 	bge	r2,r18,4634 <___vfprintf_internal_r+0x1df4>
    43dc:	39c00044 	addi	r7,r7,1
    43e0:	d9c14515 	stw	r7,1300(sp)
    43e4:	38003416 	blt	r7,zero,44b8 <___vfprintf_internal_r+0x1c78>
    43e8:	e0803fcc 	andi	r2,fp,255
    43ec:	1080201c 	xori	r2,r2,128
    43f0:	10bfe004 	addi	r2,r2,-128
    43f4:	10004e26 	beq	r2,zero,4530 <___vfprintf_internal_r+0x1cf0>
    43f8:	00800b44 	movi	r2,45
    43fc:	dc814715 	stw	r18,1308(sp)
    4400:	d8014615 	stw	zero,1304(sp)
    4404:	d8800405 	stb	r2,16(sp)
    4408:	003bb106 	br	32d0 <___vfprintf_internal_r+0xa90>
    440c:	00800b44 	movi	r2,45
    4410:	d8800405 	stb	r2,16(sp)
    4414:	003d3306 	br	38e4 <___vfprintf_internal_r+0x10a4>
    4418:	d9014f17 	ldw	r4,1340(sp)
    441c:	b00b883a 	mov	r5,r22
    4420:	d9800c04 	addi	r6,sp,48
    4424:	00027e80 	call	27e8 <__sprint_r>
    4428:	103abd1e 	bne	r2,zero,2f20 <___vfprintf_internal_r+0x6e0>
    442c:	003abb06 	br	2f1c <___vfprintf_internal_r+0x6dc>
    4430:	38800017 	ldw	r2,0(r7)
    4434:	39c00104 	addi	r7,r7,4
    4438:	d9c14015 	stw	r7,1280(sp)
    443c:	d9414b17 	ldw	r5,1324(sp)
    4440:	d9c14017 	ldw	r7,1280(sp)
    4444:	11400015 	stw	r5,0(r2)
    4448:	00395906 	br	29b0 <___vfprintf_internal_r+0x170>
    444c:	980f883a 	mov	r7,r19
    4450:	dcc14515 	stw	r19,1300(sp)
    4454:	d8014615 	stw	zero,1304(sp)
    4458:	003b9b06 	br	32c8 <___vfprintf_internal_r+0xa88>
    445c:	0027883a 	mov	r19,zero
    4460:	00397806 	br	2a44 <___vfprintf_internal_r+0x204>
    4464:	00c00074 	movhi	r3,1
    4468:	18f8f004 	addi	r3,r3,-7232
    446c:	100f883a 	mov	r7,r2
    4470:	d8814515 	stw	r2,1300(sp)
    4474:	d8c14115 	stw	r3,1284(sp)
    4478:	0039e006 	br	2bfc <___vfprintf_internal_r+0x3bc>
    447c:	00800074 	movhi	r2,1
    4480:	10b8ef04 	addi	r2,r2,-7236
    4484:	d8814115 	stw	r2,1284(sp)
    4488:	003d1c06 	br	38fc <___vfprintf_internal_r+0x10bc>
    448c:	d9414d17 	ldw	r5,1332(sp)
    4490:	00801984 	movi	r2,102
    4494:	28804926 	beq	r5,r2,45bc <___vfprintf_internal_r+0x1d7c>
    4498:	200f883a 	mov	r7,r4
    449c:	24805716 	blt	r4,r18,45fc <___vfprintf_internal_r+0x1dbc>
    44a0:	d9414c17 	ldw	r5,1328(sp)
    44a4:	2880004c 	andi	r2,r5,1
    44a8:	10000126 	beq	r2,zero,44b0 <___vfprintf_internal_r+0x1c70>
    44ac:	21c00044 	addi	r7,r4,1
    44b0:	d9c14515 	stw	r7,1300(sp)
    44b4:	383fcc0e 	bge	r7,zero,43e8 <___vfprintf_internal_r+0x1ba8>
    44b8:	d8014515 	stw	zero,1300(sp)
    44bc:	003fca06 	br	43e8 <___vfprintf_internal_r+0x1ba8>
    44c0:	d9000517 	ldw	r4,20(sp)
    44c4:	00bfff04 	movi	r2,-4
    44c8:	1100480e 	bge	r2,r4,45ec <___vfprintf_internal_r+0x1dac>
    44cc:	99004716 	blt	r19,r4,45ec <___vfprintf_internal_r+0x1dac>
    44d0:	d8c14d15 	stw	r3,1332(sp)
    44d4:	003ff006 	br	4498 <___vfprintf_internal_r+0x1c58>
    44d8:	d8800717 	ldw	r2,28(sp)
    44dc:	14bf8b2e 	bgeu	r2,r18,430c <___vfprintf_internal_r+0x1acc>
    44e0:	9007883a 	mov	r3,r18
    44e4:	01000c04 	movi	r4,48
    44e8:	11000005 	stb	r4,0(r2)
    44ec:	10800044 	addi	r2,r2,1
    44f0:	d8800715 	stw	r2,28(sp)
    44f4:	18bffc1e 	bne	r3,r2,44e8 <___vfprintf_internal_r+0x1ca8>
    44f8:	003f8406 	br	430c <___vfprintf_internal_r+0x1acc>
    44fc:	d8814117 	ldw	r2,1284(sp)
    4500:	10c00007 	ldb	r3,0(r2)
    4504:	00800c04 	movi	r2,48
    4508:	18805b26 	beq	r3,r2,4678 <___vfprintf_internal_r+0x1e38>
    450c:	d9000517 	ldw	r4,20(sp)
    4510:	9125883a 	add	r18,r18,r4
    4514:	003f7506 	br	42ec <___vfprintf_internal_r+0x1aac>
    4518:	d9014c17 	ldw	r4,1328(sp)
    451c:	2080004c 	andi	r2,r4,1
    4520:	1005003a 	cmpeq	r2,r2,zero
    4524:	103f6a26 	beq	r2,zero,42d0 <___vfprintf_internal_r+0x1a90>
    4528:	d8800717 	ldw	r2,28(sp)
    452c:	003f7706 	br	430c <___vfprintf_internal_r+0x1acc>
    4530:	d9c14515 	stw	r7,1300(sp)
    4534:	38004d16 	blt	r7,zero,466c <___vfprintf_internal_r+0x1e2c>
    4538:	dc814715 	stw	r18,1308(sp)
    453c:	d8014615 	stw	zero,1304(sp)
    4540:	003b6106 	br	32c8 <___vfprintf_internal_r+0xa88>
    4544:	d9014f17 	ldw	r4,1340(sp)
    4548:	d8800504 	addi	r2,sp,20
    454c:	d8800115 	stw	r2,4(sp)
    4550:	d8c00604 	addi	r3,sp,24
    4554:	d8800704 	addi	r2,sp,28
    4558:	800b883a 	mov	r5,r16
    455c:	880d883a 	mov	r6,r17
    4560:	01c000c4 	movi	r7,3
    4564:	d8c00215 	stw	r3,8(sp)
    4568:	d8800315 	stw	r2,12(sp)
    456c:	dcc00015 	stw	r19,0(sp)
    4570:	9829883a 	mov	r20,r19
    4574:	0004c180 	call	4c18 <_dtoa_r>
    4578:	d8814115 	stw	r2,1284(sp)
    457c:	003f5106 	br	42c4 <___vfprintf_internal_r+0x1a84>
    4580:	d8c14217 	ldw	r3,1288(sp)
    4584:	d9014317 	ldw	r4,1292(sp)
    4588:	07000b44 	movi	fp,45
    458c:	1821883a 	mov	r16,r3
    4590:	2460003c 	xorhi	r17,r4,32768
    4594:	003f3106 	br	425c <___vfprintf_internal_r+0x1a1c>
    4598:	9d000044 	addi	r20,r19,1
    459c:	003f3906 	br	4284 <___vfprintf_internal_r+0x1a44>
    45a0:	983f251e 	bne	r19,zero,4238 <___vfprintf_internal_r+0x19f8>
    45a4:	04c00044 	movi	r19,1
    45a8:	003f2306 	br	4238 <___vfprintf_internal_r+0x19f8>
    45ac:	04c00184 	movi	r19,6
    45b0:	003f2106 	br	4238 <___vfprintf_internal_r+0x19f8>
    45b4:	d8014515 	stw	zero,1300(sp)
    45b8:	003eee06 	br	4174 <___vfprintf_internal_r+0x1934>
    45bc:	200f883a 	mov	r7,r4
    45c0:	0100370e 	bge	zero,r4,46a0 <___vfprintf_internal_r+0x1e60>
    45c4:	9800031e 	bne	r19,zero,45d4 <___vfprintf_internal_r+0x1d94>
    45c8:	d9814c17 	ldw	r6,1328(sp)
    45cc:	3080004c 	andi	r2,r6,1
    45d0:	103fb726 	beq	r2,zero,44b0 <___vfprintf_internal_r+0x1c70>
    45d4:	20800044 	addi	r2,r4,1
    45d8:	98a7883a 	add	r19,r19,r2
    45dc:	dcc14515 	stw	r19,1300(sp)
    45e0:	980f883a 	mov	r7,r19
    45e4:	983f800e 	bge	r19,zero,43e8 <___vfprintf_internal_r+0x1ba8>
    45e8:	003fb306 	br	44b8 <___vfprintf_internal_r+0x1c78>
    45ec:	d9814d17 	ldw	r6,1332(sp)
    45f0:	31bfff84 	addi	r6,r6,-2
    45f4:	d9814d15 	stw	r6,1332(sp)
    45f8:	003f4c06 	br	432c <___vfprintf_internal_r+0x1aec>
    45fc:	0100180e 	bge	zero,r4,4660 <___vfprintf_internal_r+0x1e20>
    4600:	00800044 	movi	r2,1
    4604:	1485883a 	add	r2,r2,r18
    4608:	d8814515 	stw	r2,1300(sp)
    460c:	100f883a 	mov	r7,r2
    4610:	103f750e 	bge	r2,zero,43e8 <___vfprintf_internal_r+0x1ba8>
    4614:	003fa806 	br	44b8 <___vfprintf_internal_r+0x1c78>
    4618:	80c00c04 	addi	r3,r16,48
    461c:	00800c04 	movi	r2,48
    4620:	d8c008c5 	stb	r3,35(sp)
    4624:	d9800804 	addi	r6,sp,32
    4628:	d8c00904 	addi	r3,sp,36
    462c:	d8800885 	stb	r2,34(sp)
    4630:	003f6506 	br	43c8 <___vfprintf_internal_r+0x1b88>
    4634:	d9014c17 	ldw	r4,1328(sp)
    4638:	2084703a 	and	r2,r4,r2
    463c:	103f9c26 	beq	r2,zero,44b0 <___vfprintf_internal_r+0x1c70>
    4640:	003f6606 	br	43dc <___vfprintf_internal_r+0x1b9c>
    4644:	d9800804 	addi	r6,sp,32
    4648:	d8c00884 	addi	r3,sp,34
    464c:	003f5e06 	br	43c8 <___vfprintf_internal_r+0x1b88>
    4650:	00800b44 	movi	r2,45
    4654:	0121c83a 	sub	r16,zero,r4
    4658:	d8800845 	stb	r2,33(sp)
    465c:	003f3d06 	br	4354 <___vfprintf_internal_r+0x1b14>
    4660:	00800084 	movi	r2,2
    4664:	1105c83a 	sub	r2,r2,r4
    4668:	003fe606 	br	4604 <___vfprintf_internal_r+0x1dc4>
    466c:	d8014515 	stw	zero,1300(sp)
    4670:	dc814715 	stw	r18,1308(sp)
    4674:	003fb106 	br	453c <___vfprintf_internal_r+0x1cfc>
    4678:	000d883a 	mov	r6,zero
    467c:	000f883a 	mov	r7,zero
    4680:	8009883a 	mov	r4,r16
    4684:	880b883a 	mov	r5,r17
    4688:	000aa940 	call	aa94 <__nedf2>
    468c:	103f9f26 	beq	r2,zero,450c <___vfprintf_internal_r+0x1ccc>
    4690:	00800044 	movi	r2,1
    4694:	1509c83a 	sub	r4,r2,r20
    4698:	d9000515 	stw	r4,20(sp)
    469c:	003f9b06 	br	450c <___vfprintf_internal_r+0x1ccc>
    46a0:	98000d1e 	bne	r19,zero,46d8 <___vfprintf_internal_r+0x1e98>
    46a4:	d8c14c17 	ldw	r3,1328(sp)
    46a8:	1880004c 	andi	r2,r3,1
    46ac:	10000a1e 	bne	r2,zero,46d8 <___vfprintf_internal_r+0x1e98>
    46b0:	01000044 	movi	r4,1
    46b4:	200f883a 	mov	r7,r4
    46b8:	d9014515 	stw	r4,1300(sp)
    46bc:	003f4a06 	br	43e8 <___vfprintf_internal_r+0x1ba8>
    46c0:	3cc00017 	ldw	r19,0(r7)
    46c4:	39c00104 	addi	r7,r7,4
    46c8:	983d0e0e 	bge	r19,zero,3b04 <___vfprintf_internal_r+0x12c4>
    46cc:	b8c00007 	ldb	r3,0(r23)
    46d0:	04ffffc4 	movi	r19,-1
    46d4:	0038d906 	br	2a3c <___vfprintf_internal_r+0x1fc>
    46d8:	9cc00084 	addi	r19,r19,2
    46dc:	dcc14515 	stw	r19,1300(sp)
    46e0:	980f883a 	mov	r7,r19
    46e4:	983f400e 	bge	r19,zero,43e8 <___vfprintf_internal_r+0x1ba8>
    46e8:	003f7306 	br	44b8 <___vfprintf_internal_r+0x1c78>

000046ec <__vfprintf_internal>:
    46ec:	00800074 	movhi	r2,1
    46f0:	10804c04 	addi	r2,r2,304
    46f4:	2013883a 	mov	r9,r4
    46f8:	11000017 	ldw	r4,0(r2)
    46fc:	2805883a 	mov	r2,r5
    4700:	300f883a 	mov	r7,r6
    4704:	480b883a 	mov	r5,r9
    4708:	100d883a 	mov	r6,r2
    470c:	00028401 	jmpi	2840 <___vfprintf_internal_r>

00004710 <__swsetup_r>:
    4710:	00800074 	movhi	r2,1
    4714:	10804c04 	addi	r2,r2,304
    4718:	10c00017 	ldw	r3,0(r2)
    471c:	defffd04 	addi	sp,sp,-12
    4720:	dc400115 	stw	r17,4(sp)
    4724:	dc000015 	stw	r16,0(sp)
    4728:	dfc00215 	stw	ra,8(sp)
    472c:	2023883a 	mov	r17,r4
    4730:	2821883a 	mov	r16,r5
    4734:	18000226 	beq	r3,zero,4740 <__swsetup_r+0x30>
    4738:	18800e17 	ldw	r2,56(r3)
    473c:	10001f26 	beq	r2,zero,47bc <__swsetup_r+0xac>
    4740:	8100030b 	ldhu	r4,12(r16)
    4744:	2080020c 	andi	r2,r4,8
    4748:	10002826 	beq	r2,zero,47ec <__swsetup_r+0xdc>
    474c:	81400417 	ldw	r5,16(r16)
    4750:	28001d26 	beq	r5,zero,47c8 <__swsetup_r+0xb8>
    4754:	2080004c 	andi	r2,r4,1
    4758:	1005003a 	cmpeq	r2,r2,zero
    475c:	10000b26 	beq	r2,zero,478c <__swsetup_r+0x7c>
    4760:	2080008c 	andi	r2,r4,2
    4764:	10001226 	beq	r2,zero,47b0 <__swsetup_r+0xa0>
    4768:	0005883a 	mov	r2,zero
    476c:	80800215 	stw	r2,8(r16)
    4770:	28000b26 	beq	r5,zero,47a0 <__swsetup_r+0x90>
    4774:	0005883a 	mov	r2,zero
    4778:	dfc00217 	ldw	ra,8(sp)
    477c:	dc400117 	ldw	r17,4(sp)
    4780:	dc000017 	ldw	r16,0(sp)
    4784:	dec00304 	addi	sp,sp,12
    4788:	f800283a 	ret
    478c:	80800517 	ldw	r2,20(r16)
    4790:	80000215 	stw	zero,8(r16)
    4794:	0085c83a 	sub	r2,zero,r2
    4798:	80800615 	stw	r2,24(r16)
    479c:	283ff51e 	bne	r5,zero,4774 <__swsetup_r+0x64>
    47a0:	2080200c 	andi	r2,r4,128
    47a4:	103ff326 	beq	r2,zero,4774 <__swsetup_r+0x64>
    47a8:	00bfffc4 	movi	r2,-1
    47ac:	003ff206 	br	4778 <__swsetup_r+0x68>
    47b0:	80800517 	ldw	r2,20(r16)
    47b4:	80800215 	stw	r2,8(r16)
    47b8:	003fed06 	br	4770 <__swsetup_r+0x60>
    47bc:	1809883a 	mov	r4,r3
    47c0:	00064640 	call	6464 <__sinit>
    47c4:	003fde06 	br	4740 <__swsetup_r+0x30>
    47c8:	20c0a00c 	andi	r3,r4,640
    47cc:	00808004 	movi	r2,512
    47d0:	18bfe026 	beq	r3,r2,4754 <__swsetup_r+0x44>
    47d4:	8809883a 	mov	r4,r17
    47d8:	800b883a 	mov	r5,r16
    47dc:	00071dc0 	call	71dc <__smakebuf_r>
    47e0:	8100030b 	ldhu	r4,12(r16)
    47e4:	81400417 	ldw	r5,16(r16)
    47e8:	003fda06 	br	4754 <__swsetup_r+0x44>
    47ec:	2080040c 	andi	r2,r4,16
    47f0:	103fed26 	beq	r2,zero,47a8 <__swsetup_r+0x98>
    47f4:	2080010c 	andi	r2,r4,4
    47f8:	10001226 	beq	r2,zero,4844 <__swsetup_r+0x134>
    47fc:	81400c17 	ldw	r5,48(r16)
    4800:	28000526 	beq	r5,zero,4818 <__swsetup_r+0x108>
    4804:	80801004 	addi	r2,r16,64
    4808:	28800226 	beq	r5,r2,4814 <__swsetup_r+0x104>
    480c:	8809883a 	mov	r4,r17
    4810:	00067e80 	call	67e8 <_free_r>
    4814:	80000c15 	stw	zero,48(r16)
    4818:	8080030b 	ldhu	r2,12(r16)
    481c:	81400417 	ldw	r5,16(r16)
    4820:	80000115 	stw	zero,4(r16)
    4824:	10bff6cc 	andi	r2,r2,65499
    4828:	8080030d 	sth	r2,12(r16)
    482c:	81400015 	stw	r5,0(r16)
    4830:	8080030b 	ldhu	r2,12(r16)
    4834:	10800214 	ori	r2,r2,8
    4838:	113fffcc 	andi	r4,r2,65535
    483c:	8080030d 	sth	r2,12(r16)
    4840:	003fc306 	br	4750 <__swsetup_r+0x40>
    4844:	81400417 	ldw	r5,16(r16)
    4848:	003ff906 	br	4830 <__swsetup_r+0x120>

0000484c <register_fini>:
    484c:	f800283a 	ret

00004850 <__call_exitprocs>:
    4850:	00800074 	movhi	r2,1
    4854:	10804d04 	addi	r2,r2,308
    4858:	10800017 	ldw	r2,0(r2)
    485c:	defff304 	addi	sp,sp,-52
    4860:	df000b15 	stw	fp,44(sp)
    4864:	d8800115 	stw	r2,4(sp)
    4868:	00800034 	movhi	r2,0
    486c:	10879c04 	addi	r2,r2,7792
    4870:	1005003a 	cmpeq	r2,r2,zero
    4874:	d8800215 	stw	r2,8(sp)
    4878:	d8800117 	ldw	r2,4(sp)
    487c:	dd400815 	stw	r21,32(sp)
    4880:	dd000715 	stw	r20,28(sp)
    4884:	10805204 	addi	r2,r2,328
    4888:	dfc00c15 	stw	ra,48(sp)
    488c:	ddc00a15 	stw	r23,40(sp)
    4890:	dd800915 	stw	r22,36(sp)
    4894:	dcc00615 	stw	r19,24(sp)
    4898:	dc800515 	stw	r18,20(sp)
    489c:	dc400415 	stw	r17,16(sp)
    48a0:	dc000315 	stw	r16,12(sp)
    48a4:	282b883a 	mov	r21,r5
    48a8:	2039883a 	mov	fp,r4
    48ac:	d8800015 	stw	r2,0(sp)
    48b0:	2829003a 	cmpeq	r20,r5,zero
    48b4:	d8800117 	ldw	r2,4(sp)
    48b8:	14405217 	ldw	r17,328(r2)
    48bc:	88001026 	beq	r17,zero,4900 <__call_exitprocs+0xb0>
    48c0:	ddc00017 	ldw	r23,0(sp)
    48c4:	88800117 	ldw	r2,4(r17)
    48c8:	8c802204 	addi	r18,r17,136
    48cc:	143fffc4 	addi	r16,r2,-1
    48d0:	80000916 	blt	r16,zero,48f8 <__call_exitprocs+0xa8>
    48d4:	05bfffc4 	movi	r22,-1
    48d8:	a000151e 	bne	r20,zero,4930 <__call_exitprocs+0xe0>
    48dc:	8409883a 	add	r4,r16,r16
    48e0:	2105883a 	add	r2,r4,r4
    48e4:	1485883a 	add	r2,r2,r18
    48e8:	10c02017 	ldw	r3,128(r2)
    48ec:	a8c01126 	beq	r21,r3,4934 <__call_exitprocs+0xe4>
    48f0:	843fffc4 	addi	r16,r16,-1
    48f4:	85bff81e 	bne	r16,r22,48d8 <__call_exitprocs+0x88>
    48f8:	d8800217 	ldw	r2,8(sp)
    48fc:	10003126 	beq	r2,zero,49c4 <__call_exitprocs+0x174>
    4900:	dfc00c17 	ldw	ra,48(sp)
    4904:	df000b17 	ldw	fp,44(sp)
    4908:	ddc00a17 	ldw	r23,40(sp)
    490c:	dd800917 	ldw	r22,36(sp)
    4910:	dd400817 	ldw	r21,32(sp)
    4914:	dd000717 	ldw	r20,28(sp)
    4918:	dcc00617 	ldw	r19,24(sp)
    491c:	dc800517 	ldw	r18,20(sp)
    4920:	dc400417 	ldw	r17,16(sp)
    4924:	dc000317 	ldw	r16,12(sp)
    4928:	dec00d04 	addi	sp,sp,52
    492c:	f800283a 	ret
    4930:	8409883a 	add	r4,r16,r16
    4934:	88c00117 	ldw	r3,4(r17)
    4938:	2105883a 	add	r2,r4,r4
    493c:	1445883a 	add	r2,r2,r17
    4940:	18ffffc4 	addi	r3,r3,-1
    4944:	11800217 	ldw	r6,8(r2)
    4948:	1c001526 	beq	r3,r16,49a0 <__call_exitprocs+0x150>
    494c:	10000215 	stw	zero,8(r2)
    4950:	303fe726 	beq	r6,zero,48f0 <__call_exitprocs+0xa0>
    4954:	00c00044 	movi	r3,1
    4958:	1c06983a 	sll	r3,r3,r16
    495c:	90804017 	ldw	r2,256(r18)
    4960:	8cc00117 	ldw	r19,4(r17)
    4964:	1884703a 	and	r2,r3,r2
    4968:	10001426 	beq	r2,zero,49bc <__call_exitprocs+0x16c>
    496c:	90804117 	ldw	r2,260(r18)
    4970:	1884703a 	and	r2,r3,r2
    4974:	10000c1e 	bne	r2,zero,49a8 <__call_exitprocs+0x158>
    4978:	2105883a 	add	r2,r4,r4
    497c:	1485883a 	add	r2,r2,r18
    4980:	11400017 	ldw	r5,0(r2)
    4984:	e009883a 	mov	r4,fp
    4988:	303ee83a 	callr	r6
    498c:	88800117 	ldw	r2,4(r17)
    4990:	98bfc81e 	bne	r19,r2,48b4 <__call_exitprocs+0x64>
    4994:	b8800017 	ldw	r2,0(r23)
    4998:	147fd526 	beq	r2,r17,48f0 <__call_exitprocs+0xa0>
    499c:	003fc506 	br	48b4 <__call_exitprocs+0x64>
    49a0:	8c000115 	stw	r16,4(r17)
    49a4:	003fea06 	br	4950 <__call_exitprocs+0x100>
    49a8:	2105883a 	add	r2,r4,r4
    49ac:	1485883a 	add	r2,r2,r18
    49b0:	11000017 	ldw	r4,0(r2)
    49b4:	303ee83a 	callr	r6
    49b8:	003ff406 	br	498c <__call_exitprocs+0x13c>
    49bc:	303ee83a 	callr	r6
    49c0:	003ff206 	br	498c <__call_exitprocs+0x13c>
    49c4:	88800117 	ldw	r2,4(r17)
    49c8:	1000081e 	bne	r2,zero,49ec <__call_exitprocs+0x19c>
    49cc:	89000017 	ldw	r4,0(r17)
    49d0:	20000726 	beq	r4,zero,49f0 <__call_exitprocs+0x1a0>
    49d4:	b9000015 	stw	r4,0(r23)
    49d8:	8809883a 	mov	r4,r17
    49dc:	0001e700 	call	1e70 <free>
    49e0:	bc400017 	ldw	r17,0(r23)
    49e4:	883fb71e 	bne	r17,zero,48c4 <__call_exitprocs+0x74>
    49e8:	003fc506 	br	4900 <__call_exitprocs+0xb0>
    49ec:	89000017 	ldw	r4,0(r17)
    49f0:	882f883a 	mov	r23,r17
    49f4:	2023883a 	mov	r17,r4
    49f8:	883fb21e 	bne	r17,zero,48c4 <__call_exitprocs+0x74>
    49fc:	003fc006 	br	4900 <__call_exitprocs+0xb0>

00004a00 <quorem>:
    4a00:	28c00417 	ldw	r3,16(r5)
    4a04:	20800417 	ldw	r2,16(r4)
    4a08:	defff604 	addi	sp,sp,-40
    4a0c:	ddc00715 	stw	r23,28(sp)
    4a10:	dd400515 	stw	r21,20(sp)
    4a14:	dfc00915 	stw	ra,36(sp)
    4a18:	df000815 	stw	fp,32(sp)
    4a1c:	dd800615 	stw	r22,24(sp)
    4a20:	dd000415 	stw	r20,16(sp)
    4a24:	dcc00315 	stw	r19,12(sp)
    4a28:	dc800215 	stw	r18,8(sp)
    4a2c:	dc400115 	stw	r17,4(sp)
    4a30:	dc000015 	stw	r16,0(sp)
    4a34:	202f883a 	mov	r23,r4
    4a38:	282b883a 	mov	r21,r5
    4a3c:	10c07416 	blt	r2,r3,4c10 <quorem+0x210>
    4a40:	1c7fffc4 	addi	r17,r3,-1
    4a44:	8c45883a 	add	r2,r17,r17
    4a48:	1085883a 	add	r2,r2,r2
    4a4c:	2c000504 	addi	r16,r5,20
    4a50:	24c00504 	addi	r19,r4,20
    4a54:	14ed883a 	add	r22,r2,r19
    4a58:	80a5883a 	add	r18,r16,r2
    4a5c:	b7000017 	ldw	fp,0(r22)
    4a60:	91400017 	ldw	r5,0(r18)
    4a64:	e009883a 	mov	r4,fp
    4a68:	29400044 	addi	r5,r5,1
    4a6c:	0001e280 	call	1e28 <__udivsi3>
    4a70:	1029883a 	mov	r20,r2
    4a74:	10003c1e 	bne	r2,zero,4b68 <quorem+0x168>
    4a78:	a80b883a 	mov	r5,r21
    4a7c:	b809883a 	mov	r4,r23
    4a80:	00077c80 	call	77c8 <__mcmp>
    4a84:	10002b16 	blt	r2,zero,4b34 <quorem+0x134>
    4a88:	a5000044 	addi	r20,r20,1
    4a8c:	980f883a 	mov	r7,r19
    4a90:	0011883a 	mov	r8,zero
    4a94:	0009883a 	mov	r4,zero
    4a98:	81400017 	ldw	r5,0(r16)
    4a9c:	38c00017 	ldw	r3,0(r7)
    4aa0:	84000104 	addi	r16,r16,4
    4aa4:	28bfffcc 	andi	r2,r5,65535
    4aa8:	2085883a 	add	r2,r4,r2
    4aac:	11bfffcc 	andi	r6,r2,65535
    4ab0:	193fffcc 	andi	r4,r3,65535
    4ab4:	1004d43a 	srli	r2,r2,16
    4ab8:	280ad43a 	srli	r5,r5,16
    4abc:	2189c83a 	sub	r4,r4,r6
    4ac0:	2209883a 	add	r4,r4,r8
    4ac4:	1806d43a 	srli	r3,r3,16
    4ac8:	288b883a 	add	r5,r5,r2
    4acc:	200dd43a 	srai	r6,r4,16
    4ad0:	28bfffcc 	andi	r2,r5,65535
    4ad4:	1887c83a 	sub	r3,r3,r2
    4ad8:	1987883a 	add	r3,r3,r6
    4adc:	3900000d 	sth	r4,0(r7)
    4ae0:	38c0008d 	sth	r3,2(r7)
    4ae4:	2808d43a 	srli	r4,r5,16
    4ae8:	39c00104 	addi	r7,r7,4
    4aec:	1811d43a 	srai	r8,r3,16
    4af0:	943fe92e 	bgeu	r18,r16,4a98 <quorem+0x98>
    4af4:	8c45883a 	add	r2,r17,r17
    4af8:	1085883a 	add	r2,r2,r2
    4afc:	9885883a 	add	r2,r19,r2
    4b00:	10c00017 	ldw	r3,0(r2)
    4b04:	18000b1e 	bne	r3,zero,4b34 <quorem+0x134>
    4b08:	113fff04 	addi	r4,r2,-4
    4b0c:	9900082e 	bgeu	r19,r4,4b30 <quorem+0x130>
    4b10:	10bfff17 	ldw	r2,-4(r2)
    4b14:	10000326 	beq	r2,zero,4b24 <quorem+0x124>
    4b18:	00000506 	br	4b30 <quorem+0x130>
    4b1c:	20800017 	ldw	r2,0(r4)
    4b20:	1000031e 	bne	r2,zero,4b30 <quorem+0x130>
    4b24:	213fff04 	addi	r4,r4,-4
    4b28:	8c7fffc4 	addi	r17,r17,-1
    4b2c:	993ffb36 	bltu	r19,r4,4b1c <quorem+0x11c>
    4b30:	bc400415 	stw	r17,16(r23)
    4b34:	a005883a 	mov	r2,r20
    4b38:	dfc00917 	ldw	ra,36(sp)
    4b3c:	df000817 	ldw	fp,32(sp)
    4b40:	ddc00717 	ldw	r23,28(sp)
    4b44:	dd800617 	ldw	r22,24(sp)
    4b48:	dd400517 	ldw	r21,20(sp)
    4b4c:	dd000417 	ldw	r20,16(sp)
    4b50:	dcc00317 	ldw	r19,12(sp)
    4b54:	dc800217 	ldw	r18,8(sp)
    4b58:	dc400117 	ldw	r17,4(sp)
    4b5c:	dc000017 	ldw	r16,0(sp)
    4b60:	dec00a04 	addi	sp,sp,40
    4b64:	f800283a 	ret
    4b68:	980f883a 	mov	r7,r19
    4b6c:	8011883a 	mov	r8,r16
    4b70:	0013883a 	mov	r9,zero
    4b74:	000d883a 	mov	r6,zero
    4b78:	40c00017 	ldw	r3,0(r8)
    4b7c:	39000017 	ldw	r4,0(r7)
    4b80:	42000104 	addi	r8,r8,4
    4b84:	18bfffcc 	andi	r2,r3,65535
    4b88:	a085383a 	mul	r2,r20,r2
    4b8c:	1806d43a 	srli	r3,r3,16
    4b90:	217fffcc 	andi	r5,r4,65535
    4b94:	3085883a 	add	r2,r6,r2
    4b98:	11bfffcc 	andi	r6,r2,65535
    4b9c:	a0c7383a 	mul	r3,r20,r3
    4ba0:	1004d43a 	srli	r2,r2,16
    4ba4:	298bc83a 	sub	r5,r5,r6
    4ba8:	2a4b883a 	add	r5,r5,r9
    4bac:	2008d43a 	srli	r4,r4,16
    4bb0:	1887883a 	add	r3,r3,r2
    4bb4:	280dd43a 	srai	r6,r5,16
    4bb8:	18bfffcc 	andi	r2,r3,65535
    4bbc:	2089c83a 	sub	r4,r4,r2
    4bc0:	2189883a 	add	r4,r4,r6
    4bc4:	3900008d 	sth	r4,2(r7)
    4bc8:	3940000d 	sth	r5,0(r7)
    4bcc:	180cd43a 	srli	r6,r3,16
    4bd0:	39c00104 	addi	r7,r7,4
    4bd4:	2013d43a 	srai	r9,r4,16
    4bd8:	923fe72e 	bgeu	r18,r8,4b78 <quorem+0x178>
    4bdc:	e03fa61e 	bne	fp,zero,4a78 <quorem+0x78>
    4be0:	b0ffff04 	addi	r3,r22,-4
    4be4:	98c0082e 	bgeu	r19,r3,4c08 <quorem+0x208>
    4be8:	b0bfff17 	ldw	r2,-4(r22)
    4bec:	10000326 	beq	r2,zero,4bfc <quorem+0x1fc>
    4bf0:	00000506 	br	4c08 <quorem+0x208>
    4bf4:	18800017 	ldw	r2,0(r3)
    4bf8:	1000031e 	bne	r2,zero,4c08 <quorem+0x208>
    4bfc:	18ffff04 	addi	r3,r3,-4
    4c00:	8c7fffc4 	addi	r17,r17,-1
    4c04:	98fffb36 	bltu	r19,r3,4bf4 <quorem+0x1f4>
    4c08:	bc400415 	stw	r17,16(r23)
    4c0c:	003f9a06 	br	4a78 <quorem+0x78>
    4c10:	0005883a 	mov	r2,zero
    4c14:	003fc806 	br	4b38 <quorem+0x138>

00004c18 <_dtoa_r>:
    4c18:	22001017 	ldw	r8,64(r4)
    4c1c:	deffda04 	addi	sp,sp,-152
    4c20:	dd402115 	stw	r21,132(sp)
    4c24:	dd002015 	stw	r20,128(sp)
    4c28:	dc801e15 	stw	r18,120(sp)
    4c2c:	dc401d15 	stw	r17,116(sp)
    4c30:	dfc02515 	stw	ra,148(sp)
    4c34:	df002415 	stw	fp,144(sp)
    4c38:	ddc02315 	stw	r23,140(sp)
    4c3c:	dd802215 	stw	r22,136(sp)
    4c40:	dcc01f15 	stw	r19,124(sp)
    4c44:	dc001c15 	stw	r16,112(sp)
    4c48:	d9001615 	stw	r4,88(sp)
    4c4c:	3023883a 	mov	r17,r6
    4c50:	2829883a 	mov	r20,r5
    4c54:	d9c01715 	stw	r7,92(sp)
    4c58:	dc802817 	ldw	r18,160(sp)
    4c5c:	302b883a 	mov	r21,r6
    4c60:	40000a26 	beq	r8,zero,4c8c <_dtoa_r+0x74>
    4c64:	20801117 	ldw	r2,68(r4)
    4c68:	400b883a 	mov	r5,r8
    4c6c:	40800115 	stw	r2,4(r8)
    4c70:	20c01117 	ldw	r3,68(r4)
    4c74:	00800044 	movi	r2,1
    4c78:	10c4983a 	sll	r2,r2,r3
    4c7c:	40800215 	stw	r2,8(r8)
    4c80:	000766c0 	call	766c <_Bfree>
    4c84:	d8c01617 	ldw	r3,88(sp)
    4c88:	18001015 	stw	zero,64(r3)
    4c8c:	8800a316 	blt	r17,zero,4f1c <_dtoa_r+0x304>
    4c90:	90000015 	stw	zero,0(r18)
    4c94:	a8dffc2c 	andhi	r3,r21,32752
    4c98:	009ffc34 	movhi	r2,32752
    4c9c:	18809126 	beq	r3,r2,4ee4 <_dtoa_r+0x2cc>
    4ca0:	000d883a 	mov	r6,zero
    4ca4:	000f883a 	mov	r7,zero
    4ca8:	a009883a 	mov	r4,r20
    4cac:	a80b883a 	mov	r5,r21
    4cb0:	dd001215 	stw	r20,72(sp)
    4cb4:	dd401315 	stw	r21,76(sp)
    4cb8:	000aa940 	call	aa94 <__nedf2>
    4cbc:	1000171e 	bne	r2,zero,4d1c <_dtoa_r+0x104>
    4cc0:	d9802717 	ldw	r6,156(sp)
    4cc4:	00800044 	movi	r2,1
    4cc8:	30800015 	stw	r2,0(r6)
    4ccc:	d8802917 	ldw	r2,164(sp)
    4cd0:	10029b26 	beq	r2,zero,5740 <_dtoa_r+0xb28>
    4cd4:	d9002917 	ldw	r4,164(sp)
    4cd8:	00800074 	movhi	r2,1
    4cdc:	10b8fe44 	addi	r2,r2,-7175
    4ce0:	10ffffc4 	addi	r3,r2,-1
    4ce4:	20800015 	stw	r2,0(r4)
    4ce8:	1805883a 	mov	r2,r3
    4cec:	dfc02517 	ldw	ra,148(sp)
    4cf0:	df002417 	ldw	fp,144(sp)
    4cf4:	ddc02317 	ldw	r23,140(sp)
    4cf8:	dd802217 	ldw	r22,136(sp)
    4cfc:	dd402117 	ldw	r21,132(sp)
    4d00:	dd002017 	ldw	r20,128(sp)
    4d04:	dcc01f17 	ldw	r19,124(sp)
    4d08:	dc801e17 	ldw	r18,120(sp)
    4d0c:	dc401d17 	ldw	r17,116(sp)
    4d10:	dc001c17 	ldw	r16,112(sp)
    4d14:	dec02604 	addi	sp,sp,152
    4d18:	f800283a 	ret
    4d1c:	d9001617 	ldw	r4,88(sp)
    4d20:	d9401217 	ldw	r5,72(sp)
    4d24:	d8800104 	addi	r2,sp,4
    4d28:	a80d883a 	mov	r6,r21
    4d2c:	d9c00204 	addi	r7,sp,8
    4d30:	d8800015 	stw	r2,0(sp)
    4d34:	0007ca80 	call	7ca8 <__d2b>
    4d38:	d8800715 	stw	r2,28(sp)
    4d3c:	a804d53a 	srli	r2,r21,20
    4d40:	1101ffcc 	andi	r4,r2,2047
    4d44:	20008626 	beq	r4,zero,4f60 <_dtoa_r+0x348>
    4d48:	d8c01217 	ldw	r3,72(sp)
    4d4c:	00800434 	movhi	r2,16
    4d50:	10bfffc4 	addi	r2,r2,-1
    4d54:	ddc00117 	ldw	r23,4(sp)
    4d58:	a884703a 	and	r2,r21,r2
    4d5c:	1811883a 	mov	r8,r3
    4d60:	124ffc34 	orhi	r9,r2,16368
    4d64:	25bf0044 	addi	r22,r4,-1023
    4d68:	d8000815 	stw	zero,32(sp)
    4d6c:	0005883a 	mov	r2,zero
    4d70:	00cffe34 	movhi	r3,16376
    4d74:	480b883a 	mov	r5,r9
    4d78:	4009883a 	mov	r4,r8
    4d7c:	180f883a 	mov	r7,r3
    4d80:	100d883a 	mov	r6,r2
    4d84:	000a2fc0 	call	a2fc <__subdf3>
    4d88:	0218dbf4 	movhi	r8,25455
    4d8c:	4210d844 	addi	r8,r8,17249
    4d90:	024ff4f4 	movhi	r9,16339
    4d94:	4a61e9c4 	addi	r9,r9,-30809
    4d98:	480f883a 	mov	r7,r9
    4d9c:	400d883a 	mov	r6,r8
    4da0:	180b883a 	mov	r5,r3
    4da4:	1009883a 	mov	r4,r2
    4da8:	000a3f00 	call	a3f0 <__muldf3>
    4dac:	0222d874 	movhi	r8,35681
    4db0:	42322cc4 	addi	r8,r8,-14157
    4db4:	024ff1f4 	movhi	r9,16327
    4db8:	4a628a04 	addi	r9,r9,-30168
    4dbc:	480f883a 	mov	r7,r9
    4dc0:	400d883a 	mov	r6,r8
    4dc4:	180b883a 	mov	r5,r3
    4dc8:	1009883a 	mov	r4,r2
    4dcc:	000a37c0 	call	a37c <__adddf3>
    4dd0:	b009883a 	mov	r4,r22
    4dd4:	1021883a 	mov	r16,r2
    4dd8:	1823883a 	mov	r17,r3
    4ddc:	000acb40 	call	acb4 <__floatsidf>
    4de0:	021427f4 	movhi	r8,20639
    4de4:	421e7ec4 	addi	r8,r8,31227
    4de8:	024ff4f4 	movhi	r9,16339
    4dec:	4a5104c4 	addi	r9,r9,17427
    4df0:	480f883a 	mov	r7,r9
    4df4:	400d883a 	mov	r6,r8
    4df8:	180b883a 	mov	r5,r3
    4dfc:	1009883a 	mov	r4,r2
    4e00:	000a3f00 	call	a3f0 <__muldf3>
    4e04:	180f883a 	mov	r7,r3
    4e08:	880b883a 	mov	r5,r17
    4e0c:	100d883a 	mov	r6,r2
    4e10:	8009883a 	mov	r4,r16
    4e14:	000a37c0 	call	a37c <__adddf3>
    4e18:	1009883a 	mov	r4,r2
    4e1c:	180b883a 	mov	r5,r3
    4e20:	1021883a 	mov	r16,r2
    4e24:	1823883a 	mov	r17,r3
    4e28:	000adac0 	call	adac <__fixdfsi>
    4e2c:	000d883a 	mov	r6,zero
    4e30:	000f883a 	mov	r7,zero
    4e34:	8009883a 	mov	r4,r16
    4e38:	880b883a 	mov	r5,r17
    4e3c:	d8800d15 	stw	r2,52(sp)
    4e40:	000ac2c0 	call	ac2c <__ltdf2>
    4e44:	10031716 	blt	r2,zero,5aa4 <_dtoa_r+0xe8c>
    4e48:	d8c00d17 	ldw	r3,52(sp)
    4e4c:	00800584 	movi	r2,22
    4e50:	10c1482e 	bgeu	r2,r3,5374 <_dtoa_r+0x75c>
    4e54:	01000044 	movi	r4,1
    4e58:	d9000c15 	stw	r4,48(sp)
    4e5c:	bd85c83a 	sub	r2,r23,r22
    4e60:	11bfffc4 	addi	r6,r2,-1
    4e64:	30030b16 	blt	r6,zero,5a94 <_dtoa_r+0xe7c>
    4e68:	d9800a15 	stw	r6,40(sp)
    4e6c:	d8001115 	stw	zero,68(sp)
    4e70:	d8c00d17 	ldw	r3,52(sp)
    4e74:	1802ff16 	blt	r3,zero,5a74 <_dtoa_r+0xe5c>
    4e78:	d9000a17 	ldw	r4,40(sp)
    4e7c:	d8c00915 	stw	r3,36(sp)
    4e80:	d8001015 	stw	zero,64(sp)
    4e84:	20c9883a 	add	r4,r4,r3
    4e88:	d9000a15 	stw	r4,40(sp)
    4e8c:	d9001717 	ldw	r4,92(sp)
    4e90:	00800244 	movi	r2,9
    4e94:	11004636 	bltu	r2,r4,4fb0 <_dtoa_r+0x398>
    4e98:	00800144 	movi	r2,5
    4e9c:	11020416 	blt	r2,r4,56b0 <_dtoa_r+0xa98>
    4ea0:	04400044 	movi	r17,1
    4ea4:	d8c01717 	ldw	r3,92(sp)
    4ea8:	00800144 	movi	r2,5
    4eac:	10c1ed36 	bltu	r2,r3,5664 <_dtoa_r+0xa4c>
    4eb0:	18c5883a 	add	r2,r3,r3
    4eb4:	1085883a 	add	r2,r2,r2
    4eb8:	00c00034 	movhi	r3,0
    4ebc:	18d3b304 	addi	r3,r3,20172
    4ec0:	10c5883a 	add	r2,r2,r3
    4ec4:	11000017 	ldw	r4,0(r2)
    4ec8:	2000683a 	jmp	r4
    4ecc:	00004fb8 	rdprs	zero,zero,318
    4ed0:	00004fb8 	rdprs	zero,zero,318
    4ed4:	000059b8 	rdprs	zero,zero,358
    4ed8:	00005990 	cmplti	zero,zero,358
    4edc:	000059d4 	movui	zero,359
    4ee0:	000059e0 	cmpeqi	zero,zero,359
    4ee4:	d9002717 	ldw	r4,156(sp)
    4ee8:	0089c3c4 	movi	r2,9999
    4eec:	20800015 	stw	r2,0(r4)
    4ef0:	a0001026 	beq	r20,zero,4f34 <_dtoa_r+0x31c>
    4ef4:	00c00074 	movhi	r3,1
    4ef8:	18f90a04 	addi	r3,r3,-7128
    4efc:	d9802917 	ldw	r6,164(sp)
    4f00:	303f7926 	beq	r6,zero,4ce8 <_dtoa_r+0xd0>
    4f04:	188000c7 	ldb	r2,3(r3)
    4f08:	190000c4 	addi	r4,r3,3
    4f0c:	1000101e 	bne	r2,zero,4f50 <_dtoa_r+0x338>
    4f10:	d8802917 	ldw	r2,164(sp)
    4f14:	11000015 	stw	r4,0(r2)
    4f18:	003f7306 	br	4ce8 <_dtoa_r+0xd0>
    4f1c:	00a00034 	movhi	r2,32768
    4f20:	10bfffc4 	addi	r2,r2,-1
    4f24:	00c00044 	movi	r3,1
    4f28:	88aa703a 	and	r21,r17,r2
    4f2c:	90c00015 	stw	r3,0(r18)
    4f30:	003f5806 	br	4c94 <_dtoa_r+0x7c>
    4f34:	00800434 	movhi	r2,16
    4f38:	10bfffc4 	addi	r2,r2,-1
    4f3c:	a884703a 	and	r2,r21,r2
    4f40:	103fec1e 	bne	r2,zero,4ef4 <_dtoa_r+0x2dc>
    4f44:	00c00074 	movhi	r3,1
    4f48:	18f90704 	addi	r3,r3,-7140
    4f4c:	003feb06 	br	4efc <_dtoa_r+0x2e4>
    4f50:	d8802917 	ldw	r2,164(sp)
    4f54:	19000204 	addi	r4,r3,8
    4f58:	11000015 	stw	r4,0(r2)
    4f5c:	003f6206 	br	4ce8 <_dtoa_r+0xd0>
    4f60:	ddc00117 	ldw	r23,4(sp)
    4f64:	d8800217 	ldw	r2,8(sp)
    4f68:	01000804 	movi	r4,32
    4f6c:	b8c10c84 	addi	r3,r23,1074
    4f70:	18a3883a 	add	r17,r3,r2
    4f74:	2441b80e 	bge	r4,r17,5658 <_dtoa_r+0xa40>
    4f78:	00c01004 	movi	r3,64
    4f7c:	1c47c83a 	sub	r3,r3,r17
    4f80:	88bff804 	addi	r2,r17,-32
    4f84:	a8c6983a 	sll	r3,r21,r3
    4f88:	a084d83a 	srl	r2,r20,r2
    4f8c:	1888b03a 	or	r4,r3,r2
    4f90:	000ae840 	call	ae84 <__floatunsidf>
    4f94:	1011883a 	mov	r8,r2
    4f98:	00bf8434 	movhi	r2,65040
    4f9c:	01000044 	movi	r4,1
    4fa0:	10d3883a 	add	r9,r2,r3
    4fa4:	8dbef344 	addi	r22,r17,-1075
    4fa8:	d9000815 	stw	r4,32(sp)
    4fac:	003f6f06 	br	4d6c <_dtoa_r+0x154>
    4fb0:	d8001715 	stw	zero,92(sp)
    4fb4:	04400044 	movi	r17,1
    4fb8:	00bfffc4 	movi	r2,-1
    4fbc:	00c00044 	movi	r3,1
    4fc0:	d8800e15 	stw	r2,56(sp)
    4fc4:	d8002615 	stw	zero,152(sp)
    4fc8:	d8800f15 	stw	r2,60(sp)
    4fcc:	d8c00b15 	stw	r3,44(sp)
    4fd0:	1021883a 	mov	r16,r2
    4fd4:	d8801617 	ldw	r2,88(sp)
    4fd8:	10001115 	stw	zero,68(r2)
    4fdc:	d8801617 	ldw	r2,88(sp)
    4fe0:	11401117 	ldw	r5,68(r2)
    4fe4:	1009883a 	mov	r4,r2
    4fe8:	0007bec0 	call	7bec <_Balloc>
    4fec:	d8c01617 	ldw	r3,88(sp)
    4ff0:	d8800515 	stw	r2,20(sp)
    4ff4:	18801015 	stw	r2,64(r3)
    4ff8:	00800384 	movi	r2,14
    4ffc:	14006836 	bltu	r2,r16,51a0 <_dtoa_r+0x588>
    5000:	8805003a 	cmpeq	r2,r17,zero
    5004:	1000661e 	bne	r2,zero,51a0 <_dtoa_r+0x588>
    5008:	d9000d17 	ldw	r4,52(sp)
    500c:	0102300e 	bge	zero,r4,58d0 <_dtoa_r+0xcb8>
    5010:	208003cc 	andi	r2,r4,15
    5014:	100490fa 	slli	r2,r2,3
    5018:	2025d13a 	srai	r18,r4,4
    501c:	00c00074 	movhi	r3,1
    5020:	18f91b04 	addi	r3,r3,-7060
    5024:	10c5883a 	add	r2,r2,r3
    5028:	90c0040c 	andi	r3,r18,16
    502c:	14000017 	ldw	r16,0(r2)
    5030:	14400117 	ldw	r17,4(r2)
    5034:	18036a1e 	bne	r3,zero,5de0 <_dtoa_r+0x11c8>
    5038:	05800084 	movi	r22,2
    503c:	90001026 	beq	r18,zero,5080 <_dtoa_r+0x468>
    5040:	04c00074 	movhi	r19,1
    5044:	9cf94d04 	addi	r19,r19,-6860
    5048:	9080004c 	andi	r2,r18,1
    504c:	1005003a 	cmpeq	r2,r2,zero
    5050:	1000081e 	bne	r2,zero,5074 <_dtoa_r+0x45c>
    5054:	99800017 	ldw	r6,0(r19)
    5058:	99c00117 	ldw	r7,4(r19)
    505c:	880b883a 	mov	r5,r17
    5060:	8009883a 	mov	r4,r16
    5064:	000a3f00 	call	a3f0 <__muldf3>
    5068:	1021883a 	mov	r16,r2
    506c:	b5800044 	addi	r22,r22,1
    5070:	1823883a 	mov	r17,r3
    5074:	9025d07a 	srai	r18,r18,1
    5078:	9cc00204 	addi	r19,r19,8
    507c:	903ff21e 	bne	r18,zero,5048 <_dtoa_r+0x430>
    5080:	a80b883a 	mov	r5,r21
    5084:	a009883a 	mov	r4,r20
    5088:	880f883a 	mov	r7,r17
    508c:	800d883a 	mov	r6,r16
    5090:	000a7b40 	call	a7b4 <__divdf3>
    5094:	1029883a 	mov	r20,r2
    5098:	182b883a 	mov	r21,r3
    509c:	d8c00c17 	ldw	r3,48(sp)
    50a0:	1805003a 	cmpeq	r2,r3,zero
    50a4:	1000081e 	bne	r2,zero,50c8 <_dtoa_r+0x4b0>
    50a8:	0005883a 	mov	r2,zero
    50ac:	00cffc34 	movhi	r3,16368
    50b0:	180f883a 	mov	r7,r3
    50b4:	a009883a 	mov	r4,r20
    50b8:	a80b883a 	mov	r5,r21
    50bc:	100d883a 	mov	r6,r2
    50c0:	000ac2c0 	call	ac2c <__ltdf2>
    50c4:	1003fe16 	blt	r2,zero,60c0 <_dtoa_r+0x14a8>
    50c8:	b009883a 	mov	r4,r22
    50cc:	000acb40 	call	acb4 <__floatsidf>
    50d0:	180b883a 	mov	r5,r3
    50d4:	1009883a 	mov	r4,r2
    50d8:	a00d883a 	mov	r6,r20
    50dc:	a80f883a 	mov	r7,r21
    50e0:	000a3f00 	call	a3f0 <__muldf3>
    50e4:	0011883a 	mov	r8,zero
    50e8:	02500734 	movhi	r9,16412
    50ec:	1009883a 	mov	r4,r2
    50f0:	180b883a 	mov	r5,r3
    50f4:	480f883a 	mov	r7,r9
    50f8:	400d883a 	mov	r6,r8
    50fc:	000a37c0 	call	a37c <__adddf3>
    5100:	d9000f17 	ldw	r4,60(sp)
    5104:	102d883a 	mov	r22,r2
    5108:	00bf3034 	movhi	r2,64704
    510c:	18b9883a 	add	fp,r3,r2
    5110:	e02f883a 	mov	r23,fp
    5114:	20028f1e 	bne	r4,zero,5b54 <_dtoa_r+0xf3c>
    5118:	0005883a 	mov	r2,zero
    511c:	00d00534 	movhi	r3,16404
    5120:	a009883a 	mov	r4,r20
    5124:	a80b883a 	mov	r5,r21
    5128:	180f883a 	mov	r7,r3
    512c:	100d883a 	mov	r6,r2
    5130:	000a2fc0 	call	a2fc <__subdf3>
    5134:	1009883a 	mov	r4,r2
    5138:	e00f883a 	mov	r7,fp
    513c:	180b883a 	mov	r5,r3
    5140:	b00d883a 	mov	r6,r22
    5144:	1025883a 	mov	r18,r2
    5148:	1827883a 	mov	r19,r3
    514c:	000ab1c0 	call	ab1c <__gtdf2>
    5150:	00834f16 	blt	zero,r2,5e90 <_dtoa_r+0x1278>
    5154:	e0e0003c 	xorhi	r3,fp,32768
    5158:	9009883a 	mov	r4,r18
    515c:	980b883a 	mov	r5,r19
    5160:	180f883a 	mov	r7,r3
    5164:	b00d883a 	mov	r6,r22
    5168:	000ac2c0 	call	ac2c <__ltdf2>
    516c:	1000080e 	bge	r2,zero,5190 <_dtoa_r+0x578>
    5170:	0027883a 	mov	r19,zero
    5174:	0025883a 	mov	r18,zero
    5178:	d8802617 	ldw	r2,152(sp)
    517c:	df000517 	ldw	fp,20(sp)
    5180:	d8000615 	stw	zero,24(sp)
    5184:	0084303a 	nor	r2,zero,r2
    5188:	d8800d15 	stw	r2,52(sp)
    518c:	00019b06 	br	57fc <_dtoa_r+0xbe4>
    5190:	d9801217 	ldw	r6,72(sp)
    5194:	d8801317 	ldw	r2,76(sp)
    5198:	3029883a 	mov	r20,r6
    519c:	102b883a 	mov	r21,r2
    51a0:	d8c00217 	ldw	r3,8(sp)
    51a4:	18008516 	blt	r3,zero,53bc <_dtoa_r+0x7a4>
    51a8:	d9000d17 	ldw	r4,52(sp)
    51ac:	00800384 	movi	r2,14
    51b0:	11008216 	blt	r2,r4,53bc <_dtoa_r+0x7a4>
    51b4:	200490fa 	slli	r2,r4,3
    51b8:	d9802617 	ldw	r6,152(sp)
    51bc:	00c00074 	movhi	r3,1
    51c0:	18f91b04 	addi	r3,r3,-7060
    51c4:	10c5883a 	add	r2,r2,r3
    51c8:	14800017 	ldw	r18,0(r2)
    51cc:	14c00117 	ldw	r19,4(r2)
    51d0:	30031e16 	blt	r6,zero,5e4c <_dtoa_r+0x1234>
    51d4:	d9000517 	ldw	r4,20(sp)
    51d8:	d8c00f17 	ldw	r3,60(sp)
    51dc:	a823883a 	mov	r17,r21
    51e0:	a021883a 	mov	r16,r20
    51e4:	192b883a 	add	r21,r3,r4
    51e8:	2039883a 	mov	fp,r4
    51ec:	00000f06 	br	522c <_dtoa_r+0x614>
    51f0:	0005883a 	mov	r2,zero
    51f4:	00d00934 	movhi	r3,16420
    51f8:	5009883a 	mov	r4,r10
    51fc:	580b883a 	mov	r5,r11
    5200:	180f883a 	mov	r7,r3
    5204:	100d883a 	mov	r6,r2
    5208:	000a3f00 	call	a3f0 <__muldf3>
    520c:	180b883a 	mov	r5,r3
    5210:	000d883a 	mov	r6,zero
    5214:	000f883a 	mov	r7,zero
    5218:	1009883a 	mov	r4,r2
    521c:	1021883a 	mov	r16,r2
    5220:	1823883a 	mov	r17,r3
    5224:	000aa940 	call	aa94 <__nedf2>
    5228:	10004526 	beq	r2,zero,5340 <_dtoa_r+0x728>
    522c:	900d883a 	mov	r6,r18
    5230:	980f883a 	mov	r7,r19
    5234:	8009883a 	mov	r4,r16
    5238:	880b883a 	mov	r5,r17
    523c:	000a7b40 	call	a7b4 <__divdf3>
    5240:	180b883a 	mov	r5,r3
    5244:	1009883a 	mov	r4,r2
    5248:	000adac0 	call	adac <__fixdfsi>
    524c:	1009883a 	mov	r4,r2
    5250:	1029883a 	mov	r20,r2
    5254:	000acb40 	call	acb4 <__floatsidf>
    5258:	180f883a 	mov	r7,r3
    525c:	9009883a 	mov	r4,r18
    5260:	980b883a 	mov	r5,r19
    5264:	100d883a 	mov	r6,r2
    5268:	000a3f00 	call	a3f0 <__muldf3>
    526c:	180f883a 	mov	r7,r3
    5270:	880b883a 	mov	r5,r17
    5274:	8009883a 	mov	r4,r16
    5278:	100d883a 	mov	r6,r2
    527c:	000a2fc0 	call	a2fc <__subdf3>
    5280:	1015883a 	mov	r10,r2
    5284:	a0800c04 	addi	r2,r20,48
    5288:	e0800005 	stb	r2,0(fp)
    528c:	e7000044 	addi	fp,fp,1
    5290:	1817883a 	mov	r11,r3
    5294:	e57fd61e 	bne	fp,r21,51f0 <_dtoa_r+0x5d8>
    5298:	500d883a 	mov	r6,r10
    529c:	180f883a 	mov	r7,r3
    52a0:	5009883a 	mov	r4,r10
    52a4:	180b883a 	mov	r5,r3
    52a8:	000a37c0 	call	a37c <__adddf3>
    52ac:	100d883a 	mov	r6,r2
    52b0:	9009883a 	mov	r4,r18
    52b4:	980b883a 	mov	r5,r19
    52b8:	180f883a 	mov	r7,r3
    52bc:	1021883a 	mov	r16,r2
    52c0:	1823883a 	mov	r17,r3
    52c4:	000ac2c0 	call	ac2c <__ltdf2>
    52c8:	10000816 	blt	r2,zero,52ec <_dtoa_r+0x6d4>
    52cc:	980b883a 	mov	r5,r19
    52d0:	800d883a 	mov	r6,r16
    52d4:	880f883a 	mov	r7,r17
    52d8:	9009883a 	mov	r4,r18
    52dc:	000aa0c0 	call	aa0c <__eqdf2>
    52e0:	1000171e 	bne	r2,zero,5340 <_dtoa_r+0x728>
    52e4:	a080004c 	andi	r2,r20,1
    52e8:	10001526 	beq	r2,zero,5340 <_dtoa_r+0x728>
    52ec:	d8800d17 	ldw	r2,52(sp)
    52f0:	d8800415 	stw	r2,16(sp)
    52f4:	e009883a 	mov	r4,fp
    52f8:	213fffc4 	addi	r4,r4,-1
    52fc:	20c00007 	ldb	r3,0(r4)
    5300:	00800e44 	movi	r2,57
    5304:	1880081e 	bne	r3,r2,5328 <_dtoa_r+0x710>
    5308:	d8800517 	ldw	r2,20(sp)
    530c:	113ffa1e 	bne	r2,r4,52f8 <_dtoa_r+0x6e0>
    5310:	d8c00417 	ldw	r3,16(sp)
    5314:	d9800517 	ldw	r6,20(sp)
    5318:	00800c04 	movi	r2,48
    531c:	18c00044 	addi	r3,r3,1
    5320:	d8c00415 	stw	r3,16(sp)
    5324:	30800005 	stb	r2,0(r6)
    5328:	20800003 	ldbu	r2,0(r4)
    532c:	d8c00417 	ldw	r3,16(sp)
    5330:	27000044 	addi	fp,r4,1
    5334:	10800044 	addi	r2,r2,1
    5338:	d8c00d15 	stw	r3,52(sp)
    533c:	20800005 	stb	r2,0(r4)
    5340:	d9001617 	ldw	r4,88(sp)
    5344:	d9400717 	ldw	r5,28(sp)
    5348:	000766c0 	call	766c <_Bfree>
    534c:	e0000005 	stb	zero,0(fp)
    5350:	d9800d17 	ldw	r6,52(sp)
    5354:	d8c02717 	ldw	r3,156(sp)
    5358:	d9002917 	ldw	r4,164(sp)
    535c:	30800044 	addi	r2,r6,1
    5360:	18800015 	stw	r2,0(r3)
    5364:	20029c26 	beq	r4,zero,5dd8 <_dtoa_r+0x11c0>
    5368:	d8c00517 	ldw	r3,20(sp)
    536c:	27000015 	stw	fp,0(r4)
    5370:	003e5d06 	br	4ce8 <_dtoa_r+0xd0>
    5374:	d9800d17 	ldw	r6,52(sp)
    5378:	00c00074 	movhi	r3,1
    537c:	18f91b04 	addi	r3,r3,-7060
    5380:	d9001217 	ldw	r4,72(sp)
    5384:	300490fa 	slli	r2,r6,3
    5388:	d9401317 	ldw	r5,76(sp)
    538c:	10c5883a 	add	r2,r2,r3
    5390:	12000017 	ldw	r8,0(r2)
    5394:	12400117 	ldw	r9,4(r2)
    5398:	400d883a 	mov	r6,r8
    539c:	480f883a 	mov	r7,r9
    53a0:	000ac2c0 	call	ac2c <__ltdf2>
    53a4:	1000030e 	bge	r2,zero,53b4 <_dtoa_r+0x79c>
    53a8:	d8800d17 	ldw	r2,52(sp)
    53ac:	10bfffc4 	addi	r2,r2,-1
    53b0:	d8800d15 	stw	r2,52(sp)
    53b4:	d8000c15 	stw	zero,48(sp)
    53b8:	003ea806 	br	4e5c <_dtoa_r+0x244>
    53bc:	d9000b17 	ldw	r4,44(sp)
    53c0:	202cc03a 	cmpne	r22,r4,zero
    53c4:	b000c71e 	bne	r22,zero,56e4 <_dtoa_r+0xacc>
    53c8:	dc001117 	ldw	r16,68(sp)
    53cc:	dc801017 	ldw	r18,64(sp)
    53d0:	0027883a 	mov	r19,zero
    53d4:	04000b0e 	bge	zero,r16,5404 <_dtoa_r+0x7ec>
    53d8:	d8c00a17 	ldw	r3,40(sp)
    53dc:	00c0090e 	bge	zero,r3,5404 <_dtoa_r+0x7ec>
    53e0:	8005883a 	mov	r2,r16
    53e4:	1c011316 	blt	r3,r16,5834 <_dtoa_r+0xc1c>
    53e8:	d9000a17 	ldw	r4,40(sp)
    53ec:	d9801117 	ldw	r6,68(sp)
    53f0:	80a1c83a 	sub	r16,r16,r2
    53f4:	2089c83a 	sub	r4,r4,r2
    53f8:	308dc83a 	sub	r6,r6,r2
    53fc:	d9000a15 	stw	r4,40(sp)
    5400:	d9801115 	stw	r6,68(sp)
    5404:	d8801017 	ldw	r2,64(sp)
    5408:	0080150e 	bge	zero,r2,5460 <_dtoa_r+0x848>
    540c:	d8c00b17 	ldw	r3,44(sp)
    5410:	1805003a 	cmpeq	r2,r3,zero
    5414:	1001c91e 	bne	r2,zero,5b3c <_dtoa_r+0xf24>
    5418:	04800e0e 	bge	zero,r18,5454 <_dtoa_r+0x83c>
    541c:	d9001617 	ldw	r4,88(sp)
    5420:	980b883a 	mov	r5,r19
    5424:	900d883a 	mov	r6,r18
    5428:	00084200 	call	8420 <__pow5mult>
    542c:	d9001617 	ldw	r4,88(sp)
    5430:	d9800717 	ldw	r6,28(sp)
    5434:	100b883a 	mov	r5,r2
    5438:	1027883a 	mov	r19,r2
    543c:	00080fc0 	call	80fc <__multiply>
    5440:	d9001617 	ldw	r4,88(sp)
    5444:	d9400717 	ldw	r5,28(sp)
    5448:	1023883a 	mov	r17,r2
    544c:	000766c0 	call	766c <_Bfree>
    5450:	dc400715 	stw	r17,28(sp)
    5454:	d9001017 	ldw	r4,64(sp)
    5458:	248dc83a 	sub	r6,r4,r18
    545c:	30010e1e 	bne	r6,zero,5898 <_dtoa_r+0xc80>
    5460:	d9001617 	ldw	r4,88(sp)
    5464:	04400044 	movi	r17,1
    5468:	880b883a 	mov	r5,r17
    546c:	00082e40 	call	82e4 <__i2b>
    5470:	d9800917 	ldw	r6,36(sp)
    5474:	1025883a 	mov	r18,r2
    5478:	0180040e 	bge	zero,r6,548c <_dtoa_r+0x874>
    547c:	d9001617 	ldw	r4,88(sp)
    5480:	100b883a 	mov	r5,r2
    5484:	00084200 	call	8420 <__pow5mult>
    5488:	1025883a 	mov	r18,r2
    548c:	d8801717 	ldw	r2,92(sp)
    5490:	8880f30e 	bge	r17,r2,5860 <_dtoa_r+0xc48>
    5494:	0023883a 	mov	r17,zero
    5498:	d9800917 	ldw	r6,36(sp)
    549c:	30019e1e 	bne	r6,zero,5b18 <_dtoa_r+0xf00>
    54a0:	00c00044 	movi	r3,1
    54a4:	d9000a17 	ldw	r4,40(sp)
    54a8:	20c5883a 	add	r2,r4,r3
    54ac:	10c007cc 	andi	r3,r2,31
    54b0:	1800841e 	bne	r3,zero,56c4 <_dtoa_r+0xaac>
    54b4:	00800704 	movi	r2,28
    54b8:	d9000a17 	ldw	r4,40(sp)
    54bc:	d9801117 	ldw	r6,68(sp)
    54c0:	80a1883a 	add	r16,r16,r2
    54c4:	2089883a 	add	r4,r4,r2
    54c8:	308d883a 	add	r6,r6,r2
    54cc:	d9000a15 	stw	r4,40(sp)
    54d0:	d9801115 	stw	r6,68(sp)
    54d4:	d8801117 	ldw	r2,68(sp)
    54d8:	0080050e 	bge	zero,r2,54f0 <_dtoa_r+0x8d8>
    54dc:	d9400717 	ldw	r5,28(sp)
    54e0:	d9001617 	ldw	r4,88(sp)
    54e4:	100d883a 	mov	r6,r2
    54e8:	0007fb00 	call	7fb0 <__lshift>
    54ec:	d8800715 	stw	r2,28(sp)
    54f0:	d8c00a17 	ldw	r3,40(sp)
    54f4:	00c0050e 	bge	zero,r3,550c <_dtoa_r+0x8f4>
    54f8:	d9001617 	ldw	r4,88(sp)
    54fc:	900b883a 	mov	r5,r18
    5500:	180d883a 	mov	r6,r3
    5504:	0007fb00 	call	7fb0 <__lshift>
    5508:	1025883a 	mov	r18,r2
    550c:	d9000c17 	ldw	r4,48(sp)
    5510:	2005003a 	cmpeq	r2,r4,zero
    5514:	10016f26 	beq	r2,zero,5ad4 <_dtoa_r+0xebc>
    5518:	d9000f17 	ldw	r4,60(sp)
    551c:	0102170e 	bge	zero,r4,5d7c <_dtoa_r+0x1164>
    5520:	d9800b17 	ldw	r6,44(sp)
    5524:	3005003a 	cmpeq	r2,r6,zero
    5528:	1000881e 	bne	r2,zero,574c <_dtoa_r+0xb34>
    552c:	0400050e 	bge	zero,r16,5544 <_dtoa_r+0x92c>
    5530:	d9001617 	ldw	r4,88(sp)
    5534:	980b883a 	mov	r5,r19
    5538:	800d883a 	mov	r6,r16
    553c:	0007fb00 	call	7fb0 <__lshift>
    5540:	1027883a 	mov	r19,r2
    5544:	8804c03a 	cmpne	r2,r17,zero
    5548:	1002541e 	bne	r2,zero,5e9c <_dtoa_r+0x1284>
    554c:	980b883a 	mov	r5,r19
    5550:	dd800517 	ldw	r22,20(sp)
    5554:	dcc00615 	stw	r19,24(sp)
    5558:	a700004c 	andi	fp,r20,1
    555c:	2827883a 	mov	r19,r5
    5560:	d9000717 	ldw	r4,28(sp)
    5564:	900b883a 	mov	r5,r18
    5568:	0004a000 	call	4a00 <quorem>
    556c:	d9000717 	ldw	r4,28(sp)
    5570:	d9400617 	ldw	r5,24(sp)
    5574:	1023883a 	mov	r17,r2
    5578:	8dc00c04 	addi	r23,r17,48
    557c:	00077c80 	call	77c8 <__mcmp>
    5580:	d9001617 	ldw	r4,88(sp)
    5584:	900b883a 	mov	r5,r18
    5588:	980d883a 	mov	r6,r19
    558c:	1029883a 	mov	r20,r2
    5590:	0007e240 	call	7e24 <__mdiff>
    5594:	102b883a 	mov	r21,r2
    5598:	10800317 	ldw	r2,12(r2)
    559c:	1001281e 	bne	r2,zero,5a40 <_dtoa_r+0xe28>
    55a0:	d9000717 	ldw	r4,28(sp)
    55a4:	a80b883a 	mov	r5,r21
    55a8:	00077c80 	call	77c8 <__mcmp>
    55ac:	d9001617 	ldw	r4,88(sp)
    55b0:	1021883a 	mov	r16,r2
    55b4:	a80b883a 	mov	r5,r21
    55b8:	000766c0 	call	766c <_Bfree>
    55bc:	8000041e 	bne	r16,zero,55d0 <_dtoa_r+0x9b8>
    55c0:	d8801717 	ldw	r2,92(sp)
    55c4:	1000021e 	bne	r2,zero,55d0 <_dtoa_r+0x9b8>
    55c8:	e004c03a 	cmpne	r2,fp,zero
    55cc:	10011726 	beq	r2,zero,5a2c <_dtoa_r+0xe14>
    55d0:	a0010616 	blt	r20,zero,59ec <_dtoa_r+0xdd4>
    55d4:	a000041e 	bne	r20,zero,55e8 <_dtoa_r+0x9d0>
    55d8:	d8c01717 	ldw	r3,92(sp)
    55dc:	1800021e 	bne	r3,zero,55e8 <_dtoa_r+0x9d0>
    55e0:	e004c03a 	cmpne	r2,fp,zero
    55e4:	10010126 	beq	r2,zero,59ec <_dtoa_r+0xdd4>
    55e8:	04023d16 	blt	zero,r16,5ee0 <_dtoa_r+0x12c8>
    55ec:	b5c00005 	stb	r23,0(r22)
    55f0:	d9800517 	ldw	r6,20(sp)
    55f4:	d9000f17 	ldw	r4,60(sp)
    55f8:	b5800044 	addi	r22,r22,1
    55fc:	3105883a 	add	r2,r6,r4
    5600:	b0806526 	beq	r22,r2,5798 <_dtoa_r+0xb80>
    5604:	d9400717 	ldw	r5,28(sp)
    5608:	d9001617 	ldw	r4,88(sp)
    560c:	01800284 	movi	r6,10
    5610:	000f883a 	mov	r7,zero
    5614:	00083200 	call	8320 <__multadd>
    5618:	d8800715 	stw	r2,28(sp)
    561c:	d8800617 	ldw	r2,24(sp)
    5620:	14c10c26 	beq	r2,r19,5a54 <_dtoa_r+0xe3c>
    5624:	d9400617 	ldw	r5,24(sp)
    5628:	d9001617 	ldw	r4,88(sp)
    562c:	01800284 	movi	r6,10
    5630:	000f883a 	mov	r7,zero
    5634:	00083200 	call	8320 <__multadd>
    5638:	d9001617 	ldw	r4,88(sp)
    563c:	980b883a 	mov	r5,r19
    5640:	01800284 	movi	r6,10
    5644:	000f883a 	mov	r7,zero
    5648:	d8800615 	stw	r2,24(sp)
    564c:	00083200 	call	8320 <__multadd>
    5650:	1027883a 	mov	r19,r2
    5654:	003fc206 	br	5560 <_dtoa_r+0x948>
    5658:	2445c83a 	sub	r2,r4,r17
    565c:	a088983a 	sll	r4,r20,r2
    5660:	003e4b06 	br	4f90 <_dtoa_r+0x378>
    5664:	01bfffc4 	movi	r6,-1
    5668:	00800044 	movi	r2,1
    566c:	d9800e15 	stw	r6,56(sp)
    5670:	d9800f15 	stw	r6,60(sp)
    5674:	d8800b15 	stw	r2,44(sp)
    5678:	d8c01617 	ldw	r3,88(sp)
    567c:	008005c4 	movi	r2,23
    5680:	18001115 	stw	zero,68(r3)
    5684:	1580082e 	bgeu	r2,r22,56a8 <_dtoa_r+0xa90>
    5688:	00c00104 	movi	r3,4
    568c:	0009883a 	mov	r4,zero
    5690:	18c7883a 	add	r3,r3,r3
    5694:	18800504 	addi	r2,r3,20
    5698:	21000044 	addi	r4,r4,1
    569c:	b0bffc2e 	bgeu	r22,r2,5690 <_dtoa_r+0xa78>
    56a0:	d9801617 	ldw	r6,88(sp)
    56a4:	31001115 	stw	r4,68(r6)
    56a8:	dc000f17 	ldw	r16,60(sp)
    56ac:	003e4b06 	br	4fdc <_dtoa_r+0x3c4>
    56b0:	d9801717 	ldw	r6,92(sp)
    56b4:	0023883a 	mov	r17,zero
    56b8:	31bfff04 	addi	r6,r6,-4
    56bc:	d9801715 	stw	r6,92(sp)
    56c0:	003df806 	br	4ea4 <_dtoa_r+0x28c>
    56c4:	00800804 	movi	r2,32
    56c8:	10c9c83a 	sub	r4,r2,r3
    56cc:	00c00104 	movi	r3,4
    56d0:	19005a16 	blt	r3,r4,583c <_dtoa_r+0xc24>
    56d4:	008000c4 	movi	r2,3
    56d8:	113f7e16 	blt	r2,r4,54d4 <_dtoa_r+0x8bc>
    56dc:	20800704 	addi	r2,r4,28
    56e0:	003f7506 	br	54b8 <_dtoa_r+0x8a0>
    56e4:	d9801717 	ldw	r6,92(sp)
    56e8:	00800044 	movi	r2,1
    56ec:	1180a10e 	bge	r2,r6,5974 <_dtoa_r+0xd5c>
    56f0:	d9800f17 	ldw	r6,60(sp)
    56f4:	d8c01017 	ldw	r3,64(sp)
    56f8:	30bfffc4 	addi	r2,r6,-1
    56fc:	1881c616 	blt	r3,r2,5e18 <_dtoa_r+0x1200>
    5700:	18a5c83a 	sub	r18,r3,r2
    5704:	d8800f17 	ldw	r2,60(sp)
    5708:	10026216 	blt	r2,zero,6094 <_dtoa_r+0x147c>
    570c:	dc001117 	ldw	r16,68(sp)
    5710:	1007883a 	mov	r3,r2
    5714:	d9800a17 	ldw	r6,40(sp)
    5718:	d8801117 	ldw	r2,68(sp)
    571c:	d9001617 	ldw	r4,88(sp)
    5720:	30cd883a 	add	r6,r6,r3
    5724:	10c5883a 	add	r2,r2,r3
    5728:	01400044 	movi	r5,1
    572c:	d9800a15 	stw	r6,40(sp)
    5730:	d8801115 	stw	r2,68(sp)
    5734:	00082e40 	call	82e4 <__i2b>
    5738:	1027883a 	mov	r19,r2
    573c:	003f2506 	br	53d4 <_dtoa_r+0x7bc>
    5740:	00c00074 	movhi	r3,1
    5744:	18f8fe04 	addi	r3,r3,-7176
    5748:	003d6706 	br	4ce8 <_dtoa_r+0xd0>
    574c:	dd800517 	ldw	r22,20(sp)
    5750:	04000044 	movi	r16,1
    5754:	00000706 	br	5774 <_dtoa_r+0xb5c>
    5758:	d9400717 	ldw	r5,28(sp)
    575c:	d9001617 	ldw	r4,88(sp)
    5760:	01800284 	movi	r6,10
    5764:	000f883a 	mov	r7,zero
    5768:	00083200 	call	8320 <__multadd>
    576c:	d8800715 	stw	r2,28(sp)
    5770:	84000044 	addi	r16,r16,1
    5774:	d9000717 	ldw	r4,28(sp)
    5778:	900b883a 	mov	r5,r18
    577c:	0004a000 	call	4a00 <quorem>
    5780:	15c00c04 	addi	r23,r2,48
    5784:	b5c00005 	stb	r23,0(r22)
    5788:	d8c00f17 	ldw	r3,60(sp)
    578c:	b5800044 	addi	r22,r22,1
    5790:	80fff116 	blt	r16,r3,5758 <_dtoa_r+0xb40>
    5794:	d8000615 	stw	zero,24(sp)
    5798:	d9400717 	ldw	r5,28(sp)
    579c:	d9001617 	ldw	r4,88(sp)
    57a0:	01800044 	movi	r6,1
    57a4:	0007fb00 	call	7fb0 <__lshift>
    57a8:	1009883a 	mov	r4,r2
    57ac:	900b883a 	mov	r5,r18
    57b0:	d8800715 	stw	r2,28(sp)
    57b4:	00077c80 	call	77c8 <__mcmp>
    57b8:	00803c0e 	bge	zero,r2,58ac <_dtoa_r+0xc94>
    57bc:	b009883a 	mov	r4,r22
    57c0:	213fffc4 	addi	r4,r4,-1
    57c4:	21400003 	ldbu	r5,0(r4)
    57c8:	00800e44 	movi	r2,57
    57cc:	28c03fcc 	andi	r3,r5,255
    57d0:	18c0201c 	xori	r3,r3,128
    57d4:	18ffe004 	addi	r3,r3,-128
    57d8:	1881981e 	bne	r3,r2,5e3c <_dtoa_r+0x1224>
    57dc:	d9800517 	ldw	r6,20(sp)
    57e0:	21bff71e 	bne	r4,r6,57c0 <_dtoa_r+0xba8>
    57e4:	d8800d17 	ldw	r2,52(sp)
    57e8:	37000044 	addi	fp,r6,1
    57ec:	10800044 	addi	r2,r2,1
    57f0:	d8800d15 	stw	r2,52(sp)
    57f4:	00800c44 	movi	r2,49
    57f8:	30800005 	stb	r2,0(r6)
    57fc:	d9001617 	ldw	r4,88(sp)
    5800:	900b883a 	mov	r5,r18
    5804:	000766c0 	call	766c <_Bfree>
    5808:	983ecd26 	beq	r19,zero,5340 <_dtoa_r+0x728>
    580c:	d8c00617 	ldw	r3,24(sp)
    5810:	18000426 	beq	r3,zero,5824 <_dtoa_r+0xc0c>
    5814:	1cc00326 	beq	r3,r19,5824 <_dtoa_r+0xc0c>
    5818:	d9001617 	ldw	r4,88(sp)
    581c:	180b883a 	mov	r5,r3
    5820:	000766c0 	call	766c <_Bfree>
    5824:	d9001617 	ldw	r4,88(sp)
    5828:	980b883a 	mov	r5,r19
    582c:	000766c0 	call	766c <_Bfree>
    5830:	003ec306 	br	5340 <_dtoa_r+0x728>
    5834:	1805883a 	mov	r2,r3
    5838:	003eeb06 	br	53e8 <_dtoa_r+0x7d0>
    583c:	d9800a17 	ldw	r6,40(sp)
    5840:	d8c01117 	ldw	r3,68(sp)
    5844:	20bfff04 	addi	r2,r4,-4
    5848:	308d883a 	add	r6,r6,r2
    584c:	1887883a 	add	r3,r3,r2
    5850:	80a1883a 	add	r16,r16,r2
    5854:	d9800a15 	stw	r6,40(sp)
    5858:	d8c01115 	stw	r3,68(sp)
    585c:	003f1d06 	br	54d4 <_dtoa_r+0x8bc>
    5860:	a03f0c1e 	bne	r20,zero,5494 <_dtoa_r+0x87c>
    5864:	00800434 	movhi	r2,16
    5868:	10bfffc4 	addi	r2,r2,-1
    586c:	a884703a 	and	r2,r21,r2
    5870:	103f081e 	bne	r2,zero,5494 <_dtoa_r+0x87c>
    5874:	a89ffc2c 	andhi	r2,r21,32752
    5878:	103f0626 	beq	r2,zero,5494 <_dtoa_r+0x87c>
    587c:	d8c01117 	ldw	r3,68(sp)
    5880:	d9000a17 	ldw	r4,40(sp)
    5884:	18c00044 	addi	r3,r3,1
    5888:	21000044 	addi	r4,r4,1
    588c:	d8c01115 	stw	r3,68(sp)
    5890:	d9000a15 	stw	r4,40(sp)
    5894:	003f0006 	br	5498 <_dtoa_r+0x880>
    5898:	d9400717 	ldw	r5,28(sp)
    589c:	d9001617 	ldw	r4,88(sp)
    58a0:	00084200 	call	8420 <__pow5mult>
    58a4:	d8800715 	stw	r2,28(sp)
    58a8:	003eed06 	br	5460 <_dtoa_r+0x848>
    58ac:	1000021e 	bne	r2,zero,58b8 <_dtoa_r+0xca0>
    58b0:	b880004c 	andi	r2,r23,1
    58b4:	103fc11e 	bne	r2,zero,57bc <_dtoa_r+0xba4>
    58b8:	b5bfffc4 	addi	r22,r22,-1
    58bc:	b0c00007 	ldb	r3,0(r22)
    58c0:	00800c04 	movi	r2,48
    58c4:	18bffc26 	beq	r3,r2,58b8 <_dtoa_r+0xca0>
    58c8:	b7000044 	addi	fp,r22,1
    58cc:	003fcb06 	br	57fc <_dtoa_r+0xbe4>
    58d0:	d9800d17 	ldw	r6,52(sp)
    58d4:	018fc83a 	sub	r7,zero,r6
    58d8:	3801f726 	beq	r7,zero,60b8 <_dtoa_r+0x14a0>
    58dc:	398003cc 	andi	r6,r7,15
    58e0:	300c90fa 	slli	r6,r6,3
    58e4:	01400074 	movhi	r5,1
    58e8:	29791b04 	addi	r5,r5,-7060
    58ec:	d9001217 	ldw	r4,72(sp)
    58f0:	314d883a 	add	r6,r6,r5
    58f4:	30c00117 	ldw	r3,4(r6)
    58f8:	30800017 	ldw	r2,0(r6)
    58fc:	d9401317 	ldw	r5,76(sp)
    5900:	3821d13a 	srai	r16,r7,4
    5904:	100d883a 	mov	r6,r2
    5908:	180f883a 	mov	r7,r3
    590c:	000a3f00 	call	a3f0 <__muldf3>
    5910:	1011883a 	mov	r8,r2
    5914:	1813883a 	mov	r9,r3
    5918:	1029883a 	mov	r20,r2
    591c:	182b883a 	mov	r21,r3
    5920:	8001e526 	beq	r16,zero,60b8 <_dtoa_r+0x14a0>
    5924:	05800084 	movi	r22,2
    5928:	04400074 	movhi	r17,1
    592c:	8c794d04 	addi	r17,r17,-6860
    5930:	8080004c 	andi	r2,r16,1
    5934:	1005003a 	cmpeq	r2,r2,zero
    5938:	1000081e 	bne	r2,zero,595c <_dtoa_r+0xd44>
    593c:	89800017 	ldw	r6,0(r17)
    5940:	89c00117 	ldw	r7,4(r17)
    5944:	480b883a 	mov	r5,r9
    5948:	4009883a 	mov	r4,r8
    594c:	000a3f00 	call	a3f0 <__muldf3>
    5950:	1011883a 	mov	r8,r2
    5954:	b5800044 	addi	r22,r22,1
    5958:	1813883a 	mov	r9,r3
    595c:	8021d07a 	srai	r16,r16,1
    5960:	8c400204 	addi	r17,r17,8
    5964:	803ff21e 	bne	r16,zero,5930 <_dtoa_r+0xd18>
    5968:	4029883a 	mov	r20,r8
    596c:	482b883a 	mov	r21,r9
    5970:	003dca06 	br	509c <_dtoa_r+0x484>
    5974:	d9000817 	ldw	r4,32(sp)
    5978:	2005003a 	cmpeq	r2,r4,zero
    597c:	1001f61e 	bne	r2,zero,6158 <_dtoa_r+0x1540>
    5980:	dc001117 	ldw	r16,68(sp)
    5984:	dc801017 	ldw	r18,64(sp)
    5988:	18c10cc4 	addi	r3,r3,1075
    598c:	003f6106 	br	5714 <_dtoa_r+0xafc>
    5990:	d8000b15 	stw	zero,44(sp)
    5994:	d9802617 	ldw	r6,152(sp)
    5998:	d8c00d17 	ldw	r3,52(sp)
    599c:	30800044 	addi	r2,r6,1
    59a0:	18ad883a 	add	r22,r3,r2
    59a4:	b13fffc4 	addi	r4,r22,-1
    59a8:	d9000e15 	stw	r4,56(sp)
    59ac:	0581f60e 	bge	zero,r22,6188 <_dtoa_r+0x1570>
    59b0:	dd800f15 	stw	r22,60(sp)
    59b4:	003f3006 	br	5678 <_dtoa_r+0xa60>
    59b8:	d8000b15 	stw	zero,44(sp)
    59bc:	d9002617 	ldw	r4,152(sp)
    59c0:	0101eb0e 	bge	zero,r4,6170 <_dtoa_r+0x1558>
    59c4:	202d883a 	mov	r22,r4
    59c8:	d9000e15 	stw	r4,56(sp)
    59cc:	d9000f15 	stw	r4,60(sp)
    59d0:	003f2906 	br	5678 <_dtoa_r+0xa60>
    59d4:	01800044 	movi	r6,1
    59d8:	d9800b15 	stw	r6,44(sp)
    59dc:	003ff706 	br	59bc <_dtoa_r+0xda4>
    59e0:	01000044 	movi	r4,1
    59e4:	d9000b15 	stw	r4,44(sp)
    59e8:	003fea06 	br	5994 <_dtoa_r+0xd7c>
    59ec:	04000c0e 	bge	zero,r16,5a20 <_dtoa_r+0xe08>
    59f0:	d9400717 	ldw	r5,28(sp)
    59f4:	d9001617 	ldw	r4,88(sp)
    59f8:	01800044 	movi	r6,1
    59fc:	0007fb00 	call	7fb0 <__lshift>
    5a00:	1009883a 	mov	r4,r2
    5a04:	900b883a 	mov	r5,r18
    5a08:	d8800715 	stw	r2,28(sp)
    5a0c:	00077c80 	call	77c8 <__mcmp>
    5a10:	0081e00e 	bge	zero,r2,6194 <_dtoa_r+0x157c>
    5a14:	bdc00044 	addi	r23,r23,1
    5a18:	00800e84 	movi	r2,58
    5a1c:	b881a226 	beq	r23,r2,60a8 <_dtoa_r+0x1490>
    5a20:	b7000044 	addi	fp,r22,1
    5a24:	b5c00005 	stb	r23,0(r22)
    5a28:	003f7406 	br	57fc <_dtoa_r+0xbe4>
    5a2c:	00800e44 	movi	r2,57
    5a30:	b8819d26 	beq	r23,r2,60a8 <_dtoa_r+0x1490>
    5a34:	053ffa0e 	bge	zero,r20,5a20 <_dtoa_r+0xe08>
    5a38:	8dc00c44 	addi	r23,r17,49
    5a3c:	003ff806 	br	5a20 <_dtoa_r+0xe08>
    5a40:	d9001617 	ldw	r4,88(sp)
    5a44:	a80b883a 	mov	r5,r21
    5a48:	04000044 	movi	r16,1
    5a4c:	000766c0 	call	766c <_Bfree>
    5a50:	003edf06 	br	55d0 <_dtoa_r+0x9b8>
    5a54:	d9001617 	ldw	r4,88(sp)
    5a58:	980b883a 	mov	r5,r19
    5a5c:	01800284 	movi	r6,10
    5a60:	000f883a 	mov	r7,zero
    5a64:	00083200 	call	8320 <__multadd>
    5a68:	1027883a 	mov	r19,r2
    5a6c:	d8800615 	stw	r2,24(sp)
    5a70:	003ebb06 	br	5560 <_dtoa_r+0x948>
    5a74:	d9801117 	ldw	r6,68(sp)
    5a78:	d8800d17 	ldw	r2,52(sp)
    5a7c:	d8000915 	stw	zero,36(sp)
    5a80:	308dc83a 	sub	r6,r6,r2
    5a84:	0087c83a 	sub	r3,zero,r2
    5a88:	d9801115 	stw	r6,68(sp)
    5a8c:	d8c01015 	stw	r3,64(sp)
    5a90:	003cfe06 	br	4e8c <_dtoa_r+0x274>
    5a94:	018dc83a 	sub	r6,zero,r6
    5a98:	d9801115 	stw	r6,68(sp)
    5a9c:	d8000a15 	stw	zero,40(sp)
    5aa0:	003cf306 	br	4e70 <_dtoa_r+0x258>
    5aa4:	d9000d17 	ldw	r4,52(sp)
    5aa8:	000acb40 	call	acb4 <__floatsidf>
    5aac:	880b883a 	mov	r5,r17
    5ab0:	8009883a 	mov	r4,r16
    5ab4:	180f883a 	mov	r7,r3
    5ab8:	100d883a 	mov	r6,r2
    5abc:	000aa940 	call	aa94 <__nedf2>
    5ac0:	103ce126 	beq	r2,zero,4e48 <_dtoa_r+0x230>
    5ac4:	d9800d17 	ldw	r6,52(sp)
    5ac8:	31bfffc4 	addi	r6,r6,-1
    5acc:	d9800d15 	stw	r6,52(sp)
    5ad0:	003cdd06 	br	4e48 <_dtoa_r+0x230>
    5ad4:	d9000717 	ldw	r4,28(sp)
    5ad8:	900b883a 	mov	r5,r18
    5adc:	00077c80 	call	77c8 <__mcmp>
    5ae0:	103e8d0e 	bge	r2,zero,5518 <_dtoa_r+0x900>
    5ae4:	d9400717 	ldw	r5,28(sp)
    5ae8:	d9001617 	ldw	r4,88(sp)
    5aec:	01800284 	movi	r6,10
    5af0:	000f883a 	mov	r7,zero
    5af4:	00083200 	call	8320 <__multadd>
    5af8:	d9800d17 	ldw	r6,52(sp)
    5afc:	d8800715 	stw	r2,28(sp)
    5b00:	31bfffc4 	addi	r6,r6,-1
    5b04:	d9800d15 	stw	r6,52(sp)
    5b08:	b001a71e 	bne	r22,zero,61a8 <_dtoa_r+0x1590>
    5b0c:	d8800e17 	ldw	r2,56(sp)
    5b10:	d8800f15 	stw	r2,60(sp)
    5b14:	003e8006 	br	5518 <_dtoa_r+0x900>
    5b18:	90800417 	ldw	r2,16(r18)
    5b1c:	1085883a 	add	r2,r2,r2
    5b20:	1085883a 	add	r2,r2,r2
    5b24:	1485883a 	add	r2,r2,r18
    5b28:	11000417 	ldw	r4,16(r2)
    5b2c:	00076940 	call	7694 <__hi0bits>
    5b30:	00c00804 	movi	r3,32
    5b34:	1887c83a 	sub	r3,r3,r2
    5b38:	003e5a06 	br	54a4 <_dtoa_r+0x88c>
    5b3c:	d9400717 	ldw	r5,28(sp)
    5b40:	d9801017 	ldw	r6,64(sp)
    5b44:	d9001617 	ldw	r4,88(sp)
    5b48:	00084200 	call	8420 <__pow5mult>
    5b4c:	d8800715 	stw	r2,28(sp)
    5b50:	003e4306 	br	5460 <_dtoa_r+0x848>
    5b54:	d9800f17 	ldw	r6,60(sp)
    5b58:	d8800d17 	ldw	r2,52(sp)
    5b5c:	d9800315 	stw	r6,12(sp)
    5b60:	d8800415 	stw	r2,16(sp)
    5b64:	d8c00b17 	ldw	r3,44(sp)
    5b68:	1805003a 	cmpeq	r2,r3,zero
    5b6c:	1000e21e 	bne	r2,zero,5ef8 <_dtoa_r+0x12e0>
    5b70:	d9000317 	ldw	r4,12(sp)
    5b74:	0005883a 	mov	r2,zero
    5b78:	00cff834 	movhi	r3,16352
    5b7c:	200c90fa 	slli	r6,r4,3
    5b80:	01000074 	movhi	r4,1
    5b84:	21391b04 	addi	r4,r4,-7060
    5b88:	180b883a 	mov	r5,r3
    5b8c:	310d883a 	add	r6,r6,r4
    5b90:	327fff17 	ldw	r9,-4(r6)
    5b94:	323ffe17 	ldw	r8,-8(r6)
    5b98:	1009883a 	mov	r4,r2
    5b9c:	480f883a 	mov	r7,r9
    5ba0:	400d883a 	mov	r6,r8
    5ba4:	000a7b40 	call	a7b4 <__divdf3>
    5ba8:	180b883a 	mov	r5,r3
    5bac:	b00d883a 	mov	r6,r22
    5bb0:	b80f883a 	mov	r7,r23
    5bb4:	1009883a 	mov	r4,r2
    5bb8:	000a2fc0 	call	a2fc <__subdf3>
    5bbc:	a80b883a 	mov	r5,r21
    5bc0:	a009883a 	mov	r4,r20
    5bc4:	d8c01915 	stw	r3,100(sp)
    5bc8:	d8801815 	stw	r2,96(sp)
    5bcc:	000adac0 	call	adac <__fixdfsi>
    5bd0:	1009883a 	mov	r4,r2
    5bd4:	1027883a 	mov	r19,r2
    5bd8:	000acb40 	call	acb4 <__floatsidf>
    5bdc:	a80b883a 	mov	r5,r21
    5be0:	a009883a 	mov	r4,r20
    5be4:	180f883a 	mov	r7,r3
    5be8:	100d883a 	mov	r6,r2
    5bec:	000a2fc0 	call	a2fc <__subdf3>
    5bf0:	d9801817 	ldw	r6,96(sp)
    5bf4:	1823883a 	mov	r17,r3
    5bf8:	d8801415 	stw	r2,80(sp)
    5bfc:	302d883a 	mov	r22,r6
    5c00:	d9800517 	ldw	r6,20(sp)
    5c04:	9cc00c04 	addi	r19,r19,48
    5c08:	dc401515 	stw	r17,84(sp)
    5c0c:	d8c01917 	ldw	r3,100(sp)
    5c10:	34c00005 	stb	r19,0(r6)
    5c14:	d8800517 	ldw	r2,20(sp)
    5c18:	d9401917 	ldw	r5,100(sp)
    5c1c:	d9801417 	ldw	r6,80(sp)
    5c20:	b009883a 	mov	r4,r22
    5c24:	880f883a 	mov	r7,r17
    5c28:	182f883a 	mov	r23,r3
    5c2c:	17000044 	addi	fp,r2,1
    5c30:	000ab1c0 	call	ab1c <__gtdf2>
    5c34:	00804e16 	blt	zero,r2,5d70 <_dtoa_r+0x1158>
    5c38:	d9801417 	ldw	r6,80(sp)
    5c3c:	0005883a 	mov	r2,zero
    5c40:	00cffc34 	movhi	r3,16368
    5c44:	180b883a 	mov	r5,r3
    5c48:	880f883a 	mov	r7,r17
    5c4c:	1009883a 	mov	r4,r2
    5c50:	000a2fc0 	call	a2fc <__subdf3>
    5c54:	d9401917 	ldw	r5,100(sp)
    5c58:	180f883a 	mov	r7,r3
    5c5c:	b009883a 	mov	r4,r22
    5c60:	100d883a 	mov	r6,r2
    5c64:	000ab1c0 	call	ab1c <__gtdf2>
    5c68:	00bda216 	blt	zero,r2,52f4 <_dtoa_r+0x6dc>
    5c6c:	d8c00317 	ldw	r3,12(sp)
    5c70:	00800044 	movi	r2,1
    5c74:	10c01216 	blt	r2,r3,5cc0 <_dtoa_r+0x10a8>
    5c78:	003d4506 	br	5190 <_dtoa_r+0x578>
    5c7c:	d9801417 	ldw	r6,80(sp)
    5c80:	0005883a 	mov	r2,zero
    5c84:	00cffc34 	movhi	r3,16368
    5c88:	180b883a 	mov	r5,r3
    5c8c:	880f883a 	mov	r7,r17
    5c90:	1009883a 	mov	r4,r2
    5c94:	000a2fc0 	call	a2fc <__subdf3>
    5c98:	d9c01b17 	ldw	r7,108(sp)
    5c9c:	180b883a 	mov	r5,r3
    5ca0:	1009883a 	mov	r4,r2
    5ca4:	b00d883a 	mov	r6,r22
    5ca8:	000ac2c0 	call	ac2c <__ltdf2>
    5cac:	103d9116 	blt	r2,zero,52f4 <_dtoa_r+0x6dc>
    5cb0:	d9800517 	ldw	r6,20(sp)
    5cb4:	d9000317 	ldw	r4,12(sp)
    5cb8:	3105883a 	add	r2,r6,r4
    5cbc:	e0bd3426 	beq	fp,r2,5190 <_dtoa_r+0x578>
    5cc0:	04500934 	movhi	r17,16420
    5cc4:	0021883a 	mov	r16,zero
    5cc8:	b80b883a 	mov	r5,r23
    5ccc:	b009883a 	mov	r4,r22
    5cd0:	800d883a 	mov	r6,r16
    5cd4:	880f883a 	mov	r7,r17
    5cd8:	000a3f00 	call	a3f0 <__muldf3>
    5cdc:	d9401517 	ldw	r5,84(sp)
    5ce0:	d9001417 	ldw	r4,80(sp)
    5ce4:	880f883a 	mov	r7,r17
    5ce8:	000d883a 	mov	r6,zero
    5cec:	d8801a15 	stw	r2,104(sp)
    5cf0:	d8c01b15 	stw	r3,108(sp)
    5cf4:	000a3f00 	call	a3f0 <__muldf3>
    5cf8:	180b883a 	mov	r5,r3
    5cfc:	1009883a 	mov	r4,r2
    5d00:	1823883a 	mov	r17,r3
    5d04:	1021883a 	mov	r16,r2
    5d08:	000adac0 	call	adac <__fixdfsi>
    5d0c:	1009883a 	mov	r4,r2
    5d10:	102b883a 	mov	r21,r2
    5d14:	000acb40 	call	acb4 <__floatsidf>
    5d18:	880b883a 	mov	r5,r17
    5d1c:	8009883a 	mov	r4,r16
    5d20:	180f883a 	mov	r7,r3
    5d24:	100d883a 	mov	r6,r2
    5d28:	000a2fc0 	call	a2fc <__subdf3>
    5d2c:	1021883a 	mov	r16,r2
    5d30:	d9001b17 	ldw	r4,108(sp)
    5d34:	1823883a 	mov	r17,r3
    5d38:	dc001415 	stw	r16,80(sp)
    5d3c:	ad400c04 	addi	r21,r21,48
    5d40:	dc401515 	stw	r17,84(sp)
    5d44:	d8801a17 	ldw	r2,104(sp)
    5d48:	e5400005 	stb	r21,0(fp)
    5d4c:	202f883a 	mov	r23,r4
    5d50:	d9c01b17 	ldw	r7,108(sp)
    5d54:	d9001417 	ldw	r4,80(sp)
    5d58:	880b883a 	mov	r5,r17
    5d5c:	100d883a 	mov	r6,r2
    5d60:	102d883a 	mov	r22,r2
    5d64:	e7000044 	addi	fp,fp,1
    5d68:	000ac2c0 	call	ac2c <__ltdf2>
    5d6c:	103fc30e 	bge	r2,zero,5c7c <_dtoa_r+0x1064>
    5d70:	d9000417 	ldw	r4,16(sp)
    5d74:	d9000d15 	stw	r4,52(sp)
    5d78:	003d7106 	br	5340 <_dtoa_r+0x728>
    5d7c:	d9801717 	ldw	r6,92(sp)
    5d80:	00800084 	movi	r2,2
    5d84:	11bde60e 	bge	r2,r6,5520 <_dtoa_r+0x908>
    5d88:	203cfb1e 	bne	r4,zero,5178 <_dtoa_r+0x560>
    5d8c:	d9001617 	ldw	r4,88(sp)
    5d90:	900b883a 	mov	r5,r18
    5d94:	01800144 	movi	r6,5
    5d98:	000f883a 	mov	r7,zero
    5d9c:	00083200 	call	8320 <__multadd>
    5da0:	d9000717 	ldw	r4,28(sp)
    5da4:	100b883a 	mov	r5,r2
    5da8:	1025883a 	mov	r18,r2
    5dac:	00077c80 	call	77c8 <__mcmp>
    5db0:	00bcf10e 	bge	zero,r2,5178 <_dtoa_r+0x560>
    5db4:	d8c00d17 	ldw	r3,52(sp)
    5db8:	d9000517 	ldw	r4,20(sp)
    5dbc:	d8000615 	stw	zero,24(sp)
    5dc0:	18c00044 	addi	r3,r3,1
    5dc4:	d8c00d15 	stw	r3,52(sp)
    5dc8:	00800c44 	movi	r2,49
    5dcc:	27000044 	addi	fp,r4,1
    5dd0:	20800005 	stb	r2,0(r4)
    5dd4:	003e8906 	br	57fc <_dtoa_r+0xbe4>
    5dd8:	d8c00517 	ldw	r3,20(sp)
    5ddc:	003bc206 	br	4ce8 <_dtoa_r+0xd0>
    5de0:	01800074 	movhi	r6,1
    5de4:	31b94d04 	addi	r6,r6,-6860
    5de8:	30c00917 	ldw	r3,36(r6)
    5dec:	30800817 	ldw	r2,32(r6)
    5df0:	d9001217 	ldw	r4,72(sp)
    5df4:	d9401317 	ldw	r5,76(sp)
    5df8:	180f883a 	mov	r7,r3
    5dfc:	100d883a 	mov	r6,r2
    5e00:	000a7b40 	call	a7b4 <__divdf3>
    5e04:	948003cc 	andi	r18,r18,15
    5e08:	058000c4 	movi	r22,3
    5e0c:	1029883a 	mov	r20,r2
    5e10:	182b883a 	mov	r21,r3
    5e14:	003c8906 	br	503c <_dtoa_r+0x424>
    5e18:	d9001017 	ldw	r4,64(sp)
    5e1c:	d9800917 	ldw	r6,36(sp)
    5e20:	0025883a 	mov	r18,zero
    5e24:	1105c83a 	sub	r2,r2,r4
    5e28:	2089883a 	add	r4,r4,r2
    5e2c:	308d883a 	add	r6,r6,r2
    5e30:	d9001015 	stw	r4,64(sp)
    5e34:	d9800915 	stw	r6,36(sp)
    5e38:	003e3206 	br	5704 <_dtoa_r+0xaec>
    5e3c:	28800044 	addi	r2,r5,1
    5e40:	27000044 	addi	fp,r4,1
    5e44:	20800005 	stb	r2,0(r4)
    5e48:	003e6c06 	br	57fc <_dtoa_r+0xbe4>
    5e4c:	d8800f17 	ldw	r2,60(sp)
    5e50:	00bce016 	blt	zero,r2,51d4 <_dtoa_r+0x5bc>
    5e54:	d9800f17 	ldw	r6,60(sp)
    5e58:	303cc51e 	bne	r6,zero,5170 <_dtoa_r+0x558>
    5e5c:	0005883a 	mov	r2,zero
    5e60:	00d00534 	movhi	r3,16404
    5e64:	980b883a 	mov	r5,r19
    5e68:	180f883a 	mov	r7,r3
    5e6c:	9009883a 	mov	r4,r18
    5e70:	100d883a 	mov	r6,r2
    5e74:	000a3f00 	call	a3f0 <__muldf3>
    5e78:	180b883a 	mov	r5,r3
    5e7c:	a80f883a 	mov	r7,r21
    5e80:	1009883a 	mov	r4,r2
    5e84:	a00d883a 	mov	r6,r20
    5e88:	000aba40 	call	aba4 <__gedf2>
    5e8c:	103cb80e 	bge	r2,zero,5170 <_dtoa_r+0x558>
    5e90:	0027883a 	mov	r19,zero
    5e94:	0025883a 	mov	r18,zero
    5e98:	003fc606 	br	5db4 <_dtoa_r+0x119c>
    5e9c:	99400117 	ldw	r5,4(r19)
    5ea0:	d9001617 	ldw	r4,88(sp)
    5ea4:	0007bec0 	call	7bec <_Balloc>
    5ea8:	99800417 	ldw	r6,16(r19)
    5eac:	11000304 	addi	r4,r2,12
    5eb0:	99400304 	addi	r5,r19,12
    5eb4:	318d883a 	add	r6,r6,r6
    5eb8:	318d883a 	add	r6,r6,r6
    5ebc:	31800204 	addi	r6,r6,8
    5ec0:	1023883a 	mov	r17,r2
    5ec4:	00074540 	call	7454 <memcpy>
    5ec8:	d9001617 	ldw	r4,88(sp)
    5ecc:	880b883a 	mov	r5,r17
    5ed0:	01800044 	movi	r6,1
    5ed4:	0007fb00 	call	7fb0 <__lshift>
    5ed8:	100b883a 	mov	r5,r2
    5edc:	003d9c06 	br	5550 <_dtoa_r+0x938>
    5ee0:	00800e44 	movi	r2,57
    5ee4:	b8807026 	beq	r23,r2,60a8 <_dtoa_r+0x1490>
    5ee8:	b8800044 	addi	r2,r23,1
    5eec:	b7000044 	addi	fp,r22,1
    5ef0:	b0800005 	stb	r2,0(r22)
    5ef4:	003e4106 	br	57fc <_dtoa_r+0xbe4>
    5ef8:	d8800317 	ldw	r2,12(sp)
    5efc:	01800074 	movhi	r6,1
    5f00:	31b91b04 	addi	r6,r6,-7060
    5f04:	b009883a 	mov	r4,r22
    5f08:	100e90fa 	slli	r7,r2,3
    5f0c:	b80b883a 	mov	r5,r23
    5f10:	398f883a 	add	r7,r7,r6
    5f14:	38bffe17 	ldw	r2,-8(r7)
    5f18:	d9800517 	ldw	r6,20(sp)
    5f1c:	38ffff17 	ldw	r3,-4(r7)
    5f20:	37000044 	addi	fp,r6,1
    5f24:	180f883a 	mov	r7,r3
    5f28:	100d883a 	mov	r6,r2
    5f2c:	000a3f00 	call	a3f0 <__muldf3>
    5f30:	a80b883a 	mov	r5,r21
    5f34:	a009883a 	mov	r4,r20
    5f38:	182f883a 	mov	r23,r3
    5f3c:	102d883a 	mov	r22,r2
    5f40:	000adac0 	call	adac <__fixdfsi>
    5f44:	1009883a 	mov	r4,r2
    5f48:	1027883a 	mov	r19,r2
    5f4c:	000acb40 	call	acb4 <__floatsidf>
    5f50:	a80b883a 	mov	r5,r21
    5f54:	a009883a 	mov	r4,r20
    5f58:	180f883a 	mov	r7,r3
    5f5c:	100d883a 	mov	r6,r2
    5f60:	000a2fc0 	call	a2fc <__subdf3>
    5f64:	180b883a 	mov	r5,r3
    5f68:	d8c00517 	ldw	r3,20(sp)
    5f6c:	9cc00c04 	addi	r19,r19,48
    5f70:	1009883a 	mov	r4,r2
    5f74:	1cc00005 	stb	r19,0(r3)
    5f78:	2021883a 	mov	r16,r4
    5f7c:	d9000317 	ldw	r4,12(sp)
    5f80:	00800044 	movi	r2,1
    5f84:	2823883a 	mov	r17,r5
    5f88:	20802226 	beq	r4,r2,6014 <_dtoa_r+0x13fc>
    5f8c:	1029883a 	mov	r20,r2
    5f90:	0005883a 	mov	r2,zero
    5f94:	00d00934 	movhi	r3,16420
    5f98:	180f883a 	mov	r7,r3
    5f9c:	100d883a 	mov	r6,r2
    5fa0:	880b883a 	mov	r5,r17
    5fa4:	8009883a 	mov	r4,r16
    5fa8:	000a3f00 	call	a3f0 <__muldf3>
    5fac:	180b883a 	mov	r5,r3
    5fb0:	1009883a 	mov	r4,r2
    5fb4:	1823883a 	mov	r17,r3
    5fb8:	1021883a 	mov	r16,r2
    5fbc:	000adac0 	call	adac <__fixdfsi>
    5fc0:	1009883a 	mov	r4,r2
    5fc4:	102b883a 	mov	r21,r2
    5fc8:	000acb40 	call	acb4 <__floatsidf>
    5fcc:	880b883a 	mov	r5,r17
    5fd0:	8009883a 	mov	r4,r16
    5fd4:	180f883a 	mov	r7,r3
    5fd8:	100d883a 	mov	r6,r2
    5fdc:	000a2fc0 	call	a2fc <__subdf3>
    5fe0:	180b883a 	mov	r5,r3
    5fe4:	d8c00517 	ldw	r3,20(sp)
    5fe8:	1009883a 	mov	r4,r2
    5fec:	ad400c04 	addi	r21,r21,48
    5ff0:	1d05883a 	add	r2,r3,r20
    5ff4:	15400005 	stb	r21,0(r2)
    5ff8:	2021883a 	mov	r16,r4
    5ffc:	d9000317 	ldw	r4,12(sp)
    6000:	a5000044 	addi	r20,r20,1
    6004:	2823883a 	mov	r17,r5
    6008:	a13fe11e 	bne	r20,r4,5f90 <_dtoa_r+0x1378>
    600c:	e505883a 	add	r2,fp,r20
    6010:	173fffc4 	addi	fp,r2,-1
    6014:	0025883a 	mov	r18,zero
    6018:	04cff834 	movhi	r19,16352
    601c:	b009883a 	mov	r4,r22
    6020:	b80b883a 	mov	r5,r23
    6024:	900d883a 	mov	r6,r18
    6028:	980f883a 	mov	r7,r19
    602c:	000a37c0 	call	a37c <__adddf3>
    6030:	180b883a 	mov	r5,r3
    6034:	1009883a 	mov	r4,r2
    6038:	800d883a 	mov	r6,r16
    603c:	880f883a 	mov	r7,r17
    6040:	000ac2c0 	call	ac2c <__ltdf2>
    6044:	103cab16 	blt	r2,zero,52f4 <_dtoa_r+0x6dc>
    6048:	0009883a 	mov	r4,zero
    604c:	980b883a 	mov	r5,r19
    6050:	b80f883a 	mov	r7,r23
    6054:	b00d883a 	mov	r6,r22
    6058:	000a2fc0 	call	a2fc <__subdf3>
    605c:	180b883a 	mov	r5,r3
    6060:	880f883a 	mov	r7,r17
    6064:	1009883a 	mov	r4,r2
    6068:	800d883a 	mov	r6,r16
    606c:	000ab1c0 	call	ab1c <__gtdf2>
    6070:	00bc470e 	bge	zero,r2,5190 <_dtoa_r+0x578>
    6074:	00c00c04 	movi	r3,48
    6078:	e73fffc4 	addi	fp,fp,-1
    607c:	e0800007 	ldb	r2,0(fp)
    6080:	10fffd26 	beq	r2,r3,6078 <_dtoa_r+0x1460>
    6084:	d9800417 	ldw	r6,16(sp)
    6088:	e7000044 	addi	fp,fp,1
    608c:	d9800d15 	stw	r6,52(sp)
    6090:	003cab06 	br	5340 <_dtoa_r+0x728>
    6094:	d8c00f17 	ldw	r3,60(sp)
    6098:	d9001117 	ldw	r4,68(sp)
    609c:	20e1c83a 	sub	r16,r4,r3
    60a0:	0007883a 	mov	r3,zero
    60a4:	003d9b06 	br	5714 <_dtoa_r+0xafc>
    60a8:	00800e44 	movi	r2,57
    60ac:	b0800005 	stb	r2,0(r22)
    60b0:	b5800044 	addi	r22,r22,1
    60b4:	003dc106 	br	57bc <_dtoa_r+0xba4>
    60b8:	05800084 	movi	r22,2
    60bc:	003bf706 	br	509c <_dtoa_r+0x484>
    60c0:	d9000f17 	ldw	r4,60(sp)
    60c4:	013c000e 	bge	zero,r4,50c8 <_dtoa_r+0x4b0>
    60c8:	d9800e17 	ldw	r6,56(sp)
    60cc:	01bc300e 	bge	zero,r6,5190 <_dtoa_r+0x578>
    60d0:	0005883a 	mov	r2,zero
    60d4:	00d00934 	movhi	r3,16420
    60d8:	a80b883a 	mov	r5,r21
    60dc:	180f883a 	mov	r7,r3
    60e0:	a009883a 	mov	r4,r20
    60e4:	100d883a 	mov	r6,r2
    60e8:	000a3f00 	call	a3f0 <__muldf3>
    60ec:	b1000044 	addi	r4,r22,1
    60f0:	1021883a 	mov	r16,r2
    60f4:	1823883a 	mov	r17,r3
    60f8:	000acb40 	call	acb4 <__floatsidf>
    60fc:	880b883a 	mov	r5,r17
    6100:	8009883a 	mov	r4,r16
    6104:	180f883a 	mov	r7,r3
    6108:	100d883a 	mov	r6,r2
    610c:	000a3f00 	call	a3f0 <__muldf3>
    6110:	0011883a 	mov	r8,zero
    6114:	02500734 	movhi	r9,16412
    6118:	180b883a 	mov	r5,r3
    611c:	480f883a 	mov	r7,r9
    6120:	1009883a 	mov	r4,r2
    6124:	400d883a 	mov	r6,r8
    6128:	000a37c0 	call	a37c <__adddf3>
    612c:	102d883a 	mov	r22,r2
    6130:	00bf3034 	movhi	r2,64704
    6134:	10ef883a 	add	r23,r2,r3
    6138:	d8800d17 	ldw	r2,52(sp)
    613c:	d8c00e17 	ldw	r3,56(sp)
    6140:	8029883a 	mov	r20,r16
    6144:	10bfffc4 	addi	r2,r2,-1
    6148:	882b883a 	mov	r21,r17
    614c:	d8800415 	stw	r2,16(sp)
    6150:	d8c00315 	stw	r3,12(sp)
    6154:	003e8306 	br	5b64 <_dtoa_r+0xf4c>
    6158:	d8800117 	ldw	r2,4(sp)
    615c:	dc001117 	ldw	r16,68(sp)
    6160:	dc801017 	ldw	r18,64(sp)
    6164:	00c00d84 	movi	r3,54
    6168:	1887c83a 	sub	r3,r3,r2
    616c:	003d6906 	br	5714 <_dtoa_r+0xafc>
    6170:	01800044 	movi	r6,1
    6174:	3021883a 	mov	r16,r6
    6178:	d9800f15 	stw	r6,60(sp)
    617c:	d9802615 	stw	r6,152(sp)
    6180:	d9800e15 	stw	r6,56(sp)
    6184:	003b9306 	br	4fd4 <_dtoa_r+0x3bc>
    6188:	b021883a 	mov	r16,r22
    618c:	dd800f15 	stw	r22,60(sp)
    6190:	003b9006 	br	4fd4 <_dtoa_r+0x3bc>
    6194:	103e221e 	bne	r2,zero,5a20 <_dtoa_r+0xe08>
    6198:	b880004c 	andi	r2,r23,1
    619c:	1005003a 	cmpeq	r2,r2,zero
    61a0:	103e1f1e 	bne	r2,zero,5a20 <_dtoa_r+0xe08>
    61a4:	003e1b06 	br	5a14 <_dtoa_r+0xdfc>
    61a8:	d9001617 	ldw	r4,88(sp)
    61ac:	980b883a 	mov	r5,r19
    61b0:	01800284 	movi	r6,10
    61b4:	000f883a 	mov	r7,zero
    61b8:	00083200 	call	8320 <__multadd>
    61bc:	d8c00e17 	ldw	r3,56(sp)
    61c0:	1027883a 	mov	r19,r2
    61c4:	d8c00f15 	stw	r3,60(sp)
    61c8:	003cd306 	br	5518 <_dtoa_r+0x900>

000061cc <_fflush_r>:
    61cc:	defffb04 	addi	sp,sp,-20
    61d0:	dcc00315 	stw	r19,12(sp)
    61d4:	dc800215 	stw	r18,8(sp)
    61d8:	dfc00415 	stw	ra,16(sp)
    61dc:	dc400115 	stw	r17,4(sp)
    61e0:	dc000015 	stw	r16,0(sp)
    61e4:	2027883a 	mov	r19,r4
    61e8:	2825883a 	mov	r18,r5
    61ec:	20000226 	beq	r4,zero,61f8 <_fflush_r+0x2c>
    61f0:	20800e17 	ldw	r2,56(r4)
    61f4:	10005626 	beq	r2,zero,6350 <_fflush_r+0x184>
    61f8:	9100030b 	ldhu	r4,12(r18)
    61fc:	20ffffcc 	andi	r3,r4,65535
    6200:	18e0001c 	xori	r3,r3,32768
    6204:	18e00004 	addi	r3,r3,-32768
    6208:	1880020c 	andi	r2,r3,8
    620c:	1000261e 	bne	r2,zero,62a8 <_fflush_r+0xdc>
    6210:	90c00117 	ldw	r3,4(r18)
    6214:	20820014 	ori	r2,r4,2048
    6218:	9080030d 	sth	r2,12(r18)
    621c:	1009883a 	mov	r4,r2
    6220:	00c0400e 	bge	zero,r3,6324 <_fflush_r+0x158>
    6224:	92000a17 	ldw	r8,40(r18)
    6228:	40004026 	beq	r8,zero,632c <_fflush_r+0x160>
    622c:	2084000c 	andi	r2,r4,4096
    6230:	10005326 	beq	r2,zero,6380 <_fflush_r+0x1b4>
    6234:	94001417 	ldw	r16,80(r18)
    6238:	9080030b 	ldhu	r2,12(r18)
    623c:	1080010c 	andi	r2,r2,4
    6240:	1000481e 	bne	r2,zero,6364 <_fflush_r+0x198>
    6244:	91400717 	ldw	r5,28(r18)
    6248:	9809883a 	mov	r4,r19
    624c:	800d883a 	mov	r6,r16
    6250:	000f883a 	mov	r7,zero
    6254:	403ee83a 	callr	r8
    6258:	8080261e 	bne	r16,r2,62f4 <_fflush_r+0x128>
    625c:	9080030b 	ldhu	r2,12(r18)
    6260:	91000417 	ldw	r4,16(r18)
    6264:	90000115 	stw	zero,4(r18)
    6268:	10bdffcc 	andi	r2,r2,63487
    626c:	10ffffcc 	andi	r3,r2,65535
    6270:	18c4000c 	andi	r3,r3,4096
    6274:	9080030d 	sth	r2,12(r18)
    6278:	91000015 	stw	r4,0(r18)
    627c:	18002b26 	beq	r3,zero,632c <_fflush_r+0x160>
    6280:	0007883a 	mov	r3,zero
    6284:	1805883a 	mov	r2,r3
    6288:	94001415 	stw	r16,80(r18)
    628c:	dfc00417 	ldw	ra,16(sp)
    6290:	dcc00317 	ldw	r19,12(sp)
    6294:	dc800217 	ldw	r18,8(sp)
    6298:	dc400117 	ldw	r17,4(sp)
    629c:	dc000017 	ldw	r16,0(sp)
    62a0:	dec00504 	addi	sp,sp,20
    62a4:	f800283a 	ret
    62a8:	94400417 	ldw	r17,16(r18)
    62ac:	88001f26 	beq	r17,zero,632c <_fflush_r+0x160>
    62b0:	90800017 	ldw	r2,0(r18)
    62b4:	18c000cc 	andi	r3,r3,3
    62b8:	94400015 	stw	r17,0(r18)
    62bc:	1461c83a 	sub	r16,r2,r17
    62c0:	18002526 	beq	r3,zero,6358 <_fflush_r+0x18c>
    62c4:	0005883a 	mov	r2,zero
    62c8:	90800215 	stw	r2,8(r18)
    62cc:	0400170e 	bge	zero,r16,632c <_fflush_r+0x160>
    62d0:	90c00917 	ldw	r3,36(r18)
    62d4:	91400717 	ldw	r5,28(r18)
    62d8:	880d883a 	mov	r6,r17
    62dc:	800f883a 	mov	r7,r16
    62e0:	9809883a 	mov	r4,r19
    62e4:	183ee83a 	callr	r3
    62e8:	88a3883a 	add	r17,r17,r2
    62ec:	80a1c83a 	sub	r16,r16,r2
    62f0:	00bff616 	blt	zero,r2,62cc <_fflush_r+0x100>
    62f4:	9080030b 	ldhu	r2,12(r18)
    62f8:	00ffffc4 	movi	r3,-1
    62fc:	10801014 	ori	r2,r2,64
    6300:	9080030d 	sth	r2,12(r18)
    6304:	1805883a 	mov	r2,r3
    6308:	dfc00417 	ldw	ra,16(sp)
    630c:	dcc00317 	ldw	r19,12(sp)
    6310:	dc800217 	ldw	r18,8(sp)
    6314:	dc400117 	ldw	r17,4(sp)
    6318:	dc000017 	ldw	r16,0(sp)
    631c:	dec00504 	addi	sp,sp,20
    6320:	f800283a 	ret
    6324:	90800f17 	ldw	r2,60(r18)
    6328:	00bfbe16 	blt	zero,r2,6224 <_fflush_r+0x58>
    632c:	0007883a 	mov	r3,zero
    6330:	1805883a 	mov	r2,r3
    6334:	dfc00417 	ldw	ra,16(sp)
    6338:	dcc00317 	ldw	r19,12(sp)
    633c:	dc800217 	ldw	r18,8(sp)
    6340:	dc400117 	ldw	r17,4(sp)
    6344:	dc000017 	ldw	r16,0(sp)
    6348:	dec00504 	addi	sp,sp,20
    634c:	f800283a 	ret
    6350:	00064640 	call	6464 <__sinit>
    6354:	003fa806 	br	61f8 <_fflush_r+0x2c>
    6358:	90800517 	ldw	r2,20(r18)
    635c:	90800215 	stw	r2,8(r18)
    6360:	003fda06 	br	62cc <_fflush_r+0x100>
    6364:	90800117 	ldw	r2,4(r18)
    6368:	90c00c17 	ldw	r3,48(r18)
    636c:	80a1c83a 	sub	r16,r16,r2
    6370:	183fb426 	beq	r3,zero,6244 <_fflush_r+0x78>
    6374:	90800f17 	ldw	r2,60(r18)
    6378:	80a1c83a 	sub	r16,r16,r2
    637c:	003fb106 	br	6244 <_fflush_r+0x78>
    6380:	91400717 	ldw	r5,28(r18)
    6384:	9809883a 	mov	r4,r19
    6388:	000d883a 	mov	r6,zero
    638c:	01c00044 	movi	r7,1
    6390:	403ee83a 	callr	r8
    6394:	1021883a 	mov	r16,r2
    6398:	00bfffc4 	movi	r2,-1
    639c:	80800226 	beq	r16,r2,63a8 <_fflush_r+0x1dc>
    63a0:	92000a17 	ldw	r8,40(r18)
    63a4:	003fa406 	br	6238 <_fflush_r+0x6c>
    63a8:	98c00017 	ldw	r3,0(r19)
    63ac:	00800744 	movi	r2,29
    63b0:	18bfde26 	beq	r3,r2,632c <_fflush_r+0x160>
    63b4:	9080030b 	ldhu	r2,12(r18)
    63b8:	8007883a 	mov	r3,r16
    63bc:	10801014 	ori	r2,r2,64
    63c0:	9080030d 	sth	r2,12(r18)
    63c4:	003fcf06 	br	6304 <_fflush_r+0x138>

000063c8 <fflush>:
    63c8:	01400034 	movhi	r5,0
    63cc:	29587304 	addi	r5,r5,25036
    63d0:	2007883a 	mov	r3,r4
    63d4:	20000526 	beq	r4,zero,63ec <fflush+0x24>
    63d8:	00800074 	movhi	r2,1
    63dc:	10804c04 	addi	r2,r2,304
    63e0:	11000017 	ldw	r4,0(r2)
    63e4:	180b883a 	mov	r5,r3
    63e8:	00061cc1 	jmpi	61cc <_fflush_r>
    63ec:	00800074 	movhi	r2,1
    63f0:	10804d04 	addi	r2,r2,308
    63f4:	11000017 	ldw	r4,0(r2)
    63f8:	0006f981 	jmpi	6f98 <_fwalk_reent>

000063fc <std>:
    63fc:	00800074 	movhi	r2,1
    6400:	10a33104 	addi	r2,r2,-29500
    6404:	20800b15 	stw	r2,44(r4)
    6408:	00800074 	movhi	r2,1
    640c:	10a36c04 	addi	r2,r2,-29264
    6410:	20800815 	stw	r2,32(r4)
    6414:	00c00074 	movhi	r3,1
    6418:	18e34d04 	addi	r3,r3,-29388
    641c:	00800074 	movhi	r2,1
    6420:	10a33304 	addi	r2,r2,-29492
    6424:	2140030d 	sth	r5,12(r4)
    6428:	2180038d 	sth	r6,14(r4)
    642c:	20c00915 	stw	r3,36(r4)
    6430:	20800a15 	stw	r2,40(r4)
    6434:	20000015 	stw	zero,0(r4)
    6438:	20000115 	stw	zero,4(r4)
    643c:	20000215 	stw	zero,8(r4)
    6440:	20000415 	stw	zero,16(r4)
    6444:	20000515 	stw	zero,20(r4)
    6448:	20000615 	stw	zero,24(r4)
    644c:	21000715 	stw	r4,28(r4)
    6450:	f800283a 	ret

00006454 <__sfp_lock_acquire>:
    6454:	f800283a 	ret

00006458 <__sfp_lock_release>:
    6458:	f800283a 	ret

0000645c <__sinit_lock_acquire>:
    645c:	f800283a 	ret

00006460 <__sinit_lock_release>:
    6460:	f800283a 	ret

00006464 <__sinit>:
    6464:	20800e17 	ldw	r2,56(r4)
    6468:	defffd04 	addi	sp,sp,-12
    646c:	dc400115 	stw	r17,4(sp)
    6470:	dc000015 	stw	r16,0(sp)
    6474:	dfc00215 	stw	ra,8(sp)
    6478:	04400044 	movi	r17,1
    647c:	01400104 	movi	r5,4
    6480:	000d883a 	mov	r6,zero
    6484:	2021883a 	mov	r16,r4
    6488:	2200bb04 	addi	r8,r4,748
    648c:	200f883a 	mov	r7,r4
    6490:	10000526 	beq	r2,zero,64a8 <__sinit+0x44>
    6494:	dfc00217 	ldw	ra,8(sp)
    6498:	dc400117 	ldw	r17,4(sp)
    649c:	dc000017 	ldw	r16,0(sp)
    64a0:	dec00304 	addi	sp,sp,12
    64a4:	f800283a 	ret
    64a8:	21000117 	ldw	r4,4(r4)
    64ac:	00800034 	movhi	r2,0
    64b0:	10995204 	addi	r2,r2,25928
    64b4:	00c000c4 	movi	r3,3
    64b8:	80800f15 	stw	r2,60(r16)
    64bc:	80c0b915 	stw	r3,740(r16)
    64c0:	8200ba15 	stw	r8,744(r16)
    64c4:	84400e15 	stw	r17,56(r16)
    64c8:	8000b815 	stw	zero,736(r16)
    64cc:	00063fc0 	call	63fc <std>
    64d0:	81000217 	ldw	r4,8(r16)
    64d4:	880d883a 	mov	r6,r17
    64d8:	800f883a 	mov	r7,r16
    64dc:	01400284 	movi	r5,10
    64e0:	00063fc0 	call	63fc <std>
    64e4:	81000317 	ldw	r4,12(r16)
    64e8:	800f883a 	mov	r7,r16
    64ec:	01400484 	movi	r5,18
    64f0:	01800084 	movi	r6,2
    64f4:	dfc00217 	ldw	ra,8(sp)
    64f8:	dc400117 	ldw	r17,4(sp)
    64fc:	dc000017 	ldw	r16,0(sp)
    6500:	dec00304 	addi	sp,sp,12
    6504:	00063fc1 	jmpi	63fc <std>

00006508 <__fp_lock>:
    6508:	0005883a 	mov	r2,zero
    650c:	f800283a 	ret

00006510 <__fp_unlock>:
    6510:	0005883a 	mov	r2,zero
    6514:	f800283a 	ret

00006518 <__fp_unlock_all>:
    6518:	00800074 	movhi	r2,1
    651c:	10804c04 	addi	r2,r2,304
    6520:	11000017 	ldw	r4,0(r2)
    6524:	01400034 	movhi	r5,0
    6528:	29594404 	addi	r5,r5,25872
    652c:	00070601 	jmpi	7060 <_fwalk>

00006530 <__fp_lock_all>:
    6530:	00800074 	movhi	r2,1
    6534:	10804c04 	addi	r2,r2,304
    6538:	11000017 	ldw	r4,0(r2)
    653c:	01400034 	movhi	r5,0
    6540:	29594204 	addi	r5,r5,25864
    6544:	00070601 	jmpi	7060 <_fwalk>

00006548 <_cleanup_r>:
    6548:	01400074 	movhi	r5,1
    654c:	29645e04 	addi	r5,r5,-28296
    6550:	00070601 	jmpi	7060 <_fwalk>

00006554 <_cleanup>:
    6554:	00800074 	movhi	r2,1
    6558:	10804d04 	addi	r2,r2,308
    655c:	11000017 	ldw	r4,0(r2)
    6560:	00065481 	jmpi	6548 <_cleanup_r>

00006564 <__sfmoreglue>:
    6564:	defffc04 	addi	sp,sp,-16
    6568:	dc400115 	stw	r17,4(sp)
    656c:	2c401724 	muli	r17,r5,92
    6570:	dc800215 	stw	r18,8(sp)
    6574:	2825883a 	mov	r18,r5
    6578:	89400304 	addi	r5,r17,12
    657c:	dc000015 	stw	r16,0(sp)
    6580:	dfc00315 	stw	ra,12(sp)
    6584:	0001e980 	call	1e98 <_malloc_r>
    6588:	0021883a 	mov	r16,zero
    658c:	880d883a 	mov	r6,r17
    6590:	000b883a 	mov	r5,zero
    6594:	10000626 	beq	r2,zero,65b0 <__sfmoreglue+0x4c>
    6598:	11000304 	addi	r4,r2,12
    659c:	14800115 	stw	r18,4(r2)
    65a0:	10000015 	stw	zero,0(r2)
    65a4:	11000215 	stw	r4,8(r2)
    65a8:	1021883a 	mov	r16,r2
    65ac:	00075d40 	call	75d4 <memset>
    65b0:	8005883a 	mov	r2,r16
    65b4:	dfc00317 	ldw	ra,12(sp)
    65b8:	dc800217 	ldw	r18,8(sp)
    65bc:	dc400117 	ldw	r17,4(sp)
    65c0:	dc000017 	ldw	r16,0(sp)
    65c4:	dec00404 	addi	sp,sp,16
    65c8:	f800283a 	ret

000065cc <__sfp>:
    65cc:	defffd04 	addi	sp,sp,-12
    65d0:	00800074 	movhi	r2,1
    65d4:	10804d04 	addi	r2,r2,308
    65d8:	dc000015 	stw	r16,0(sp)
    65dc:	14000017 	ldw	r16,0(r2)
    65e0:	dc400115 	stw	r17,4(sp)
    65e4:	dfc00215 	stw	ra,8(sp)
    65e8:	80800e17 	ldw	r2,56(r16)
    65ec:	2023883a 	mov	r17,r4
    65f0:	10002626 	beq	r2,zero,668c <__sfp+0xc0>
    65f4:	8400b804 	addi	r16,r16,736
    65f8:	80800117 	ldw	r2,4(r16)
    65fc:	81000217 	ldw	r4,8(r16)
    6600:	10ffffc4 	addi	r3,r2,-1
    6604:	18000916 	blt	r3,zero,662c <__sfp+0x60>
    6608:	2080030f 	ldh	r2,12(r4)
    660c:	10000b26 	beq	r2,zero,663c <__sfp+0x70>
    6610:	017fffc4 	movi	r5,-1
    6614:	00000206 	br	6620 <__sfp+0x54>
    6618:	2080030f 	ldh	r2,12(r4)
    661c:	10000726 	beq	r2,zero,663c <__sfp+0x70>
    6620:	18ffffc4 	addi	r3,r3,-1
    6624:	21001704 	addi	r4,r4,92
    6628:	197ffb1e 	bne	r3,r5,6618 <__sfp+0x4c>
    662c:	80800017 	ldw	r2,0(r16)
    6630:	10001926 	beq	r2,zero,6698 <__sfp+0xcc>
    6634:	1021883a 	mov	r16,r2
    6638:	003fef06 	br	65f8 <__sfp+0x2c>
    663c:	00bfffc4 	movi	r2,-1
    6640:	00c00044 	movi	r3,1
    6644:	2080038d 	sth	r2,14(r4)
    6648:	20c0030d 	sth	r3,12(r4)
    664c:	20000015 	stw	zero,0(r4)
    6650:	20000215 	stw	zero,8(r4)
    6654:	20000115 	stw	zero,4(r4)
    6658:	20000415 	stw	zero,16(r4)
    665c:	20000515 	stw	zero,20(r4)
    6660:	20000615 	stw	zero,24(r4)
    6664:	20000c15 	stw	zero,48(r4)
    6668:	20000d15 	stw	zero,52(r4)
    666c:	20001115 	stw	zero,68(r4)
    6670:	20001215 	stw	zero,72(r4)
    6674:	2005883a 	mov	r2,r4
    6678:	dfc00217 	ldw	ra,8(sp)
    667c:	dc400117 	ldw	r17,4(sp)
    6680:	dc000017 	ldw	r16,0(sp)
    6684:	dec00304 	addi	sp,sp,12
    6688:	f800283a 	ret
    668c:	8009883a 	mov	r4,r16
    6690:	00064640 	call	6464 <__sinit>
    6694:	003fd706 	br	65f4 <__sfp+0x28>
    6698:	8809883a 	mov	r4,r17
    669c:	01400104 	movi	r5,4
    66a0:	00065640 	call	6564 <__sfmoreglue>
    66a4:	80800015 	stw	r2,0(r16)
    66a8:	103fe21e 	bne	r2,zero,6634 <__sfp+0x68>
    66ac:	00800304 	movi	r2,12
    66b0:	0009883a 	mov	r4,zero
    66b4:	88800015 	stw	r2,0(r17)
    66b8:	003fee06 	br	6674 <__sfp+0xa8>

000066bc <_malloc_trim_r>:
    66bc:	defffb04 	addi	sp,sp,-20
    66c0:	dcc00315 	stw	r19,12(sp)
    66c4:	04c00074 	movhi	r19,1
    66c8:	9cfac404 	addi	r19,r19,-5360
    66cc:	dc800215 	stw	r18,8(sp)
    66d0:	dc400115 	stw	r17,4(sp)
    66d4:	dc000015 	stw	r16,0(sp)
    66d8:	2823883a 	mov	r17,r5
    66dc:	2025883a 	mov	r18,r4
    66e0:	dfc00415 	stw	ra,16(sp)
    66e4:	000bee80 	call	bee8 <__malloc_lock>
    66e8:	98800217 	ldw	r2,8(r19)
    66ec:	9009883a 	mov	r4,r18
    66f0:	000b883a 	mov	r5,zero
    66f4:	10c00117 	ldw	r3,4(r2)
    66f8:	00bfff04 	movi	r2,-4
    66fc:	18a0703a 	and	r16,r3,r2
    6700:	8463c83a 	sub	r17,r16,r17
    6704:	8c43fbc4 	addi	r17,r17,4079
    6708:	8822d33a 	srli	r17,r17,12
    670c:	0083ffc4 	movi	r2,4095
    6710:	8c7fffc4 	addi	r17,r17,-1
    6714:	8822933a 	slli	r17,r17,12
    6718:	1440060e 	bge	r2,r17,6734 <_malloc_trim_r+0x78>
    671c:	00027040 	call	2704 <_sbrk_r>
    6720:	98c00217 	ldw	r3,8(r19)
    6724:	9009883a 	mov	r4,r18
    6728:	044bc83a 	sub	r5,zero,r17
    672c:	80c7883a 	add	r3,r16,r3
    6730:	10c00926 	beq	r2,r3,6758 <_malloc_trim_r+0x9c>
    6734:	000bf080 	call	bf08 <__malloc_unlock>
    6738:	0005883a 	mov	r2,zero
    673c:	dfc00417 	ldw	ra,16(sp)
    6740:	dcc00317 	ldw	r19,12(sp)
    6744:	dc800217 	ldw	r18,8(sp)
    6748:	dc400117 	ldw	r17,4(sp)
    674c:	dc000017 	ldw	r16,0(sp)
    6750:	dec00504 	addi	sp,sp,20
    6754:	f800283a 	ret
    6758:	9009883a 	mov	r4,r18
    675c:	00027040 	call	2704 <_sbrk_r>
    6760:	844dc83a 	sub	r6,r16,r17
    6764:	00ffffc4 	movi	r3,-1
    6768:	9009883a 	mov	r4,r18
    676c:	000b883a 	mov	r5,zero
    6770:	01c00074 	movhi	r7,1
    6774:	39c71904 	addi	r7,r7,7268
    6778:	31800054 	ori	r6,r6,1
    677c:	10c00926 	beq	r2,r3,67a4 <_malloc_trim_r+0xe8>
    6780:	38800017 	ldw	r2,0(r7)
    6784:	98c00217 	ldw	r3,8(r19)
    6788:	9009883a 	mov	r4,r18
    678c:	1445c83a 	sub	r2,r2,r17
    6790:	38800015 	stw	r2,0(r7)
    6794:	19800115 	stw	r6,4(r3)
    6798:	000bf080 	call	bf08 <__malloc_unlock>
    679c:	00800044 	movi	r2,1
    67a0:	003fe606 	br	673c <_malloc_trim_r+0x80>
    67a4:	00027040 	call	2704 <_sbrk_r>
    67a8:	99800217 	ldw	r6,8(r19)
    67ac:	100f883a 	mov	r7,r2
    67b0:	9009883a 	mov	r4,r18
    67b4:	1187c83a 	sub	r3,r2,r6
    67b8:	008003c4 	movi	r2,15
    67bc:	19400054 	ori	r5,r3,1
    67c0:	10ffdc0e 	bge	r2,r3,6734 <_malloc_trim_r+0x78>
    67c4:	00800074 	movhi	r2,1
    67c8:	10804f04 	addi	r2,r2,316
    67cc:	10c00017 	ldw	r3,0(r2)
    67d0:	00800074 	movhi	r2,1
    67d4:	10871904 	addi	r2,r2,7268
    67d8:	31400115 	stw	r5,4(r6)
    67dc:	38c7c83a 	sub	r3,r7,r3
    67e0:	10c00015 	stw	r3,0(r2)
    67e4:	003fd306 	br	6734 <_malloc_trim_r+0x78>

000067e8 <_free_r>:
    67e8:	defffd04 	addi	sp,sp,-12
    67ec:	dc400115 	stw	r17,4(sp)
    67f0:	dc000015 	stw	r16,0(sp)
    67f4:	dfc00215 	stw	ra,8(sp)
    67f8:	2821883a 	mov	r16,r5
    67fc:	2023883a 	mov	r17,r4
    6800:	28005a26 	beq	r5,zero,696c <_free_r+0x184>
    6804:	000bee80 	call	bee8 <__malloc_lock>
    6808:	823ffe04 	addi	r8,r16,-8
    680c:	41400117 	ldw	r5,4(r8)
    6810:	00bfff84 	movi	r2,-2
    6814:	02800074 	movhi	r10,1
    6818:	52bac404 	addi	r10,r10,-5360
    681c:	288e703a 	and	r7,r5,r2
    6820:	41cd883a 	add	r6,r8,r7
    6824:	30c00117 	ldw	r3,4(r6)
    6828:	51000217 	ldw	r4,8(r10)
    682c:	00bfff04 	movi	r2,-4
    6830:	1892703a 	and	r9,r3,r2
    6834:	5017883a 	mov	r11,r10
    6838:	31006726 	beq	r6,r4,69d8 <_free_r+0x1f0>
    683c:	2880004c 	andi	r2,r5,1
    6840:	1005003a 	cmpeq	r2,r2,zero
    6844:	32400115 	stw	r9,4(r6)
    6848:	10001a1e 	bne	r2,zero,68b4 <_free_r+0xcc>
    684c:	000b883a 	mov	r5,zero
    6850:	3247883a 	add	r3,r6,r9
    6854:	18800117 	ldw	r2,4(r3)
    6858:	1080004c 	andi	r2,r2,1
    685c:	1000231e 	bne	r2,zero,68ec <_free_r+0x104>
    6860:	280ac03a 	cmpne	r5,r5,zero
    6864:	3a4f883a 	add	r7,r7,r9
    6868:	2800451e 	bne	r5,zero,6980 <_free_r+0x198>
    686c:	31000217 	ldw	r4,8(r6)
    6870:	00800074 	movhi	r2,1
    6874:	10bac604 	addi	r2,r2,-5352
    6878:	20807b26 	beq	r4,r2,6a68 <_free_r+0x280>
    687c:	30800317 	ldw	r2,12(r6)
    6880:	3a07883a 	add	r3,r7,r8
    6884:	19c00015 	stw	r7,0(r3)
    6888:	11000215 	stw	r4,8(r2)
    688c:	20800315 	stw	r2,12(r4)
    6890:	38800054 	ori	r2,r7,1
    6894:	40800115 	stw	r2,4(r8)
    6898:	28001a26 	beq	r5,zero,6904 <_free_r+0x11c>
    689c:	8809883a 	mov	r4,r17
    68a0:	dfc00217 	ldw	ra,8(sp)
    68a4:	dc400117 	ldw	r17,4(sp)
    68a8:	dc000017 	ldw	r16,0(sp)
    68ac:	dec00304 	addi	sp,sp,12
    68b0:	000bf081 	jmpi	bf08 <__malloc_unlock>
    68b4:	80bffe17 	ldw	r2,-8(r16)
    68b8:	50c00204 	addi	r3,r10,8
    68bc:	4091c83a 	sub	r8,r8,r2
    68c0:	41000217 	ldw	r4,8(r8)
    68c4:	388f883a 	add	r7,r7,r2
    68c8:	20c06126 	beq	r4,r3,6a50 <_free_r+0x268>
    68cc:	40800317 	ldw	r2,12(r8)
    68d0:	3247883a 	add	r3,r6,r9
    68d4:	000b883a 	mov	r5,zero
    68d8:	11000215 	stw	r4,8(r2)
    68dc:	20800315 	stw	r2,12(r4)
    68e0:	18800117 	ldw	r2,4(r3)
    68e4:	1080004c 	andi	r2,r2,1
    68e8:	103fdd26 	beq	r2,zero,6860 <_free_r+0x78>
    68ec:	38800054 	ori	r2,r7,1
    68f0:	3a07883a 	add	r3,r7,r8
    68f4:	280ac03a 	cmpne	r5,r5,zero
    68f8:	40800115 	stw	r2,4(r8)
    68fc:	19c00015 	stw	r7,0(r3)
    6900:	283fe61e 	bne	r5,zero,689c <_free_r+0xb4>
    6904:	00807fc4 	movi	r2,511
    6908:	11c01f2e 	bgeu	r2,r7,6988 <_free_r+0x1a0>
    690c:	3806d27a 	srli	r3,r7,9
    6910:	1800481e 	bne	r3,zero,6a34 <_free_r+0x24c>
    6914:	3804d0fa 	srli	r2,r7,3
    6918:	100690fa 	slli	r3,r2,3
    691c:	1acd883a 	add	r6,r3,r11
    6920:	31400217 	ldw	r5,8(r6)
    6924:	31405926 	beq	r6,r5,6a8c <_free_r+0x2a4>
    6928:	28800117 	ldw	r2,4(r5)
    692c:	00ffff04 	movi	r3,-4
    6930:	10c4703a 	and	r2,r2,r3
    6934:	3880022e 	bgeu	r7,r2,6940 <_free_r+0x158>
    6938:	29400217 	ldw	r5,8(r5)
    693c:	317ffa1e 	bne	r6,r5,6928 <_free_r+0x140>
    6940:	29800317 	ldw	r6,12(r5)
    6944:	41800315 	stw	r6,12(r8)
    6948:	41400215 	stw	r5,8(r8)
    694c:	8809883a 	mov	r4,r17
    6950:	2a000315 	stw	r8,12(r5)
    6954:	32000215 	stw	r8,8(r6)
    6958:	dfc00217 	ldw	ra,8(sp)
    695c:	dc400117 	ldw	r17,4(sp)
    6960:	dc000017 	ldw	r16,0(sp)
    6964:	dec00304 	addi	sp,sp,12
    6968:	000bf081 	jmpi	bf08 <__malloc_unlock>
    696c:	dfc00217 	ldw	ra,8(sp)
    6970:	dc400117 	ldw	r17,4(sp)
    6974:	dc000017 	ldw	r16,0(sp)
    6978:	dec00304 	addi	sp,sp,12
    697c:	f800283a 	ret
    6980:	31000217 	ldw	r4,8(r6)
    6984:	003fbd06 	br	687c <_free_r+0x94>
    6988:	3806d0fa 	srli	r3,r7,3
    698c:	00800044 	movi	r2,1
    6990:	51400117 	ldw	r5,4(r10)
    6994:	180890fa 	slli	r4,r3,3
    6998:	1807d0ba 	srai	r3,r3,2
    699c:	22c9883a 	add	r4,r4,r11
    69a0:	21800217 	ldw	r6,8(r4)
    69a4:	10c4983a 	sll	r2,r2,r3
    69a8:	41000315 	stw	r4,12(r8)
    69ac:	41800215 	stw	r6,8(r8)
    69b0:	288ab03a 	or	r5,r5,r2
    69b4:	22000215 	stw	r8,8(r4)
    69b8:	8809883a 	mov	r4,r17
    69bc:	51400115 	stw	r5,4(r10)
    69c0:	32000315 	stw	r8,12(r6)
    69c4:	dfc00217 	ldw	ra,8(sp)
    69c8:	dc400117 	ldw	r17,4(sp)
    69cc:	dc000017 	ldw	r16,0(sp)
    69d0:	dec00304 	addi	sp,sp,12
    69d4:	000bf081 	jmpi	bf08 <__malloc_unlock>
    69d8:	2880004c 	andi	r2,r5,1
    69dc:	3a4d883a 	add	r6,r7,r9
    69e0:	1000071e 	bne	r2,zero,6a00 <_free_r+0x218>
    69e4:	80bffe17 	ldw	r2,-8(r16)
    69e8:	4091c83a 	sub	r8,r8,r2
    69ec:	41000317 	ldw	r4,12(r8)
    69f0:	40c00217 	ldw	r3,8(r8)
    69f4:	308d883a 	add	r6,r6,r2
    69f8:	20c00215 	stw	r3,8(r4)
    69fc:	19000315 	stw	r4,12(r3)
    6a00:	00800074 	movhi	r2,1
    6a04:	10804e04 	addi	r2,r2,312
    6a08:	11000017 	ldw	r4,0(r2)
    6a0c:	30c00054 	ori	r3,r6,1
    6a10:	52000215 	stw	r8,8(r10)
    6a14:	40c00115 	stw	r3,4(r8)
    6a18:	313fa036 	bltu	r6,r4,689c <_free_r+0xb4>
    6a1c:	00800074 	movhi	r2,1
    6a20:	10870c04 	addi	r2,r2,7216
    6a24:	11400017 	ldw	r5,0(r2)
    6a28:	8809883a 	mov	r4,r17
    6a2c:	00066bc0 	call	66bc <_malloc_trim_r>
    6a30:	003f9a06 	br	689c <_free_r+0xb4>
    6a34:	00800104 	movi	r2,4
    6a38:	10c0072e 	bgeu	r2,r3,6a58 <_free_r+0x270>
    6a3c:	00800504 	movi	r2,20
    6a40:	10c01936 	bltu	r2,r3,6aa8 <_free_r+0x2c0>
    6a44:	188016c4 	addi	r2,r3,91
    6a48:	100690fa 	slli	r3,r2,3
    6a4c:	003fb306 	br	691c <_free_r+0x134>
    6a50:	01400044 	movi	r5,1
    6a54:	003f7e06 	br	6850 <_free_r+0x68>
    6a58:	3804d1ba 	srli	r2,r7,6
    6a5c:	10800e04 	addi	r2,r2,56
    6a60:	100690fa 	slli	r3,r2,3
    6a64:	003fad06 	br	691c <_free_r+0x134>
    6a68:	22000315 	stw	r8,12(r4)
    6a6c:	22000215 	stw	r8,8(r4)
    6a70:	3a05883a 	add	r2,r7,r8
    6a74:	38c00054 	ori	r3,r7,1
    6a78:	11c00015 	stw	r7,0(r2)
    6a7c:	41000215 	stw	r4,8(r8)
    6a80:	40c00115 	stw	r3,4(r8)
    6a84:	41000315 	stw	r4,12(r8)
    6a88:	003f8406 	br	689c <_free_r+0xb4>
    6a8c:	1005d0ba 	srai	r2,r2,2
    6a90:	00c00044 	movi	r3,1
    6a94:	51000117 	ldw	r4,4(r10)
    6a98:	1886983a 	sll	r3,r3,r2
    6a9c:	20c8b03a 	or	r4,r4,r3
    6aa0:	51000115 	stw	r4,4(r10)
    6aa4:	003fa706 	br	6944 <_free_r+0x15c>
    6aa8:	00801504 	movi	r2,84
    6aac:	10c00436 	bltu	r2,r3,6ac0 <_free_r+0x2d8>
    6ab0:	3804d33a 	srli	r2,r7,12
    6ab4:	10801b84 	addi	r2,r2,110
    6ab8:	100690fa 	slli	r3,r2,3
    6abc:	003f9706 	br	691c <_free_r+0x134>
    6ac0:	00805504 	movi	r2,340
    6ac4:	10c00436 	bltu	r2,r3,6ad8 <_free_r+0x2f0>
    6ac8:	3804d3fa 	srli	r2,r7,15
    6acc:	10801dc4 	addi	r2,r2,119
    6ad0:	100690fa 	slli	r3,r2,3
    6ad4:	003f9106 	br	691c <_free_r+0x134>
    6ad8:	00815504 	movi	r2,1364
    6adc:	10c0032e 	bgeu	r2,r3,6aec <_free_r+0x304>
    6ae0:	00801f84 	movi	r2,126
    6ae4:	00c0fc04 	movi	r3,1008
    6ae8:	003f8c06 	br	691c <_free_r+0x134>
    6aec:	3804d4ba 	srli	r2,r7,18
    6af0:	10801f04 	addi	r2,r2,124
    6af4:	100690fa 	slli	r3,r2,3
    6af8:	003f8806 	br	691c <_free_r+0x134>

00006afc <__sfvwrite_r>:
    6afc:	30800217 	ldw	r2,8(r6)
    6b00:	defff504 	addi	sp,sp,-44
    6b04:	df000915 	stw	fp,36(sp)
    6b08:	dd800715 	stw	r22,28(sp)
    6b0c:	dc800315 	stw	r18,12(sp)
    6b10:	dfc00a15 	stw	ra,40(sp)
    6b14:	ddc00815 	stw	r23,32(sp)
    6b18:	dd400615 	stw	r21,24(sp)
    6b1c:	dd000515 	stw	r20,20(sp)
    6b20:	dcc00415 	stw	r19,16(sp)
    6b24:	dc400215 	stw	r17,8(sp)
    6b28:	dc000115 	stw	r16,4(sp)
    6b2c:	302d883a 	mov	r22,r6
    6b30:	2039883a 	mov	fp,r4
    6b34:	2825883a 	mov	r18,r5
    6b38:	10001c26 	beq	r2,zero,6bac <__sfvwrite_r+0xb0>
    6b3c:	29c0030b 	ldhu	r7,12(r5)
    6b40:	3880020c 	andi	r2,r7,8
    6b44:	10002726 	beq	r2,zero,6be4 <__sfvwrite_r+0xe8>
    6b48:	28800417 	ldw	r2,16(r5)
    6b4c:	10002526 	beq	r2,zero,6be4 <__sfvwrite_r+0xe8>
    6b50:	3880008c 	andi	r2,r7,2
    6b54:	b5400017 	ldw	r21,0(r22)
    6b58:	10002826 	beq	r2,zero,6bfc <__sfvwrite_r+0x100>
    6b5c:	0021883a 	mov	r16,zero
    6b60:	0023883a 	mov	r17,zero
    6b64:	880d883a 	mov	r6,r17
    6b68:	e009883a 	mov	r4,fp
    6b6c:	00810004 	movi	r2,1024
    6b70:	80006e26 	beq	r16,zero,6d2c <__sfvwrite_r+0x230>
    6b74:	800f883a 	mov	r7,r16
    6b78:	91400717 	ldw	r5,28(r18)
    6b7c:	1400012e 	bgeu	r2,r16,6b84 <__sfvwrite_r+0x88>
    6b80:	100f883a 	mov	r7,r2
    6b84:	90c00917 	ldw	r3,36(r18)
    6b88:	183ee83a 	callr	r3
    6b8c:	1007883a 	mov	r3,r2
    6b90:	80a1c83a 	sub	r16,r16,r2
    6b94:	88a3883a 	add	r17,r17,r2
    6b98:	00806d0e 	bge	zero,r2,6d50 <__sfvwrite_r+0x254>
    6b9c:	b0800217 	ldw	r2,8(r22)
    6ba0:	10c5c83a 	sub	r2,r2,r3
    6ba4:	b0800215 	stw	r2,8(r22)
    6ba8:	103fee1e 	bne	r2,zero,6b64 <__sfvwrite_r+0x68>
    6bac:	0009883a 	mov	r4,zero
    6bb0:	2005883a 	mov	r2,r4
    6bb4:	dfc00a17 	ldw	ra,40(sp)
    6bb8:	df000917 	ldw	fp,36(sp)
    6bbc:	ddc00817 	ldw	r23,32(sp)
    6bc0:	dd800717 	ldw	r22,28(sp)
    6bc4:	dd400617 	ldw	r21,24(sp)
    6bc8:	dd000517 	ldw	r20,20(sp)
    6bcc:	dcc00417 	ldw	r19,16(sp)
    6bd0:	dc800317 	ldw	r18,12(sp)
    6bd4:	dc400217 	ldw	r17,8(sp)
    6bd8:	dc000117 	ldw	r16,4(sp)
    6bdc:	dec00b04 	addi	sp,sp,44
    6be0:	f800283a 	ret
    6be4:	00047100 	call	4710 <__swsetup_r>
    6be8:	1000e41e 	bne	r2,zero,6f7c <__sfvwrite_r+0x480>
    6bec:	91c0030b 	ldhu	r7,12(r18)
    6bf0:	b5400017 	ldw	r21,0(r22)
    6bf4:	3880008c 	andi	r2,r7,2
    6bf8:	103fd81e 	bne	r2,zero,6b5c <__sfvwrite_r+0x60>
    6bfc:	3880004c 	andi	r2,r7,1
    6c00:	1005003a 	cmpeq	r2,r2,zero
    6c04:	10005726 	beq	r2,zero,6d64 <__sfvwrite_r+0x268>
    6c08:	0029883a 	mov	r20,zero
    6c0c:	002f883a 	mov	r23,zero
    6c10:	a0004226 	beq	r20,zero,6d1c <__sfvwrite_r+0x220>
    6c14:	3880800c 	andi	r2,r7,512
    6c18:	94000217 	ldw	r16,8(r18)
    6c1c:	10008b26 	beq	r2,zero,6e4c <__sfvwrite_r+0x350>
    6c20:	800d883a 	mov	r6,r16
    6c24:	a400a536 	bltu	r20,r16,6ebc <__sfvwrite_r+0x3c0>
    6c28:	3881200c 	andi	r2,r7,1152
    6c2c:	10002726 	beq	r2,zero,6ccc <__sfvwrite_r+0x1d0>
    6c30:	90800517 	ldw	r2,20(r18)
    6c34:	92000417 	ldw	r8,16(r18)
    6c38:	91400017 	ldw	r5,0(r18)
    6c3c:	1087883a 	add	r3,r2,r2
    6c40:	1887883a 	add	r3,r3,r2
    6c44:	1808d7fa 	srli	r4,r3,31
    6c48:	2a21c83a 	sub	r16,r5,r8
    6c4c:	80800044 	addi	r2,r16,1
    6c50:	20c9883a 	add	r4,r4,r3
    6c54:	2027d07a 	srai	r19,r4,1
    6c58:	a085883a 	add	r2,r20,r2
    6c5c:	980d883a 	mov	r6,r19
    6c60:	9880022e 	bgeu	r19,r2,6c6c <__sfvwrite_r+0x170>
    6c64:	1027883a 	mov	r19,r2
    6c68:	100d883a 	mov	r6,r2
    6c6c:	3881000c 	andi	r2,r7,1024
    6c70:	1000b826 	beq	r2,zero,6f54 <__sfvwrite_r+0x458>
    6c74:	300b883a 	mov	r5,r6
    6c78:	e009883a 	mov	r4,fp
    6c7c:	0001e980 	call	1e98 <_malloc_r>
    6c80:	10003126 	beq	r2,zero,6d48 <__sfvwrite_r+0x24c>
    6c84:	91400417 	ldw	r5,16(r18)
    6c88:	1009883a 	mov	r4,r2
    6c8c:	800d883a 	mov	r6,r16
    6c90:	1023883a 	mov	r17,r2
    6c94:	00074540 	call	7454 <memcpy>
    6c98:	90c0030b 	ldhu	r3,12(r18)
    6c9c:	00beffc4 	movi	r2,-1025
    6ca0:	1886703a 	and	r3,r3,r2
    6ca4:	18c02014 	ori	r3,r3,128
    6ca8:	90c0030d 	sth	r3,12(r18)
    6cac:	9c07c83a 	sub	r3,r19,r16
    6cb0:	8c05883a 	add	r2,r17,r16
    6cb4:	a00d883a 	mov	r6,r20
    6cb8:	a021883a 	mov	r16,r20
    6cbc:	90800015 	stw	r2,0(r18)
    6cc0:	90c00215 	stw	r3,8(r18)
    6cc4:	94400415 	stw	r17,16(r18)
    6cc8:	94c00515 	stw	r19,20(r18)
    6ccc:	91000017 	ldw	r4,0(r18)
    6cd0:	b80b883a 	mov	r5,r23
    6cd4:	a023883a 	mov	r17,r20
    6cd8:	00074f40 	call	74f4 <memmove>
    6cdc:	90c00217 	ldw	r3,8(r18)
    6ce0:	90800017 	ldw	r2,0(r18)
    6ce4:	a027883a 	mov	r19,r20
    6ce8:	1c07c83a 	sub	r3,r3,r16
    6cec:	1405883a 	add	r2,r2,r16
    6cf0:	90c00215 	stw	r3,8(r18)
    6cf4:	a021883a 	mov	r16,r20
    6cf8:	90800015 	stw	r2,0(r18)
    6cfc:	b0800217 	ldw	r2,8(r22)
    6d00:	1405c83a 	sub	r2,r2,r16
    6d04:	b0800215 	stw	r2,8(r22)
    6d08:	103fa826 	beq	r2,zero,6bac <__sfvwrite_r+0xb0>
    6d0c:	a469c83a 	sub	r20,r20,r17
    6d10:	91c0030b 	ldhu	r7,12(r18)
    6d14:	bcef883a 	add	r23,r23,r19
    6d18:	a03fbe1e 	bne	r20,zero,6c14 <__sfvwrite_r+0x118>
    6d1c:	adc00017 	ldw	r23,0(r21)
    6d20:	ad000117 	ldw	r20,4(r21)
    6d24:	ad400204 	addi	r21,r21,8
    6d28:	003fb906 	br	6c10 <__sfvwrite_r+0x114>
    6d2c:	ac400017 	ldw	r17,0(r21)
    6d30:	ac000117 	ldw	r16,4(r21)
    6d34:	ad400204 	addi	r21,r21,8
    6d38:	003f8a06 	br	6b64 <__sfvwrite_r+0x68>
    6d3c:	91400417 	ldw	r5,16(r18)
    6d40:	e009883a 	mov	r4,fp
    6d44:	00067e80 	call	67e8 <_free_r>
    6d48:	00800304 	movi	r2,12
    6d4c:	e0800015 	stw	r2,0(fp)
    6d50:	9080030b 	ldhu	r2,12(r18)
    6d54:	013fffc4 	movi	r4,-1
    6d58:	10801014 	ori	r2,r2,64
    6d5c:	9080030d 	sth	r2,12(r18)
    6d60:	003f9306 	br	6bb0 <__sfvwrite_r+0xb4>
    6d64:	0027883a 	mov	r19,zero
    6d68:	002f883a 	mov	r23,zero
    6d6c:	d8000015 	stw	zero,0(sp)
    6d70:	0029883a 	mov	r20,zero
    6d74:	98001e26 	beq	r19,zero,6df0 <__sfvwrite_r+0x2f4>
    6d78:	d8c00017 	ldw	r3,0(sp)
    6d7c:	1804c03a 	cmpne	r2,r3,zero
    6d80:	10005e26 	beq	r2,zero,6efc <__sfvwrite_r+0x400>
    6d84:	9821883a 	mov	r16,r19
    6d88:	a4c0012e 	bgeu	r20,r19,6d90 <__sfvwrite_r+0x294>
    6d8c:	a021883a 	mov	r16,r20
    6d90:	91000017 	ldw	r4,0(r18)
    6d94:	90800417 	ldw	r2,16(r18)
    6d98:	91800217 	ldw	r6,8(r18)
    6d9c:	91c00517 	ldw	r7,20(r18)
    6da0:	1100022e 	bgeu	r2,r4,6dac <__sfvwrite_r+0x2b0>
    6da4:	31e3883a 	add	r17,r6,r7
    6da8:	8c001616 	blt	r17,r16,6e04 <__sfvwrite_r+0x308>
    6dac:	81c03816 	blt	r16,r7,6e90 <__sfvwrite_r+0x394>
    6db0:	90c00917 	ldw	r3,36(r18)
    6db4:	91400717 	ldw	r5,28(r18)
    6db8:	e009883a 	mov	r4,fp
    6dbc:	b80d883a 	mov	r6,r23
    6dc0:	183ee83a 	callr	r3
    6dc4:	1023883a 	mov	r17,r2
    6dc8:	00bfe10e 	bge	zero,r2,6d50 <__sfvwrite_r+0x254>
    6dcc:	a469c83a 	sub	r20,r20,r17
    6dd0:	a0001826 	beq	r20,zero,6e34 <__sfvwrite_r+0x338>
    6dd4:	b0800217 	ldw	r2,8(r22)
    6dd8:	1445c83a 	sub	r2,r2,r17
    6ddc:	b0800215 	stw	r2,8(r22)
    6de0:	103f7226 	beq	r2,zero,6bac <__sfvwrite_r+0xb0>
    6de4:	9c67c83a 	sub	r19,r19,r17
    6de8:	bc6f883a 	add	r23,r23,r17
    6dec:	983fe21e 	bne	r19,zero,6d78 <__sfvwrite_r+0x27c>
    6df0:	adc00017 	ldw	r23,0(r21)
    6df4:	acc00117 	ldw	r19,4(r21)
    6df8:	ad400204 	addi	r21,r21,8
    6dfc:	d8000015 	stw	zero,0(sp)
    6e00:	003fdc06 	br	6d74 <__sfvwrite_r+0x278>
    6e04:	b80b883a 	mov	r5,r23
    6e08:	880d883a 	mov	r6,r17
    6e0c:	00074f40 	call	74f4 <memmove>
    6e10:	90c00017 	ldw	r3,0(r18)
    6e14:	e009883a 	mov	r4,fp
    6e18:	900b883a 	mov	r5,r18
    6e1c:	1c47883a 	add	r3,r3,r17
    6e20:	90c00015 	stw	r3,0(r18)
    6e24:	00061cc0 	call	61cc <_fflush_r>
    6e28:	103fc91e 	bne	r2,zero,6d50 <__sfvwrite_r+0x254>
    6e2c:	a469c83a 	sub	r20,r20,r17
    6e30:	a03fe81e 	bne	r20,zero,6dd4 <__sfvwrite_r+0x2d8>
    6e34:	e009883a 	mov	r4,fp
    6e38:	900b883a 	mov	r5,r18
    6e3c:	00061cc0 	call	61cc <_fflush_r>
    6e40:	103fc31e 	bne	r2,zero,6d50 <__sfvwrite_r+0x254>
    6e44:	d8000015 	stw	zero,0(sp)
    6e48:	003fe206 	br	6dd4 <__sfvwrite_r+0x2d8>
    6e4c:	91000017 	ldw	r4,0(r18)
    6e50:	90800417 	ldw	r2,16(r18)
    6e54:	1100022e 	bgeu	r2,r4,6e60 <__sfvwrite_r+0x364>
    6e58:	8023883a 	mov	r17,r16
    6e5c:	85003136 	bltu	r16,r20,6f24 <__sfvwrite_r+0x428>
    6e60:	91c00517 	ldw	r7,20(r18)
    6e64:	a1c01836 	bltu	r20,r7,6ec8 <__sfvwrite_r+0x3cc>
    6e68:	90c00917 	ldw	r3,36(r18)
    6e6c:	91400717 	ldw	r5,28(r18)
    6e70:	e009883a 	mov	r4,fp
    6e74:	b80d883a 	mov	r6,r23
    6e78:	183ee83a 	callr	r3
    6e7c:	1021883a 	mov	r16,r2
    6e80:	00bfb30e 	bge	zero,r2,6d50 <__sfvwrite_r+0x254>
    6e84:	1023883a 	mov	r17,r2
    6e88:	1027883a 	mov	r19,r2
    6e8c:	003f9b06 	br	6cfc <__sfvwrite_r+0x200>
    6e90:	b80b883a 	mov	r5,r23
    6e94:	800d883a 	mov	r6,r16
    6e98:	00074f40 	call	74f4 <memmove>
    6e9c:	90c00217 	ldw	r3,8(r18)
    6ea0:	90800017 	ldw	r2,0(r18)
    6ea4:	8023883a 	mov	r17,r16
    6ea8:	1c07c83a 	sub	r3,r3,r16
    6eac:	1405883a 	add	r2,r2,r16
    6eb0:	90c00215 	stw	r3,8(r18)
    6eb4:	90800015 	stw	r2,0(r18)
    6eb8:	003fc406 	br	6dcc <__sfvwrite_r+0x2d0>
    6ebc:	a00d883a 	mov	r6,r20
    6ec0:	a021883a 	mov	r16,r20
    6ec4:	003f8106 	br	6ccc <__sfvwrite_r+0x1d0>
    6ec8:	b80b883a 	mov	r5,r23
    6ecc:	a00d883a 	mov	r6,r20
    6ed0:	00074f40 	call	74f4 <memmove>
    6ed4:	90c00217 	ldw	r3,8(r18)
    6ed8:	90800017 	ldw	r2,0(r18)
    6edc:	a021883a 	mov	r16,r20
    6ee0:	1d07c83a 	sub	r3,r3,r20
    6ee4:	1505883a 	add	r2,r2,r20
    6ee8:	a023883a 	mov	r17,r20
    6eec:	a027883a 	mov	r19,r20
    6ef0:	90c00215 	stw	r3,8(r18)
    6ef4:	90800015 	stw	r2,0(r18)
    6ef8:	003f8006 	br	6cfc <__sfvwrite_r+0x200>
    6efc:	b809883a 	mov	r4,r23
    6f00:	01400284 	movi	r5,10
    6f04:	980d883a 	mov	r6,r19
    6f08:	00073700 	call	7370 <memchr>
    6f0c:	10001726 	beq	r2,zero,6f6c <__sfvwrite_r+0x470>
    6f10:	15c5c83a 	sub	r2,r2,r23
    6f14:	15000044 	addi	r20,r2,1
    6f18:	00800044 	movi	r2,1
    6f1c:	d8800015 	stw	r2,0(sp)
    6f20:	003f9806 	br	6d84 <__sfvwrite_r+0x288>
    6f24:	b80b883a 	mov	r5,r23
    6f28:	800d883a 	mov	r6,r16
    6f2c:	00074f40 	call	74f4 <memmove>
    6f30:	90c00017 	ldw	r3,0(r18)
    6f34:	e009883a 	mov	r4,fp
    6f38:	900b883a 	mov	r5,r18
    6f3c:	1c07883a 	add	r3,r3,r16
    6f40:	90c00015 	stw	r3,0(r18)
    6f44:	8027883a 	mov	r19,r16
    6f48:	00061cc0 	call	61cc <_fflush_r>
    6f4c:	103f6b26 	beq	r2,zero,6cfc <__sfvwrite_r+0x200>
    6f50:	003f7f06 	br	6d50 <__sfvwrite_r+0x254>
    6f54:	400b883a 	mov	r5,r8
    6f58:	e009883a 	mov	r4,fp
    6f5c:	00086600 	call	8660 <_realloc_r>
    6f60:	103f7626 	beq	r2,zero,6d3c <__sfvwrite_r+0x240>
    6f64:	1023883a 	mov	r17,r2
    6f68:	003f5006 	br	6cac <__sfvwrite_r+0x1b0>
    6f6c:	00c00044 	movi	r3,1
    6f70:	9d000044 	addi	r20,r19,1
    6f74:	d8c00015 	stw	r3,0(sp)
    6f78:	003f8206 	br	6d84 <__sfvwrite_r+0x288>
    6f7c:	9080030b 	ldhu	r2,12(r18)
    6f80:	00c00244 	movi	r3,9
    6f84:	013fffc4 	movi	r4,-1
    6f88:	10801014 	ori	r2,r2,64
    6f8c:	9080030d 	sth	r2,12(r18)
    6f90:	e0c00015 	stw	r3,0(fp)
    6f94:	003f0606 	br	6bb0 <__sfvwrite_r+0xb4>

00006f98 <_fwalk_reent>:
    6f98:	defff704 	addi	sp,sp,-36
    6f9c:	dcc00315 	stw	r19,12(sp)
    6fa0:	24c0b804 	addi	r19,r4,736
    6fa4:	dd800615 	stw	r22,24(sp)
    6fa8:	dd400515 	stw	r21,20(sp)
    6fac:	dfc00815 	stw	ra,32(sp)
    6fb0:	ddc00715 	stw	r23,28(sp)
    6fb4:	dd000415 	stw	r20,16(sp)
    6fb8:	dc800215 	stw	r18,8(sp)
    6fbc:	dc400115 	stw	r17,4(sp)
    6fc0:	dc000015 	stw	r16,0(sp)
    6fc4:	202b883a 	mov	r21,r4
    6fc8:	282d883a 	mov	r22,r5
    6fcc:	00064540 	call	6454 <__sfp_lock_acquire>
    6fd0:	98002126 	beq	r19,zero,7058 <_fwalk_reent+0xc0>
    6fd4:	002f883a 	mov	r23,zero
    6fd8:	9c800117 	ldw	r18,4(r19)
    6fdc:	9c000217 	ldw	r16,8(r19)
    6fe0:	90bfffc4 	addi	r2,r18,-1
    6fe4:	10000d16 	blt	r2,zero,701c <_fwalk_reent+0x84>
    6fe8:	0023883a 	mov	r17,zero
    6fec:	053fffc4 	movi	r20,-1
    6ff0:	8080030f 	ldh	r2,12(r16)
    6ff4:	8c400044 	addi	r17,r17,1
    6ff8:	10000626 	beq	r2,zero,7014 <_fwalk_reent+0x7c>
    6ffc:	8080038f 	ldh	r2,14(r16)
    7000:	800b883a 	mov	r5,r16
    7004:	a809883a 	mov	r4,r21
    7008:	15000226 	beq	r2,r20,7014 <_fwalk_reent+0x7c>
    700c:	b03ee83a 	callr	r22
    7010:	b8aeb03a 	or	r23,r23,r2
    7014:	84001704 	addi	r16,r16,92
    7018:	947ff51e 	bne	r18,r17,6ff0 <_fwalk_reent+0x58>
    701c:	9cc00017 	ldw	r19,0(r19)
    7020:	983fed1e 	bne	r19,zero,6fd8 <_fwalk_reent+0x40>
    7024:	00064580 	call	6458 <__sfp_lock_release>
    7028:	b805883a 	mov	r2,r23
    702c:	dfc00817 	ldw	ra,32(sp)
    7030:	ddc00717 	ldw	r23,28(sp)
    7034:	dd800617 	ldw	r22,24(sp)
    7038:	dd400517 	ldw	r21,20(sp)
    703c:	dd000417 	ldw	r20,16(sp)
    7040:	dcc00317 	ldw	r19,12(sp)
    7044:	dc800217 	ldw	r18,8(sp)
    7048:	dc400117 	ldw	r17,4(sp)
    704c:	dc000017 	ldw	r16,0(sp)
    7050:	dec00904 	addi	sp,sp,36
    7054:	f800283a 	ret
    7058:	002f883a 	mov	r23,zero
    705c:	003ff106 	br	7024 <_fwalk_reent+0x8c>

00007060 <_fwalk>:
    7060:	defff804 	addi	sp,sp,-32
    7064:	dcc00315 	stw	r19,12(sp)
    7068:	24c0b804 	addi	r19,r4,736
    706c:	dd400515 	stw	r21,20(sp)
    7070:	dfc00715 	stw	ra,28(sp)
    7074:	dd800615 	stw	r22,24(sp)
    7078:	dd000415 	stw	r20,16(sp)
    707c:	dc800215 	stw	r18,8(sp)
    7080:	dc400115 	stw	r17,4(sp)
    7084:	dc000015 	stw	r16,0(sp)
    7088:	282b883a 	mov	r21,r5
    708c:	00064540 	call	6454 <__sfp_lock_acquire>
    7090:	98001f26 	beq	r19,zero,7110 <_fwalk+0xb0>
    7094:	002d883a 	mov	r22,zero
    7098:	9c800117 	ldw	r18,4(r19)
    709c:	9c000217 	ldw	r16,8(r19)
    70a0:	90bfffc4 	addi	r2,r18,-1
    70a4:	10000c16 	blt	r2,zero,70d8 <_fwalk+0x78>
    70a8:	0023883a 	mov	r17,zero
    70ac:	053fffc4 	movi	r20,-1
    70b0:	8080030f 	ldh	r2,12(r16)
    70b4:	8c400044 	addi	r17,r17,1
    70b8:	10000526 	beq	r2,zero,70d0 <_fwalk+0x70>
    70bc:	8080038f 	ldh	r2,14(r16)
    70c0:	8009883a 	mov	r4,r16
    70c4:	15000226 	beq	r2,r20,70d0 <_fwalk+0x70>
    70c8:	a83ee83a 	callr	r21
    70cc:	b0acb03a 	or	r22,r22,r2
    70d0:	84001704 	addi	r16,r16,92
    70d4:	947ff61e 	bne	r18,r17,70b0 <_fwalk+0x50>
    70d8:	9cc00017 	ldw	r19,0(r19)
    70dc:	983fee1e 	bne	r19,zero,7098 <_fwalk+0x38>
    70e0:	00064580 	call	6458 <__sfp_lock_release>
    70e4:	b005883a 	mov	r2,r22
    70e8:	dfc00717 	ldw	ra,28(sp)
    70ec:	dd800617 	ldw	r22,24(sp)
    70f0:	dd400517 	ldw	r21,20(sp)
    70f4:	dd000417 	ldw	r20,16(sp)
    70f8:	dcc00317 	ldw	r19,12(sp)
    70fc:	dc800217 	ldw	r18,8(sp)
    7100:	dc400117 	ldw	r17,4(sp)
    7104:	dc000017 	ldw	r16,0(sp)
    7108:	dec00804 	addi	sp,sp,32
    710c:	f800283a 	ret
    7110:	002d883a 	mov	r22,zero
    7114:	003ff206 	br	70e0 <_fwalk+0x80>

00007118 <__locale_charset>:
    7118:	d0a00617 	ldw	r2,-32744(gp)
    711c:	f800283a 	ret

00007120 <_localeconv_r>:
    7120:	00800074 	movhi	r2,1
    7124:	10b90f04 	addi	r2,r2,-7108
    7128:	f800283a 	ret

0000712c <localeconv>:
    712c:	00800074 	movhi	r2,1
    7130:	10804c04 	addi	r2,r2,304
    7134:	11000017 	ldw	r4,0(r2)
    7138:	00071201 	jmpi	7120 <_localeconv_r>

0000713c <_setlocale_r>:
    713c:	defffc04 	addi	sp,sp,-16
    7140:	00c00074 	movhi	r3,1
    7144:	18f8e504 	addi	r3,r3,-7276
    7148:	dc800215 	stw	r18,8(sp)
    714c:	dc400115 	stw	r17,4(sp)
    7150:	dc000015 	stw	r16,0(sp)
    7154:	2023883a 	mov	r17,r4
    7158:	2825883a 	mov	r18,r5
    715c:	dfc00315 	stw	ra,12(sp)
    7160:	3021883a 	mov	r16,r6
    7164:	3009883a 	mov	r4,r6
    7168:	180b883a 	mov	r5,r3
    716c:	30000926 	beq	r6,zero,7194 <_setlocale_r+0x58>
    7170:	0008e100 	call	8e10 <strcmp>
    7174:	8009883a 	mov	r4,r16
    7178:	01400074 	movhi	r5,1
    717c:	2978f604 	addi	r5,r5,-7208
    7180:	10000b1e 	bne	r2,zero,71b0 <_setlocale_r+0x74>
    7184:	8c000d15 	stw	r16,52(r17)
    7188:	8c800c15 	stw	r18,48(r17)
    718c:	00c00074 	movhi	r3,1
    7190:	18f8e504 	addi	r3,r3,-7276
    7194:	1805883a 	mov	r2,r3
    7198:	dfc00317 	ldw	ra,12(sp)
    719c:	dc800217 	ldw	r18,8(sp)
    71a0:	dc400117 	ldw	r17,4(sp)
    71a4:	dc000017 	ldw	r16,0(sp)
    71a8:	dec00404 	addi	sp,sp,16
    71ac:	f800283a 	ret
    71b0:	0008e100 	call	8e10 <strcmp>
    71b4:	0007883a 	mov	r3,zero
    71b8:	103ff226 	beq	r2,zero,7184 <_setlocale_r+0x48>
    71bc:	003ff506 	br	7194 <_setlocale_r+0x58>

000071c0 <setlocale>:
    71c0:	01800074 	movhi	r6,1
    71c4:	31804c04 	addi	r6,r6,304
    71c8:	2007883a 	mov	r3,r4
    71cc:	31000017 	ldw	r4,0(r6)
    71d0:	280d883a 	mov	r6,r5
    71d4:	180b883a 	mov	r5,r3
    71d8:	000713c1 	jmpi	713c <_setlocale_r>

000071dc <__smakebuf_r>:
    71dc:	2880030b 	ldhu	r2,12(r5)
    71e0:	deffed04 	addi	sp,sp,-76
    71e4:	dc401015 	stw	r17,64(sp)
    71e8:	1080008c 	andi	r2,r2,2
    71ec:	dc000f15 	stw	r16,60(sp)
    71f0:	dfc01215 	stw	ra,72(sp)
    71f4:	dc801115 	stw	r18,68(sp)
    71f8:	2821883a 	mov	r16,r5
    71fc:	2023883a 	mov	r17,r4
    7200:	10000b26 	beq	r2,zero,7230 <__smakebuf_r+0x54>
    7204:	28c010c4 	addi	r3,r5,67
    7208:	00800044 	movi	r2,1
    720c:	28800515 	stw	r2,20(r5)
    7210:	28c00415 	stw	r3,16(r5)
    7214:	28c00015 	stw	r3,0(r5)
    7218:	dfc01217 	ldw	ra,72(sp)
    721c:	dc801117 	ldw	r18,68(sp)
    7220:	dc401017 	ldw	r17,64(sp)
    7224:	dc000f17 	ldw	r16,60(sp)
    7228:	dec01304 	addi	sp,sp,76
    722c:	f800283a 	ret
    7230:	2940038f 	ldh	r5,14(r5)
    7234:	28002116 	blt	r5,zero,72bc <__smakebuf_r+0xe0>
    7238:	d80d883a 	mov	r6,sp
    723c:	000918c0 	call	918c <_fstat_r>
    7240:	10001e16 	blt	r2,zero,72bc <__smakebuf_r+0xe0>
    7244:	d8800117 	ldw	r2,4(sp)
    7248:	00e00014 	movui	r3,32768
    724c:	113c000c 	andi	r4,r2,61440
    7250:	20c03126 	beq	r4,r3,7318 <__smakebuf_r+0x13c>
    7254:	8080030b 	ldhu	r2,12(r16)
    7258:	00c80004 	movi	r3,8192
    725c:	10820014 	ori	r2,r2,2048
    7260:	8080030d 	sth	r2,12(r16)
    7264:	20c01e26 	beq	r4,r3,72e0 <__smakebuf_r+0x104>
    7268:	04810004 	movi	r18,1024
    726c:	8809883a 	mov	r4,r17
    7270:	900b883a 	mov	r5,r18
    7274:	0001e980 	call	1e98 <_malloc_r>
    7278:	1009883a 	mov	r4,r2
    727c:	10003126 	beq	r2,zero,7344 <__smakebuf_r+0x168>
    7280:	80c0030b 	ldhu	r3,12(r16)
    7284:	00800034 	movhi	r2,0
    7288:	10995204 	addi	r2,r2,25928
    728c:	88800f15 	stw	r2,60(r17)
    7290:	18c02014 	ori	r3,r3,128
    7294:	84800515 	stw	r18,20(r16)
    7298:	80c0030d 	sth	r3,12(r16)
    729c:	81000415 	stw	r4,16(r16)
    72a0:	81000015 	stw	r4,0(r16)
    72a4:	dfc01217 	ldw	ra,72(sp)
    72a8:	dc801117 	ldw	r18,68(sp)
    72ac:	dc401017 	ldw	r17,64(sp)
    72b0:	dc000f17 	ldw	r16,60(sp)
    72b4:	dec01304 	addi	sp,sp,76
    72b8:	f800283a 	ret
    72bc:	80c0030b 	ldhu	r3,12(r16)
    72c0:	1880200c 	andi	r2,r3,128
    72c4:	10000426 	beq	r2,zero,72d8 <__smakebuf_r+0xfc>
    72c8:	04801004 	movi	r18,64
    72cc:	18820014 	ori	r2,r3,2048
    72d0:	8080030d 	sth	r2,12(r16)
    72d4:	003fe506 	br	726c <__smakebuf_r+0x90>
    72d8:	04810004 	movi	r18,1024
    72dc:	003ffb06 	br	72cc <__smakebuf_r+0xf0>
    72e0:	8140038f 	ldh	r5,14(r16)
    72e4:	8809883a 	mov	r4,r17
    72e8:	00092000 	call	9200 <_isatty_r>
    72ec:	103fde26 	beq	r2,zero,7268 <__smakebuf_r+0x8c>
    72f0:	8080030b 	ldhu	r2,12(r16)
    72f4:	80c010c4 	addi	r3,r16,67
    72f8:	04810004 	movi	r18,1024
    72fc:	10800054 	ori	r2,r2,1
    7300:	8080030d 	sth	r2,12(r16)
    7304:	00800044 	movi	r2,1
    7308:	80c00415 	stw	r3,16(r16)
    730c:	80800515 	stw	r2,20(r16)
    7310:	80c00015 	stw	r3,0(r16)
    7314:	003fd506 	br	726c <__smakebuf_r+0x90>
    7318:	80c00a17 	ldw	r3,40(r16)
    731c:	00800074 	movhi	r2,1
    7320:	10a33304 	addi	r2,r2,-29492
    7324:	18bfcb1e 	bne	r3,r2,7254 <__smakebuf_r+0x78>
    7328:	8080030b 	ldhu	r2,12(r16)
    732c:	00c10004 	movi	r3,1024
    7330:	1825883a 	mov	r18,r3
    7334:	10c4b03a 	or	r2,r2,r3
    7338:	8080030d 	sth	r2,12(r16)
    733c:	80c01315 	stw	r3,76(r16)
    7340:	003fca06 	br	726c <__smakebuf_r+0x90>
    7344:	8100030b 	ldhu	r4,12(r16)
    7348:	2080800c 	andi	r2,r4,512
    734c:	103fb21e 	bne	r2,zero,7218 <__smakebuf_r+0x3c>
    7350:	80c010c4 	addi	r3,r16,67
    7354:	21000094 	ori	r4,r4,2
    7358:	00800044 	movi	r2,1
    735c:	80800515 	stw	r2,20(r16)
    7360:	8100030d 	sth	r4,12(r16)
    7364:	80c00415 	stw	r3,16(r16)
    7368:	80c00015 	stw	r3,0(r16)
    736c:	003faa06 	br	7218 <__smakebuf_r+0x3c>

00007370 <memchr>:
    7370:	008000c4 	movi	r2,3
    7374:	29403fcc 	andi	r5,r5,255
    7378:	2007883a 	mov	r3,r4
    737c:	1180022e 	bgeu	r2,r6,7388 <memchr+0x18>
    7380:	2084703a 	and	r2,r4,r2
    7384:	10000b26 	beq	r2,zero,73b4 <memchr+0x44>
    7388:	313fffc4 	addi	r4,r6,-1
    738c:	3000051e 	bne	r6,zero,73a4 <memchr+0x34>
    7390:	00002c06 	br	7444 <memchr+0xd4>
    7394:	213fffc4 	addi	r4,r4,-1
    7398:	00bfffc4 	movi	r2,-1
    739c:	18c00044 	addi	r3,r3,1
    73a0:	20802826 	beq	r4,r2,7444 <memchr+0xd4>
    73a4:	18800003 	ldbu	r2,0(r3)
    73a8:	28bffa1e 	bne	r5,r2,7394 <memchr+0x24>
    73ac:	1805883a 	mov	r2,r3
    73b0:	f800283a 	ret
    73b4:	0011883a 	mov	r8,zero
    73b8:	0007883a 	mov	r3,zero
    73bc:	01c00104 	movi	r7,4
    73c0:	4004923a 	slli	r2,r8,8
    73c4:	18c00044 	addi	r3,r3,1
    73c8:	1151883a 	add	r8,r2,r5
    73cc:	19fffc1e 	bne	r3,r7,73c0 <memchr+0x50>
    73d0:	02bfbff4 	movhi	r10,65279
    73d4:	52bfbfc4 	addi	r10,r10,-257
    73d8:	02602074 	movhi	r9,32897
    73dc:	4a602004 	addi	r9,r9,-32640
    73e0:	02c000c4 	movi	r11,3
    73e4:	20800017 	ldw	r2,0(r4)
    73e8:	31bfff04 	addi	r6,r6,-4
    73ec:	200f883a 	mov	r7,r4
    73f0:	1204f03a 	xor	r2,r2,r8
    73f4:	1287883a 	add	r3,r2,r10
    73f8:	1a46703a 	and	r3,r3,r9
    73fc:	0084303a 	nor	r2,zero,r2
    7400:	10c4703a 	and	r2,r2,r3
    7404:	10000b26 	beq	r2,zero,7434 <memchr+0xc4>
    7408:	20800003 	ldbu	r2,0(r4)
    740c:	28800f26 	beq	r5,r2,744c <memchr+0xdc>
    7410:	20800043 	ldbu	r2,1(r4)
    7414:	21c00044 	addi	r7,r4,1
    7418:	28800c26 	beq	r5,r2,744c <memchr+0xdc>
    741c:	20800083 	ldbu	r2,2(r4)
    7420:	21c00084 	addi	r7,r4,2
    7424:	28800926 	beq	r5,r2,744c <memchr+0xdc>
    7428:	208000c3 	ldbu	r2,3(r4)
    742c:	21c000c4 	addi	r7,r4,3
    7430:	28800626 	beq	r5,r2,744c <memchr+0xdc>
    7434:	21000104 	addi	r4,r4,4
    7438:	59bfea36 	bltu	r11,r6,73e4 <memchr+0x74>
    743c:	2007883a 	mov	r3,r4
    7440:	003fd106 	br	7388 <memchr+0x18>
    7444:	0005883a 	mov	r2,zero
    7448:	f800283a 	ret
    744c:	3805883a 	mov	r2,r7
    7450:	f800283a 	ret

00007454 <memcpy>:
    7454:	01c003c4 	movi	r7,15
    7458:	2007883a 	mov	r3,r4
    745c:	3980032e 	bgeu	r7,r6,746c <memcpy+0x18>
    7460:	2904b03a 	or	r2,r5,r4
    7464:	108000cc 	andi	r2,r2,3
    7468:	10000926 	beq	r2,zero,7490 <memcpy+0x3c>
    746c:	30000626 	beq	r6,zero,7488 <memcpy+0x34>
    7470:	30cd883a 	add	r6,r6,r3
    7474:	28800003 	ldbu	r2,0(r5)
    7478:	29400044 	addi	r5,r5,1
    747c:	18800005 	stb	r2,0(r3)
    7480:	18c00044 	addi	r3,r3,1
    7484:	30fffb1e 	bne	r6,r3,7474 <memcpy+0x20>
    7488:	2005883a 	mov	r2,r4
    748c:	f800283a 	ret
    7490:	3811883a 	mov	r8,r7
    7494:	200f883a 	mov	r7,r4
    7498:	28c00017 	ldw	r3,0(r5)
    749c:	31bffc04 	addi	r6,r6,-16
    74a0:	38c00015 	stw	r3,0(r7)
    74a4:	28800117 	ldw	r2,4(r5)
    74a8:	38800115 	stw	r2,4(r7)
    74ac:	28c00217 	ldw	r3,8(r5)
    74b0:	38c00215 	stw	r3,8(r7)
    74b4:	28800317 	ldw	r2,12(r5)
    74b8:	29400404 	addi	r5,r5,16
    74bc:	38800315 	stw	r2,12(r7)
    74c0:	39c00404 	addi	r7,r7,16
    74c4:	41bff436 	bltu	r8,r6,7498 <memcpy+0x44>
    74c8:	008000c4 	movi	r2,3
    74cc:	1180072e 	bgeu	r2,r6,74ec <memcpy+0x98>
    74d0:	1007883a 	mov	r3,r2
    74d4:	28800017 	ldw	r2,0(r5)
    74d8:	31bfff04 	addi	r6,r6,-4
    74dc:	29400104 	addi	r5,r5,4
    74e0:	38800015 	stw	r2,0(r7)
    74e4:	39c00104 	addi	r7,r7,4
    74e8:	19bffa36 	bltu	r3,r6,74d4 <memcpy+0x80>
    74ec:	3807883a 	mov	r3,r7
    74f0:	003fde06 	br	746c <memcpy+0x18>

000074f4 <memmove>:
    74f4:	2807883a 	mov	r3,r5
    74f8:	2011883a 	mov	r8,r4
    74fc:	29000c2e 	bgeu	r5,r4,7530 <memmove+0x3c>
    7500:	298f883a 	add	r7,r5,r6
    7504:	21c00a2e 	bgeu	r4,r7,7530 <memmove+0x3c>
    7508:	30000726 	beq	r6,zero,7528 <memmove+0x34>
    750c:	2187883a 	add	r3,r4,r6
    7510:	198dc83a 	sub	r6,r3,r6
    7514:	39ffffc4 	addi	r7,r7,-1
    7518:	38800003 	ldbu	r2,0(r7)
    751c:	18ffffc4 	addi	r3,r3,-1
    7520:	18800005 	stb	r2,0(r3)
    7524:	19bffb1e 	bne	r3,r6,7514 <memmove+0x20>
    7528:	2005883a 	mov	r2,r4
    752c:	f800283a 	ret
    7530:	01c003c4 	movi	r7,15
    7534:	39800a36 	bltu	r7,r6,7560 <memmove+0x6c>
    7538:	303ffb26 	beq	r6,zero,7528 <memmove+0x34>
    753c:	400f883a 	mov	r7,r8
    7540:	320d883a 	add	r6,r6,r8
    7544:	28800003 	ldbu	r2,0(r5)
    7548:	29400044 	addi	r5,r5,1
    754c:	38800005 	stb	r2,0(r7)
    7550:	39c00044 	addi	r7,r7,1
    7554:	39bffb1e 	bne	r7,r6,7544 <memmove+0x50>
    7558:	2005883a 	mov	r2,r4
    755c:	f800283a 	ret
    7560:	1904b03a 	or	r2,r3,r4
    7564:	108000cc 	andi	r2,r2,3
    7568:	103ff31e 	bne	r2,zero,7538 <memmove+0x44>
    756c:	3811883a 	mov	r8,r7
    7570:	180b883a 	mov	r5,r3
    7574:	200f883a 	mov	r7,r4
    7578:	28c00017 	ldw	r3,0(r5)
    757c:	31bffc04 	addi	r6,r6,-16
    7580:	38c00015 	stw	r3,0(r7)
    7584:	28800117 	ldw	r2,4(r5)
    7588:	38800115 	stw	r2,4(r7)
    758c:	28c00217 	ldw	r3,8(r5)
    7590:	38c00215 	stw	r3,8(r7)
    7594:	28800317 	ldw	r2,12(r5)
    7598:	29400404 	addi	r5,r5,16
    759c:	38800315 	stw	r2,12(r7)
    75a0:	39c00404 	addi	r7,r7,16
    75a4:	41bff436 	bltu	r8,r6,7578 <memmove+0x84>
    75a8:	008000c4 	movi	r2,3
    75ac:	1180072e 	bgeu	r2,r6,75cc <memmove+0xd8>
    75b0:	1007883a 	mov	r3,r2
    75b4:	28800017 	ldw	r2,0(r5)
    75b8:	31bfff04 	addi	r6,r6,-4
    75bc:	29400104 	addi	r5,r5,4
    75c0:	38800015 	stw	r2,0(r7)
    75c4:	39c00104 	addi	r7,r7,4
    75c8:	19bffa36 	bltu	r3,r6,75b4 <memmove+0xc0>
    75cc:	3811883a 	mov	r8,r7
    75d0:	003fd906 	br	7538 <memmove+0x44>

000075d4 <memset>:
    75d4:	008000c4 	movi	r2,3
    75d8:	29403fcc 	andi	r5,r5,255
    75dc:	2007883a 	mov	r3,r4
    75e0:	1180022e 	bgeu	r2,r6,75ec <memset+0x18>
    75e4:	2084703a 	and	r2,r4,r2
    75e8:	10000826 	beq	r2,zero,760c <memset+0x38>
    75ec:	30000526 	beq	r6,zero,7604 <memset+0x30>
    75f0:	2805883a 	mov	r2,r5
    75f4:	30cd883a 	add	r6,r6,r3
    75f8:	18800005 	stb	r2,0(r3)
    75fc:	18c00044 	addi	r3,r3,1
    7600:	19bffd1e 	bne	r3,r6,75f8 <memset+0x24>
    7604:	2005883a 	mov	r2,r4
    7608:	f800283a 	ret
    760c:	2804923a 	slli	r2,r5,8
    7610:	020003c4 	movi	r8,15
    7614:	200f883a 	mov	r7,r4
    7618:	2884b03a 	or	r2,r5,r2
    761c:	1006943a 	slli	r3,r2,16
    7620:	10c6b03a 	or	r3,r2,r3
    7624:	41800a2e 	bgeu	r8,r6,7650 <memset+0x7c>
    7628:	4005883a 	mov	r2,r8
    762c:	31bffc04 	addi	r6,r6,-16
    7630:	38c00015 	stw	r3,0(r7)
    7634:	38c00115 	stw	r3,4(r7)
    7638:	38c00215 	stw	r3,8(r7)
    763c:	38c00315 	stw	r3,12(r7)
    7640:	39c00404 	addi	r7,r7,16
    7644:	11bff936 	bltu	r2,r6,762c <memset+0x58>
    7648:	008000c4 	movi	r2,3
    764c:	1180052e 	bgeu	r2,r6,7664 <memset+0x90>
    7650:	31bfff04 	addi	r6,r6,-4
    7654:	008000c4 	movi	r2,3
    7658:	38c00015 	stw	r3,0(r7)
    765c:	39c00104 	addi	r7,r7,4
    7660:	11bffb36 	bltu	r2,r6,7650 <memset+0x7c>
    7664:	3807883a 	mov	r3,r7
    7668:	003fe006 	br	75ec <memset+0x18>

0000766c <_Bfree>:
    766c:	28000826 	beq	r5,zero,7690 <_Bfree+0x24>
    7670:	28800117 	ldw	r2,4(r5)
    7674:	21001317 	ldw	r4,76(r4)
    7678:	1085883a 	add	r2,r2,r2
    767c:	1085883a 	add	r2,r2,r2
    7680:	1105883a 	add	r2,r2,r4
    7684:	10c00017 	ldw	r3,0(r2)
    7688:	28c00015 	stw	r3,0(r5)
    768c:	11400015 	stw	r5,0(r2)
    7690:	f800283a 	ret

00007694 <__hi0bits>:
    7694:	20bfffec 	andhi	r2,r4,65535
    7698:	10001426 	beq	r2,zero,76ec <__hi0bits+0x58>
    769c:	0007883a 	mov	r3,zero
    76a0:	20bfc02c 	andhi	r2,r4,65280
    76a4:	1000021e 	bne	r2,zero,76b0 <__hi0bits+0x1c>
    76a8:	2008923a 	slli	r4,r4,8
    76ac:	18c00204 	addi	r3,r3,8
    76b0:	20bc002c 	andhi	r2,r4,61440
    76b4:	1000021e 	bne	r2,zero,76c0 <__hi0bits+0x2c>
    76b8:	2008913a 	slli	r4,r4,4
    76bc:	18c00104 	addi	r3,r3,4
    76c0:	20b0002c 	andhi	r2,r4,49152
    76c4:	1000031e 	bne	r2,zero,76d4 <__hi0bits+0x40>
    76c8:	2105883a 	add	r2,r4,r4
    76cc:	18c00084 	addi	r3,r3,2
    76d0:	1089883a 	add	r4,r2,r2
    76d4:	20000316 	blt	r4,zero,76e4 <__hi0bits+0x50>
    76d8:	2090002c 	andhi	r2,r4,16384
    76dc:	10000626 	beq	r2,zero,76f8 <__hi0bits+0x64>
    76e0:	18c00044 	addi	r3,r3,1
    76e4:	1805883a 	mov	r2,r3
    76e8:	f800283a 	ret
    76ec:	2008943a 	slli	r4,r4,16
    76f0:	00c00404 	movi	r3,16
    76f4:	003fea06 	br	76a0 <__hi0bits+0xc>
    76f8:	00c00804 	movi	r3,32
    76fc:	1805883a 	mov	r2,r3
    7700:	f800283a 	ret

00007704 <__lo0bits>:
    7704:	20c00017 	ldw	r3,0(r4)
    7708:	188001cc 	andi	r2,r3,7
    770c:	10000a26 	beq	r2,zero,7738 <__lo0bits+0x34>
    7710:	1880004c 	andi	r2,r3,1
    7714:	1005003a 	cmpeq	r2,r2,zero
    7718:	10002126 	beq	r2,zero,77a0 <__lo0bits+0x9c>
    771c:	1880008c 	andi	r2,r3,2
    7720:	1000251e 	bne	r2,zero,77b8 <__lo0bits+0xb4>
    7724:	1804d0ba 	srli	r2,r3,2
    7728:	01400084 	movi	r5,2
    772c:	20800015 	stw	r2,0(r4)
    7730:	2805883a 	mov	r2,r5
    7734:	f800283a 	ret
    7738:	18bfffcc 	andi	r2,r3,65535
    773c:	10001526 	beq	r2,zero,7794 <__lo0bits+0x90>
    7740:	000b883a 	mov	r5,zero
    7744:	18803fcc 	andi	r2,r3,255
    7748:	1000021e 	bne	r2,zero,7754 <__lo0bits+0x50>
    774c:	1806d23a 	srli	r3,r3,8
    7750:	29400204 	addi	r5,r5,8
    7754:	188003cc 	andi	r2,r3,15
    7758:	1000021e 	bne	r2,zero,7764 <__lo0bits+0x60>
    775c:	1806d13a 	srli	r3,r3,4
    7760:	29400104 	addi	r5,r5,4
    7764:	188000cc 	andi	r2,r3,3
    7768:	1000021e 	bne	r2,zero,7774 <__lo0bits+0x70>
    776c:	1806d0ba 	srli	r3,r3,2
    7770:	29400084 	addi	r5,r5,2
    7774:	1880004c 	andi	r2,r3,1
    7778:	1000031e 	bne	r2,zero,7788 <__lo0bits+0x84>
    777c:	1806d07a 	srli	r3,r3,1
    7780:	18000a26 	beq	r3,zero,77ac <__lo0bits+0xa8>
    7784:	29400044 	addi	r5,r5,1
    7788:	2805883a 	mov	r2,r5
    778c:	20c00015 	stw	r3,0(r4)
    7790:	f800283a 	ret
    7794:	1806d43a 	srli	r3,r3,16
    7798:	01400404 	movi	r5,16
    779c:	003fe906 	br	7744 <__lo0bits+0x40>
    77a0:	000b883a 	mov	r5,zero
    77a4:	2805883a 	mov	r2,r5
    77a8:	f800283a 	ret
    77ac:	01400804 	movi	r5,32
    77b0:	2805883a 	mov	r2,r5
    77b4:	f800283a 	ret
    77b8:	1804d07a 	srli	r2,r3,1
    77bc:	01400044 	movi	r5,1
    77c0:	20800015 	stw	r2,0(r4)
    77c4:	003fda06 	br	7730 <__lo0bits+0x2c>

000077c8 <__mcmp>:
    77c8:	20800417 	ldw	r2,16(r4)
    77cc:	28c00417 	ldw	r3,16(r5)
    77d0:	10cfc83a 	sub	r7,r2,r3
    77d4:	38000c1e 	bne	r7,zero,7808 <__mcmp+0x40>
    77d8:	18c5883a 	add	r2,r3,r3
    77dc:	1085883a 	add	r2,r2,r2
    77e0:	10c00504 	addi	r3,r2,20
    77e4:	21000504 	addi	r4,r4,20
    77e8:	28cb883a 	add	r5,r5,r3
    77ec:	2085883a 	add	r2,r4,r2
    77f0:	10bfff04 	addi	r2,r2,-4
    77f4:	297fff04 	addi	r5,r5,-4
    77f8:	11800017 	ldw	r6,0(r2)
    77fc:	28c00017 	ldw	r3,0(r5)
    7800:	30c0031e 	bne	r6,r3,7810 <__mcmp+0x48>
    7804:	20bffa36 	bltu	r4,r2,77f0 <__mcmp+0x28>
    7808:	3805883a 	mov	r2,r7
    780c:	f800283a 	ret
    7810:	30c00336 	bltu	r6,r3,7820 <__mcmp+0x58>
    7814:	01c00044 	movi	r7,1
    7818:	3805883a 	mov	r2,r7
    781c:	f800283a 	ret
    7820:	01ffffc4 	movi	r7,-1
    7824:	003ff806 	br	7808 <__mcmp+0x40>

00007828 <__ulp>:
    7828:	295ffc2c 	andhi	r5,r5,32752
    782c:	013f3034 	movhi	r4,64704
    7830:	290b883a 	add	r5,r5,r4
    7834:	0145c83a 	sub	r2,zero,r5
    7838:	1007d53a 	srai	r3,r2,20
    783c:	000d883a 	mov	r6,zero
    7840:	0140040e 	bge	zero,r5,7854 <__ulp+0x2c>
    7844:	280f883a 	mov	r7,r5
    7848:	3807883a 	mov	r3,r7
    784c:	3005883a 	mov	r2,r6
    7850:	f800283a 	ret
    7854:	008004c4 	movi	r2,19
    7858:	193ffb04 	addi	r4,r3,-20
    785c:	10c00c0e 	bge	r2,r3,7890 <__ulp+0x68>
    7860:	008007c4 	movi	r2,31
    7864:	1107c83a 	sub	r3,r2,r4
    7868:	00800784 	movi	r2,30
    786c:	01400044 	movi	r5,1
    7870:	11000216 	blt	r2,r4,787c <__ulp+0x54>
    7874:	00800044 	movi	r2,1
    7878:	10ca983a 	sll	r5,r2,r3
    787c:	000f883a 	mov	r7,zero
    7880:	280d883a 	mov	r6,r5
    7884:	3807883a 	mov	r3,r7
    7888:	3005883a 	mov	r2,r6
    788c:	f800283a 	ret
    7890:	00800234 	movhi	r2,8
    7894:	10cfd83a 	sra	r7,r2,r3
    7898:	000d883a 	mov	r6,zero
    789c:	3005883a 	mov	r2,r6
    78a0:	3807883a 	mov	r3,r7
    78a4:	f800283a 	ret

000078a8 <__b2d>:
    78a8:	20800417 	ldw	r2,16(r4)
    78ac:	defff904 	addi	sp,sp,-28
    78b0:	dd000415 	stw	r20,16(sp)
    78b4:	1085883a 	add	r2,r2,r2
    78b8:	25000504 	addi	r20,r4,20
    78bc:	1085883a 	add	r2,r2,r2
    78c0:	dc000015 	stw	r16,0(sp)
    78c4:	a0a1883a 	add	r16,r20,r2
    78c8:	dd400515 	stw	r21,20(sp)
    78cc:	857fff17 	ldw	r21,-4(r16)
    78d0:	dc400115 	stw	r17,4(sp)
    78d4:	dfc00615 	stw	ra,24(sp)
    78d8:	a809883a 	mov	r4,r21
    78dc:	2823883a 	mov	r17,r5
    78e0:	dcc00315 	stw	r19,12(sp)
    78e4:	dc800215 	stw	r18,8(sp)
    78e8:	00076940 	call	7694 <__hi0bits>
    78ec:	100b883a 	mov	r5,r2
    78f0:	00800804 	movi	r2,32
    78f4:	1145c83a 	sub	r2,r2,r5
    78f8:	88800015 	stw	r2,0(r17)
    78fc:	00800284 	movi	r2,10
    7900:	80ffff04 	addi	r3,r16,-4
    7904:	11401416 	blt	r2,r5,7958 <__b2d+0xb0>
    7908:	008002c4 	movi	r2,11
    790c:	1149c83a 	sub	r4,r2,r5
    7910:	a0c02736 	bltu	r20,r3,79b0 <__b2d+0x108>
    7914:	000d883a 	mov	r6,zero
    7918:	28800544 	addi	r2,r5,21
    791c:	a906d83a 	srl	r3,r21,r4
    7920:	a884983a 	sll	r2,r21,r2
    7924:	1ccffc34 	orhi	r19,r3,16368
    7928:	11a4b03a 	or	r18,r2,r6
    792c:	9005883a 	mov	r2,r18
    7930:	9807883a 	mov	r3,r19
    7934:	dfc00617 	ldw	ra,24(sp)
    7938:	dd400517 	ldw	r21,20(sp)
    793c:	dd000417 	ldw	r20,16(sp)
    7940:	dcc00317 	ldw	r19,12(sp)
    7944:	dc800217 	ldw	r18,8(sp)
    7948:	dc400117 	ldw	r17,4(sp)
    794c:	dc000017 	ldw	r16,0(sp)
    7950:	dec00704 	addi	sp,sp,28
    7954:	f800283a 	ret
    7958:	a0c00e36 	bltu	r20,r3,7994 <__b2d+0xec>
    795c:	293ffd44 	addi	r4,r5,-11
    7960:	000d883a 	mov	r6,zero
    7964:	20000f26 	beq	r4,zero,79a4 <__b2d+0xfc>
    7968:	00800804 	movi	r2,32
    796c:	110bc83a 	sub	r5,r2,r4
    7970:	a0c01236 	bltu	r20,r3,79bc <__b2d+0x114>
    7974:	000f883a 	mov	r7,zero
    7978:	a904983a 	sll	r2,r21,r4
    797c:	3146d83a 	srl	r3,r6,r5
    7980:	3108983a 	sll	r4,r6,r4
    7984:	108ffc34 	orhi	r2,r2,16368
    7988:	18a6b03a 	or	r19,r3,r2
    798c:	3924b03a 	or	r18,r7,r4
    7990:	003fe606 	br	792c <__b2d+0x84>
    7994:	293ffd44 	addi	r4,r5,-11
    7998:	81bffe17 	ldw	r6,-8(r16)
    799c:	80fffe04 	addi	r3,r16,-8
    79a0:	203ff11e 	bne	r4,zero,7968 <__b2d+0xc0>
    79a4:	accffc34 	orhi	r19,r21,16368
    79a8:	3025883a 	mov	r18,r6
    79ac:	003fdf06 	br	792c <__b2d+0x84>
    79b0:	18bfff17 	ldw	r2,-4(r3)
    79b4:	110cd83a 	srl	r6,r2,r4
    79b8:	003fd706 	br	7918 <__b2d+0x70>
    79bc:	18bfff17 	ldw	r2,-4(r3)
    79c0:	114ed83a 	srl	r7,r2,r5
    79c4:	003fec06 	br	7978 <__b2d+0xd0>

000079c8 <__ratio>:
    79c8:	defff904 	addi	sp,sp,-28
    79cc:	dc400215 	stw	r17,8(sp)
    79d0:	2823883a 	mov	r17,r5
    79d4:	d80b883a 	mov	r5,sp
    79d8:	dfc00615 	stw	ra,24(sp)
    79dc:	dd000515 	stw	r20,20(sp)
    79e0:	dcc00415 	stw	r19,16(sp)
    79e4:	dc800315 	stw	r18,12(sp)
    79e8:	2025883a 	mov	r18,r4
    79ec:	00078a80 	call	78a8 <__b2d>
    79f0:	8809883a 	mov	r4,r17
    79f4:	d9400104 	addi	r5,sp,4
    79f8:	1027883a 	mov	r19,r2
    79fc:	1829883a 	mov	r20,r3
    7a00:	00078a80 	call	78a8 <__b2d>
    7a04:	89000417 	ldw	r4,16(r17)
    7a08:	91c00417 	ldw	r7,16(r18)
    7a0c:	d9800117 	ldw	r6,4(sp)
    7a10:	180b883a 	mov	r5,r3
    7a14:	390fc83a 	sub	r7,r7,r4
    7a18:	1009883a 	mov	r4,r2
    7a1c:	d8800017 	ldw	r2,0(sp)
    7a20:	380e917a 	slli	r7,r7,5
    7a24:	2011883a 	mov	r8,r4
    7a28:	1185c83a 	sub	r2,r2,r6
    7a2c:	11c5883a 	add	r2,r2,r7
    7a30:	1006953a 	slli	r3,r2,20
    7a34:	2813883a 	mov	r9,r5
    7a38:	00800d0e 	bge	zero,r2,7a70 <__ratio+0xa8>
    7a3c:	1d29883a 	add	r20,r3,r20
    7a40:	a00b883a 	mov	r5,r20
    7a44:	480f883a 	mov	r7,r9
    7a48:	9809883a 	mov	r4,r19
    7a4c:	400d883a 	mov	r6,r8
    7a50:	000a7b40 	call	a7b4 <__divdf3>
    7a54:	dfc00617 	ldw	ra,24(sp)
    7a58:	dd000517 	ldw	r20,20(sp)
    7a5c:	dcc00417 	ldw	r19,16(sp)
    7a60:	dc800317 	ldw	r18,12(sp)
    7a64:	dc400217 	ldw	r17,8(sp)
    7a68:	dec00704 	addi	sp,sp,28
    7a6c:	f800283a 	ret
    7a70:	28d3c83a 	sub	r9,r5,r3
    7a74:	003ff206 	br	7a40 <__ratio+0x78>

00007a78 <_mprec_log10>:
    7a78:	defffe04 	addi	sp,sp,-8
    7a7c:	008005c4 	movi	r2,23
    7a80:	dc000015 	stw	r16,0(sp)
    7a84:	dfc00115 	stw	ra,4(sp)
    7a88:	2021883a 	mov	r16,r4
    7a8c:	11000c16 	blt	r2,r4,7ac0 <_mprec_log10+0x48>
    7a90:	200490fa 	slli	r2,r4,3
    7a94:	00c00074 	movhi	r3,1
    7a98:	18f91b04 	addi	r3,r3,-7060
    7a9c:	10c5883a 	add	r2,r2,r3
    7aa0:	12400117 	ldw	r9,4(r2)
    7aa4:	12000017 	ldw	r8,0(r2)
    7aa8:	4807883a 	mov	r3,r9
    7aac:	4005883a 	mov	r2,r8
    7ab0:	dfc00117 	ldw	ra,4(sp)
    7ab4:	dc000017 	ldw	r16,0(sp)
    7ab8:	dec00204 	addi	sp,sp,8
    7abc:	f800283a 	ret
    7ac0:	0011883a 	mov	r8,zero
    7ac4:	024ffc34 	movhi	r9,16368
    7ac8:	0005883a 	mov	r2,zero
    7acc:	00d00934 	movhi	r3,16420
    7ad0:	480b883a 	mov	r5,r9
    7ad4:	4009883a 	mov	r4,r8
    7ad8:	180f883a 	mov	r7,r3
    7adc:	100d883a 	mov	r6,r2
    7ae0:	000a3f00 	call	a3f0 <__muldf3>
    7ae4:	843fffc4 	addi	r16,r16,-1
    7ae8:	1011883a 	mov	r8,r2
    7aec:	1813883a 	mov	r9,r3
    7af0:	803ff51e 	bne	r16,zero,7ac8 <_mprec_log10+0x50>
    7af4:	4005883a 	mov	r2,r8
    7af8:	4807883a 	mov	r3,r9
    7afc:	dfc00117 	ldw	ra,4(sp)
    7b00:	dc000017 	ldw	r16,0(sp)
    7b04:	dec00204 	addi	sp,sp,8
    7b08:	f800283a 	ret

00007b0c <__copybits>:
    7b0c:	297fffc4 	addi	r5,r5,-1
    7b10:	30800417 	ldw	r2,16(r6)
    7b14:	280bd17a 	srai	r5,r5,5
    7b18:	31800504 	addi	r6,r6,20
    7b1c:	1085883a 	add	r2,r2,r2
    7b20:	294b883a 	add	r5,r5,r5
    7b24:	294b883a 	add	r5,r5,r5
    7b28:	1085883a 	add	r2,r2,r2
    7b2c:	290b883a 	add	r5,r5,r4
    7b30:	3087883a 	add	r3,r6,r2
    7b34:	29400104 	addi	r5,r5,4
    7b38:	30c0052e 	bgeu	r6,r3,7b50 <__copybits+0x44>
    7b3c:	30800017 	ldw	r2,0(r6)
    7b40:	31800104 	addi	r6,r6,4
    7b44:	20800015 	stw	r2,0(r4)
    7b48:	21000104 	addi	r4,r4,4
    7b4c:	30fffb36 	bltu	r6,r3,7b3c <__copybits+0x30>
    7b50:	2140032e 	bgeu	r4,r5,7b60 <__copybits+0x54>
    7b54:	20000015 	stw	zero,0(r4)
    7b58:	21000104 	addi	r4,r4,4
    7b5c:	217ffd36 	bltu	r4,r5,7b54 <__copybits+0x48>
    7b60:	f800283a 	ret

00007b64 <__any_on>:
    7b64:	20800417 	ldw	r2,16(r4)
    7b68:	2807d17a 	srai	r3,r5,5
    7b6c:	21000504 	addi	r4,r4,20
    7b70:	10c00d0e 	bge	r2,r3,7ba8 <__any_on+0x44>
    7b74:	1085883a 	add	r2,r2,r2
    7b78:	1085883a 	add	r2,r2,r2
    7b7c:	208d883a 	add	r6,r4,r2
    7b80:	2180182e 	bgeu	r4,r6,7be4 <__any_on+0x80>
    7b84:	30bfff17 	ldw	r2,-4(r6)
    7b88:	30ffff04 	addi	r3,r6,-4
    7b8c:	1000041e 	bne	r2,zero,7ba0 <__any_on+0x3c>
    7b90:	20c0142e 	bgeu	r4,r3,7be4 <__any_on+0x80>
    7b94:	18ffff04 	addi	r3,r3,-4
    7b98:	18800017 	ldw	r2,0(r3)
    7b9c:	103ffc26 	beq	r2,zero,7b90 <__any_on+0x2c>
    7ba0:	00800044 	movi	r2,1
    7ba4:	f800283a 	ret
    7ba8:	18800a0e 	bge	r3,r2,7bd4 <__any_on+0x70>
    7bac:	294007cc 	andi	r5,r5,31
    7bb0:	28000826 	beq	r5,zero,7bd4 <__any_on+0x70>
    7bb4:	18c5883a 	add	r2,r3,r3
    7bb8:	1085883a 	add	r2,r2,r2
    7bbc:	208d883a 	add	r6,r4,r2
    7bc0:	30c00017 	ldw	r3,0(r6)
    7bc4:	1944d83a 	srl	r2,r3,r5
    7bc8:	1144983a 	sll	r2,r2,r5
    7bcc:	18bff41e 	bne	r3,r2,7ba0 <__any_on+0x3c>
    7bd0:	003feb06 	br	7b80 <__any_on+0x1c>
    7bd4:	18c5883a 	add	r2,r3,r3
    7bd8:	1085883a 	add	r2,r2,r2
    7bdc:	208d883a 	add	r6,r4,r2
    7be0:	003fe706 	br	7b80 <__any_on+0x1c>
    7be4:	0005883a 	mov	r2,zero
    7be8:	f800283a 	ret

00007bec <_Balloc>:
    7bec:	20c01317 	ldw	r3,76(r4)
    7bf0:	defffb04 	addi	sp,sp,-20
    7bf4:	dcc00315 	stw	r19,12(sp)
    7bf8:	dc800215 	stw	r18,8(sp)
    7bfc:	dfc00415 	stw	ra,16(sp)
    7c00:	2825883a 	mov	r18,r5
    7c04:	dc400115 	stw	r17,4(sp)
    7c08:	dc000015 	stw	r16,0(sp)
    7c0c:	2027883a 	mov	r19,r4
    7c10:	01800404 	movi	r6,16
    7c14:	01400104 	movi	r5,4
    7c18:	18001726 	beq	r3,zero,7c78 <_Balloc+0x8c>
    7c1c:	01400044 	movi	r5,1
    7c20:	9485883a 	add	r2,r18,r18
    7c24:	2ca2983a 	sll	r17,r5,r18
    7c28:	1085883a 	add	r2,r2,r2
    7c2c:	10c7883a 	add	r3,r2,r3
    7c30:	1c000017 	ldw	r16,0(r3)
    7c34:	8c4d883a 	add	r6,r17,r17
    7c38:	318d883a 	add	r6,r6,r6
    7c3c:	9809883a 	mov	r4,r19
    7c40:	31800504 	addi	r6,r6,20
    7c44:	80001226 	beq	r16,zero,7c90 <_Balloc+0xa4>
    7c48:	80800017 	ldw	r2,0(r16)
    7c4c:	18800015 	stw	r2,0(r3)
    7c50:	80000415 	stw	zero,16(r16)
    7c54:	80000315 	stw	zero,12(r16)
    7c58:	8005883a 	mov	r2,r16
    7c5c:	dfc00417 	ldw	ra,16(sp)
    7c60:	dcc00317 	ldw	r19,12(sp)
    7c64:	dc800217 	ldw	r18,8(sp)
    7c68:	dc400117 	ldw	r17,4(sp)
    7c6c:	dc000017 	ldw	r16,0(sp)
    7c70:	dec00504 	addi	sp,sp,20
    7c74:	f800283a 	ret
    7c78:	0008f440 	call	8f44 <_calloc_r>
    7c7c:	1007883a 	mov	r3,r2
    7c80:	0021883a 	mov	r16,zero
    7c84:	98801315 	stw	r2,76(r19)
    7c88:	103fe41e 	bne	r2,zero,7c1c <_Balloc+0x30>
    7c8c:	003ff206 	br	7c58 <_Balloc+0x6c>
    7c90:	0008f440 	call	8f44 <_calloc_r>
    7c94:	103ff026 	beq	r2,zero,7c58 <_Balloc+0x6c>
    7c98:	1021883a 	mov	r16,r2
    7c9c:	14800115 	stw	r18,4(r2)
    7ca0:	14400215 	stw	r17,8(r2)
    7ca4:	003fea06 	br	7c50 <_Balloc+0x64>

00007ca8 <__d2b>:
    7ca8:	defff504 	addi	sp,sp,-44
    7cac:	dcc00515 	stw	r19,20(sp)
    7cb0:	04c00044 	movi	r19,1
    7cb4:	dc000215 	stw	r16,8(sp)
    7cb8:	2821883a 	mov	r16,r5
    7cbc:	980b883a 	mov	r5,r19
    7cc0:	ddc00915 	stw	r23,36(sp)
    7cc4:	dd800815 	stw	r22,32(sp)
    7cc8:	dd400715 	stw	r21,28(sp)
    7ccc:	dd000615 	stw	r20,24(sp)
    7cd0:	dc800415 	stw	r18,16(sp)
    7cd4:	dc400315 	stw	r17,12(sp)
    7cd8:	dfc00a15 	stw	ra,40(sp)
    7cdc:	3023883a 	mov	r17,r6
    7ce0:	382d883a 	mov	r22,r7
    7ce4:	ddc00b17 	ldw	r23,44(sp)
    7ce8:	0007bec0 	call	7bec <_Balloc>
    7cec:	1025883a 	mov	r18,r2
    7cf0:	00a00034 	movhi	r2,32768
    7cf4:	10bfffc4 	addi	r2,r2,-1
    7cf8:	8888703a 	and	r4,r17,r2
    7cfc:	202ad53a 	srli	r21,r4,20
    7d00:	00800434 	movhi	r2,16
    7d04:	10bfffc4 	addi	r2,r2,-1
    7d08:	8886703a 	and	r3,r17,r2
    7d0c:	a829003a 	cmpeq	r20,r21,zero
    7d10:	800b883a 	mov	r5,r16
    7d14:	d8c00115 	stw	r3,4(sp)
    7d18:	94000504 	addi	r16,r18,20
    7d1c:	a000021e 	bne	r20,zero,7d28 <__d2b+0x80>
    7d20:	18c00434 	orhi	r3,r3,16
    7d24:	d8c00115 	stw	r3,4(sp)
    7d28:	28002726 	beq	r5,zero,7dc8 <__d2b+0x120>
    7d2c:	d809883a 	mov	r4,sp
    7d30:	d9400015 	stw	r5,0(sp)
    7d34:	00077040 	call	7704 <__lo0bits>
    7d38:	100d883a 	mov	r6,r2
    7d3c:	10003526 	beq	r2,zero,7e14 <__d2b+0x16c>
    7d40:	d8c00117 	ldw	r3,4(sp)
    7d44:	00800804 	movi	r2,32
    7d48:	1185c83a 	sub	r2,r2,r6
    7d4c:	d9000017 	ldw	r4,0(sp)
    7d50:	1886983a 	sll	r3,r3,r2
    7d54:	1906b03a 	or	r3,r3,r4
    7d58:	90c00515 	stw	r3,20(r18)
    7d5c:	d8c00117 	ldw	r3,4(sp)
    7d60:	1986d83a 	srl	r3,r3,r6
    7d64:	d8c00115 	stw	r3,4(sp)
    7d68:	180b003a 	cmpeq	r5,r3,zero
    7d6c:	00800084 	movi	r2,2
    7d70:	114bc83a 	sub	r5,r2,r5
    7d74:	80c00115 	stw	r3,4(r16)
    7d78:	91400415 	stw	r5,16(r18)
    7d7c:	a0001a1e 	bne	r20,zero,7de8 <__d2b+0x140>
    7d80:	3545883a 	add	r2,r6,r21
    7d84:	10bef344 	addi	r2,r2,-1075
    7d88:	00c00d44 	movi	r3,53
    7d8c:	b0800015 	stw	r2,0(r22)
    7d90:	1987c83a 	sub	r3,r3,r6
    7d94:	b8c00015 	stw	r3,0(r23)
    7d98:	9005883a 	mov	r2,r18
    7d9c:	dfc00a17 	ldw	ra,40(sp)
    7da0:	ddc00917 	ldw	r23,36(sp)
    7da4:	dd800817 	ldw	r22,32(sp)
    7da8:	dd400717 	ldw	r21,28(sp)
    7dac:	dd000617 	ldw	r20,24(sp)
    7db0:	dcc00517 	ldw	r19,20(sp)
    7db4:	dc800417 	ldw	r18,16(sp)
    7db8:	dc400317 	ldw	r17,12(sp)
    7dbc:	dc000217 	ldw	r16,8(sp)
    7dc0:	dec00b04 	addi	sp,sp,44
    7dc4:	f800283a 	ret
    7dc8:	d9000104 	addi	r4,sp,4
    7dcc:	00077040 	call	7704 <__lo0bits>
    7dd0:	11800804 	addi	r6,r2,32
    7dd4:	d8800117 	ldw	r2,4(sp)
    7dd8:	94c00415 	stw	r19,16(r18)
    7ddc:	980b883a 	mov	r5,r19
    7de0:	90800515 	stw	r2,20(r18)
    7de4:	a03fe626 	beq	r20,zero,7d80 <__d2b+0xd8>
    7de8:	2945883a 	add	r2,r5,r5
    7dec:	1085883a 	add	r2,r2,r2
    7df0:	1405883a 	add	r2,r2,r16
    7df4:	113fff17 	ldw	r4,-4(r2)
    7df8:	30fef384 	addi	r3,r6,-1074
    7dfc:	2820917a 	slli	r16,r5,5
    7e00:	b0c00015 	stw	r3,0(r22)
    7e04:	00076940 	call	7694 <__hi0bits>
    7e08:	80a1c83a 	sub	r16,r16,r2
    7e0c:	bc000015 	stw	r16,0(r23)
    7e10:	003fe106 	br	7d98 <__d2b+0xf0>
    7e14:	d8800017 	ldw	r2,0(sp)
    7e18:	90800515 	stw	r2,20(r18)
    7e1c:	d8c00117 	ldw	r3,4(sp)
    7e20:	003fd106 	br	7d68 <__d2b+0xc0>

00007e24 <__mdiff>:
    7e24:	defffb04 	addi	sp,sp,-20
    7e28:	dc000015 	stw	r16,0(sp)
    7e2c:	2821883a 	mov	r16,r5
    7e30:	dc800215 	stw	r18,8(sp)
    7e34:	300b883a 	mov	r5,r6
    7e38:	2025883a 	mov	r18,r4
    7e3c:	8009883a 	mov	r4,r16
    7e40:	dc400115 	stw	r17,4(sp)
    7e44:	dfc00415 	stw	ra,16(sp)
    7e48:	dcc00315 	stw	r19,12(sp)
    7e4c:	3023883a 	mov	r17,r6
    7e50:	00077c80 	call	77c8 <__mcmp>
    7e54:	10004226 	beq	r2,zero,7f60 <__mdiff+0x13c>
    7e58:	10005016 	blt	r2,zero,7f9c <__mdiff+0x178>
    7e5c:	0027883a 	mov	r19,zero
    7e60:	81400117 	ldw	r5,4(r16)
    7e64:	9009883a 	mov	r4,r18
    7e68:	0007bec0 	call	7bec <_Balloc>
    7e6c:	1019883a 	mov	r12,r2
    7e70:	82800417 	ldw	r10,16(r16)
    7e74:	88800417 	ldw	r2,16(r17)
    7e78:	81800504 	addi	r6,r16,20
    7e7c:	5287883a 	add	r3,r10,r10
    7e80:	1085883a 	add	r2,r2,r2
    7e84:	18c7883a 	add	r3,r3,r3
    7e88:	1085883a 	add	r2,r2,r2
    7e8c:	8a000504 	addi	r8,r17,20
    7e90:	64c00315 	stw	r19,12(r12)
    7e94:	30db883a 	add	r13,r6,r3
    7e98:	4097883a 	add	r11,r8,r2
    7e9c:	61c00504 	addi	r7,r12,20
    7ea0:	0013883a 	mov	r9,zero
    7ea4:	31000017 	ldw	r4,0(r6)
    7ea8:	41400017 	ldw	r5,0(r8)
    7eac:	42000104 	addi	r8,r8,4
    7eb0:	20bfffcc 	andi	r2,r4,65535
    7eb4:	28ffffcc 	andi	r3,r5,65535
    7eb8:	10c5c83a 	sub	r2,r2,r3
    7ebc:	1245883a 	add	r2,r2,r9
    7ec0:	2008d43a 	srli	r4,r4,16
    7ec4:	280ad43a 	srli	r5,r5,16
    7ec8:	1007d43a 	srai	r3,r2,16
    7ecc:	3880000d 	sth	r2,0(r7)
    7ed0:	2149c83a 	sub	r4,r4,r5
    7ed4:	20c9883a 	add	r4,r4,r3
    7ed8:	3900008d 	sth	r4,2(r7)
    7edc:	31800104 	addi	r6,r6,4
    7ee0:	39c00104 	addi	r7,r7,4
    7ee4:	2013d43a 	srai	r9,r4,16
    7ee8:	42ffee36 	bltu	r8,r11,7ea4 <__mdiff+0x80>
    7eec:	33400c2e 	bgeu	r6,r13,7f20 <__mdiff+0xfc>
    7ef0:	30800017 	ldw	r2,0(r6)
    7ef4:	31800104 	addi	r6,r6,4
    7ef8:	10ffffcc 	andi	r3,r2,65535
    7efc:	1a47883a 	add	r3,r3,r9
    7f00:	1004d43a 	srli	r2,r2,16
    7f04:	1809d43a 	srai	r4,r3,16
    7f08:	38c0000d 	sth	r3,0(r7)
    7f0c:	1105883a 	add	r2,r2,r4
    7f10:	3880008d 	sth	r2,2(r7)
    7f14:	1013d43a 	srai	r9,r2,16
    7f18:	39c00104 	addi	r7,r7,4
    7f1c:	337ff436 	bltu	r6,r13,7ef0 <__mdiff+0xcc>
    7f20:	38bfff17 	ldw	r2,-4(r7)
    7f24:	38ffff04 	addi	r3,r7,-4
    7f28:	1000041e 	bne	r2,zero,7f3c <__mdiff+0x118>
    7f2c:	18ffff04 	addi	r3,r3,-4
    7f30:	18800017 	ldw	r2,0(r3)
    7f34:	52bfffc4 	addi	r10,r10,-1
    7f38:	103ffc26 	beq	r2,zero,7f2c <__mdiff+0x108>
    7f3c:	6005883a 	mov	r2,r12
    7f40:	62800415 	stw	r10,16(r12)
    7f44:	dfc00417 	ldw	ra,16(sp)
    7f48:	dcc00317 	ldw	r19,12(sp)
    7f4c:	dc800217 	ldw	r18,8(sp)
    7f50:	dc400117 	ldw	r17,4(sp)
    7f54:	dc000017 	ldw	r16,0(sp)
    7f58:	dec00504 	addi	sp,sp,20
    7f5c:	f800283a 	ret
    7f60:	9009883a 	mov	r4,r18
    7f64:	000b883a 	mov	r5,zero
    7f68:	0007bec0 	call	7bec <_Balloc>
    7f6c:	1019883a 	mov	r12,r2
    7f70:	00800044 	movi	r2,1
    7f74:	60800415 	stw	r2,16(r12)
    7f78:	6005883a 	mov	r2,r12
    7f7c:	60000515 	stw	zero,20(r12)
    7f80:	dfc00417 	ldw	ra,16(sp)
    7f84:	dcc00317 	ldw	r19,12(sp)
    7f88:	dc800217 	ldw	r18,8(sp)
    7f8c:	dc400117 	ldw	r17,4(sp)
    7f90:	dc000017 	ldw	r16,0(sp)
    7f94:	dec00504 	addi	sp,sp,20
    7f98:	f800283a 	ret
    7f9c:	880d883a 	mov	r6,r17
    7fa0:	04c00044 	movi	r19,1
    7fa4:	8023883a 	mov	r17,r16
    7fa8:	3021883a 	mov	r16,r6
    7fac:	003fac06 	br	7e60 <__mdiff+0x3c>

00007fb0 <__lshift>:
    7fb0:	defff904 	addi	sp,sp,-28
    7fb4:	28800417 	ldw	r2,16(r5)
    7fb8:	dc000015 	stw	r16,0(sp)
    7fbc:	3021d17a 	srai	r16,r6,5
    7fc0:	28c00217 	ldw	r3,8(r5)
    7fc4:	10800044 	addi	r2,r2,1
    7fc8:	dc400115 	stw	r17,4(sp)
    7fcc:	80a3883a 	add	r17,r16,r2
    7fd0:	dd400515 	stw	r21,20(sp)
    7fd4:	dd000415 	stw	r20,16(sp)
    7fd8:	dc800215 	stw	r18,8(sp)
    7fdc:	dfc00615 	stw	ra,24(sp)
    7fe0:	2825883a 	mov	r18,r5
    7fe4:	dcc00315 	stw	r19,12(sp)
    7fe8:	3029883a 	mov	r20,r6
    7fec:	202b883a 	mov	r21,r4
    7ff0:	29400117 	ldw	r5,4(r5)
    7ff4:	1c40030e 	bge	r3,r17,8004 <__lshift+0x54>
    7ff8:	18c7883a 	add	r3,r3,r3
    7ffc:	29400044 	addi	r5,r5,1
    8000:	1c7ffd16 	blt	r3,r17,7ff8 <__lshift+0x48>
    8004:	a809883a 	mov	r4,r21
    8008:	0007bec0 	call	7bec <_Balloc>
    800c:	1027883a 	mov	r19,r2
    8010:	11400504 	addi	r5,r2,20
    8014:	0400090e 	bge	zero,r16,803c <__lshift+0x8c>
    8018:	2805883a 	mov	r2,r5
    801c:	0007883a 	mov	r3,zero
    8020:	18c00044 	addi	r3,r3,1
    8024:	10000015 	stw	zero,0(r2)
    8028:	10800104 	addi	r2,r2,4
    802c:	80fffc1e 	bne	r16,r3,8020 <__lshift+0x70>
    8030:	8405883a 	add	r2,r16,r16
    8034:	1085883a 	add	r2,r2,r2
    8038:	288b883a 	add	r5,r5,r2
    803c:	90800417 	ldw	r2,16(r18)
    8040:	91000504 	addi	r4,r18,20
    8044:	a18007cc 	andi	r6,r20,31
    8048:	1085883a 	add	r2,r2,r2
    804c:	1085883a 	add	r2,r2,r2
    8050:	208f883a 	add	r7,r4,r2
    8054:	30001e26 	beq	r6,zero,80d0 <__lshift+0x120>
    8058:	00800804 	movi	r2,32
    805c:	1191c83a 	sub	r8,r2,r6
    8060:	0007883a 	mov	r3,zero
    8064:	20800017 	ldw	r2,0(r4)
    8068:	1184983a 	sll	r2,r2,r6
    806c:	1884b03a 	or	r2,r3,r2
    8070:	28800015 	stw	r2,0(r5)
    8074:	20c00017 	ldw	r3,0(r4)
    8078:	21000104 	addi	r4,r4,4
    807c:	29400104 	addi	r5,r5,4
    8080:	1a06d83a 	srl	r3,r3,r8
    8084:	21fff736 	bltu	r4,r7,8064 <__lshift+0xb4>
    8088:	28c00015 	stw	r3,0(r5)
    808c:	18000126 	beq	r3,zero,8094 <__lshift+0xe4>
    8090:	8c400044 	addi	r17,r17,1
    8094:	88bfffc4 	addi	r2,r17,-1
    8098:	98800415 	stw	r2,16(r19)
    809c:	a809883a 	mov	r4,r21
    80a0:	900b883a 	mov	r5,r18
    80a4:	000766c0 	call	766c <_Bfree>
    80a8:	9805883a 	mov	r2,r19
    80ac:	dfc00617 	ldw	ra,24(sp)
    80b0:	dd400517 	ldw	r21,20(sp)
    80b4:	dd000417 	ldw	r20,16(sp)
    80b8:	dcc00317 	ldw	r19,12(sp)
    80bc:	dc800217 	ldw	r18,8(sp)
    80c0:	dc400117 	ldw	r17,4(sp)
    80c4:	dc000017 	ldw	r16,0(sp)
    80c8:	dec00704 	addi	sp,sp,28
    80cc:	f800283a 	ret
    80d0:	20800017 	ldw	r2,0(r4)
    80d4:	21000104 	addi	r4,r4,4
    80d8:	28800015 	stw	r2,0(r5)
    80dc:	29400104 	addi	r5,r5,4
    80e0:	21ffec2e 	bgeu	r4,r7,8094 <__lshift+0xe4>
    80e4:	20800017 	ldw	r2,0(r4)
    80e8:	21000104 	addi	r4,r4,4
    80ec:	28800015 	stw	r2,0(r5)
    80f0:	29400104 	addi	r5,r5,4
    80f4:	21fff636 	bltu	r4,r7,80d0 <__lshift+0x120>
    80f8:	003fe606 	br	8094 <__lshift+0xe4>

000080fc <__multiply>:
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dcc00315 	stw	r19,12(sp)
    8104:	dc800215 	stw	r18,8(sp)
    8108:	2cc00417 	ldw	r19,16(r5)
    810c:	34800417 	ldw	r18,16(r6)
    8110:	dd000415 	stw	r20,16(sp)
    8114:	dc400115 	stw	r17,4(sp)
    8118:	dfc00615 	stw	ra,24(sp)
    811c:	dd400515 	stw	r21,20(sp)
    8120:	dc000015 	stw	r16,0(sp)
    8124:	2823883a 	mov	r17,r5
    8128:	3029883a 	mov	r20,r6
    812c:	9c80040e 	bge	r19,r18,8140 <__multiply+0x44>
    8130:	9027883a 	mov	r19,r18
    8134:	2c800417 	ldw	r18,16(r5)
    8138:	2829883a 	mov	r20,r5
    813c:	3023883a 	mov	r17,r6
    8140:	88800217 	ldw	r2,8(r17)
    8144:	9ca1883a 	add	r16,r19,r18
    8148:	89400117 	ldw	r5,4(r17)
    814c:	1400010e 	bge	r2,r16,8154 <__multiply+0x58>
    8150:	29400044 	addi	r5,r5,1
    8154:	0007bec0 	call	7bec <_Balloc>
    8158:	102b883a 	mov	r21,r2
    815c:	8405883a 	add	r2,r16,r16
    8160:	1085883a 	add	r2,r2,r2
    8164:	a9000504 	addi	r4,r21,20
    8168:	209d883a 	add	r14,r4,r2
    816c:	2380042e 	bgeu	r4,r14,8180 <__multiply+0x84>
    8170:	2005883a 	mov	r2,r4
    8174:	10000015 	stw	zero,0(r2)
    8178:	10800104 	addi	r2,r2,4
    817c:	13bffd36 	bltu	r2,r14,8174 <__multiply+0x78>
    8180:	9485883a 	add	r2,r18,r18
    8184:	9cc7883a 	add	r3,r19,r19
    8188:	a1800504 	addi	r6,r20,20
    818c:	1085883a 	add	r2,r2,r2
    8190:	8b400504 	addi	r13,r17,20
    8194:	18c7883a 	add	r3,r3,r3
    8198:	309f883a 	add	r15,r6,r2
    819c:	68d7883a 	add	r11,r13,r3
    81a0:	33c03b2e 	bgeu	r6,r15,8290 <__multiply+0x194>
    81a4:	2019883a 	mov	r12,r4
    81a8:	30800017 	ldw	r2,0(r6)
    81ac:	127fffcc 	andi	r9,r2,65535
    81b0:	48001826 	beq	r9,zero,8214 <__multiply+0x118>
    81b4:	6811883a 	mov	r8,r13
    81b8:	600f883a 	mov	r7,r12
    81bc:	0015883a 	mov	r10,zero
    81c0:	40c00017 	ldw	r3,0(r8)
    81c4:	39400017 	ldw	r5,0(r7)
    81c8:	42000104 	addi	r8,r8,4
    81cc:	193fffcc 	andi	r4,r3,65535
    81d0:	4909383a 	mul	r4,r9,r4
    81d4:	1806d43a 	srli	r3,r3,16
    81d8:	28bfffcc 	andi	r2,r5,65535
    81dc:	5085883a 	add	r2,r10,r2
    81e0:	2089883a 	add	r4,r4,r2
    81e4:	48c7383a 	mul	r3,r9,r3
    81e8:	280ad43a 	srli	r5,r5,16
    81ec:	2004d43a 	srli	r2,r4,16
    81f0:	3900000d 	sth	r4,0(r7)
    81f4:	1947883a 	add	r3,r3,r5
    81f8:	10c5883a 	add	r2,r2,r3
    81fc:	3880008d 	sth	r2,2(r7)
    8200:	1014d43a 	srli	r10,r2,16
    8204:	39c00104 	addi	r7,r7,4
    8208:	42ffed36 	bltu	r8,r11,81c0 <__multiply+0xc4>
    820c:	3a800015 	stw	r10,0(r7)
    8210:	30800017 	ldw	r2,0(r6)
    8214:	1012d43a 	srli	r9,r2,16
    8218:	48001926 	beq	r9,zero,8280 <__multiply+0x184>
    821c:	60800017 	ldw	r2,0(r12)
    8220:	6811883a 	mov	r8,r13
    8224:	600f883a 	mov	r7,r12
    8228:	0015883a 	mov	r10,zero
    822c:	100b883a 	mov	r5,r2
    8230:	41000017 	ldw	r4,0(r8)
    8234:	2806d43a 	srli	r3,r5,16
    8238:	3880000d 	sth	r2,0(r7)
    823c:	20bfffcc 	andi	r2,r4,65535
    8240:	4885383a 	mul	r2,r9,r2
    8244:	50c7883a 	add	r3,r10,r3
    8248:	2008d43a 	srli	r4,r4,16
    824c:	10c5883a 	add	r2,r2,r3
    8250:	3880008d 	sth	r2,2(r7)
    8254:	39c00104 	addi	r7,r7,4
    8258:	39400017 	ldw	r5,0(r7)
    825c:	4909383a 	mul	r4,r9,r4
    8260:	1004d43a 	srli	r2,r2,16
    8264:	28ffffcc 	andi	r3,r5,65535
    8268:	20c9883a 	add	r4,r4,r3
    826c:	1105883a 	add	r2,r2,r4
    8270:	42000104 	addi	r8,r8,4
    8274:	1014d43a 	srli	r10,r2,16
    8278:	42ffed36 	bltu	r8,r11,8230 <__multiply+0x134>
    827c:	38800015 	stw	r2,0(r7)
    8280:	31800104 	addi	r6,r6,4
    8284:	33c0022e 	bgeu	r6,r15,8290 <__multiply+0x194>
    8288:	63000104 	addi	r12,r12,4
    828c:	003fc606 	br	81a8 <__multiply+0xac>
    8290:	0400090e 	bge	zero,r16,82b8 <__multiply+0x1bc>
    8294:	70bfff17 	ldw	r2,-4(r14)
    8298:	70ffff04 	addi	r3,r14,-4
    829c:	10000326 	beq	r2,zero,82ac <__multiply+0x1b0>
    82a0:	00000506 	br	82b8 <__multiply+0x1bc>
    82a4:	18800017 	ldw	r2,0(r3)
    82a8:	1000031e 	bne	r2,zero,82b8 <__multiply+0x1bc>
    82ac:	843fffc4 	addi	r16,r16,-1
    82b0:	18ffff04 	addi	r3,r3,-4
    82b4:	803ffb1e 	bne	r16,zero,82a4 <__multiply+0x1a8>
    82b8:	a805883a 	mov	r2,r21
    82bc:	ac000415 	stw	r16,16(r21)
    82c0:	dfc00617 	ldw	ra,24(sp)
    82c4:	dd400517 	ldw	r21,20(sp)
    82c8:	dd000417 	ldw	r20,16(sp)
    82cc:	dcc00317 	ldw	r19,12(sp)
    82d0:	dc800217 	ldw	r18,8(sp)
    82d4:	dc400117 	ldw	r17,4(sp)
    82d8:	dc000017 	ldw	r16,0(sp)
    82dc:	dec00704 	addi	sp,sp,28
    82e0:	f800283a 	ret

000082e4 <__i2b>:
    82e4:	defffd04 	addi	sp,sp,-12
    82e8:	dc000015 	stw	r16,0(sp)
    82ec:	04000044 	movi	r16,1
    82f0:	dc800115 	stw	r18,4(sp)
    82f4:	2825883a 	mov	r18,r5
    82f8:	800b883a 	mov	r5,r16
    82fc:	dfc00215 	stw	ra,8(sp)
    8300:	0007bec0 	call	7bec <_Balloc>
    8304:	14000415 	stw	r16,16(r2)
    8308:	14800515 	stw	r18,20(r2)
    830c:	dfc00217 	ldw	ra,8(sp)
    8310:	dc800117 	ldw	r18,4(sp)
    8314:	dc000017 	ldw	r16,0(sp)
    8318:	dec00304 	addi	sp,sp,12
    831c:	f800283a 	ret

00008320 <__multadd>:
    8320:	defffa04 	addi	sp,sp,-24
    8324:	dc800215 	stw	r18,8(sp)
    8328:	2c800417 	ldw	r18,16(r5)
    832c:	dd000415 	stw	r20,16(sp)
    8330:	dcc00315 	stw	r19,12(sp)
    8334:	dc000015 	stw	r16,0(sp)
    8338:	dfc00515 	stw	ra,20(sp)
    833c:	3821883a 	mov	r16,r7
    8340:	dc400115 	stw	r17,4(sp)
    8344:	2827883a 	mov	r19,r5
    8348:	2029883a 	mov	r20,r4
    834c:	2a000504 	addi	r8,r5,20
    8350:	000f883a 	mov	r7,zero
    8354:	40800017 	ldw	r2,0(r8)
    8358:	39c00044 	addi	r7,r7,1
    835c:	10ffffcc 	andi	r3,r2,65535
    8360:	1987383a 	mul	r3,r3,r6
    8364:	1004d43a 	srli	r2,r2,16
    8368:	1c07883a 	add	r3,r3,r16
    836c:	180ad43a 	srli	r5,r3,16
    8370:	1185383a 	mul	r2,r2,r6
    8374:	18ffffcc 	andi	r3,r3,65535
    8378:	1145883a 	add	r2,r2,r5
    837c:	1008943a 	slli	r4,r2,16
    8380:	1020d43a 	srli	r16,r2,16
    8384:	20c9883a 	add	r4,r4,r3
    8388:	41000015 	stw	r4,0(r8)
    838c:	42000104 	addi	r8,r8,4
    8390:	3cbff016 	blt	r7,r18,8354 <__multadd+0x34>
    8394:	80000826 	beq	r16,zero,83b8 <__multadd+0x98>
    8398:	98800217 	ldw	r2,8(r19)
    839c:	90800f0e 	bge	r18,r2,83dc <__multadd+0xbc>
    83a0:	9485883a 	add	r2,r18,r18
    83a4:	1085883a 	add	r2,r2,r2
    83a8:	14c5883a 	add	r2,r2,r19
    83ac:	90c00044 	addi	r3,r18,1
    83b0:	14000515 	stw	r16,20(r2)
    83b4:	98c00415 	stw	r3,16(r19)
    83b8:	9805883a 	mov	r2,r19
    83bc:	dfc00517 	ldw	ra,20(sp)
    83c0:	dd000417 	ldw	r20,16(sp)
    83c4:	dcc00317 	ldw	r19,12(sp)
    83c8:	dc800217 	ldw	r18,8(sp)
    83cc:	dc400117 	ldw	r17,4(sp)
    83d0:	dc000017 	ldw	r16,0(sp)
    83d4:	dec00604 	addi	sp,sp,24
    83d8:	f800283a 	ret
    83dc:	99400117 	ldw	r5,4(r19)
    83e0:	a009883a 	mov	r4,r20
    83e4:	29400044 	addi	r5,r5,1
    83e8:	0007bec0 	call	7bec <_Balloc>
    83ec:	99800417 	ldw	r6,16(r19)
    83f0:	99400304 	addi	r5,r19,12
    83f4:	11000304 	addi	r4,r2,12
    83f8:	318d883a 	add	r6,r6,r6
    83fc:	318d883a 	add	r6,r6,r6
    8400:	31800204 	addi	r6,r6,8
    8404:	1023883a 	mov	r17,r2
    8408:	00074540 	call	7454 <memcpy>
    840c:	980b883a 	mov	r5,r19
    8410:	a009883a 	mov	r4,r20
    8414:	000766c0 	call	766c <_Bfree>
    8418:	8827883a 	mov	r19,r17
    841c:	003fe006 	br	83a0 <__multadd+0x80>

00008420 <__pow5mult>:
    8420:	defffa04 	addi	sp,sp,-24
    8424:	308000cc 	andi	r2,r6,3
    8428:	dd000415 	stw	r20,16(sp)
    842c:	dcc00315 	stw	r19,12(sp)
    8430:	dc000015 	stw	r16,0(sp)
    8434:	dfc00515 	stw	ra,20(sp)
    8438:	dc800215 	stw	r18,8(sp)
    843c:	dc400115 	stw	r17,4(sp)
    8440:	3021883a 	mov	r16,r6
    8444:	2027883a 	mov	r19,r4
    8448:	2829883a 	mov	r20,r5
    844c:	10002b1e 	bne	r2,zero,84fc <__pow5mult+0xdc>
    8450:	8025d0ba 	srai	r18,r16,2
    8454:	90001b26 	beq	r18,zero,84c4 <__pow5mult+0xa4>
    8458:	9c001217 	ldw	r16,72(r19)
    845c:	8000081e 	bne	r16,zero,8480 <__pow5mult+0x60>
    8460:	00003006 	br	8524 <__pow5mult+0x104>
    8464:	800b883a 	mov	r5,r16
    8468:	800d883a 	mov	r6,r16
    846c:	9809883a 	mov	r4,r19
    8470:	90001426 	beq	r18,zero,84c4 <__pow5mult+0xa4>
    8474:	80800017 	ldw	r2,0(r16)
    8478:	10001b26 	beq	r2,zero,84e8 <__pow5mult+0xc8>
    847c:	1021883a 	mov	r16,r2
    8480:	9080004c 	andi	r2,r18,1
    8484:	1005003a 	cmpeq	r2,r2,zero
    8488:	9025d07a 	srai	r18,r18,1
    848c:	800d883a 	mov	r6,r16
    8490:	9809883a 	mov	r4,r19
    8494:	a00b883a 	mov	r5,r20
    8498:	103ff21e 	bne	r2,zero,8464 <__pow5mult+0x44>
    849c:	00080fc0 	call	80fc <__multiply>
    84a0:	a00b883a 	mov	r5,r20
    84a4:	9809883a 	mov	r4,r19
    84a8:	1023883a 	mov	r17,r2
    84ac:	000766c0 	call	766c <_Bfree>
    84b0:	8829883a 	mov	r20,r17
    84b4:	800b883a 	mov	r5,r16
    84b8:	800d883a 	mov	r6,r16
    84bc:	9809883a 	mov	r4,r19
    84c0:	903fec1e 	bne	r18,zero,8474 <__pow5mult+0x54>
    84c4:	a005883a 	mov	r2,r20
    84c8:	dfc00517 	ldw	ra,20(sp)
    84cc:	dd000417 	ldw	r20,16(sp)
    84d0:	dcc00317 	ldw	r19,12(sp)
    84d4:	dc800217 	ldw	r18,8(sp)
    84d8:	dc400117 	ldw	r17,4(sp)
    84dc:	dc000017 	ldw	r16,0(sp)
    84e0:	dec00604 	addi	sp,sp,24
    84e4:	f800283a 	ret
    84e8:	00080fc0 	call	80fc <__multiply>
    84ec:	80800015 	stw	r2,0(r16)
    84f0:	1021883a 	mov	r16,r2
    84f4:	10000015 	stw	zero,0(r2)
    84f8:	003fe106 	br	8480 <__pow5mult+0x60>
    84fc:	1085883a 	add	r2,r2,r2
    8500:	00c00074 	movhi	r3,1
    8504:	18f96104 	addi	r3,r3,-6780
    8508:	1085883a 	add	r2,r2,r2
    850c:	10c5883a 	add	r2,r2,r3
    8510:	11bfff17 	ldw	r6,-4(r2)
    8514:	000f883a 	mov	r7,zero
    8518:	00083200 	call	8320 <__multadd>
    851c:	1029883a 	mov	r20,r2
    8520:	003fcb06 	br	8450 <__pow5mult+0x30>
    8524:	9809883a 	mov	r4,r19
    8528:	01409c44 	movi	r5,625
    852c:	00082e40 	call	82e4 <__i2b>
    8530:	98801215 	stw	r2,72(r19)
    8534:	1021883a 	mov	r16,r2
    8538:	10000015 	stw	zero,0(r2)
    853c:	003fd006 	br	8480 <__pow5mult+0x60>

00008540 <__s2b>:
    8540:	defff904 	addi	sp,sp,-28
    8544:	dcc00315 	stw	r19,12(sp)
    8548:	dc800215 	stw	r18,8(sp)
    854c:	2827883a 	mov	r19,r5
    8550:	2025883a 	mov	r18,r4
    8554:	01400244 	movi	r5,9
    8558:	39000204 	addi	r4,r7,8
    855c:	dd000415 	stw	r20,16(sp)
    8560:	dc400115 	stw	r17,4(sp)
    8564:	dfc00615 	stw	ra,24(sp)
    8568:	dd400515 	stw	r21,20(sp)
    856c:	dc000015 	stw	r16,0(sp)
    8570:	3829883a 	mov	r20,r7
    8574:	3023883a 	mov	r17,r6
    8578:	0001d680 	call	1d68 <__divsi3>
    857c:	00c00044 	movi	r3,1
    8580:	1880350e 	bge	r3,r2,8658 <__s2b+0x118>
    8584:	000b883a 	mov	r5,zero
    8588:	18c7883a 	add	r3,r3,r3
    858c:	29400044 	addi	r5,r5,1
    8590:	18bffd16 	blt	r3,r2,8588 <__s2b+0x48>
    8594:	9009883a 	mov	r4,r18
    8598:	0007bec0 	call	7bec <_Balloc>
    859c:	1011883a 	mov	r8,r2
    85a0:	d8800717 	ldw	r2,28(sp)
    85a4:	00c00044 	movi	r3,1
    85a8:	01800244 	movi	r6,9
    85ac:	40800515 	stw	r2,20(r8)
    85b0:	40c00415 	stw	r3,16(r8)
    85b4:	3440260e 	bge	r6,r17,8650 <__s2b+0x110>
    85b8:	3021883a 	mov	r16,r6
    85bc:	99ab883a 	add	r21,r19,r6
    85c0:	9c05883a 	add	r2,r19,r16
    85c4:	11c00007 	ldb	r7,0(r2)
    85c8:	400b883a 	mov	r5,r8
    85cc:	9009883a 	mov	r4,r18
    85d0:	39fff404 	addi	r7,r7,-48
    85d4:	01800284 	movi	r6,10
    85d8:	00083200 	call	8320 <__multadd>
    85dc:	84000044 	addi	r16,r16,1
    85e0:	1011883a 	mov	r8,r2
    85e4:	8c3ff61e 	bne	r17,r16,85c0 <__s2b+0x80>
    85e8:	ac45883a 	add	r2,r21,r17
    85ec:	117ffe04 	addi	r5,r2,-8
    85f0:	880d883a 	mov	r6,r17
    85f4:	35000c0e 	bge	r6,r20,8628 <__s2b+0xe8>
    85f8:	a185c83a 	sub	r2,r20,r6
    85fc:	2821883a 	mov	r16,r5
    8600:	28a3883a 	add	r17,r5,r2
    8604:	81c00007 	ldb	r7,0(r16)
    8608:	400b883a 	mov	r5,r8
    860c:	9009883a 	mov	r4,r18
    8610:	39fff404 	addi	r7,r7,-48
    8614:	01800284 	movi	r6,10
    8618:	00083200 	call	8320 <__multadd>
    861c:	84000044 	addi	r16,r16,1
    8620:	1011883a 	mov	r8,r2
    8624:	847ff71e 	bne	r16,r17,8604 <__s2b+0xc4>
    8628:	4005883a 	mov	r2,r8
    862c:	dfc00617 	ldw	ra,24(sp)
    8630:	dd400517 	ldw	r21,20(sp)
    8634:	dd000417 	ldw	r20,16(sp)
    8638:	dcc00317 	ldw	r19,12(sp)
    863c:	dc800217 	ldw	r18,8(sp)
    8640:	dc400117 	ldw	r17,4(sp)
    8644:	dc000017 	ldw	r16,0(sp)
    8648:	dec00704 	addi	sp,sp,28
    864c:	f800283a 	ret
    8650:	99400284 	addi	r5,r19,10
    8654:	003fe706 	br	85f4 <__s2b+0xb4>
    8658:	000b883a 	mov	r5,zero
    865c:	003fcd06 	br	8594 <__s2b+0x54>

00008660 <_realloc_r>:
    8660:	defff404 	addi	sp,sp,-48
    8664:	dd800815 	stw	r22,32(sp)
    8668:	dc800415 	stw	r18,16(sp)
    866c:	dc400315 	stw	r17,12(sp)
    8670:	dfc00b15 	stw	ra,44(sp)
    8674:	df000a15 	stw	fp,40(sp)
    8678:	ddc00915 	stw	r23,36(sp)
    867c:	dd400715 	stw	r21,28(sp)
    8680:	dd000615 	stw	r20,24(sp)
    8684:	dcc00515 	stw	r19,20(sp)
    8688:	dc000215 	stw	r16,8(sp)
    868c:	2825883a 	mov	r18,r5
    8690:	3023883a 	mov	r17,r6
    8694:	202d883a 	mov	r22,r4
    8698:	2800c926 	beq	r5,zero,89c0 <_realloc_r+0x360>
    869c:	000bee80 	call	bee8 <__malloc_lock>
    86a0:	943ffe04 	addi	r16,r18,-8
    86a4:	88c002c4 	addi	r3,r17,11
    86a8:	00800584 	movi	r2,22
    86ac:	82000117 	ldw	r8,4(r16)
    86b0:	10c01b2e 	bgeu	r2,r3,8720 <_realloc_r+0xc0>
    86b4:	00bffe04 	movi	r2,-8
    86b8:	188e703a 	and	r7,r3,r2
    86bc:	3839883a 	mov	fp,r7
    86c0:	38001a16 	blt	r7,zero,872c <_realloc_r+0xcc>
    86c4:	e4401936 	bltu	fp,r17,872c <_realloc_r+0xcc>
    86c8:	013fff04 	movi	r4,-4
    86cc:	4126703a 	and	r19,r8,r4
    86d0:	99c02616 	blt	r19,r7,876c <_realloc_r+0x10c>
    86d4:	802b883a 	mov	r21,r16
    86d8:	9829883a 	mov	r20,r19
    86dc:	84000204 	addi	r16,r16,8
    86e0:	a80f883a 	mov	r7,r21
    86e4:	a70dc83a 	sub	r6,r20,fp
    86e8:	008003c4 	movi	r2,15
    86ec:	1180c136 	bltu	r2,r6,89f4 <_realloc_r+0x394>
    86f0:	38800117 	ldw	r2,4(r7)
    86f4:	a549883a 	add	r4,r20,r21
    86f8:	1080004c 	andi	r2,r2,1
    86fc:	a084b03a 	or	r2,r20,r2
    8700:	38800115 	stw	r2,4(r7)
    8704:	20c00117 	ldw	r3,4(r4)
    8708:	18c00054 	ori	r3,r3,1
    870c:	20c00115 	stw	r3,4(r4)
    8710:	b009883a 	mov	r4,r22
    8714:	000bf080 	call	bf08 <__malloc_unlock>
    8718:	8023883a 	mov	r17,r16
    871c:	00000606 	br	8738 <_realloc_r+0xd8>
    8720:	01c00404 	movi	r7,16
    8724:	3839883a 	mov	fp,r7
    8728:	e47fe72e 	bgeu	fp,r17,86c8 <_realloc_r+0x68>
    872c:	00800304 	movi	r2,12
    8730:	0023883a 	mov	r17,zero
    8734:	b0800015 	stw	r2,0(r22)
    8738:	8805883a 	mov	r2,r17
    873c:	dfc00b17 	ldw	ra,44(sp)
    8740:	df000a17 	ldw	fp,40(sp)
    8744:	ddc00917 	ldw	r23,36(sp)
    8748:	dd800817 	ldw	r22,32(sp)
    874c:	dd400717 	ldw	r21,28(sp)
    8750:	dd000617 	ldw	r20,24(sp)
    8754:	dcc00517 	ldw	r19,20(sp)
    8758:	dc800417 	ldw	r18,16(sp)
    875c:	dc400317 	ldw	r17,12(sp)
    8760:	dc000217 	ldw	r16,8(sp)
    8764:	dec00c04 	addi	sp,sp,48
    8768:	f800283a 	ret
    876c:	00800074 	movhi	r2,1
    8770:	10bac404 	addi	r2,r2,-5360
    8774:	12400217 	ldw	r9,8(r2)
    8778:	84cd883a 	add	r6,r16,r19
    877c:	802b883a 	mov	r21,r16
    8780:	3240b926 	beq	r6,r9,8a68 <_realloc_r+0x408>
    8784:	31400117 	ldw	r5,4(r6)
    8788:	00bfff84 	movi	r2,-2
    878c:	2884703a 	and	r2,r5,r2
    8790:	1185883a 	add	r2,r2,r6
    8794:	10c00117 	ldw	r3,4(r2)
    8798:	18c0004c 	andi	r3,r3,1
    879c:	1807003a 	cmpeq	r3,r3,zero
    87a0:	1800a326 	beq	r3,zero,8a30 <_realloc_r+0x3d0>
    87a4:	2908703a 	and	r4,r5,r4
    87a8:	9929883a 	add	r20,r19,r4
    87ac:	a1c0a30e 	bge	r20,r7,8a3c <_realloc_r+0x3dc>
    87b0:	4080004c 	andi	r2,r8,1
    87b4:	1000551e 	bne	r2,zero,890c <_realloc_r+0x2ac>
    87b8:	80800017 	ldw	r2,0(r16)
    87bc:	80afc83a 	sub	r23,r16,r2
    87c0:	b8c00117 	ldw	r3,4(r23)
    87c4:	00bfff04 	movi	r2,-4
    87c8:	1884703a 	and	r2,r3,r2
    87cc:	30002e26 	beq	r6,zero,8888 <_realloc_r+0x228>
    87d0:	3240b926 	beq	r6,r9,8ab8 <_realloc_r+0x458>
    87d4:	98a9883a 	add	r20,r19,r2
    87d8:	2509883a 	add	r4,r4,r20
    87dc:	d9000015 	stw	r4,0(sp)
    87e0:	21c02a16 	blt	r4,r7,888c <_realloc_r+0x22c>
    87e4:	30800317 	ldw	r2,12(r6)
    87e8:	30c00217 	ldw	r3,8(r6)
    87ec:	01400904 	movi	r5,36
    87f0:	99bfff04 	addi	r6,r19,-4
    87f4:	18800315 	stw	r2,12(r3)
    87f8:	10c00215 	stw	r3,8(r2)
    87fc:	b9000317 	ldw	r4,12(r23)
    8800:	b8800217 	ldw	r2,8(r23)
    8804:	b82b883a 	mov	r21,r23
    8808:	bc000204 	addi	r16,r23,8
    880c:	20800215 	stw	r2,8(r4)
    8810:	11000315 	stw	r4,12(r2)
    8814:	2980e436 	bltu	r5,r6,8ba8 <_realloc_r+0x548>
    8818:	008004c4 	movi	r2,19
    881c:	9009883a 	mov	r4,r18
    8820:	8011883a 	mov	r8,r16
    8824:	11800f2e 	bgeu	r2,r6,8864 <_realloc_r+0x204>
    8828:	90800017 	ldw	r2,0(r18)
    882c:	ba000404 	addi	r8,r23,16
    8830:	91000204 	addi	r4,r18,8
    8834:	b8800215 	stw	r2,8(r23)
    8838:	90c00117 	ldw	r3,4(r18)
    883c:	008006c4 	movi	r2,27
    8840:	b8c00315 	stw	r3,12(r23)
    8844:	1180072e 	bgeu	r2,r6,8864 <_realloc_r+0x204>
    8848:	90c00217 	ldw	r3,8(r18)
    884c:	ba000604 	addi	r8,r23,24
    8850:	91000404 	addi	r4,r18,16
    8854:	b8c00415 	stw	r3,16(r23)
    8858:	90800317 	ldw	r2,12(r18)
    885c:	b8800515 	stw	r2,20(r23)
    8860:	3140e726 	beq	r6,r5,8c00 <_realloc_r+0x5a0>
    8864:	20800017 	ldw	r2,0(r4)
    8868:	dd000017 	ldw	r20,0(sp)
    886c:	b80f883a 	mov	r7,r23
    8870:	40800015 	stw	r2,0(r8)
    8874:	20c00117 	ldw	r3,4(r4)
    8878:	40c00115 	stw	r3,4(r8)
    887c:	20800217 	ldw	r2,8(r4)
    8880:	40800215 	stw	r2,8(r8)
    8884:	003f9706 	br	86e4 <_realloc_r+0x84>
    8888:	98a9883a 	add	r20,r19,r2
    888c:	a1c01f16 	blt	r20,r7,890c <_realloc_r+0x2ac>
    8890:	b8c00317 	ldw	r3,12(r23)
    8894:	b8800217 	ldw	r2,8(r23)
    8898:	99bfff04 	addi	r6,r19,-4
    889c:	01400904 	movi	r5,36
    88a0:	b82b883a 	mov	r21,r23
    88a4:	18800215 	stw	r2,8(r3)
    88a8:	10c00315 	stw	r3,12(r2)
    88ac:	bc000204 	addi	r16,r23,8
    88b0:	2980c336 	bltu	r5,r6,8bc0 <_realloc_r+0x560>
    88b4:	008004c4 	movi	r2,19
    88b8:	9009883a 	mov	r4,r18
    88bc:	8011883a 	mov	r8,r16
    88c0:	11800f2e 	bgeu	r2,r6,8900 <_realloc_r+0x2a0>
    88c4:	90800017 	ldw	r2,0(r18)
    88c8:	ba000404 	addi	r8,r23,16
    88cc:	91000204 	addi	r4,r18,8
    88d0:	b8800215 	stw	r2,8(r23)
    88d4:	90c00117 	ldw	r3,4(r18)
    88d8:	008006c4 	movi	r2,27
    88dc:	b8c00315 	stw	r3,12(r23)
    88e0:	1180072e 	bgeu	r2,r6,8900 <_realloc_r+0x2a0>
    88e4:	90c00217 	ldw	r3,8(r18)
    88e8:	ba000604 	addi	r8,r23,24
    88ec:	91000404 	addi	r4,r18,16
    88f0:	b8c00415 	stw	r3,16(r23)
    88f4:	90800317 	ldw	r2,12(r18)
    88f8:	b8800515 	stw	r2,20(r23)
    88fc:	3140c726 	beq	r6,r5,8c1c <_realloc_r+0x5bc>
    8900:	20800017 	ldw	r2,0(r4)
    8904:	b80f883a 	mov	r7,r23
    8908:	003fd906 	br	8870 <_realloc_r+0x210>
    890c:	880b883a 	mov	r5,r17
    8910:	b009883a 	mov	r4,r22
    8914:	0001e980 	call	1e98 <_malloc_r>
    8918:	1023883a 	mov	r17,r2
    891c:	10002526 	beq	r2,zero,89b4 <_realloc_r+0x354>
    8920:	80800117 	ldw	r2,4(r16)
    8924:	00ffff84 	movi	r3,-2
    8928:	893ffe04 	addi	r4,r17,-8
    892c:	10c4703a 	and	r2,r2,r3
    8930:	8085883a 	add	r2,r16,r2
    8934:	20809526 	beq	r4,r2,8b8c <_realloc_r+0x52c>
    8938:	99bfff04 	addi	r6,r19,-4
    893c:	01c00904 	movi	r7,36
    8940:	39804536 	bltu	r7,r6,8a58 <_realloc_r+0x3f8>
    8944:	008004c4 	movi	r2,19
    8948:	9009883a 	mov	r4,r18
    894c:	880b883a 	mov	r5,r17
    8950:	11800f2e 	bgeu	r2,r6,8990 <_realloc_r+0x330>
    8954:	90800017 	ldw	r2,0(r18)
    8958:	89400204 	addi	r5,r17,8
    895c:	91000204 	addi	r4,r18,8
    8960:	88800015 	stw	r2,0(r17)
    8964:	90c00117 	ldw	r3,4(r18)
    8968:	008006c4 	movi	r2,27
    896c:	88c00115 	stw	r3,4(r17)
    8970:	1180072e 	bgeu	r2,r6,8990 <_realloc_r+0x330>
    8974:	90c00217 	ldw	r3,8(r18)
    8978:	89400404 	addi	r5,r17,16
    897c:	91000404 	addi	r4,r18,16
    8980:	88c00215 	stw	r3,8(r17)
    8984:	90800317 	ldw	r2,12(r18)
    8988:	88800315 	stw	r2,12(r17)
    898c:	31c09126 	beq	r6,r7,8bd4 <_realloc_r+0x574>
    8990:	20800017 	ldw	r2,0(r4)
    8994:	28800015 	stw	r2,0(r5)
    8998:	20c00117 	ldw	r3,4(r4)
    899c:	28c00115 	stw	r3,4(r5)
    89a0:	20800217 	ldw	r2,8(r4)
    89a4:	28800215 	stw	r2,8(r5)
    89a8:	900b883a 	mov	r5,r18
    89ac:	b009883a 	mov	r4,r22
    89b0:	00067e80 	call	67e8 <_free_r>
    89b4:	b009883a 	mov	r4,r22
    89b8:	000bf080 	call	bf08 <__malloc_unlock>
    89bc:	003f5e06 	br	8738 <_realloc_r+0xd8>
    89c0:	300b883a 	mov	r5,r6
    89c4:	dfc00b17 	ldw	ra,44(sp)
    89c8:	df000a17 	ldw	fp,40(sp)
    89cc:	ddc00917 	ldw	r23,36(sp)
    89d0:	dd800817 	ldw	r22,32(sp)
    89d4:	dd400717 	ldw	r21,28(sp)
    89d8:	dd000617 	ldw	r20,24(sp)
    89dc:	dcc00517 	ldw	r19,20(sp)
    89e0:	dc800417 	ldw	r18,16(sp)
    89e4:	dc400317 	ldw	r17,12(sp)
    89e8:	dc000217 	ldw	r16,8(sp)
    89ec:	dec00c04 	addi	sp,sp,48
    89f0:	0001e981 	jmpi	1e98 <_malloc_r>
    89f4:	38800117 	ldw	r2,4(r7)
    89f8:	e54b883a 	add	r5,fp,r21
    89fc:	31000054 	ori	r4,r6,1
    8a00:	1080004c 	andi	r2,r2,1
    8a04:	1704b03a 	or	r2,r2,fp
    8a08:	38800115 	stw	r2,4(r7)
    8a0c:	29000115 	stw	r4,4(r5)
    8a10:	2987883a 	add	r3,r5,r6
    8a14:	18800117 	ldw	r2,4(r3)
    8a18:	29400204 	addi	r5,r5,8
    8a1c:	b009883a 	mov	r4,r22
    8a20:	10800054 	ori	r2,r2,1
    8a24:	18800115 	stw	r2,4(r3)
    8a28:	00067e80 	call	67e8 <_free_r>
    8a2c:	003f3806 	br	8710 <_realloc_r+0xb0>
    8a30:	000d883a 	mov	r6,zero
    8a34:	0009883a 	mov	r4,zero
    8a38:	003f5d06 	br	87b0 <_realloc_r+0x150>
    8a3c:	30c00217 	ldw	r3,8(r6)
    8a40:	30800317 	ldw	r2,12(r6)
    8a44:	800f883a 	mov	r7,r16
    8a48:	84000204 	addi	r16,r16,8
    8a4c:	10c00215 	stw	r3,8(r2)
    8a50:	18800315 	stw	r2,12(r3)
    8a54:	003f2306 	br	86e4 <_realloc_r+0x84>
    8a58:	8809883a 	mov	r4,r17
    8a5c:	900b883a 	mov	r5,r18
    8a60:	00074f40 	call	74f4 <memmove>
    8a64:	003fd006 	br	89a8 <_realloc_r+0x348>
    8a68:	30800117 	ldw	r2,4(r6)
    8a6c:	e0c00404 	addi	r3,fp,16
    8a70:	1108703a 	and	r4,r2,r4
    8a74:	9905883a 	add	r2,r19,r4
    8a78:	10ff4d16 	blt	r2,r3,87b0 <_realloc_r+0x150>
    8a7c:	1705c83a 	sub	r2,r2,fp
    8a80:	870b883a 	add	r5,r16,fp
    8a84:	10800054 	ori	r2,r2,1
    8a88:	28800115 	stw	r2,4(r5)
    8a8c:	80c00117 	ldw	r3,4(r16)
    8a90:	00800074 	movhi	r2,1
    8a94:	10bac404 	addi	r2,r2,-5360
    8a98:	b009883a 	mov	r4,r22
    8a9c:	18c0004c 	andi	r3,r3,1
    8aa0:	e0c6b03a 	or	r3,fp,r3
    8aa4:	11400215 	stw	r5,8(r2)
    8aa8:	80c00115 	stw	r3,4(r16)
    8aac:	000bf080 	call	bf08 <__malloc_unlock>
    8ab0:	84400204 	addi	r17,r16,8
    8ab4:	003f2006 	br	8738 <_realloc_r+0xd8>
    8ab8:	98a9883a 	add	r20,r19,r2
    8abc:	2509883a 	add	r4,r4,r20
    8ac0:	e0800404 	addi	r2,fp,16
    8ac4:	d9000115 	stw	r4,4(sp)
    8ac8:	20bf7016 	blt	r4,r2,888c <_realloc_r+0x22c>
    8acc:	b8c00317 	ldw	r3,12(r23)
    8ad0:	b8800217 	ldw	r2,8(r23)
    8ad4:	99bfff04 	addi	r6,r19,-4
    8ad8:	01400904 	movi	r5,36
    8adc:	18800215 	stw	r2,8(r3)
    8ae0:	10c00315 	stw	r3,12(r2)
    8ae4:	bc400204 	addi	r17,r23,8
    8ae8:	29804136 	bltu	r5,r6,8bf0 <_realloc_r+0x590>
    8aec:	008004c4 	movi	r2,19
    8af0:	9009883a 	mov	r4,r18
    8af4:	880f883a 	mov	r7,r17
    8af8:	11800f2e 	bgeu	r2,r6,8b38 <_realloc_r+0x4d8>
    8afc:	90800017 	ldw	r2,0(r18)
    8b00:	b9c00404 	addi	r7,r23,16
    8b04:	91000204 	addi	r4,r18,8
    8b08:	b8800215 	stw	r2,8(r23)
    8b0c:	90c00117 	ldw	r3,4(r18)
    8b10:	008006c4 	movi	r2,27
    8b14:	b8c00315 	stw	r3,12(r23)
    8b18:	1180072e 	bgeu	r2,r6,8b38 <_realloc_r+0x4d8>
    8b1c:	90c00217 	ldw	r3,8(r18)
    8b20:	b9c00604 	addi	r7,r23,24
    8b24:	91000404 	addi	r4,r18,16
    8b28:	b8c00415 	stw	r3,16(r23)
    8b2c:	90800317 	ldw	r2,12(r18)
    8b30:	b8800515 	stw	r2,20(r23)
    8b34:	31404026 	beq	r6,r5,8c38 <_realloc_r+0x5d8>
    8b38:	20800017 	ldw	r2,0(r4)
    8b3c:	38800015 	stw	r2,0(r7)
    8b40:	20c00117 	ldw	r3,4(r4)
    8b44:	38c00115 	stw	r3,4(r7)
    8b48:	20800217 	ldw	r2,8(r4)
    8b4c:	38800215 	stw	r2,8(r7)
    8b50:	d8c00117 	ldw	r3,4(sp)
    8b54:	bf0b883a 	add	r5,r23,fp
    8b58:	b009883a 	mov	r4,r22
    8b5c:	1f05c83a 	sub	r2,r3,fp
    8b60:	10800054 	ori	r2,r2,1
    8b64:	28800115 	stw	r2,4(r5)
    8b68:	b8c00117 	ldw	r3,4(r23)
    8b6c:	00800074 	movhi	r2,1
    8b70:	10bac404 	addi	r2,r2,-5360
    8b74:	11400215 	stw	r5,8(r2)
    8b78:	18c0004c 	andi	r3,r3,1
    8b7c:	e0c6b03a 	or	r3,fp,r3
    8b80:	b8c00115 	stw	r3,4(r23)
    8b84:	000bf080 	call	bf08 <__malloc_unlock>
    8b88:	003eeb06 	br	8738 <_realloc_r+0xd8>
    8b8c:	20800117 	ldw	r2,4(r4)
    8b90:	00ffff04 	movi	r3,-4
    8b94:	800f883a 	mov	r7,r16
    8b98:	10c4703a 	and	r2,r2,r3
    8b9c:	98a9883a 	add	r20,r19,r2
    8ba0:	84000204 	addi	r16,r16,8
    8ba4:	003ecf06 	br	86e4 <_realloc_r+0x84>
    8ba8:	900b883a 	mov	r5,r18
    8bac:	8009883a 	mov	r4,r16
    8bb0:	00074f40 	call	74f4 <memmove>
    8bb4:	dd000017 	ldw	r20,0(sp)
    8bb8:	b80f883a 	mov	r7,r23
    8bbc:	003ec906 	br	86e4 <_realloc_r+0x84>
    8bc0:	900b883a 	mov	r5,r18
    8bc4:	8009883a 	mov	r4,r16
    8bc8:	00074f40 	call	74f4 <memmove>
    8bcc:	b80f883a 	mov	r7,r23
    8bd0:	003ec406 	br	86e4 <_realloc_r+0x84>
    8bd4:	90c00417 	ldw	r3,16(r18)
    8bd8:	89400604 	addi	r5,r17,24
    8bdc:	91000604 	addi	r4,r18,24
    8be0:	88c00415 	stw	r3,16(r17)
    8be4:	90800517 	ldw	r2,20(r18)
    8be8:	88800515 	stw	r2,20(r17)
    8bec:	003f6806 	br	8990 <_realloc_r+0x330>
    8bf0:	900b883a 	mov	r5,r18
    8bf4:	8809883a 	mov	r4,r17
    8bf8:	00074f40 	call	74f4 <memmove>
    8bfc:	003fd406 	br	8b50 <_realloc_r+0x4f0>
    8c00:	90c00417 	ldw	r3,16(r18)
    8c04:	91000604 	addi	r4,r18,24
    8c08:	ba000804 	addi	r8,r23,32
    8c0c:	b8c00615 	stw	r3,24(r23)
    8c10:	90800517 	ldw	r2,20(r18)
    8c14:	b8800715 	stw	r2,28(r23)
    8c18:	003f1206 	br	8864 <_realloc_r+0x204>
    8c1c:	90c00417 	ldw	r3,16(r18)
    8c20:	91000604 	addi	r4,r18,24
    8c24:	ba000804 	addi	r8,r23,32
    8c28:	b8c00615 	stw	r3,24(r23)
    8c2c:	90800517 	ldw	r2,20(r18)
    8c30:	b8800715 	stw	r2,28(r23)
    8c34:	003f3206 	br	8900 <_realloc_r+0x2a0>
    8c38:	90c00417 	ldw	r3,16(r18)
    8c3c:	91000604 	addi	r4,r18,24
    8c40:	b9c00804 	addi	r7,r23,32
    8c44:	b8c00615 	stw	r3,24(r23)
    8c48:	90800517 	ldw	r2,20(r18)
    8c4c:	b8800715 	stw	r2,28(r23)
    8c50:	003fb906 	br	8b38 <_realloc_r+0x4d8>

00008c54 <__isinfd>:
    8c54:	200d883a 	mov	r6,r4
    8c58:	0109c83a 	sub	r4,zero,r4
    8c5c:	2188b03a 	or	r4,r4,r6
    8c60:	2008d7fa 	srli	r4,r4,31
    8c64:	00a00034 	movhi	r2,32768
    8c68:	10bfffc4 	addi	r2,r2,-1
    8c6c:	1144703a 	and	r2,r2,r5
    8c70:	2088b03a 	or	r4,r4,r2
    8c74:	009ffc34 	movhi	r2,32752
    8c78:	1105c83a 	sub	r2,r2,r4
    8c7c:	0087c83a 	sub	r3,zero,r2
    8c80:	10c4b03a 	or	r2,r2,r3
    8c84:	1004d7fa 	srli	r2,r2,31
    8c88:	00c00044 	movi	r3,1
    8c8c:	1885c83a 	sub	r2,r3,r2
    8c90:	f800283a 	ret

00008c94 <__isnand>:
    8c94:	200d883a 	mov	r6,r4
    8c98:	0109c83a 	sub	r4,zero,r4
    8c9c:	2188b03a 	or	r4,r4,r6
    8ca0:	2008d7fa 	srli	r4,r4,31
    8ca4:	00a00034 	movhi	r2,32768
    8ca8:	10bfffc4 	addi	r2,r2,-1
    8cac:	1144703a 	and	r2,r2,r5
    8cb0:	2088b03a 	or	r4,r4,r2
    8cb4:	009ffc34 	movhi	r2,32752
    8cb8:	1105c83a 	sub	r2,r2,r4
    8cbc:	1004d7fa 	srli	r2,r2,31
    8cc0:	f800283a 	ret

00008cc4 <__sclose>:
    8cc4:	2940038f 	ldh	r5,14(r5)
    8cc8:	0008ff81 	jmpi	8ff8 <_close_r>

00008ccc <__sseek>:
    8ccc:	defffe04 	addi	sp,sp,-8
    8cd0:	dc000015 	stw	r16,0(sp)
    8cd4:	2821883a 	mov	r16,r5
    8cd8:	2940038f 	ldh	r5,14(r5)
    8cdc:	dfc00115 	stw	ra,4(sp)
    8ce0:	00092700 	call	9270 <_lseek_r>
    8ce4:	1007883a 	mov	r3,r2
    8ce8:	00bfffc4 	movi	r2,-1
    8cec:	18800926 	beq	r3,r2,8d14 <__sseek+0x48>
    8cf0:	8080030b 	ldhu	r2,12(r16)
    8cf4:	80c01415 	stw	r3,80(r16)
    8cf8:	10840014 	ori	r2,r2,4096
    8cfc:	8080030d 	sth	r2,12(r16)
    8d00:	1805883a 	mov	r2,r3
    8d04:	dfc00117 	ldw	ra,4(sp)
    8d08:	dc000017 	ldw	r16,0(sp)
    8d0c:	dec00204 	addi	sp,sp,8
    8d10:	f800283a 	ret
    8d14:	8080030b 	ldhu	r2,12(r16)
    8d18:	10bbffcc 	andi	r2,r2,61439
    8d1c:	8080030d 	sth	r2,12(r16)
    8d20:	1805883a 	mov	r2,r3
    8d24:	dfc00117 	ldw	ra,4(sp)
    8d28:	dc000017 	ldw	r16,0(sp)
    8d2c:	dec00204 	addi	sp,sp,8
    8d30:	f800283a 	ret

00008d34 <__swrite>:
    8d34:	2880030b 	ldhu	r2,12(r5)
    8d38:	defffb04 	addi	sp,sp,-20
    8d3c:	dcc00315 	stw	r19,12(sp)
    8d40:	1080400c 	andi	r2,r2,256
    8d44:	dc800215 	stw	r18,8(sp)
    8d48:	dc400115 	stw	r17,4(sp)
    8d4c:	dc000015 	stw	r16,0(sp)
    8d50:	3027883a 	mov	r19,r6
    8d54:	3825883a 	mov	r18,r7
    8d58:	dfc00415 	stw	ra,16(sp)
    8d5c:	2821883a 	mov	r16,r5
    8d60:	000d883a 	mov	r6,zero
    8d64:	01c00084 	movi	r7,2
    8d68:	2023883a 	mov	r17,r4
    8d6c:	10000226 	beq	r2,zero,8d78 <__swrite+0x44>
    8d70:	2940038f 	ldh	r5,14(r5)
    8d74:	00092700 	call	9270 <_lseek_r>
    8d78:	8080030b 	ldhu	r2,12(r16)
    8d7c:	8140038f 	ldh	r5,14(r16)
    8d80:	8809883a 	mov	r4,r17
    8d84:	10bbffcc 	andi	r2,r2,61439
    8d88:	980d883a 	mov	r6,r19
    8d8c:	900f883a 	mov	r7,r18
    8d90:	8080030d 	sth	r2,12(r16)
    8d94:	dfc00417 	ldw	ra,16(sp)
    8d98:	dcc00317 	ldw	r19,12(sp)
    8d9c:	dc800217 	ldw	r18,8(sp)
    8da0:	dc400117 	ldw	r17,4(sp)
    8da4:	dc000017 	ldw	r16,0(sp)
    8da8:	dec00504 	addi	sp,sp,20
    8dac:	0008ecc1 	jmpi	8ecc <_write_r>

00008db0 <__sread>:
    8db0:	defffe04 	addi	sp,sp,-8
    8db4:	dc000015 	stw	r16,0(sp)
    8db8:	2821883a 	mov	r16,r5
    8dbc:	2940038f 	ldh	r5,14(r5)
    8dc0:	dfc00115 	stw	ra,4(sp)
    8dc4:	00092e80 	call	92e8 <_read_r>
    8dc8:	1007883a 	mov	r3,r2
    8dcc:	10000816 	blt	r2,zero,8df0 <__sread+0x40>
    8dd0:	80801417 	ldw	r2,80(r16)
    8dd4:	10c5883a 	add	r2,r2,r3
    8dd8:	80801415 	stw	r2,80(r16)
    8ddc:	1805883a 	mov	r2,r3
    8de0:	dfc00117 	ldw	ra,4(sp)
    8de4:	dc000017 	ldw	r16,0(sp)
    8de8:	dec00204 	addi	sp,sp,8
    8dec:	f800283a 	ret
    8df0:	8080030b 	ldhu	r2,12(r16)
    8df4:	10bbffcc 	andi	r2,r2,61439
    8df8:	8080030d 	sth	r2,12(r16)
    8dfc:	1805883a 	mov	r2,r3
    8e00:	dfc00117 	ldw	ra,4(sp)
    8e04:	dc000017 	ldw	r16,0(sp)
    8e08:	dec00204 	addi	sp,sp,8
    8e0c:	f800283a 	ret

00008e10 <strcmp>:
    8e10:	2144b03a 	or	r2,r4,r5
    8e14:	108000cc 	andi	r2,r2,3
    8e18:	10001d1e 	bne	r2,zero,8e90 <strcmp+0x80>
    8e1c:	200f883a 	mov	r7,r4
    8e20:	28800017 	ldw	r2,0(r5)
    8e24:	21000017 	ldw	r4,0(r4)
    8e28:	280d883a 	mov	r6,r5
    8e2c:	2080161e 	bne	r4,r2,8e88 <strcmp+0x78>
    8e30:	023fbff4 	movhi	r8,65279
    8e34:	423fbfc4 	addi	r8,r8,-257
    8e38:	2207883a 	add	r3,r4,r8
    8e3c:	01602074 	movhi	r5,32897
    8e40:	29602004 	addi	r5,r5,-32640
    8e44:	1946703a 	and	r3,r3,r5
    8e48:	0104303a 	nor	r2,zero,r4
    8e4c:	10c4703a 	and	r2,r2,r3
    8e50:	10001c1e 	bne	r2,zero,8ec4 <strcmp+0xb4>
    8e54:	4013883a 	mov	r9,r8
    8e58:	2811883a 	mov	r8,r5
    8e5c:	00000106 	br	8e64 <strcmp+0x54>
    8e60:	1800181e 	bne	r3,zero,8ec4 <strcmp+0xb4>
    8e64:	39c00104 	addi	r7,r7,4
    8e68:	39000017 	ldw	r4,0(r7)
    8e6c:	31800104 	addi	r6,r6,4
    8e70:	31400017 	ldw	r5,0(r6)
    8e74:	2245883a 	add	r2,r4,r9
    8e78:	1204703a 	and	r2,r2,r8
    8e7c:	0106303a 	nor	r3,zero,r4
    8e80:	1886703a 	and	r3,r3,r2
    8e84:	217ff626 	beq	r4,r5,8e60 <strcmp+0x50>
    8e88:	3809883a 	mov	r4,r7
    8e8c:	300b883a 	mov	r5,r6
    8e90:	20c00007 	ldb	r3,0(r4)
    8e94:	1800051e 	bne	r3,zero,8eac <strcmp+0x9c>
    8e98:	00000606 	br	8eb4 <strcmp+0xa4>
    8e9c:	21000044 	addi	r4,r4,1
    8ea0:	20c00007 	ldb	r3,0(r4)
    8ea4:	29400044 	addi	r5,r5,1
    8ea8:	18000226 	beq	r3,zero,8eb4 <strcmp+0xa4>
    8eac:	28800007 	ldb	r2,0(r5)
    8eb0:	18bffa26 	beq	r3,r2,8e9c <strcmp+0x8c>
    8eb4:	20c00003 	ldbu	r3,0(r4)
    8eb8:	28800003 	ldbu	r2,0(r5)
    8ebc:	1885c83a 	sub	r2,r3,r2
    8ec0:	f800283a 	ret
    8ec4:	0005883a 	mov	r2,zero
    8ec8:	f800283a 	ret

00008ecc <_write_r>:
    8ecc:	defffd04 	addi	sp,sp,-12
    8ed0:	dc000015 	stw	r16,0(sp)
    8ed4:	04000074 	movhi	r16,1
    8ed8:	84070f04 	addi	r16,r16,7228
    8edc:	dc400115 	stw	r17,4(sp)
    8ee0:	80000015 	stw	zero,0(r16)
    8ee4:	2023883a 	mov	r17,r4
    8ee8:	2809883a 	mov	r4,r5
    8eec:	300b883a 	mov	r5,r6
    8ef0:	380d883a 	mov	r6,r7
    8ef4:	dfc00215 	stw	ra,8(sp)
    8ef8:	000c1c40 	call	c1c4 <write>
    8efc:	1007883a 	mov	r3,r2
    8f00:	00bfffc4 	movi	r2,-1
    8f04:	18800626 	beq	r3,r2,8f20 <_write_r+0x54>
    8f08:	1805883a 	mov	r2,r3
    8f0c:	dfc00217 	ldw	ra,8(sp)
    8f10:	dc400117 	ldw	r17,4(sp)
    8f14:	dc000017 	ldw	r16,0(sp)
    8f18:	dec00304 	addi	sp,sp,12
    8f1c:	f800283a 	ret
    8f20:	80800017 	ldw	r2,0(r16)
    8f24:	103ff826 	beq	r2,zero,8f08 <_write_r+0x3c>
    8f28:	88800015 	stw	r2,0(r17)
    8f2c:	1805883a 	mov	r2,r3
    8f30:	dfc00217 	ldw	ra,8(sp)
    8f34:	dc400117 	ldw	r17,4(sp)
    8f38:	dc000017 	ldw	r16,0(sp)
    8f3c:	dec00304 	addi	sp,sp,12
    8f40:	f800283a 	ret

00008f44 <_calloc_r>:
    8f44:	298b383a 	mul	r5,r5,r6
    8f48:	defffe04 	addi	sp,sp,-8
    8f4c:	dc000015 	stw	r16,0(sp)
    8f50:	dfc00115 	stw	ra,4(sp)
    8f54:	0001e980 	call	1e98 <_malloc_r>
    8f58:	1021883a 	mov	r16,r2
    8f5c:	01c00904 	movi	r7,36
    8f60:	10000d26 	beq	r2,zero,8f98 <_calloc_r+0x54>
    8f64:	10ffff17 	ldw	r3,-4(r2)
    8f68:	1009883a 	mov	r4,r2
    8f6c:	00bfff04 	movi	r2,-4
    8f70:	1886703a 	and	r3,r3,r2
    8f74:	1887883a 	add	r3,r3,r2
    8f78:	180d883a 	mov	r6,r3
    8f7c:	000b883a 	mov	r5,zero
    8f80:	38c01736 	bltu	r7,r3,8fe0 <_calloc_r+0x9c>
    8f84:	008004c4 	movi	r2,19
    8f88:	10c00836 	bltu	r2,r3,8fac <_calloc_r+0x68>
    8f8c:	20000215 	stw	zero,8(r4)
    8f90:	20000015 	stw	zero,0(r4)
    8f94:	20000115 	stw	zero,4(r4)
    8f98:	8005883a 	mov	r2,r16
    8f9c:	dfc00117 	ldw	ra,4(sp)
    8fa0:	dc000017 	ldw	r16,0(sp)
    8fa4:	dec00204 	addi	sp,sp,8
    8fa8:	f800283a 	ret
    8fac:	008006c4 	movi	r2,27
    8fb0:	80000015 	stw	zero,0(r16)
    8fb4:	80000115 	stw	zero,4(r16)
    8fb8:	81000204 	addi	r4,r16,8
    8fbc:	10fff32e 	bgeu	r2,r3,8f8c <_calloc_r+0x48>
    8fc0:	80000215 	stw	zero,8(r16)
    8fc4:	80000315 	stw	zero,12(r16)
    8fc8:	81000404 	addi	r4,r16,16
    8fcc:	19ffef1e 	bne	r3,r7,8f8c <_calloc_r+0x48>
    8fd0:	81000604 	addi	r4,r16,24
    8fd4:	80000415 	stw	zero,16(r16)
    8fd8:	80000515 	stw	zero,20(r16)
    8fdc:	003feb06 	br	8f8c <_calloc_r+0x48>
    8fe0:	00075d40 	call	75d4 <memset>
    8fe4:	8005883a 	mov	r2,r16
    8fe8:	dfc00117 	ldw	ra,4(sp)
    8fec:	dc000017 	ldw	r16,0(sp)
    8ff0:	dec00204 	addi	sp,sp,8
    8ff4:	f800283a 	ret

00008ff8 <_close_r>:
    8ff8:	defffd04 	addi	sp,sp,-12
    8ffc:	dc000015 	stw	r16,0(sp)
    9000:	04000074 	movhi	r16,1
    9004:	84070f04 	addi	r16,r16,7228
    9008:	dc400115 	stw	r17,4(sp)
    900c:	80000015 	stw	zero,0(r16)
    9010:	2023883a 	mov	r17,r4
    9014:	2809883a 	mov	r4,r5
    9018:	dfc00215 	stw	ra,8(sp)
    901c:	000b6440 	call	b644 <close>
    9020:	1007883a 	mov	r3,r2
    9024:	00bfffc4 	movi	r2,-1
    9028:	18800626 	beq	r3,r2,9044 <_close_r+0x4c>
    902c:	1805883a 	mov	r2,r3
    9030:	dfc00217 	ldw	ra,8(sp)
    9034:	dc400117 	ldw	r17,4(sp)
    9038:	dc000017 	ldw	r16,0(sp)
    903c:	dec00304 	addi	sp,sp,12
    9040:	f800283a 	ret
    9044:	80800017 	ldw	r2,0(r16)
    9048:	103ff826 	beq	r2,zero,902c <_close_r+0x34>
    904c:	88800015 	stw	r2,0(r17)
    9050:	1805883a 	mov	r2,r3
    9054:	dfc00217 	ldw	ra,8(sp)
    9058:	dc400117 	ldw	r17,4(sp)
    905c:	dc000017 	ldw	r16,0(sp)
    9060:	dec00304 	addi	sp,sp,12
    9064:	f800283a 	ret

00009068 <_fclose_r>:
    9068:	defffc04 	addi	sp,sp,-16
    906c:	dc400115 	stw	r17,4(sp)
    9070:	dc000015 	stw	r16,0(sp)
    9074:	dfc00315 	stw	ra,12(sp)
    9078:	dc800215 	stw	r18,8(sp)
    907c:	2821883a 	mov	r16,r5
    9080:	2023883a 	mov	r17,r4
    9084:	28002926 	beq	r5,zero,912c <_fclose_r+0xc4>
    9088:	00064540 	call	6454 <__sfp_lock_acquire>
    908c:	88000226 	beq	r17,zero,9098 <_fclose_r+0x30>
    9090:	88800e17 	ldw	r2,56(r17)
    9094:	10002d26 	beq	r2,zero,914c <_fclose_r+0xe4>
    9098:	8080030f 	ldh	r2,12(r16)
    909c:	10002226 	beq	r2,zero,9128 <_fclose_r+0xc0>
    90a0:	8809883a 	mov	r4,r17
    90a4:	800b883a 	mov	r5,r16
    90a8:	00061cc0 	call	61cc <_fflush_r>
    90ac:	1025883a 	mov	r18,r2
    90b0:	80800b17 	ldw	r2,44(r16)
    90b4:	10000426 	beq	r2,zero,90c8 <_fclose_r+0x60>
    90b8:	81400717 	ldw	r5,28(r16)
    90bc:	8809883a 	mov	r4,r17
    90c0:	103ee83a 	callr	r2
    90c4:	10002a16 	blt	r2,zero,9170 <_fclose_r+0x108>
    90c8:	8080030b 	ldhu	r2,12(r16)
    90cc:	1080200c 	andi	r2,r2,128
    90d0:	1000231e 	bne	r2,zero,9160 <_fclose_r+0xf8>
    90d4:	81400c17 	ldw	r5,48(r16)
    90d8:	28000526 	beq	r5,zero,90f0 <_fclose_r+0x88>
    90dc:	80801004 	addi	r2,r16,64
    90e0:	28800226 	beq	r5,r2,90ec <_fclose_r+0x84>
    90e4:	8809883a 	mov	r4,r17
    90e8:	00067e80 	call	67e8 <_free_r>
    90ec:	80000c15 	stw	zero,48(r16)
    90f0:	81401117 	ldw	r5,68(r16)
    90f4:	28000326 	beq	r5,zero,9104 <_fclose_r+0x9c>
    90f8:	8809883a 	mov	r4,r17
    90fc:	00067e80 	call	67e8 <_free_r>
    9100:	80001115 	stw	zero,68(r16)
    9104:	8000030d 	sth	zero,12(r16)
    9108:	00064580 	call	6458 <__sfp_lock_release>
    910c:	9005883a 	mov	r2,r18
    9110:	dfc00317 	ldw	ra,12(sp)
    9114:	dc800217 	ldw	r18,8(sp)
    9118:	dc400117 	ldw	r17,4(sp)
    911c:	dc000017 	ldw	r16,0(sp)
    9120:	dec00404 	addi	sp,sp,16
    9124:	f800283a 	ret
    9128:	00064580 	call	6458 <__sfp_lock_release>
    912c:	0025883a 	mov	r18,zero
    9130:	9005883a 	mov	r2,r18
    9134:	dfc00317 	ldw	ra,12(sp)
    9138:	dc800217 	ldw	r18,8(sp)
    913c:	dc400117 	ldw	r17,4(sp)
    9140:	dc000017 	ldw	r16,0(sp)
    9144:	dec00404 	addi	sp,sp,16
    9148:	f800283a 	ret
    914c:	8809883a 	mov	r4,r17
    9150:	00064640 	call	6464 <__sinit>
    9154:	8080030f 	ldh	r2,12(r16)
    9158:	103fd11e 	bne	r2,zero,90a0 <_fclose_r+0x38>
    915c:	003ff206 	br	9128 <_fclose_r+0xc0>
    9160:	81400417 	ldw	r5,16(r16)
    9164:	8809883a 	mov	r4,r17
    9168:	00067e80 	call	67e8 <_free_r>
    916c:	003fd906 	br	90d4 <_fclose_r+0x6c>
    9170:	04bfffc4 	movi	r18,-1
    9174:	003fd406 	br	90c8 <_fclose_r+0x60>

00009178 <fclose>:
    9178:	00800074 	movhi	r2,1
    917c:	10804c04 	addi	r2,r2,304
    9180:	200b883a 	mov	r5,r4
    9184:	11000017 	ldw	r4,0(r2)
    9188:	00090681 	jmpi	9068 <_fclose_r>

0000918c <_fstat_r>:
    918c:	defffd04 	addi	sp,sp,-12
    9190:	dc000015 	stw	r16,0(sp)
    9194:	04000074 	movhi	r16,1
    9198:	84070f04 	addi	r16,r16,7228
    919c:	dc400115 	stw	r17,4(sp)
    91a0:	80000015 	stw	zero,0(r16)
    91a4:	2023883a 	mov	r17,r4
    91a8:	2809883a 	mov	r4,r5
    91ac:	300b883a 	mov	r5,r6
    91b0:	dfc00215 	stw	ra,8(sp)
    91b4:	000b82c0 	call	b82c <fstat>
    91b8:	1007883a 	mov	r3,r2
    91bc:	00bfffc4 	movi	r2,-1
    91c0:	18800626 	beq	r3,r2,91dc <_fstat_r+0x50>
    91c4:	1805883a 	mov	r2,r3
    91c8:	dfc00217 	ldw	ra,8(sp)
    91cc:	dc400117 	ldw	r17,4(sp)
    91d0:	dc000017 	ldw	r16,0(sp)
    91d4:	dec00304 	addi	sp,sp,12
    91d8:	f800283a 	ret
    91dc:	80800017 	ldw	r2,0(r16)
    91e0:	103ff826 	beq	r2,zero,91c4 <_fstat_r+0x38>
    91e4:	88800015 	stw	r2,0(r17)
    91e8:	1805883a 	mov	r2,r3
    91ec:	dfc00217 	ldw	ra,8(sp)
    91f0:	dc400117 	ldw	r17,4(sp)
    91f4:	dc000017 	ldw	r16,0(sp)
    91f8:	dec00304 	addi	sp,sp,12
    91fc:	f800283a 	ret

00009200 <_isatty_r>:
    9200:	defffd04 	addi	sp,sp,-12
    9204:	dc000015 	stw	r16,0(sp)
    9208:	04000074 	movhi	r16,1
    920c:	84070f04 	addi	r16,r16,7228
    9210:	dc400115 	stw	r17,4(sp)
    9214:	80000015 	stw	zero,0(r16)
    9218:	2023883a 	mov	r17,r4
    921c:	2809883a 	mov	r4,r5
    9220:	dfc00215 	stw	ra,8(sp)
    9224:	000bb200 	call	bb20 <isatty>
    9228:	1007883a 	mov	r3,r2
    922c:	00bfffc4 	movi	r2,-1
    9230:	18800626 	beq	r3,r2,924c <_isatty_r+0x4c>
    9234:	1805883a 	mov	r2,r3
    9238:	dfc00217 	ldw	ra,8(sp)
    923c:	dc400117 	ldw	r17,4(sp)
    9240:	dc000017 	ldw	r16,0(sp)
    9244:	dec00304 	addi	sp,sp,12
    9248:	f800283a 	ret
    924c:	80800017 	ldw	r2,0(r16)
    9250:	103ff826 	beq	r2,zero,9234 <_isatty_r+0x34>
    9254:	88800015 	stw	r2,0(r17)
    9258:	1805883a 	mov	r2,r3
    925c:	dfc00217 	ldw	ra,8(sp)
    9260:	dc400117 	ldw	r17,4(sp)
    9264:	dc000017 	ldw	r16,0(sp)
    9268:	dec00304 	addi	sp,sp,12
    926c:	f800283a 	ret

00009270 <_lseek_r>:
    9270:	defffd04 	addi	sp,sp,-12
    9274:	dc000015 	stw	r16,0(sp)
    9278:	04000074 	movhi	r16,1
    927c:	84070f04 	addi	r16,r16,7228
    9280:	dc400115 	stw	r17,4(sp)
    9284:	80000015 	stw	zero,0(r16)
    9288:	2023883a 	mov	r17,r4
    928c:	2809883a 	mov	r4,r5
    9290:	300b883a 	mov	r5,r6
    9294:	380d883a 	mov	r6,r7
    9298:	dfc00215 	stw	ra,8(sp)
    929c:	000bd2c0 	call	bd2c <lseek>
    92a0:	1007883a 	mov	r3,r2
    92a4:	00bfffc4 	movi	r2,-1
    92a8:	18800626 	beq	r3,r2,92c4 <_lseek_r+0x54>
    92ac:	1805883a 	mov	r2,r3
    92b0:	dfc00217 	ldw	ra,8(sp)
    92b4:	dc400117 	ldw	r17,4(sp)
    92b8:	dc000017 	ldw	r16,0(sp)
    92bc:	dec00304 	addi	sp,sp,12
    92c0:	f800283a 	ret
    92c4:	80800017 	ldw	r2,0(r16)
    92c8:	103ff826 	beq	r2,zero,92ac <_lseek_r+0x3c>
    92cc:	88800015 	stw	r2,0(r17)
    92d0:	1805883a 	mov	r2,r3
    92d4:	dfc00217 	ldw	ra,8(sp)
    92d8:	dc400117 	ldw	r17,4(sp)
    92dc:	dc000017 	ldw	r16,0(sp)
    92e0:	dec00304 	addi	sp,sp,12
    92e4:	f800283a 	ret

000092e8 <_read_r>:
    92e8:	defffd04 	addi	sp,sp,-12
    92ec:	dc000015 	stw	r16,0(sp)
    92f0:	04000074 	movhi	r16,1
    92f4:	84070f04 	addi	r16,r16,7228
    92f8:	dc400115 	stw	r17,4(sp)
    92fc:	80000015 	stw	zero,0(r16)
    9300:	2023883a 	mov	r17,r4
    9304:	2809883a 	mov	r4,r5
    9308:	300b883a 	mov	r5,r6
    930c:	380d883a 	mov	r6,r7
    9310:	dfc00215 	stw	ra,8(sp)
    9314:	000bf280 	call	bf28 <read>
    9318:	1007883a 	mov	r3,r2
    931c:	00bfffc4 	movi	r2,-1
    9320:	18800626 	beq	r3,r2,933c <_read_r+0x54>
    9324:	1805883a 	mov	r2,r3
    9328:	dfc00217 	ldw	ra,8(sp)
    932c:	dc400117 	ldw	r17,4(sp)
    9330:	dc000017 	ldw	r16,0(sp)
    9334:	dec00304 	addi	sp,sp,12
    9338:	f800283a 	ret
    933c:	80800017 	ldw	r2,0(r16)
    9340:	103ff826 	beq	r2,zero,9324 <_read_r+0x3c>
    9344:	88800015 	stw	r2,0(r17)
    9348:	1805883a 	mov	r2,r3
    934c:	dfc00217 	ldw	ra,8(sp)
    9350:	dc400117 	ldw	r17,4(sp)
    9354:	dc000017 	ldw	r16,0(sp)
    9358:	dec00304 	addi	sp,sp,12
    935c:	f800283a 	ret

00009360 <__udivdi3>:
    9360:	defff004 	addi	sp,sp,-64
    9364:	2005883a 	mov	r2,r4
    9368:	3011883a 	mov	r8,r6
    936c:	df000e15 	stw	fp,56(sp)
    9370:	dd000a15 	stw	r20,40(sp)
    9374:	dc000615 	stw	r16,24(sp)
    9378:	dfc00f15 	stw	ra,60(sp)
    937c:	ddc00d15 	stw	r23,52(sp)
    9380:	dd800c15 	stw	r22,48(sp)
    9384:	dd400b15 	stw	r21,44(sp)
    9388:	dcc00915 	stw	r19,36(sp)
    938c:	dc800815 	stw	r18,32(sp)
    9390:	dc400715 	stw	r17,28(sp)
    9394:	4021883a 	mov	r16,r8
    9398:	1039883a 	mov	fp,r2
    939c:	2829883a 	mov	r20,r5
    93a0:	38003b1e 	bne	r7,zero,9490 <__udivdi3+0x130>
    93a4:	2a005c36 	bltu	r5,r8,9518 <__udivdi3+0x1b8>
    93a8:	4000a626 	beq	r8,zero,9644 <__udivdi3+0x2e4>
    93ac:	00bfffd4 	movui	r2,65535
    93b0:	14009e36 	bltu	r2,r16,962c <__udivdi3+0x2cc>
    93b4:	00803fc4 	movi	r2,255
    93b8:	14013d36 	bltu	r2,r16,98b0 <__udivdi3+0x550>
    93bc:	000b883a 	mov	r5,zero
    93c0:	0005883a 	mov	r2,zero
    93c4:	8084d83a 	srl	r2,r16,r2
    93c8:	01000074 	movhi	r4,1
    93cc:	21396904 	addi	r4,r4,-6748
    93d0:	01800804 	movi	r6,32
    93d4:	1105883a 	add	r2,r2,r4
    93d8:	10c00003 	ldbu	r3,0(r2)
    93dc:	28c7883a 	add	r3,r5,r3
    93e0:	30edc83a 	sub	r22,r6,r3
    93e4:	b000ee1e 	bne	r22,zero,97a0 <__udivdi3+0x440>
    93e8:	802ad43a 	srli	r21,r16,16
    93ec:	00800044 	movi	r2,1
    93f0:	a423c83a 	sub	r17,r20,r16
    93f4:	85ffffcc 	andi	r23,r16,65535
    93f8:	d8800315 	stw	r2,12(sp)
    93fc:	8809883a 	mov	r4,r17
    9400:	a80b883a 	mov	r5,r21
    9404:	0001e280 	call	1e28 <__udivsi3>
    9408:	8809883a 	mov	r4,r17
    940c:	a80b883a 	mov	r5,r21
    9410:	102d883a 	mov	r22,r2
    9414:	0001e300 	call	1e30 <__umodsi3>
    9418:	1004943a 	slli	r2,r2,16
    941c:	e006d43a 	srli	r3,fp,16
    9420:	bda3383a 	mul	r17,r23,r22
    9424:	10c4b03a 	or	r2,r2,r3
    9428:	1440042e 	bgeu	r2,r17,943c <__udivdi3+0xdc>
    942c:	1405883a 	add	r2,r2,r16
    9430:	b5bfffc4 	addi	r22,r22,-1
    9434:	14000136 	bltu	r2,r16,943c <__udivdi3+0xdc>
    9438:	14413d36 	bltu	r2,r17,9930 <__udivdi3+0x5d0>
    943c:	1463c83a 	sub	r17,r2,r17
    9440:	8809883a 	mov	r4,r17
    9444:	a80b883a 	mov	r5,r21
    9448:	0001e280 	call	1e28 <__udivsi3>
    944c:	8809883a 	mov	r4,r17
    9450:	a80b883a 	mov	r5,r21
    9454:	1029883a 	mov	r20,r2
    9458:	0001e300 	call	1e30 <__umodsi3>
    945c:	1004943a 	slli	r2,r2,16
    9460:	bd09383a 	mul	r4,r23,r20
    9464:	e0ffffcc 	andi	r3,fp,65535
    9468:	10c4b03a 	or	r2,r2,r3
    946c:	1100042e 	bgeu	r2,r4,9480 <__udivdi3+0x120>
    9470:	8085883a 	add	r2,r16,r2
    9474:	a53fffc4 	addi	r20,r20,-1
    9478:	14000136 	bltu	r2,r16,9480 <__udivdi3+0x120>
    947c:	11012036 	bltu	r2,r4,9900 <__udivdi3+0x5a0>
    9480:	b004943a 	slli	r2,r22,16
    9484:	d9000317 	ldw	r4,12(sp)
    9488:	a084b03a 	or	r2,r20,r2
    948c:	00001506 	br	94e4 <__udivdi3+0x184>
    9490:	380d883a 	mov	r6,r7
    9494:	29c06236 	bltu	r5,r7,9620 <__udivdi3+0x2c0>
    9498:	00bfffd4 	movui	r2,65535
    949c:	11c05a36 	bltu	r2,r7,9608 <__udivdi3+0x2a8>
    94a0:	00803fc4 	movi	r2,255
    94a4:	11c0fc36 	bltu	r2,r7,9898 <__udivdi3+0x538>
    94a8:	000b883a 	mov	r5,zero
    94ac:	0005883a 	mov	r2,zero
    94b0:	3084d83a 	srl	r2,r6,r2
    94b4:	01000074 	movhi	r4,1
    94b8:	21396904 	addi	r4,r4,-6748
    94bc:	01c00804 	movi	r7,32
    94c0:	1105883a 	add	r2,r2,r4
    94c4:	10c00003 	ldbu	r3,0(r2)
    94c8:	28c7883a 	add	r3,r5,r3
    94cc:	38efc83a 	sub	r23,r7,r3
    94d0:	b800691e 	bne	r23,zero,9678 <__udivdi3+0x318>
    94d4:	35000136 	bltu	r6,r20,94dc <__udivdi3+0x17c>
    94d8:	e4005136 	bltu	fp,r16,9620 <__udivdi3+0x2c0>
    94dc:	00800044 	movi	r2,1
    94e0:	0009883a 	mov	r4,zero
    94e4:	2007883a 	mov	r3,r4
    94e8:	dfc00f17 	ldw	ra,60(sp)
    94ec:	df000e17 	ldw	fp,56(sp)
    94f0:	ddc00d17 	ldw	r23,52(sp)
    94f4:	dd800c17 	ldw	r22,48(sp)
    94f8:	dd400b17 	ldw	r21,44(sp)
    94fc:	dd000a17 	ldw	r20,40(sp)
    9500:	dcc00917 	ldw	r19,36(sp)
    9504:	dc800817 	ldw	r18,32(sp)
    9508:	dc400717 	ldw	r17,28(sp)
    950c:	dc000617 	ldw	r16,24(sp)
    9510:	dec01004 	addi	sp,sp,64
    9514:	f800283a 	ret
    9518:	00bfffd4 	movui	r2,65535
    951c:	12005036 	bltu	r2,r8,9660 <__udivdi3+0x300>
    9520:	00803fc4 	movi	r2,255
    9524:	1200e836 	bltu	r2,r8,98c8 <__udivdi3+0x568>
    9528:	000b883a 	mov	r5,zero
    952c:	0005883a 	mov	r2,zero
    9530:	8084d83a 	srl	r2,r16,r2
    9534:	01000074 	movhi	r4,1
    9538:	21396904 	addi	r4,r4,-6748
    953c:	01800804 	movi	r6,32
    9540:	1105883a 	add	r2,r2,r4
    9544:	10c00003 	ldbu	r3,0(r2)
    9548:	28c7883a 	add	r3,r5,r3
    954c:	30cbc83a 	sub	r5,r6,r3
    9550:	28000626 	beq	r5,zero,956c <__udivdi3+0x20c>
    9554:	3145c83a 	sub	r2,r6,r5
    9558:	e084d83a 	srl	r2,fp,r2
    955c:	a146983a 	sll	r3,r20,r5
    9560:	e178983a 	sll	fp,fp,r5
    9564:	8160983a 	sll	r16,r16,r5
    9568:	18a8b03a 	or	r20,r3,r2
    956c:	802ad43a 	srli	r21,r16,16
    9570:	a009883a 	mov	r4,r20
    9574:	85ffffcc 	andi	r23,r16,65535
    9578:	a80b883a 	mov	r5,r21
    957c:	0001e280 	call	1e28 <__udivsi3>
    9580:	a009883a 	mov	r4,r20
    9584:	a80b883a 	mov	r5,r21
    9588:	102d883a 	mov	r22,r2
    958c:	0001e300 	call	1e30 <__umodsi3>
    9590:	1004943a 	slli	r2,r2,16
    9594:	e006d43a 	srli	r3,fp,16
    9598:	bda3383a 	mul	r17,r23,r22
    959c:	10c4b03a 	or	r2,r2,r3
    95a0:	1440042e 	bgeu	r2,r17,95b4 <__udivdi3+0x254>
    95a4:	1405883a 	add	r2,r2,r16
    95a8:	b5bfffc4 	addi	r22,r22,-1
    95ac:	14000136 	bltu	r2,r16,95b4 <__udivdi3+0x254>
    95b0:	1440d536 	bltu	r2,r17,9908 <__udivdi3+0x5a8>
    95b4:	1463c83a 	sub	r17,r2,r17
    95b8:	8809883a 	mov	r4,r17
    95bc:	a80b883a 	mov	r5,r21
    95c0:	0001e280 	call	1e28 <__udivsi3>
    95c4:	8809883a 	mov	r4,r17
    95c8:	a80b883a 	mov	r5,r21
    95cc:	1029883a 	mov	r20,r2
    95d0:	0001e300 	call	1e30 <__umodsi3>
    95d4:	1004943a 	slli	r2,r2,16
    95d8:	bd09383a 	mul	r4,r23,r20
    95dc:	e0ffffcc 	andi	r3,fp,65535
    95e0:	10c4b03a 	or	r2,r2,r3
    95e4:	1100042e 	bgeu	r2,r4,95f8 <__udivdi3+0x298>
    95e8:	8085883a 	add	r2,r16,r2
    95ec:	a53fffc4 	addi	r20,r20,-1
    95f0:	14000136 	bltu	r2,r16,95f8 <__udivdi3+0x298>
    95f4:	1100c736 	bltu	r2,r4,9914 <__udivdi3+0x5b4>
    95f8:	b004943a 	slli	r2,r22,16
    95fc:	0009883a 	mov	r4,zero
    9600:	a084b03a 	or	r2,r20,r2
    9604:	003fb706 	br	94e4 <__udivdi3+0x184>
    9608:	00804034 	movhi	r2,256
    960c:	10bfffc4 	addi	r2,r2,-1
    9610:	11c0a436 	bltu	r2,r7,98a4 <__udivdi3+0x544>
    9614:	01400404 	movi	r5,16
    9618:	2805883a 	mov	r2,r5
    961c:	003fa406 	br	94b0 <__udivdi3+0x150>
    9620:	0005883a 	mov	r2,zero
    9624:	0009883a 	mov	r4,zero
    9628:	003fae06 	br	94e4 <__udivdi3+0x184>
    962c:	00804034 	movhi	r2,256
    9630:	10bfffc4 	addi	r2,r2,-1
    9634:	1400a136 	bltu	r2,r16,98bc <__udivdi3+0x55c>
    9638:	01400404 	movi	r5,16
    963c:	2805883a 	mov	r2,r5
    9640:	003f6006 	br	93c4 <__udivdi3+0x64>
    9644:	01000044 	movi	r4,1
    9648:	000b883a 	mov	r5,zero
    964c:	0001e280 	call	1e28 <__udivsi3>
    9650:	1021883a 	mov	r16,r2
    9654:	00bfffd4 	movui	r2,65535
    9658:	143ff436 	bltu	r2,r16,962c <__udivdi3+0x2cc>
    965c:	003f5506 	br	93b4 <__udivdi3+0x54>
    9660:	00804034 	movhi	r2,256
    9664:	10bfffc4 	addi	r2,r2,-1
    9668:	12009a36 	bltu	r2,r8,98d4 <__udivdi3+0x574>
    966c:	01400404 	movi	r5,16
    9670:	2805883a 	mov	r2,r5
    9674:	003fae06 	br	9530 <__udivdi3+0x1d0>
    9678:	3dc5c83a 	sub	r2,r7,r23
    967c:	35c8983a 	sll	r4,r6,r23
    9680:	8086d83a 	srl	r3,r16,r2
    9684:	a0a2d83a 	srl	r17,r20,r2
    9688:	e084d83a 	srl	r2,fp,r2
    968c:	20eab03a 	or	r21,r4,r3
    9690:	a82cd43a 	srli	r22,r21,16
    9694:	a5c6983a 	sll	r3,r20,r23
    9698:	8809883a 	mov	r4,r17
    969c:	b00b883a 	mov	r5,r22
    96a0:	1886b03a 	or	r3,r3,r2
    96a4:	d8c00215 	stw	r3,8(sp)
    96a8:	0001e280 	call	1e28 <__udivsi3>
    96ac:	8809883a 	mov	r4,r17
    96b0:	b00b883a 	mov	r5,r22
    96b4:	1029883a 	mov	r20,r2
    96b8:	0001e300 	call	1e30 <__umodsi3>
    96bc:	a8ffffcc 	andi	r3,r21,65535
    96c0:	d8c00515 	stw	r3,20(sp)
    96c4:	d9000217 	ldw	r4,8(sp)
    96c8:	d9400517 	ldw	r5,20(sp)
    96cc:	1004943a 	slli	r2,r2,16
    96d0:	2006d43a 	srli	r3,r4,16
    96d4:	85e0983a 	sll	r16,r16,r23
    96d8:	2d23383a 	mul	r17,r5,r20
    96dc:	10c4b03a 	or	r2,r2,r3
    96e0:	dc000015 	stw	r16,0(sp)
    96e4:	1440032e 	bgeu	r2,r17,96f4 <__udivdi3+0x394>
    96e8:	1545883a 	add	r2,r2,r21
    96ec:	a53fffc4 	addi	r20,r20,-1
    96f0:	15407f2e 	bgeu	r2,r21,98f0 <__udivdi3+0x590>
    96f4:	1463c83a 	sub	r17,r2,r17
    96f8:	8809883a 	mov	r4,r17
    96fc:	b00b883a 	mov	r5,r22
    9700:	0001e280 	call	1e28 <__udivsi3>
    9704:	8809883a 	mov	r4,r17
    9708:	b00b883a 	mov	r5,r22
    970c:	1021883a 	mov	r16,r2
    9710:	0001e300 	call	1e30 <__umodsi3>
    9714:	d8c00517 	ldw	r3,20(sp)
    9718:	d9000217 	ldw	r4,8(sp)
    971c:	1004943a 	slli	r2,r2,16
    9720:	1c0f383a 	mul	r7,r3,r16
    9724:	20ffffcc 	andi	r3,r4,65535
    9728:	10e2b03a 	or	r17,r2,r3
    972c:	89c0032e 	bgeu	r17,r7,973c <__udivdi3+0x3dc>
    9730:	8d63883a 	add	r17,r17,r21
    9734:	843fffc4 	addi	r16,r16,-1
    9738:	8d40692e 	bgeu	r17,r21,98e0 <__udivdi3+0x580>
    973c:	a008943a 	slli	r4,r20,16
    9740:	d9400017 	ldw	r5,0(sp)
    9744:	89e3c83a 	sub	r17,r17,r7
    9748:	8110b03a 	or	r8,r16,r4
    974c:	280cd43a 	srli	r6,r5,16
    9750:	28ffffcc 	andi	r3,r5,65535
    9754:	40bfffcc 	andi	r2,r8,65535
    9758:	400ad43a 	srli	r5,r8,16
    975c:	10d3383a 	mul	r9,r2,r3
    9760:	1185383a 	mul	r2,r2,r6
    9764:	28c7383a 	mul	r3,r5,r3
    9768:	4808d43a 	srli	r4,r9,16
    976c:	298b383a 	mul	r5,r5,r6
    9770:	10c5883a 	add	r2,r2,r3
    9774:	2089883a 	add	r4,r4,r2
    9778:	20c0022e 	bgeu	r4,r3,9784 <__udivdi3+0x424>
    977c:	00800074 	movhi	r2,1
    9780:	288b883a 	add	r5,r5,r2
    9784:	2004d43a 	srli	r2,r4,16
    9788:	288b883a 	add	r5,r5,r2
    978c:	89403f36 	bltu	r17,r5,988c <__udivdi3+0x52c>
    9790:	89403926 	beq	r17,r5,9878 <__udivdi3+0x518>
    9794:	4005883a 	mov	r2,r8
    9798:	0009883a 	mov	r4,zero
    979c:	003f5106 	br	94e4 <__udivdi3+0x184>
    97a0:	85a0983a 	sll	r16,r16,r22
    97a4:	3585c83a 	sub	r2,r6,r22
    97a8:	a0a2d83a 	srl	r17,r20,r2
    97ac:	802ad43a 	srli	r21,r16,16
    97b0:	e084d83a 	srl	r2,fp,r2
    97b4:	a586983a 	sll	r3,r20,r22
    97b8:	8809883a 	mov	r4,r17
    97bc:	a80b883a 	mov	r5,r21
    97c0:	1886b03a 	or	r3,r3,r2
    97c4:	d8c00115 	stw	r3,4(sp)
    97c8:	0001e280 	call	1e28 <__udivsi3>
    97cc:	8809883a 	mov	r4,r17
    97d0:	a80b883a 	mov	r5,r21
    97d4:	d8800415 	stw	r2,16(sp)
    97d8:	0001e300 	call	1e30 <__umodsi3>
    97dc:	d9000117 	ldw	r4,4(sp)
    97e0:	d9400417 	ldw	r5,16(sp)
    97e4:	1004943a 	slli	r2,r2,16
    97e8:	85ffffcc 	andi	r23,r16,65535
    97ec:	2006d43a 	srli	r3,r4,16
    97f0:	b963383a 	mul	r17,r23,r5
    97f4:	10c4b03a 	or	r2,r2,r3
    97f8:	1440042e 	bgeu	r2,r17,980c <__udivdi3+0x4ac>
    97fc:	297fffc4 	addi	r5,r5,-1
    9800:	1405883a 	add	r2,r2,r16
    9804:	d9400415 	stw	r5,16(sp)
    9808:	1400442e 	bgeu	r2,r16,991c <__udivdi3+0x5bc>
    980c:	1463c83a 	sub	r17,r2,r17
    9810:	8809883a 	mov	r4,r17
    9814:	a80b883a 	mov	r5,r21
    9818:	0001e280 	call	1e28 <__udivsi3>
    981c:	8809883a 	mov	r4,r17
    9820:	a80b883a 	mov	r5,r21
    9824:	1029883a 	mov	r20,r2
    9828:	0001e300 	call	1e30 <__umodsi3>
    982c:	d9400117 	ldw	r5,4(sp)
    9830:	1004943a 	slli	r2,r2,16
    9834:	bd09383a 	mul	r4,r23,r20
    9838:	28ffffcc 	andi	r3,r5,65535
    983c:	10c6b03a 	or	r3,r2,r3
    9840:	1900062e 	bgeu	r3,r4,985c <__udivdi3+0x4fc>
    9844:	1c07883a 	add	r3,r3,r16
    9848:	a53fffc4 	addi	r20,r20,-1
    984c:	1c000336 	bltu	r3,r16,985c <__udivdi3+0x4fc>
    9850:	1900022e 	bgeu	r3,r4,985c <__udivdi3+0x4fc>
    9854:	a53fffc4 	addi	r20,r20,-1
    9858:	1c07883a 	add	r3,r3,r16
    985c:	d9400417 	ldw	r5,16(sp)
    9860:	e5b8983a 	sll	fp,fp,r22
    9864:	1923c83a 	sub	r17,r3,r4
    9868:	2804943a 	slli	r2,r5,16
    986c:	a0a8b03a 	or	r20,r20,r2
    9870:	dd000315 	stw	r20,12(sp)
    9874:	003ee106 	br	93fc <__udivdi3+0x9c>
    9878:	2004943a 	slli	r2,r4,16
    987c:	e5c8983a 	sll	r4,fp,r23
    9880:	48ffffcc 	andi	r3,r9,65535
    9884:	10c5883a 	add	r2,r2,r3
    9888:	20bfc22e 	bgeu	r4,r2,9794 <__udivdi3+0x434>
    988c:	40bfffc4 	addi	r2,r8,-1
    9890:	0009883a 	mov	r4,zero
    9894:	003f1306 	br	94e4 <__udivdi3+0x184>
    9898:	01400204 	movi	r5,8
    989c:	2805883a 	mov	r2,r5
    98a0:	003f0306 	br	94b0 <__udivdi3+0x150>
    98a4:	01400604 	movi	r5,24
    98a8:	2805883a 	mov	r2,r5
    98ac:	003f0006 	br	94b0 <__udivdi3+0x150>
    98b0:	01400204 	movi	r5,8
    98b4:	2805883a 	mov	r2,r5
    98b8:	003ec206 	br	93c4 <__udivdi3+0x64>
    98bc:	01400604 	movi	r5,24
    98c0:	2805883a 	mov	r2,r5
    98c4:	003ebf06 	br	93c4 <__udivdi3+0x64>
    98c8:	01400204 	movi	r5,8
    98cc:	2805883a 	mov	r2,r5
    98d0:	003f1706 	br	9530 <__udivdi3+0x1d0>
    98d4:	01400604 	movi	r5,24
    98d8:	2805883a 	mov	r2,r5
    98dc:	003f1406 	br	9530 <__udivdi3+0x1d0>
    98e0:	89ff962e 	bgeu	r17,r7,973c <__udivdi3+0x3dc>
    98e4:	8d63883a 	add	r17,r17,r21
    98e8:	843fffc4 	addi	r16,r16,-1
    98ec:	003f9306 	br	973c <__udivdi3+0x3dc>
    98f0:	147f802e 	bgeu	r2,r17,96f4 <__udivdi3+0x394>
    98f4:	a53fffc4 	addi	r20,r20,-1
    98f8:	1545883a 	add	r2,r2,r21
    98fc:	003f7d06 	br	96f4 <__udivdi3+0x394>
    9900:	a53fffc4 	addi	r20,r20,-1
    9904:	003ede06 	br	9480 <__udivdi3+0x120>
    9908:	b5bfffc4 	addi	r22,r22,-1
    990c:	1405883a 	add	r2,r2,r16
    9910:	003f2806 	br	95b4 <__udivdi3+0x254>
    9914:	a53fffc4 	addi	r20,r20,-1
    9918:	003f3706 	br	95f8 <__udivdi3+0x298>
    991c:	147fbb2e 	bgeu	r2,r17,980c <__udivdi3+0x4ac>
    9920:	297fffc4 	addi	r5,r5,-1
    9924:	1405883a 	add	r2,r2,r16
    9928:	d9400415 	stw	r5,16(sp)
    992c:	003fb706 	br	980c <__udivdi3+0x4ac>
    9930:	b5bfffc4 	addi	r22,r22,-1
    9934:	1405883a 	add	r2,r2,r16
    9938:	003ec006 	br	943c <__udivdi3+0xdc>

0000993c <__umoddi3>:
    993c:	defff104 	addi	sp,sp,-60
    9940:	dd800b15 	stw	r22,44(sp)
    9944:	dd000915 	stw	r20,36(sp)
    9948:	dc000515 	stw	r16,20(sp)
    994c:	dfc00e15 	stw	ra,56(sp)
    9950:	df000d15 	stw	fp,52(sp)
    9954:	ddc00c15 	stw	r23,48(sp)
    9958:	dd400a15 	stw	r21,40(sp)
    995c:	dcc00815 	stw	r19,32(sp)
    9960:	dc800715 	stw	r18,28(sp)
    9964:	dc400615 	stw	r17,24(sp)
    9968:	3021883a 	mov	r16,r6
    996c:	202d883a 	mov	r22,r4
    9970:	2829883a 	mov	r20,r5
    9974:	38002b1e 	bne	r7,zero,9a24 <__umoddi3+0xe8>
    9978:	29805036 	bltu	r5,r6,9abc <__umoddi3+0x180>
    997c:	30008a26 	beq	r6,zero,9ba8 <__umoddi3+0x26c>
    9980:	00bfffd4 	movui	r2,65535
    9984:	14008236 	bltu	r2,r16,9b90 <__umoddi3+0x254>
    9988:	00803fc4 	movi	r2,255
    998c:	14013636 	bltu	r2,r16,9e68 <__umoddi3+0x52c>
    9990:	000b883a 	mov	r5,zero
    9994:	0005883a 	mov	r2,zero
    9998:	8084d83a 	srl	r2,r16,r2
    999c:	01000074 	movhi	r4,1
    99a0:	21396904 	addi	r4,r4,-6748
    99a4:	01800804 	movi	r6,32
    99a8:	1105883a 	add	r2,r2,r4
    99ac:	10c00003 	ldbu	r3,0(r2)
    99b0:	28c7883a 	add	r3,r5,r3
    99b4:	30efc83a 	sub	r23,r6,r3
    99b8:	b800941e 	bne	r23,zero,9c0c <__umoddi3+0x2d0>
    99bc:	802ad43a 	srli	r21,r16,16
    99c0:	a423c83a 	sub	r17,r20,r16
    99c4:	0039883a 	mov	fp,zero
    99c8:	853fffcc 	andi	r20,r16,65535
    99cc:	8809883a 	mov	r4,r17
    99d0:	a80b883a 	mov	r5,r21
    99d4:	0001e280 	call	1e28 <__udivsi3>
    99d8:	8809883a 	mov	r4,r17
    99dc:	a80b883a 	mov	r5,r21
    99e0:	a0a3383a 	mul	r17,r20,r2
    99e4:	0001e300 	call	1e30 <__umodsi3>
    99e8:	1004943a 	slli	r2,r2,16
    99ec:	b006d43a 	srli	r3,r22,16
    99f0:	10c4b03a 	or	r2,r2,r3
    99f4:	1440032e 	bgeu	r2,r17,9a04 <__umoddi3+0xc8>
    99f8:	1405883a 	add	r2,r2,r16
    99fc:	14000136 	bltu	r2,r16,9a04 <__umoddi3+0xc8>
    9a00:	14413536 	bltu	r2,r17,9ed8 <__umoddi3+0x59c>
    9a04:	1463c83a 	sub	r17,r2,r17
    9a08:	8809883a 	mov	r4,r17
    9a0c:	a80b883a 	mov	r5,r21
    9a10:	0001e280 	call	1e28 <__udivsi3>
    9a14:	8809883a 	mov	r4,r17
    9a18:	a0a3383a 	mul	r17,r20,r2
    9a1c:	a80b883a 	mov	r5,r21
    9a20:	00004d06 	br	9b58 <__umoddi3+0x21c>
    9a24:	380d883a 	mov	r6,r7
    9a28:	29c0102e 	bgeu	r5,r7,9a6c <__umoddi3+0x130>
    9a2c:	2011883a 	mov	r8,r4
    9a30:	2813883a 	mov	r9,r5
    9a34:	4005883a 	mov	r2,r8
    9a38:	4807883a 	mov	r3,r9
    9a3c:	dfc00e17 	ldw	ra,56(sp)
    9a40:	df000d17 	ldw	fp,52(sp)
    9a44:	ddc00c17 	ldw	r23,48(sp)
    9a48:	dd800b17 	ldw	r22,44(sp)
    9a4c:	dd400a17 	ldw	r21,40(sp)
    9a50:	dd000917 	ldw	r20,36(sp)
    9a54:	dcc00817 	ldw	r19,32(sp)
    9a58:	dc800717 	ldw	r18,28(sp)
    9a5c:	dc400617 	ldw	r17,24(sp)
    9a60:	dc000517 	ldw	r16,20(sp)
    9a64:	dec00f04 	addi	sp,sp,60
    9a68:	f800283a 	ret
    9a6c:	00bfffd4 	movui	r2,65535
    9a70:	11c05a36 	bltu	r2,r7,9bdc <__umoddi3+0x2a0>
    9a74:	00803fc4 	movi	r2,255
    9a78:	11c0fe36 	bltu	r2,r7,9e74 <__umoddi3+0x538>
    9a7c:	000b883a 	mov	r5,zero
    9a80:	0005883a 	mov	r2,zero
    9a84:	3084d83a 	srl	r2,r6,r2
    9a88:	01000074 	movhi	r4,1
    9a8c:	21396904 	addi	r4,r4,-6748
    9a90:	01c00804 	movi	r7,32
    9a94:	1105883a 	add	r2,r2,r4
    9a98:	10c00003 	ldbu	r3,0(r2)
    9a9c:	28c7883a 	add	r3,r5,r3
    9aa0:	38ebc83a 	sub	r21,r7,r3
    9aa4:	a800851e 	bne	r21,zero,9cbc <__umoddi3+0x380>
    9aa8:	35005236 	bltu	r6,r20,9bf4 <__umoddi3+0x2b8>
    9aac:	b400512e 	bgeu	r22,r16,9bf4 <__umoddi3+0x2b8>
    9ab0:	b011883a 	mov	r8,r22
    9ab4:	a013883a 	mov	r9,r20
    9ab8:	003fde06 	br	9a34 <__umoddi3+0xf8>
    9abc:	00bfffd4 	movui	r2,65535
    9ac0:	11804036 	bltu	r2,r6,9bc4 <__umoddi3+0x288>
    9ac4:	00803fc4 	movi	r2,255
    9ac8:	1180ed36 	bltu	r2,r6,9e80 <__umoddi3+0x544>
    9acc:	000b883a 	mov	r5,zero
    9ad0:	0005883a 	mov	r2,zero
    9ad4:	8084d83a 	srl	r2,r16,r2
    9ad8:	01000074 	movhi	r4,1
    9adc:	21396904 	addi	r4,r4,-6748
    9ae0:	01800804 	movi	r6,32
    9ae4:	1105883a 	add	r2,r2,r4
    9ae8:	10c00003 	ldbu	r3,0(r2)
    9aec:	28c7883a 	add	r3,r5,r3
    9af0:	30c7c83a 	sub	r3,r6,r3
    9af4:	1800bf1e 	bne	r3,zero,9df4 <__umoddi3+0x4b8>
    9af8:	0039883a 	mov	fp,zero
    9afc:	802ad43a 	srli	r21,r16,16
    9b00:	a009883a 	mov	r4,r20
    9b04:	85ffffcc 	andi	r23,r16,65535
    9b08:	a80b883a 	mov	r5,r21
    9b0c:	0001e280 	call	1e28 <__udivsi3>
    9b10:	a009883a 	mov	r4,r20
    9b14:	a80b883a 	mov	r5,r21
    9b18:	b8a3383a 	mul	r17,r23,r2
    9b1c:	0001e300 	call	1e30 <__umodsi3>
    9b20:	1004943a 	slli	r2,r2,16
    9b24:	b006d43a 	srli	r3,r22,16
    9b28:	10c4b03a 	or	r2,r2,r3
    9b2c:	1440032e 	bgeu	r2,r17,9b3c <__umoddi3+0x200>
    9b30:	1405883a 	add	r2,r2,r16
    9b34:	14000136 	bltu	r2,r16,9b3c <__umoddi3+0x200>
    9b38:	1440e536 	bltu	r2,r17,9ed0 <__umoddi3+0x594>
    9b3c:	1463c83a 	sub	r17,r2,r17
    9b40:	8809883a 	mov	r4,r17
    9b44:	a80b883a 	mov	r5,r21
    9b48:	0001e280 	call	1e28 <__udivsi3>
    9b4c:	8809883a 	mov	r4,r17
    9b50:	b8a3383a 	mul	r17,r23,r2
    9b54:	a80b883a 	mov	r5,r21
    9b58:	0001e300 	call	1e30 <__umodsi3>
    9b5c:	1004943a 	slli	r2,r2,16
    9b60:	b0ffffcc 	andi	r3,r22,65535
    9b64:	10c4b03a 	or	r2,r2,r3
    9b68:	1440042e 	bgeu	r2,r17,9b7c <__umoddi3+0x240>
    9b6c:	1405883a 	add	r2,r2,r16
    9b70:	14000236 	bltu	r2,r16,9b7c <__umoddi3+0x240>
    9b74:	1440012e 	bgeu	r2,r17,9b7c <__umoddi3+0x240>
    9b78:	1405883a 	add	r2,r2,r16
    9b7c:	1445c83a 	sub	r2,r2,r17
    9b80:	1724d83a 	srl	r18,r2,fp
    9b84:	0013883a 	mov	r9,zero
    9b88:	9011883a 	mov	r8,r18
    9b8c:	003fa906 	br	9a34 <__umoddi3+0xf8>
    9b90:	00804034 	movhi	r2,256
    9b94:	10bfffc4 	addi	r2,r2,-1
    9b98:	1400b036 	bltu	r2,r16,9e5c <__umoddi3+0x520>
    9b9c:	01400404 	movi	r5,16
    9ba0:	2805883a 	mov	r2,r5
    9ba4:	003f7c06 	br	9998 <__umoddi3+0x5c>
    9ba8:	01000044 	movi	r4,1
    9bac:	000b883a 	mov	r5,zero
    9bb0:	0001e280 	call	1e28 <__udivsi3>
    9bb4:	1021883a 	mov	r16,r2
    9bb8:	00bfffd4 	movui	r2,65535
    9bbc:	143ff436 	bltu	r2,r16,9b90 <__umoddi3+0x254>
    9bc0:	003f7106 	br	9988 <__umoddi3+0x4c>
    9bc4:	00804034 	movhi	r2,256
    9bc8:	10bfffc4 	addi	r2,r2,-1
    9bcc:	1180af36 	bltu	r2,r6,9e8c <__umoddi3+0x550>
    9bd0:	01400404 	movi	r5,16
    9bd4:	2805883a 	mov	r2,r5
    9bd8:	003fbe06 	br	9ad4 <__umoddi3+0x198>
    9bdc:	00804034 	movhi	r2,256
    9be0:	10bfffc4 	addi	r2,r2,-1
    9be4:	11c0ac36 	bltu	r2,r7,9e98 <__umoddi3+0x55c>
    9be8:	01400404 	movi	r5,16
    9bec:	2805883a 	mov	r2,r5
    9bf0:	003fa406 	br	9a84 <__umoddi3+0x148>
    9bf4:	b409c83a 	sub	r4,r22,r16
    9bf8:	b105803a 	cmpltu	r2,r22,r4
    9bfc:	a187c83a 	sub	r3,r20,r6
    9c00:	18a9c83a 	sub	r20,r3,r2
    9c04:	202d883a 	mov	r22,r4
    9c08:	003fa906 	br	9ab0 <__umoddi3+0x174>
    9c0c:	85e0983a 	sll	r16,r16,r23
    9c10:	35c5c83a 	sub	r2,r6,r23
    9c14:	a0a2d83a 	srl	r17,r20,r2
    9c18:	802ad43a 	srli	r21,r16,16
    9c1c:	b084d83a 	srl	r2,r22,r2
    9c20:	a5c6983a 	sll	r3,r20,r23
    9c24:	8809883a 	mov	r4,r17
    9c28:	a80b883a 	mov	r5,r21
    9c2c:	1886b03a 	or	r3,r3,r2
    9c30:	d8c00115 	stw	r3,4(sp)
    9c34:	853fffcc 	andi	r20,r16,65535
    9c38:	0001e280 	call	1e28 <__udivsi3>
    9c3c:	8809883a 	mov	r4,r17
    9c40:	a80b883a 	mov	r5,r21
    9c44:	a0a3383a 	mul	r17,r20,r2
    9c48:	0001e300 	call	1e30 <__umodsi3>
    9c4c:	d9000117 	ldw	r4,4(sp)
    9c50:	1004943a 	slli	r2,r2,16
    9c54:	b839883a 	mov	fp,r23
    9c58:	2006d43a 	srli	r3,r4,16
    9c5c:	10c4b03a 	or	r2,r2,r3
    9c60:	1440022e 	bgeu	r2,r17,9c6c <__umoddi3+0x330>
    9c64:	1405883a 	add	r2,r2,r16
    9c68:	1400962e 	bgeu	r2,r16,9ec4 <__umoddi3+0x588>
    9c6c:	1463c83a 	sub	r17,r2,r17
    9c70:	8809883a 	mov	r4,r17
    9c74:	a80b883a 	mov	r5,r21
    9c78:	0001e280 	call	1e28 <__udivsi3>
    9c7c:	8809883a 	mov	r4,r17
    9c80:	a80b883a 	mov	r5,r21
    9c84:	a0a3383a 	mul	r17,r20,r2
    9c88:	0001e300 	call	1e30 <__umodsi3>
    9c8c:	d9400117 	ldw	r5,4(sp)
    9c90:	1004943a 	slli	r2,r2,16
    9c94:	28ffffcc 	andi	r3,r5,65535
    9c98:	10c4b03a 	or	r2,r2,r3
    9c9c:	1440042e 	bgeu	r2,r17,9cb0 <__umoddi3+0x374>
    9ca0:	1405883a 	add	r2,r2,r16
    9ca4:	14000236 	bltu	r2,r16,9cb0 <__umoddi3+0x374>
    9ca8:	1440012e 	bgeu	r2,r17,9cb0 <__umoddi3+0x374>
    9cac:	1405883a 	add	r2,r2,r16
    9cb0:	b5ec983a 	sll	r22,r22,r23
    9cb4:	1463c83a 	sub	r17,r2,r17
    9cb8:	003f4406 	br	99cc <__umoddi3+0x90>
    9cbc:	3d4fc83a 	sub	r7,r7,r21
    9cc0:	3546983a 	sll	r3,r6,r21
    9cc4:	81c4d83a 	srl	r2,r16,r7
    9cc8:	a1e2d83a 	srl	r17,r20,r7
    9ccc:	a54c983a 	sll	r6,r20,r21
    9cd0:	18aeb03a 	or	r23,r3,r2
    9cd4:	b828d43a 	srli	r20,r23,16
    9cd8:	b1c4d83a 	srl	r2,r22,r7
    9cdc:	8809883a 	mov	r4,r17
    9ce0:	a00b883a 	mov	r5,r20
    9ce4:	308cb03a 	or	r6,r6,r2
    9ce8:	d9c00315 	stw	r7,12(sp)
    9cec:	d9800215 	stw	r6,8(sp)
    9cf0:	0001e280 	call	1e28 <__udivsi3>
    9cf4:	8809883a 	mov	r4,r17
    9cf8:	a00b883a 	mov	r5,r20
    9cfc:	1039883a 	mov	fp,r2
    9d00:	0001e300 	call	1e30 <__umodsi3>
    9d04:	b8ffffcc 	andi	r3,r23,65535
    9d08:	d8c00415 	stw	r3,16(sp)
    9d0c:	d9000217 	ldw	r4,8(sp)
    9d10:	d9400417 	ldw	r5,16(sp)
    9d14:	1004943a 	slli	r2,r2,16
    9d18:	2006d43a 	srli	r3,r4,16
    9d1c:	8560983a 	sll	r16,r16,r21
    9d20:	2f23383a 	mul	r17,r5,fp
    9d24:	10c4b03a 	or	r2,r2,r3
    9d28:	dc000015 	stw	r16,0(sp)
    9d2c:	b56c983a 	sll	r22,r22,r21
    9d30:	1440032e 	bgeu	r2,r17,9d40 <__umoddi3+0x404>
    9d34:	15c5883a 	add	r2,r2,r23
    9d38:	e73fffc4 	addi	fp,fp,-1
    9d3c:	15c05d2e 	bgeu	r2,r23,9eb4 <__umoddi3+0x578>
    9d40:	1463c83a 	sub	r17,r2,r17
    9d44:	8809883a 	mov	r4,r17
    9d48:	a00b883a 	mov	r5,r20
    9d4c:	0001e280 	call	1e28 <__udivsi3>
    9d50:	8809883a 	mov	r4,r17
    9d54:	a00b883a 	mov	r5,r20
    9d58:	1021883a 	mov	r16,r2
    9d5c:	0001e300 	call	1e30 <__umodsi3>
    9d60:	d8c00417 	ldw	r3,16(sp)
    9d64:	d9000217 	ldw	r4,8(sp)
    9d68:	1004943a 	slli	r2,r2,16
    9d6c:	1c23383a 	mul	r17,r3,r16
    9d70:	20ffffcc 	andi	r3,r4,65535
    9d74:	10ceb03a 	or	r7,r2,r3
    9d78:	3c40032e 	bgeu	r7,r17,9d88 <__umoddi3+0x44c>
    9d7c:	3dcf883a 	add	r7,r7,r23
    9d80:	843fffc4 	addi	r16,r16,-1
    9d84:	3dc0472e 	bgeu	r7,r23,9ea4 <__umoddi3+0x568>
    9d88:	e004943a 	slli	r2,fp,16
    9d8c:	d9400017 	ldw	r5,0(sp)
    9d90:	3c4fc83a 	sub	r7,r7,r17
    9d94:	8084b03a 	or	r2,r16,r2
    9d98:	28ffffcc 	andi	r3,r5,65535
    9d9c:	280cd43a 	srli	r6,r5,16
    9da0:	100ad43a 	srli	r5,r2,16
    9da4:	10bfffcc 	andi	r2,r2,65535
    9da8:	10d1383a 	mul	r8,r2,r3
    9dac:	28c7383a 	mul	r3,r5,r3
    9db0:	1185383a 	mul	r2,r2,r6
    9db4:	4008d43a 	srli	r4,r8,16
    9db8:	298b383a 	mul	r5,r5,r6
    9dbc:	10c5883a 	add	r2,r2,r3
    9dc0:	2089883a 	add	r4,r4,r2
    9dc4:	20c0022e 	bgeu	r4,r3,9dd0 <__umoddi3+0x494>
    9dc8:	00800074 	movhi	r2,1
    9dcc:	288b883a 	add	r5,r5,r2
    9dd0:	2004d43a 	srli	r2,r4,16
    9dd4:	2008943a 	slli	r4,r4,16
    9dd8:	40ffffcc 	andi	r3,r8,65535
    9ddc:	288b883a 	add	r5,r5,r2
    9de0:	20c9883a 	add	r4,r4,r3
    9de4:	39400b36 	bltu	r7,r5,9e14 <__umoddi3+0x4d8>
    9de8:	39403d26 	beq	r7,r5,9ee0 <__umoddi3+0x5a4>
    9dec:	394bc83a 	sub	r5,r7,r5
    9df0:	00000f06 	br	9e30 <__umoddi3+0x4f4>
    9df4:	30c5c83a 	sub	r2,r6,r3
    9df8:	1839883a 	mov	fp,r3
    9dfc:	b084d83a 	srl	r2,r22,r2
    9e00:	a0c6983a 	sll	r3,r20,r3
    9e04:	8720983a 	sll	r16,r16,fp
    9e08:	b72c983a 	sll	r22,r22,fp
    9e0c:	18a8b03a 	or	r20,r3,r2
    9e10:	003f3a06 	br	9afc <__umoddi3+0x1c0>
    9e14:	d8c00017 	ldw	r3,0(sp)
    9e18:	20c5c83a 	sub	r2,r4,r3
    9e1c:	2089803a 	cmpltu	r4,r4,r2
    9e20:	2dc7c83a 	sub	r3,r5,r23
    9e24:	1907c83a 	sub	r3,r3,r4
    9e28:	38cbc83a 	sub	r5,r7,r3
    9e2c:	1009883a 	mov	r4,r2
    9e30:	b105c83a 	sub	r2,r22,r4
    9e34:	b087803a 	cmpltu	r3,r22,r2
    9e38:	28c7c83a 	sub	r3,r5,r3
    9e3c:	d9400317 	ldw	r5,12(sp)
    9e40:	1544d83a 	srl	r2,r2,r21
    9e44:	1948983a 	sll	r4,r3,r5
    9e48:	1d46d83a 	srl	r3,r3,r21
    9e4c:	20a4b03a 	or	r18,r4,r2
    9e50:	9011883a 	mov	r8,r18
    9e54:	1813883a 	mov	r9,r3
    9e58:	003ef606 	br	9a34 <__umoddi3+0xf8>
    9e5c:	01400604 	movi	r5,24
    9e60:	2805883a 	mov	r2,r5
    9e64:	003ecc06 	br	9998 <__umoddi3+0x5c>
    9e68:	01400204 	movi	r5,8
    9e6c:	2805883a 	mov	r2,r5
    9e70:	003ec906 	br	9998 <__umoddi3+0x5c>
    9e74:	01400204 	movi	r5,8
    9e78:	2805883a 	mov	r2,r5
    9e7c:	003f0106 	br	9a84 <__umoddi3+0x148>
    9e80:	01400204 	movi	r5,8
    9e84:	2805883a 	mov	r2,r5
    9e88:	003f1206 	br	9ad4 <__umoddi3+0x198>
    9e8c:	01400604 	movi	r5,24
    9e90:	2805883a 	mov	r2,r5
    9e94:	003f0f06 	br	9ad4 <__umoddi3+0x198>
    9e98:	01400604 	movi	r5,24
    9e9c:	2805883a 	mov	r2,r5
    9ea0:	003ef806 	br	9a84 <__umoddi3+0x148>
    9ea4:	3c7fb82e 	bgeu	r7,r17,9d88 <__umoddi3+0x44c>
    9ea8:	843fffc4 	addi	r16,r16,-1
    9eac:	3dcf883a 	add	r7,r7,r23
    9eb0:	003fb506 	br	9d88 <__umoddi3+0x44c>
    9eb4:	147fa22e 	bgeu	r2,r17,9d40 <__umoddi3+0x404>
    9eb8:	e73fffc4 	addi	fp,fp,-1
    9ebc:	15c5883a 	add	r2,r2,r23
    9ec0:	003f9f06 	br	9d40 <__umoddi3+0x404>
    9ec4:	147f692e 	bgeu	r2,r17,9c6c <__umoddi3+0x330>
    9ec8:	1405883a 	add	r2,r2,r16
    9ecc:	003f6706 	br	9c6c <__umoddi3+0x330>
    9ed0:	1405883a 	add	r2,r2,r16
    9ed4:	003f1906 	br	9b3c <__umoddi3+0x200>
    9ed8:	1405883a 	add	r2,r2,r16
    9edc:	003ec906 	br	9a04 <__umoddi3+0xc8>
    9ee0:	b13fcc36 	bltu	r22,r4,9e14 <__umoddi3+0x4d8>
    9ee4:	000b883a 	mov	r5,zero
    9ee8:	003fd106 	br	9e30 <__umoddi3+0x4f4>

00009eec <_fpadd_parts>:
    9eec:	defff804 	addi	sp,sp,-32
    9ef0:	dcc00315 	stw	r19,12(sp)
    9ef4:	2027883a 	mov	r19,r4
    9ef8:	21000017 	ldw	r4,0(r4)
    9efc:	00c00044 	movi	r3,1
    9f00:	dd400515 	stw	r21,20(sp)
    9f04:	dd000415 	stw	r20,16(sp)
    9f08:	ddc00715 	stw	r23,28(sp)
    9f0c:	dd800615 	stw	r22,24(sp)
    9f10:	dc800215 	stw	r18,8(sp)
    9f14:	dc400115 	stw	r17,4(sp)
    9f18:	dc000015 	stw	r16,0(sp)
    9f1c:	282b883a 	mov	r21,r5
    9f20:	3029883a 	mov	r20,r6
    9f24:	1900632e 	bgeu	r3,r4,a0b4 <_fpadd_parts+0x1c8>
    9f28:	28800017 	ldw	r2,0(r5)
    9f2c:	1880812e 	bgeu	r3,r2,a134 <_fpadd_parts+0x248>
    9f30:	00c00104 	movi	r3,4
    9f34:	20c0dc26 	beq	r4,r3,a2a8 <_fpadd_parts+0x3bc>
    9f38:	10c07e26 	beq	r2,r3,a134 <_fpadd_parts+0x248>
    9f3c:	00c00084 	movi	r3,2
    9f40:	10c06726 	beq	r2,r3,a0e0 <_fpadd_parts+0x1f4>
    9f44:	20c07b26 	beq	r4,r3,a134 <_fpadd_parts+0x248>
    9f48:	9dc00217 	ldw	r23,8(r19)
    9f4c:	28c00217 	ldw	r3,8(r5)
    9f50:	9c400317 	ldw	r17,12(r19)
    9f54:	2bc00317 	ldw	r15,12(r5)
    9f58:	b8cdc83a 	sub	r6,r23,r3
    9f5c:	9c800417 	ldw	r18,16(r19)
    9f60:	2c000417 	ldw	r16,16(r5)
    9f64:	3009883a 	mov	r4,r6
    9f68:	30009716 	blt	r6,zero,a1c8 <_fpadd_parts+0x2dc>
    9f6c:	00800fc4 	movi	r2,63
    9f70:	11806b16 	blt	r2,r6,a120 <_fpadd_parts+0x234>
    9f74:	0100a40e 	bge	zero,r4,a208 <_fpadd_parts+0x31c>
    9f78:	35bff804 	addi	r22,r6,-32
    9f7c:	b000bc16 	blt	r22,zero,a270 <_fpadd_parts+0x384>
    9f80:	8596d83a 	srl	r11,r16,r22
    9f84:	0019883a 	mov	r12,zero
    9f88:	0013883a 	mov	r9,zero
    9f8c:	01000044 	movi	r4,1
    9f90:	0015883a 	mov	r10,zero
    9f94:	b000be16 	blt	r22,zero,a290 <_fpadd_parts+0x3a4>
    9f98:	2590983a 	sll	r8,r4,r22
    9f9c:	000f883a 	mov	r7,zero
    9fa0:	00bfffc4 	movi	r2,-1
    9fa4:	3889883a 	add	r4,r7,r2
    9fa8:	408b883a 	add	r5,r8,r2
    9fac:	21cd803a 	cmpltu	r6,r4,r7
    9fb0:	314b883a 	add	r5,r6,r5
    9fb4:	7904703a 	and	r2,r15,r4
    9fb8:	8146703a 	and	r3,r16,r5
    9fbc:	10c4b03a 	or	r2,r2,r3
    9fc0:	10000226 	beq	r2,zero,9fcc <_fpadd_parts+0xe0>
    9fc4:	02400044 	movi	r9,1
    9fc8:	0015883a 	mov	r10,zero
    9fcc:	5a5eb03a 	or	r15,r11,r9
    9fd0:	62a0b03a 	or	r16,r12,r10
    9fd4:	99400117 	ldw	r5,4(r19)
    9fd8:	a8800117 	ldw	r2,4(r21)
    9fdc:	28806e26 	beq	r5,r2,a198 <_fpadd_parts+0x2ac>
    9fe0:	28006626 	beq	r5,zero,a17c <_fpadd_parts+0x290>
    9fe4:	7c45c83a 	sub	r2,r15,r17
    9fe8:	7889803a 	cmpltu	r4,r15,r2
    9fec:	8487c83a 	sub	r3,r16,r18
    9ff0:	1909c83a 	sub	r4,r3,r4
    9ff4:	100d883a 	mov	r6,r2
    9ff8:	200f883a 	mov	r7,r4
    9ffc:	38007716 	blt	r7,zero,a1dc <_fpadd_parts+0x2f0>
    a000:	a5c00215 	stw	r23,8(r20)
    a004:	a1c00415 	stw	r7,16(r20)
    a008:	a0000115 	stw	zero,4(r20)
    a00c:	a1800315 	stw	r6,12(r20)
    a010:	a2000317 	ldw	r8,12(r20)
    a014:	a2400417 	ldw	r9,16(r20)
    a018:	00bfffc4 	movi	r2,-1
    a01c:	408b883a 	add	r5,r8,r2
    a020:	2a09803a 	cmpltu	r4,r5,r8
    a024:	488d883a 	add	r6,r9,r2
    a028:	01c40034 	movhi	r7,4096
    a02c:	39ffffc4 	addi	r7,r7,-1
    a030:	218d883a 	add	r6,r4,r6
    a034:	39801736 	bltu	r7,r6,a094 <_fpadd_parts+0x1a8>
    a038:	31c06526 	beq	r6,r7,a1d0 <_fpadd_parts+0x2e4>
    a03c:	a3000217 	ldw	r12,8(r20)
    a040:	4209883a 	add	r4,r8,r8
    a044:	00bfffc4 	movi	r2,-1
    a048:	220f803a 	cmpltu	r7,r4,r8
    a04c:	4a4b883a 	add	r5,r9,r9
    a050:	394f883a 	add	r7,r7,r5
    a054:	2095883a 	add	r10,r4,r2
    a058:	3897883a 	add	r11,r7,r2
    a05c:	510d803a 	cmpltu	r6,r10,r4
    a060:	6099883a 	add	r12,r12,r2
    a064:	32d7883a 	add	r11,r6,r11
    a068:	00840034 	movhi	r2,4096
    a06c:	10bfffc4 	addi	r2,r2,-1
    a070:	2011883a 	mov	r8,r4
    a074:	3813883a 	mov	r9,r7
    a078:	a1000315 	stw	r4,12(r20)
    a07c:	a1c00415 	stw	r7,16(r20)
    a080:	a3000215 	stw	r12,8(r20)
    a084:	12c00336 	bltu	r2,r11,a094 <_fpadd_parts+0x1a8>
    a088:	58bfed1e 	bne	r11,r2,a040 <_fpadd_parts+0x154>
    a08c:	00bfff84 	movi	r2,-2
    a090:	12bfeb2e 	bgeu	r2,r10,a040 <_fpadd_parts+0x154>
    a094:	a2800417 	ldw	r10,16(r20)
    a098:	008000c4 	movi	r2,3
    a09c:	00c80034 	movhi	r3,8192
    a0a0:	18ffffc4 	addi	r3,r3,-1
    a0a4:	a2400317 	ldw	r9,12(r20)
    a0a8:	a0800015 	stw	r2,0(r20)
    a0ac:	1a802336 	bltu	r3,r10,a13c <_fpadd_parts+0x250>
    a0b0:	a027883a 	mov	r19,r20
    a0b4:	9805883a 	mov	r2,r19
    a0b8:	ddc00717 	ldw	r23,28(sp)
    a0bc:	dd800617 	ldw	r22,24(sp)
    a0c0:	dd400517 	ldw	r21,20(sp)
    a0c4:	dd000417 	ldw	r20,16(sp)
    a0c8:	dcc00317 	ldw	r19,12(sp)
    a0cc:	dc800217 	ldw	r18,8(sp)
    a0d0:	dc400117 	ldw	r17,4(sp)
    a0d4:	dc000017 	ldw	r16,0(sp)
    a0d8:	dec00804 	addi	sp,sp,32
    a0dc:	f800283a 	ret
    a0e0:	20fff41e 	bne	r4,r3,a0b4 <_fpadd_parts+0x1c8>
    a0e4:	31000015 	stw	r4,0(r6)
    a0e8:	98800117 	ldw	r2,4(r19)
    a0ec:	30800115 	stw	r2,4(r6)
    a0f0:	98c00217 	ldw	r3,8(r19)
    a0f4:	30c00215 	stw	r3,8(r6)
    a0f8:	98800317 	ldw	r2,12(r19)
    a0fc:	30800315 	stw	r2,12(r6)
    a100:	98c00417 	ldw	r3,16(r19)
    a104:	30c00415 	stw	r3,16(r6)
    a108:	98800117 	ldw	r2,4(r19)
    a10c:	28c00117 	ldw	r3,4(r5)
    a110:	3027883a 	mov	r19,r6
    a114:	10c4703a 	and	r2,r2,r3
    a118:	30800115 	stw	r2,4(r6)
    a11c:	003fe506 	br	a0b4 <_fpadd_parts+0x1c8>
    a120:	1dc02616 	blt	r3,r23,a1bc <_fpadd_parts+0x2d0>
    a124:	0023883a 	mov	r17,zero
    a128:	182f883a 	mov	r23,r3
    a12c:	0025883a 	mov	r18,zero
    a130:	003fa806 	br	9fd4 <_fpadd_parts+0xe8>
    a134:	a827883a 	mov	r19,r21
    a138:	003fde06 	br	a0b4 <_fpadd_parts+0x1c8>
    a13c:	01800044 	movi	r6,1
    a140:	500497fa 	slli	r2,r10,31
    a144:	4808d07a 	srli	r4,r9,1
    a148:	518ad83a 	srl	r5,r10,r6
    a14c:	a2000217 	ldw	r8,8(r20)
    a150:	1108b03a 	or	r4,r2,r4
    a154:	0007883a 	mov	r3,zero
    a158:	4984703a 	and	r2,r9,r6
    a15c:	208cb03a 	or	r6,r4,r2
    a160:	28ceb03a 	or	r7,r5,r3
    a164:	42000044 	addi	r8,r8,1
    a168:	a027883a 	mov	r19,r20
    a16c:	a1c00415 	stw	r7,16(r20)
    a170:	a2000215 	stw	r8,8(r20)
    a174:	a1800315 	stw	r6,12(r20)
    a178:	003fce06 	br	a0b4 <_fpadd_parts+0x1c8>
    a17c:	8bc5c83a 	sub	r2,r17,r15
    a180:	8889803a 	cmpltu	r4,r17,r2
    a184:	9407c83a 	sub	r3,r18,r16
    a188:	1909c83a 	sub	r4,r3,r4
    a18c:	100d883a 	mov	r6,r2
    a190:	200f883a 	mov	r7,r4
    a194:	003f9906 	br	9ffc <_fpadd_parts+0x110>
    a198:	7c45883a 	add	r2,r15,r17
    a19c:	13c9803a 	cmpltu	r4,r2,r15
    a1a0:	8487883a 	add	r3,r16,r18
    a1a4:	20c9883a 	add	r4,r4,r3
    a1a8:	a1400115 	stw	r5,4(r20)
    a1ac:	a5c00215 	stw	r23,8(r20)
    a1b0:	a0800315 	stw	r2,12(r20)
    a1b4:	a1000415 	stw	r4,16(r20)
    a1b8:	003fb606 	br	a094 <_fpadd_parts+0x1a8>
    a1bc:	001f883a 	mov	r15,zero
    a1c0:	0021883a 	mov	r16,zero
    a1c4:	003f8306 	br	9fd4 <_fpadd_parts+0xe8>
    a1c8:	018dc83a 	sub	r6,zero,r6
    a1cc:	003f6706 	br	9f6c <_fpadd_parts+0x80>
    a1d0:	00bfff84 	movi	r2,-2
    a1d4:	117faf36 	bltu	r2,r5,a094 <_fpadd_parts+0x1a8>
    a1d8:	003f9806 	br	a03c <_fpadd_parts+0x150>
    a1dc:	0005883a 	mov	r2,zero
    a1e0:	1189c83a 	sub	r4,r2,r6
    a1e4:	1105803a 	cmpltu	r2,r2,r4
    a1e8:	01cbc83a 	sub	r5,zero,r7
    a1ec:	2885c83a 	sub	r2,r5,r2
    a1f0:	01800044 	movi	r6,1
    a1f4:	a1800115 	stw	r6,4(r20)
    a1f8:	a5c00215 	stw	r23,8(r20)
    a1fc:	a1000315 	stw	r4,12(r20)
    a200:	a0800415 	stw	r2,16(r20)
    a204:	003f8206 	br	a010 <_fpadd_parts+0x124>
    a208:	203f7226 	beq	r4,zero,9fd4 <_fpadd_parts+0xe8>
    a20c:	35bff804 	addi	r22,r6,-32
    a210:	b9af883a 	add	r23,r23,r6
    a214:	b0003116 	blt	r22,zero,a2dc <_fpadd_parts+0x3f0>
    a218:	959ad83a 	srl	r13,r18,r22
    a21c:	001d883a 	mov	r14,zero
    a220:	000f883a 	mov	r7,zero
    a224:	01000044 	movi	r4,1
    a228:	0011883a 	mov	r8,zero
    a22c:	b0002516 	blt	r22,zero,a2c4 <_fpadd_parts+0x3d8>
    a230:	2594983a 	sll	r10,r4,r22
    a234:	0013883a 	mov	r9,zero
    a238:	00bfffc4 	movi	r2,-1
    a23c:	4889883a 	add	r4,r9,r2
    a240:	508b883a 	add	r5,r10,r2
    a244:	224d803a 	cmpltu	r6,r4,r9
    a248:	314b883a 	add	r5,r6,r5
    a24c:	8904703a 	and	r2,r17,r4
    a250:	9146703a 	and	r3,r18,r5
    a254:	10c4b03a 	or	r2,r2,r3
    a258:	10000226 	beq	r2,zero,a264 <_fpadd_parts+0x378>
    a25c:	01c00044 	movi	r7,1
    a260:	0011883a 	mov	r8,zero
    a264:	69e2b03a 	or	r17,r13,r7
    a268:	7224b03a 	or	r18,r14,r8
    a26c:	003f5906 	br	9fd4 <_fpadd_parts+0xe8>
    a270:	8407883a 	add	r3,r16,r16
    a274:	008007c4 	movi	r2,31
    a278:	1185c83a 	sub	r2,r2,r6
    a27c:	1886983a 	sll	r3,r3,r2
    a280:	7996d83a 	srl	r11,r15,r6
    a284:	8198d83a 	srl	r12,r16,r6
    a288:	1ad6b03a 	or	r11,r3,r11
    a28c:	003f3e06 	br	9f88 <_fpadd_parts+0x9c>
    a290:	2006d07a 	srli	r3,r4,1
    a294:	008007c4 	movi	r2,31
    a298:	1185c83a 	sub	r2,r2,r6
    a29c:	1890d83a 	srl	r8,r3,r2
    a2a0:	218e983a 	sll	r7,r4,r6
    a2a4:	003f3e06 	br	9fa0 <_fpadd_parts+0xb4>
    a2a8:	113f821e 	bne	r2,r4,a0b4 <_fpadd_parts+0x1c8>
    a2ac:	28c00117 	ldw	r3,4(r5)
    a2b0:	98800117 	ldw	r2,4(r19)
    a2b4:	10ff7f26 	beq	r2,r3,a0b4 <_fpadd_parts+0x1c8>
    a2b8:	04c00074 	movhi	r19,1
    a2bc:	9cf96404 	addi	r19,r19,-6768
    a2c0:	003f7c06 	br	a0b4 <_fpadd_parts+0x1c8>
    a2c4:	2006d07a 	srli	r3,r4,1
    a2c8:	008007c4 	movi	r2,31
    a2cc:	1185c83a 	sub	r2,r2,r6
    a2d0:	1894d83a 	srl	r10,r3,r2
    a2d4:	2192983a 	sll	r9,r4,r6
    a2d8:	003fd706 	br	a238 <_fpadd_parts+0x34c>
    a2dc:	9487883a 	add	r3,r18,r18
    a2e0:	008007c4 	movi	r2,31
    a2e4:	1185c83a 	sub	r2,r2,r6
    a2e8:	1886983a 	sll	r3,r3,r2
    a2ec:	899ad83a 	srl	r13,r17,r6
    a2f0:	919cd83a 	srl	r14,r18,r6
    a2f4:	1b5ab03a 	or	r13,r3,r13
    a2f8:	003fc906 	br	a220 <_fpadd_parts+0x334>

0000a2fc <__subdf3>:
    a2fc:	deffea04 	addi	sp,sp,-88
    a300:	dcc01415 	stw	r19,80(sp)
    a304:	dcc00404 	addi	r19,sp,16
    a308:	2011883a 	mov	r8,r4
    a30c:	2813883a 	mov	r9,r5
    a310:	dc401315 	stw	r17,76(sp)
    a314:	d809883a 	mov	r4,sp
    a318:	980b883a 	mov	r5,r19
    a31c:	dc400904 	addi	r17,sp,36
    a320:	dfc01515 	stw	ra,84(sp)
    a324:	da400115 	stw	r9,4(sp)
    a328:	d9c00315 	stw	r7,12(sp)
    a32c:	da000015 	stw	r8,0(sp)
    a330:	d9800215 	stw	r6,8(sp)
    a334:	000b4440 	call	b444 <__unpack_d>
    a338:	d9000204 	addi	r4,sp,8
    a33c:	880b883a 	mov	r5,r17
    a340:	000b4440 	call	b444 <__unpack_d>
    a344:	d8800a17 	ldw	r2,40(sp)
    a348:	880b883a 	mov	r5,r17
    a34c:	9809883a 	mov	r4,r19
    a350:	d9800e04 	addi	r6,sp,56
    a354:	1080005c 	xori	r2,r2,1
    a358:	d8800a15 	stw	r2,40(sp)
    a35c:	0009eec0 	call	9eec <_fpadd_parts>
    a360:	1009883a 	mov	r4,r2
    a364:	000b1300 	call	b130 <__pack_d>
    a368:	dfc01517 	ldw	ra,84(sp)
    a36c:	dcc01417 	ldw	r19,80(sp)
    a370:	dc401317 	ldw	r17,76(sp)
    a374:	dec01604 	addi	sp,sp,88
    a378:	f800283a 	ret

0000a37c <__adddf3>:
    a37c:	deffea04 	addi	sp,sp,-88
    a380:	dcc01415 	stw	r19,80(sp)
    a384:	dcc00404 	addi	r19,sp,16
    a388:	2011883a 	mov	r8,r4
    a38c:	2813883a 	mov	r9,r5
    a390:	dc401315 	stw	r17,76(sp)
    a394:	d809883a 	mov	r4,sp
    a398:	980b883a 	mov	r5,r19
    a39c:	dc400904 	addi	r17,sp,36
    a3a0:	dfc01515 	stw	ra,84(sp)
    a3a4:	da400115 	stw	r9,4(sp)
    a3a8:	d9c00315 	stw	r7,12(sp)
    a3ac:	da000015 	stw	r8,0(sp)
    a3b0:	d9800215 	stw	r6,8(sp)
    a3b4:	000b4440 	call	b444 <__unpack_d>
    a3b8:	d9000204 	addi	r4,sp,8
    a3bc:	880b883a 	mov	r5,r17
    a3c0:	000b4440 	call	b444 <__unpack_d>
    a3c4:	d9800e04 	addi	r6,sp,56
    a3c8:	9809883a 	mov	r4,r19
    a3cc:	880b883a 	mov	r5,r17
    a3d0:	0009eec0 	call	9eec <_fpadd_parts>
    a3d4:	1009883a 	mov	r4,r2
    a3d8:	000b1300 	call	b130 <__pack_d>
    a3dc:	dfc01517 	ldw	ra,84(sp)
    a3e0:	dcc01417 	ldw	r19,80(sp)
    a3e4:	dc401317 	ldw	r17,76(sp)
    a3e8:	dec01604 	addi	sp,sp,88
    a3ec:	f800283a 	ret

0000a3f0 <__muldf3>:
    a3f0:	deffe004 	addi	sp,sp,-128
    a3f4:	dc401815 	stw	r17,96(sp)
    a3f8:	dc400404 	addi	r17,sp,16
    a3fc:	2011883a 	mov	r8,r4
    a400:	2813883a 	mov	r9,r5
    a404:	dc001715 	stw	r16,92(sp)
    a408:	d809883a 	mov	r4,sp
    a40c:	880b883a 	mov	r5,r17
    a410:	dc000904 	addi	r16,sp,36
    a414:	dfc01f15 	stw	ra,124(sp)
    a418:	da400115 	stw	r9,4(sp)
    a41c:	d9c00315 	stw	r7,12(sp)
    a420:	da000015 	stw	r8,0(sp)
    a424:	d9800215 	stw	r6,8(sp)
    a428:	ddc01e15 	stw	r23,120(sp)
    a42c:	dd801d15 	stw	r22,116(sp)
    a430:	dd401c15 	stw	r21,112(sp)
    a434:	dd001b15 	stw	r20,108(sp)
    a438:	dcc01a15 	stw	r19,104(sp)
    a43c:	dc801915 	stw	r18,100(sp)
    a440:	000b4440 	call	b444 <__unpack_d>
    a444:	d9000204 	addi	r4,sp,8
    a448:	800b883a 	mov	r5,r16
    a44c:	000b4440 	call	b444 <__unpack_d>
    a450:	d9000417 	ldw	r4,16(sp)
    a454:	00800044 	movi	r2,1
    a458:	1100102e 	bgeu	r2,r4,a49c <__muldf3+0xac>
    a45c:	d8c00917 	ldw	r3,36(sp)
    a460:	10c0062e 	bgeu	r2,r3,a47c <__muldf3+0x8c>
    a464:	00800104 	movi	r2,4
    a468:	20800a26 	beq	r4,r2,a494 <__muldf3+0xa4>
    a46c:	1880cc26 	beq	r3,r2,a7a0 <__muldf3+0x3b0>
    a470:	00800084 	movi	r2,2
    a474:	20800926 	beq	r4,r2,a49c <__muldf3+0xac>
    a478:	1880191e 	bne	r3,r2,a4e0 <__muldf3+0xf0>
    a47c:	d8c00a17 	ldw	r3,40(sp)
    a480:	d8800517 	ldw	r2,20(sp)
    a484:	8009883a 	mov	r4,r16
    a488:	10c4c03a 	cmpne	r2,r2,r3
    a48c:	d8800a15 	stw	r2,40(sp)
    a490:	00000706 	br	a4b0 <__muldf3+0xc0>
    a494:	00800084 	movi	r2,2
    a498:	1880c326 	beq	r3,r2,a7a8 <__muldf3+0x3b8>
    a49c:	d8800517 	ldw	r2,20(sp)
    a4a0:	d8c00a17 	ldw	r3,40(sp)
    a4a4:	8809883a 	mov	r4,r17
    a4a8:	10c4c03a 	cmpne	r2,r2,r3
    a4ac:	d8800515 	stw	r2,20(sp)
    a4b0:	000b1300 	call	b130 <__pack_d>
    a4b4:	dfc01f17 	ldw	ra,124(sp)
    a4b8:	ddc01e17 	ldw	r23,120(sp)
    a4bc:	dd801d17 	ldw	r22,116(sp)
    a4c0:	dd401c17 	ldw	r21,112(sp)
    a4c4:	dd001b17 	ldw	r20,108(sp)
    a4c8:	dcc01a17 	ldw	r19,104(sp)
    a4cc:	dc801917 	ldw	r18,100(sp)
    a4d0:	dc401817 	ldw	r17,96(sp)
    a4d4:	dc001717 	ldw	r16,92(sp)
    a4d8:	dec02004 	addi	sp,sp,128
    a4dc:	f800283a 	ret
    a4e0:	dd800717 	ldw	r22,28(sp)
    a4e4:	dc800c17 	ldw	r18,48(sp)
    a4e8:	002b883a 	mov	r21,zero
    a4ec:	0023883a 	mov	r17,zero
    a4f0:	a80b883a 	mov	r5,r21
    a4f4:	b00d883a 	mov	r6,r22
    a4f8:	880f883a 	mov	r7,r17
    a4fc:	ddc00817 	ldw	r23,32(sp)
    a500:	dcc00d17 	ldw	r19,52(sp)
    a504:	9009883a 	mov	r4,r18
    a508:	000b0180 	call	b018 <__muldi3>
    a50c:	001b883a 	mov	r13,zero
    a510:	680f883a 	mov	r7,r13
    a514:	b009883a 	mov	r4,r22
    a518:	000b883a 	mov	r5,zero
    a51c:	980d883a 	mov	r6,r19
    a520:	b82d883a 	mov	r22,r23
    a524:	002f883a 	mov	r23,zero
    a528:	db401615 	stw	r13,88(sp)
    a52c:	d8801315 	stw	r2,76(sp)
    a530:	d8c01415 	stw	r3,80(sp)
    a534:	dcc01515 	stw	r19,84(sp)
    a538:	000b0180 	call	b018 <__muldi3>
    a53c:	b00d883a 	mov	r6,r22
    a540:	000b883a 	mov	r5,zero
    a544:	9009883a 	mov	r4,r18
    a548:	b80f883a 	mov	r7,r23
    a54c:	1021883a 	mov	r16,r2
    a550:	1823883a 	mov	r17,r3
    a554:	000b0180 	call	b018 <__muldi3>
    a558:	8085883a 	add	r2,r16,r2
    a55c:	140d803a 	cmpltu	r6,r2,r16
    a560:	88c7883a 	add	r3,r17,r3
    a564:	30cd883a 	add	r6,r6,r3
    a568:	1029883a 	mov	r20,r2
    a56c:	302b883a 	mov	r21,r6
    a570:	da801317 	ldw	r10,76(sp)
    a574:	dac01417 	ldw	r11,80(sp)
    a578:	db001517 	ldw	r12,84(sp)
    a57c:	db401617 	ldw	r13,88(sp)
    a580:	3440612e 	bgeu	r6,r17,a708 <__muldf3+0x318>
    a584:	0009883a 	mov	r4,zero
    a588:	5105883a 	add	r2,r10,r4
    a58c:	128d803a 	cmpltu	r6,r2,r10
    a590:	5d07883a 	add	r3,r11,r20
    a594:	30cd883a 	add	r6,r6,r3
    a598:	0021883a 	mov	r16,zero
    a59c:	04400044 	movi	r17,1
    a5a0:	1025883a 	mov	r18,r2
    a5a4:	3027883a 	mov	r19,r6
    a5a8:	32c06236 	bltu	r6,r11,a734 <__muldf3+0x344>
    a5ac:	59807a26 	beq	r11,r6,a798 <__muldf3+0x3a8>
    a5b0:	680b883a 	mov	r5,r13
    a5b4:	b80f883a 	mov	r7,r23
    a5b8:	6009883a 	mov	r4,r12
    a5bc:	b00d883a 	mov	r6,r22
    a5c0:	000b0180 	call	b018 <__muldi3>
    a5c4:	1009883a 	mov	r4,r2
    a5c8:	000f883a 	mov	r7,zero
    a5cc:	1545883a 	add	r2,r2,r21
    a5d0:	1111803a 	cmpltu	r8,r2,r4
    a5d4:	19c7883a 	add	r3,r3,r7
    a5d8:	40c7883a 	add	r3,r8,r3
    a5dc:	88cb883a 	add	r5,r17,r3
    a5e0:	d8c00617 	ldw	r3,24(sp)
    a5e4:	8089883a 	add	r4,r16,r2
    a5e8:	d8800b17 	ldw	r2,44(sp)
    a5ec:	18c00104 	addi	r3,r3,4
    a5f0:	240d803a 	cmpltu	r6,r4,r16
    a5f4:	10c7883a 	add	r3,r2,r3
    a5f8:	2013883a 	mov	r9,r4
    a5fc:	d8800a17 	ldw	r2,40(sp)
    a600:	d9000517 	ldw	r4,20(sp)
    a604:	314d883a 	add	r6,r6,r5
    a608:	3015883a 	mov	r10,r6
    a60c:	2088c03a 	cmpne	r4,r4,r2
    a610:	00880034 	movhi	r2,8192
    a614:	10bfffc4 	addi	r2,r2,-1
    a618:	d9000f15 	stw	r4,60(sp)
    a61c:	d8c01015 	stw	r3,64(sp)
    a620:	1180162e 	bgeu	r2,r6,a67c <__muldf3+0x28c>
    a624:	1811883a 	mov	r8,r3
    a628:	101f883a 	mov	r15,r2
    a62c:	980497fa 	slli	r2,r19,31
    a630:	9016d07a 	srli	r11,r18,1
    a634:	500697fa 	slli	r3,r10,31
    a638:	480cd07a 	srli	r6,r9,1
    a63c:	500ed07a 	srli	r7,r10,1
    a640:	12d6b03a 	or	r11,r2,r11
    a644:	00800044 	movi	r2,1
    a648:	198cb03a 	or	r6,r3,r6
    a64c:	4888703a 	and	r4,r9,r2
    a650:	9818d07a 	srli	r12,r19,1
    a654:	001b883a 	mov	r13,zero
    a658:	03a00034 	movhi	r14,32768
    a65c:	3013883a 	mov	r9,r6
    a660:	3815883a 	mov	r10,r7
    a664:	4091883a 	add	r8,r8,r2
    a668:	20000226 	beq	r4,zero,a674 <__muldf3+0x284>
    a66c:	5b64b03a 	or	r18,r11,r13
    a670:	63a6b03a 	or	r19,r12,r14
    a674:	7abfed36 	bltu	r15,r10,a62c <__muldf3+0x23c>
    a678:	da001015 	stw	r8,64(sp)
    a67c:	00840034 	movhi	r2,4096
    a680:	10bfffc4 	addi	r2,r2,-1
    a684:	12801436 	bltu	r2,r10,a6d8 <__muldf3+0x2e8>
    a688:	da001017 	ldw	r8,64(sp)
    a68c:	101f883a 	mov	r15,r2
    a690:	4a45883a 	add	r2,r9,r9
    a694:	124d803a 	cmpltu	r6,r2,r9
    a698:	5287883a 	add	r3,r10,r10
    a69c:	9497883a 	add	r11,r18,r18
    a6a0:	5c8f803a 	cmpltu	r7,r11,r18
    a6a4:	9cd9883a 	add	r12,r19,r19
    a6a8:	01000044 	movi	r4,1
    a6ac:	30cd883a 	add	r6,r6,r3
    a6b0:	3b0f883a 	add	r7,r7,r12
    a6b4:	423fffc4 	addi	r8,r8,-1
    a6b8:	1013883a 	mov	r9,r2
    a6bc:	3015883a 	mov	r10,r6
    a6c0:	111ab03a 	or	r13,r2,r4
    a6c4:	98003016 	blt	r19,zero,a788 <__muldf3+0x398>
    a6c8:	5825883a 	mov	r18,r11
    a6cc:	3827883a 	mov	r19,r7
    a6d0:	7abfef2e 	bgeu	r15,r10,a690 <__muldf3+0x2a0>
    a6d4:	da001015 	stw	r8,64(sp)
    a6d8:	00803fc4 	movi	r2,255
    a6dc:	488e703a 	and	r7,r9,r2
    a6e0:	00802004 	movi	r2,128
    a6e4:	0007883a 	mov	r3,zero
    a6e8:	0011883a 	mov	r8,zero
    a6ec:	38801826 	beq	r7,r2,a750 <__muldf3+0x360>
    a6f0:	008000c4 	movi	r2,3
    a6f4:	d9000e04 	addi	r4,sp,56
    a6f8:	da801215 	stw	r10,72(sp)
    a6fc:	d8800e15 	stw	r2,56(sp)
    a700:	da401115 	stw	r9,68(sp)
    a704:	003f6a06 	br	a4b0 <__muldf3+0xc0>
    a708:	89802126 	beq	r17,r6,a790 <__muldf3+0x3a0>
    a70c:	0009883a 	mov	r4,zero
    a710:	5105883a 	add	r2,r10,r4
    a714:	128d803a 	cmpltu	r6,r2,r10
    a718:	5d07883a 	add	r3,r11,r20
    a71c:	30cd883a 	add	r6,r6,r3
    a720:	0021883a 	mov	r16,zero
    a724:	0023883a 	mov	r17,zero
    a728:	1025883a 	mov	r18,r2
    a72c:	3027883a 	mov	r19,r6
    a730:	32ff9e2e 	bgeu	r6,r11,a5ac <__muldf3+0x1bc>
    a734:	00800044 	movi	r2,1
    a738:	8089883a 	add	r4,r16,r2
    a73c:	240d803a 	cmpltu	r6,r4,r16
    a740:	344d883a 	add	r6,r6,r17
    a744:	2021883a 	mov	r16,r4
    a748:	3023883a 	mov	r17,r6
    a74c:	003f9806 	br	a5b0 <__muldf3+0x1c0>
    a750:	403fe71e 	bne	r8,zero,a6f0 <__muldf3+0x300>
    a754:	01004004 	movi	r4,256
    a758:	4904703a 	and	r2,r9,r4
    a75c:	10c4b03a 	or	r2,r2,r3
    a760:	103fe31e 	bne	r2,zero,a6f0 <__muldf3+0x300>
    a764:	94c4b03a 	or	r2,r18,r19
    a768:	103fe126 	beq	r2,zero,a6f0 <__muldf3+0x300>
    a76c:	49c5883a 	add	r2,r9,r7
    a770:	1251803a 	cmpltu	r8,r2,r9
    a774:	4291883a 	add	r8,r8,r10
    a778:	013fc004 	movi	r4,-256
    a77c:	1112703a 	and	r9,r2,r4
    a780:	4015883a 	mov	r10,r8
    a784:	003fda06 	br	a6f0 <__muldf3+0x300>
    a788:	6813883a 	mov	r9,r13
    a78c:	003fce06 	br	a6c8 <__muldf3+0x2d8>
    a790:	143f7c36 	bltu	r2,r16,a584 <__muldf3+0x194>
    a794:	003fdd06 	br	a70c <__muldf3+0x31c>
    a798:	12bf852e 	bgeu	r2,r10,a5b0 <__muldf3+0x1c0>
    a79c:	003fe506 	br	a734 <__muldf3+0x344>
    a7a0:	00800084 	movi	r2,2
    a7a4:	20bf351e 	bne	r4,r2,a47c <__muldf3+0x8c>
    a7a8:	01000074 	movhi	r4,1
    a7ac:	21396404 	addi	r4,r4,-6768
    a7b0:	003f3f06 	br	a4b0 <__muldf3+0xc0>

0000a7b4 <__divdf3>:
    a7b4:	deffed04 	addi	sp,sp,-76
    a7b8:	dcc01115 	stw	r19,68(sp)
    a7bc:	dcc00404 	addi	r19,sp,16
    a7c0:	2011883a 	mov	r8,r4
    a7c4:	2813883a 	mov	r9,r5
    a7c8:	dc000e15 	stw	r16,56(sp)
    a7cc:	d809883a 	mov	r4,sp
    a7d0:	980b883a 	mov	r5,r19
    a7d4:	dc000904 	addi	r16,sp,36
    a7d8:	dfc01215 	stw	ra,72(sp)
    a7dc:	da400115 	stw	r9,4(sp)
    a7e0:	d9c00315 	stw	r7,12(sp)
    a7e4:	da000015 	stw	r8,0(sp)
    a7e8:	d9800215 	stw	r6,8(sp)
    a7ec:	dc801015 	stw	r18,64(sp)
    a7f0:	dc400f15 	stw	r17,60(sp)
    a7f4:	000b4440 	call	b444 <__unpack_d>
    a7f8:	d9000204 	addi	r4,sp,8
    a7fc:	800b883a 	mov	r5,r16
    a800:	000b4440 	call	b444 <__unpack_d>
    a804:	d9000417 	ldw	r4,16(sp)
    a808:	00800044 	movi	r2,1
    a80c:	11000b2e 	bgeu	r2,r4,a83c <__divdf3+0x88>
    a810:	d9400917 	ldw	r5,36(sp)
    a814:	1140762e 	bgeu	r2,r5,a9f0 <__divdf3+0x23c>
    a818:	d8800517 	ldw	r2,20(sp)
    a81c:	d8c00a17 	ldw	r3,40(sp)
    a820:	01800104 	movi	r6,4
    a824:	10c4f03a 	xor	r2,r2,r3
    a828:	d8800515 	stw	r2,20(sp)
    a82c:	21800226 	beq	r4,r6,a838 <__divdf3+0x84>
    a830:	00800084 	movi	r2,2
    a834:	2080141e 	bne	r4,r2,a888 <__divdf3+0xd4>
    a838:	29000926 	beq	r5,r4,a860 <__divdf3+0xac>
    a83c:	9809883a 	mov	r4,r19
    a840:	000b1300 	call	b130 <__pack_d>
    a844:	dfc01217 	ldw	ra,72(sp)
    a848:	dcc01117 	ldw	r19,68(sp)
    a84c:	dc801017 	ldw	r18,64(sp)
    a850:	dc400f17 	ldw	r17,60(sp)
    a854:	dc000e17 	ldw	r16,56(sp)
    a858:	dec01304 	addi	sp,sp,76
    a85c:	f800283a 	ret
    a860:	01000074 	movhi	r4,1
    a864:	21396404 	addi	r4,r4,-6768
    a868:	000b1300 	call	b130 <__pack_d>
    a86c:	dfc01217 	ldw	ra,72(sp)
    a870:	dcc01117 	ldw	r19,68(sp)
    a874:	dc801017 	ldw	r18,64(sp)
    a878:	dc400f17 	ldw	r17,60(sp)
    a87c:	dc000e17 	ldw	r16,56(sp)
    a880:	dec01304 	addi	sp,sp,76
    a884:	f800283a 	ret
    a888:	29805b26 	beq	r5,r6,a9f8 <__divdf3+0x244>
    a88c:	28802d26 	beq	r5,r2,a944 <__divdf3+0x190>
    a890:	d8c00617 	ldw	r3,24(sp)
    a894:	d8800b17 	ldw	r2,44(sp)
    a898:	d9c00817 	ldw	r7,32(sp)
    a89c:	dc400d17 	ldw	r17,52(sp)
    a8a0:	188bc83a 	sub	r5,r3,r2
    a8a4:	d9800717 	ldw	r6,28(sp)
    a8a8:	dc000c17 	ldw	r16,48(sp)
    a8ac:	d9400615 	stw	r5,24(sp)
    a8b0:	3c403836 	bltu	r7,r17,a994 <__divdf3+0x1e0>
    a8b4:	89c03626 	beq	r17,r7,a990 <__divdf3+0x1dc>
    a8b8:	0015883a 	mov	r10,zero
    a8bc:	001d883a 	mov	r14,zero
    a8c0:	02c40034 	movhi	r11,4096
    a8c4:	001f883a 	mov	r15,zero
    a8c8:	003f883a 	mov	ra,zero
    a8cc:	04800f44 	movi	r18,61
    a8d0:	00000f06 	br	a910 <__divdf3+0x15c>
    a8d4:	601d883a 	mov	r14,r12
    a8d8:	681f883a 	mov	r15,r13
    a8dc:	400d883a 	mov	r6,r8
    a8e0:	100f883a 	mov	r7,r2
    a8e4:	3191883a 	add	r8,r6,r6
    a8e8:	5808d07a 	srli	r4,r11,1
    a8ec:	4185803a 	cmpltu	r2,r8,r6
    a8f0:	39d3883a 	add	r9,r7,r7
    a8f4:	28c6b03a 	or	r3,r5,r3
    a8f8:	1245883a 	add	r2,r2,r9
    a8fc:	1815883a 	mov	r10,r3
    a900:	2017883a 	mov	r11,r4
    a904:	400d883a 	mov	r6,r8
    a908:	100f883a 	mov	r7,r2
    a90c:	fc801726 	beq	ra,r18,a96c <__divdf3+0x1b8>
    a910:	580a97fa 	slli	r5,r11,31
    a914:	5006d07a 	srli	r3,r10,1
    a918:	ffc00044 	addi	ra,ra,1
    a91c:	3c7ff136 	bltu	r7,r17,a8e4 <__divdf3+0x130>
    a920:	3411c83a 	sub	r8,r6,r16
    a924:	3205803a 	cmpltu	r2,r6,r8
    a928:	3c53c83a 	sub	r9,r7,r17
    a92c:	7298b03a 	or	r12,r14,r10
    a930:	7adab03a 	or	r13,r15,r11
    a934:	4885c83a 	sub	r2,r9,r2
    a938:	89ffe61e 	bne	r17,r7,a8d4 <__divdf3+0x120>
    a93c:	343fe936 	bltu	r6,r16,a8e4 <__divdf3+0x130>
    a940:	003fe406 	br	a8d4 <__divdf3+0x120>
    a944:	9809883a 	mov	r4,r19
    a948:	d9800415 	stw	r6,16(sp)
    a94c:	000b1300 	call	b130 <__pack_d>
    a950:	dfc01217 	ldw	ra,72(sp)
    a954:	dcc01117 	ldw	r19,68(sp)
    a958:	dc801017 	ldw	r18,64(sp)
    a95c:	dc400f17 	ldw	r17,60(sp)
    a960:	dc000e17 	ldw	r16,56(sp)
    a964:	dec01304 	addi	sp,sp,76
    a968:	f800283a 	ret
    a96c:	00803fc4 	movi	r2,255
    a970:	7090703a 	and	r8,r14,r2
    a974:	00802004 	movi	r2,128
    a978:	0007883a 	mov	r3,zero
    a97c:	0013883a 	mov	r9,zero
    a980:	40800d26 	beq	r8,r2,a9b8 <__divdf3+0x204>
    a984:	dbc00815 	stw	r15,32(sp)
    a988:	db800715 	stw	r14,28(sp)
    a98c:	003fab06 	br	a83c <__divdf3+0x88>
    a990:	343fc92e 	bgeu	r6,r16,a8b8 <__divdf3+0x104>
    a994:	3185883a 	add	r2,r6,r6
    a998:	1189803a 	cmpltu	r4,r2,r6
    a99c:	39c7883a 	add	r3,r7,r7
    a9a0:	20c9883a 	add	r4,r4,r3
    a9a4:	297fffc4 	addi	r5,r5,-1
    a9a8:	100d883a 	mov	r6,r2
    a9ac:	200f883a 	mov	r7,r4
    a9b0:	d9400615 	stw	r5,24(sp)
    a9b4:	003fc006 	br	a8b8 <__divdf3+0x104>
    a9b8:	483ff21e 	bne	r9,zero,a984 <__divdf3+0x1d0>
    a9bc:	01004004 	movi	r4,256
    a9c0:	7104703a 	and	r2,r14,r4
    a9c4:	10c4b03a 	or	r2,r2,r3
    a9c8:	103fee1e 	bne	r2,zero,a984 <__divdf3+0x1d0>
    a9cc:	31c4b03a 	or	r2,r6,r7
    a9d0:	103fec26 	beq	r2,zero,a984 <__divdf3+0x1d0>
    a9d4:	7205883a 	add	r2,r14,r8
    a9d8:	1391803a 	cmpltu	r8,r2,r14
    a9dc:	43d1883a 	add	r8,r8,r15
    a9e0:	013fc004 	movi	r4,-256
    a9e4:	111c703a 	and	r14,r2,r4
    a9e8:	401f883a 	mov	r15,r8
    a9ec:	003fe506 	br	a984 <__divdf3+0x1d0>
    a9f0:	8009883a 	mov	r4,r16
    a9f4:	003f9206 	br	a840 <__divdf3+0x8c>
    a9f8:	9809883a 	mov	r4,r19
    a9fc:	d8000715 	stw	zero,28(sp)
    aa00:	d8000815 	stw	zero,32(sp)
    aa04:	d8000615 	stw	zero,24(sp)
    aa08:	003f8d06 	br	a840 <__divdf3+0x8c>

0000aa0c <__eqdf2>:
    aa0c:	deffef04 	addi	sp,sp,-68
    aa10:	dc400f15 	stw	r17,60(sp)
    aa14:	dc400404 	addi	r17,sp,16
    aa18:	2005883a 	mov	r2,r4
    aa1c:	2807883a 	mov	r3,r5
    aa20:	dc000e15 	stw	r16,56(sp)
    aa24:	d809883a 	mov	r4,sp
    aa28:	880b883a 	mov	r5,r17
    aa2c:	dc000904 	addi	r16,sp,36
    aa30:	d8c00115 	stw	r3,4(sp)
    aa34:	d8800015 	stw	r2,0(sp)
    aa38:	d9800215 	stw	r6,8(sp)
    aa3c:	dfc01015 	stw	ra,64(sp)
    aa40:	d9c00315 	stw	r7,12(sp)
    aa44:	000b4440 	call	b444 <__unpack_d>
    aa48:	d9000204 	addi	r4,sp,8
    aa4c:	800b883a 	mov	r5,r16
    aa50:	000b4440 	call	b444 <__unpack_d>
    aa54:	d8800417 	ldw	r2,16(sp)
    aa58:	00c00044 	movi	r3,1
    aa5c:	180d883a 	mov	r6,r3
    aa60:	1880062e 	bgeu	r3,r2,aa7c <__eqdf2+0x70>
    aa64:	d8800917 	ldw	r2,36(sp)
    aa68:	8809883a 	mov	r4,r17
    aa6c:	800b883a 	mov	r5,r16
    aa70:	1880022e 	bgeu	r3,r2,aa7c <__eqdf2+0x70>
    aa74:	000b57c0 	call	b57c <__fpcmp_parts_d>
    aa78:	100d883a 	mov	r6,r2
    aa7c:	3005883a 	mov	r2,r6
    aa80:	dfc01017 	ldw	ra,64(sp)
    aa84:	dc400f17 	ldw	r17,60(sp)
    aa88:	dc000e17 	ldw	r16,56(sp)
    aa8c:	dec01104 	addi	sp,sp,68
    aa90:	f800283a 	ret

0000aa94 <__nedf2>:
    aa94:	deffef04 	addi	sp,sp,-68
    aa98:	dc400f15 	stw	r17,60(sp)
    aa9c:	dc400404 	addi	r17,sp,16
    aaa0:	2005883a 	mov	r2,r4
    aaa4:	2807883a 	mov	r3,r5
    aaa8:	dc000e15 	stw	r16,56(sp)
    aaac:	d809883a 	mov	r4,sp
    aab0:	880b883a 	mov	r5,r17
    aab4:	dc000904 	addi	r16,sp,36
    aab8:	d8c00115 	stw	r3,4(sp)
    aabc:	d8800015 	stw	r2,0(sp)
    aac0:	d9800215 	stw	r6,8(sp)
    aac4:	dfc01015 	stw	ra,64(sp)
    aac8:	d9c00315 	stw	r7,12(sp)
    aacc:	000b4440 	call	b444 <__unpack_d>
    aad0:	d9000204 	addi	r4,sp,8
    aad4:	800b883a 	mov	r5,r16
    aad8:	000b4440 	call	b444 <__unpack_d>
    aadc:	d8800417 	ldw	r2,16(sp)
    aae0:	00c00044 	movi	r3,1
    aae4:	180d883a 	mov	r6,r3
    aae8:	1880062e 	bgeu	r3,r2,ab04 <__nedf2+0x70>
    aaec:	d8800917 	ldw	r2,36(sp)
    aaf0:	8809883a 	mov	r4,r17
    aaf4:	800b883a 	mov	r5,r16
    aaf8:	1880022e 	bgeu	r3,r2,ab04 <__nedf2+0x70>
    aafc:	000b57c0 	call	b57c <__fpcmp_parts_d>
    ab00:	100d883a 	mov	r6,r2
    ab04:	3005883a 	mov	r2,r6
    ab08:	dfc01017 	ldw	ra,64(sp)
    ab0c:	dc400f17 	ldw	r17,60(sp)
    ab10:	dc000e17 	ldw	r16,56(sp)
    ab14:	dec01104 	addi	sp,sp,68
    ab18:	f800283a 	ret

0000ab1c <__gtdf2>:
    ab1c:	deffef04 	addi	sp,sp,-68
    ab20:	dc400f15 	stw	r17,60(sp)
    ab24:	dc400404 	addi	r17,sp,16
    ab28:	2005883a 	mov	r2,r4
    ab2c:	2807883a 	mov	r3,r5
    ab30:	dc000e15 	stw	r16,56(sp)
    ab34:	d809883a 	mov	r4,sp
    ab38:	880b883a 	mov	r5,r17
    ab3c:	dc000904 	addi	r16,sp,36
    ab40:	d8c00115 	stw	r3,4(sp)
    ab44:	d8800015 	stw	r2,0(sp)
    ab48:	d9800215 	stw	r6,8(sp)
    ab4c:	dfc01015 	stw	ra,64(sp)
    ab50:	d9c00315 	stw	r7,12(sp)
    ab54:	000b4440 	call	b444 <__unpack_d>
    ab58:	d9000204 	addi	r4,sp,8
    ab5c:	800b883a 	mov	r5,r16
    ab60:	000b4440 	call	b444 <__unpack_d>
    ab64:	d8800417 	ldw	r2,16(sp)
    ab68:	00c00044 	movi	r3,1
    ab6c:	01bfffc4 	movi	r6,-1
    ab70:	1880062e 	bgeu	r3,r2,ab8c <__gtdf2+0x70>
    ab74:	d8800917 	ldw	r2,36(sp)
    ab78:	8809883a 	mov	r4,r17
    ab7c:	800b883a 	mov	r5,r16
    ab80:	1880022e 	bgeu	r3,r2,ab8c <__gtdf2+0x70>
    ab84:	000b57c0 	call	b57c <__fpcmp_parts_d>
    ab88:	100d883a 	mov	r6,r2
    ab8c:	3005883a 	mov	r2,r6
    ab90:	dfc01017 	ldw	ra,64(sp)
    ab94:	dc400f17 	ldw	r17,60(sp)
    ab98:	dc000e17 	ldw	r16,56(sp)
    ab9c:	dec01104 	addi	sp,sp,68
    aba0:	f800283a 	ret

0000aba4 <__gedf2>:
    aba4:	deffef04 	addi	sp,sp,-68
    aba8:	dc400f15 	stw	r17,60(sp)
    abac:	dc400404 	addi	r17,sp,16
    abb0:	2005883a 	mov	r2,r4
    abb4:	2807883a 	mov	r3,r5
    abb8:	dc000e15 	stw	r16,56(sp)
    abbc:	d809883a 	mov	r4,sp
    abc0:	880b883a 	mov	r5,r17
    abc4:	dc000904 	addi	r16,sp,36
    abc8:	d8c00115 	stw	r3,4(sp)
    abcc:	d8800015 	stw	r2,0(sp)
    abd0:	d9800215 	stw	r6,8(sp)
    abd4:	dfc01015 	stw	ra,64(sp)
    abd8:	d9c00315 	stw	r7,12(sp)
    abdc:	000b4440 	call	b444 <__unpack_d>
    abe0:	d9000204 	addi	r4,sp,8
    abe4:	800b883a 	mov	r5,r16
    abe8:	000b4440 	call	b444 <__unpack_d>
    abec:	d8800417 	ldw	r2,16(sp)
    abf0:	00c00044 	movi	r3,1
    abf4:	01bfffc4 	movi	r6,-1
    abf8:	1880062e 	bgeu	r3,r2,ac14 <__gedf2+0x70>
    abfc:	d8800917 	ldw	r2,36(sp)
    ac00:	8809883a 	mov	r4,r17
    ac04:	800b883a 	mov	r5,r16
    ac08:	1880022e 	bgeu	r3,r2,ac14 <__gedf2+0x70>
    ac0c:	000b57c0 	call	b57c <__fpcmp_parts_d>
    ac10:	100d883a 	mov	r6,r2
    ac14:	3005883a 	mov	r2,r6
    ac18:	dfc01017 	ldw	ra,64(sp)
    ac1c:	dc400f17 	ldw	r17,60(sp)
    ac20:	dc000e17 	ldw	r16,56(sp)
    ac24:	dec01104 	addi	sp,sp,68
    ac28:	f800283a 	ret

0000ac2c <__ltdf2>:
    ac2c:	deffef04 	addi	sp,sp,-68
    ac30:	dc400f15 	stw	r17,60(sp)
    ac34:	dc400404 	addi	r17,sp,16
    ac38:	2005883a 	mov	r2,r4
    ac3c:	2807883a 	mov	r3,r5
    ac40:	dc000e15 	stw	r16,56(sp)
    ac44:	d809883a 	mov	r4,sp
    ac48:	880b883a 	mov	r5,r17
    ac4c:	dc000904 	addi	r16,sp,36
    ac50:	d8c00115 	stw	r3,4(sp)
    ac54:	d8800015 	stw	r2,0(sp)
    ac58:	d9800215 	stw	r6,8(sp)
    ac5c:	dfc01015 	stw	ra,64(sp)
    ac60:	d9c00315 	stw	r7,12(sp)
    ac64:	000b4440 	call	b444 <__unpack_d>
    ac68:	d9000204 	addi	r4,sp,8
    ac6c:	800b883a 	mov	r5,r16
    ac70:	000b4440 	call	b444 <__unpack_d>
    ac74:	d8800417 	ldw	r2,16(sp)
    ac78:	00c00044 	movi	r3,1
    ac7c:	180d883a 	mov	r6,r3
    ac80:	1880062e 	bgeu	r3,r2,ac9c <__ltdf2+0x70>
    ac84:	d8800917 	ldw	r2,36(sp)
    ac88:	8809883a 	mov	r4,r17
    ac8c:	800b883a 	mov	r5,r16
    ac90:	1880022e 	bgeu	r3,r2,ac9c <__ltdf2+0x70>
    ac94:	000b57c0 	call	b57c <__fpcmp_parts_d>
    ac98:	100d883a 	mov	r6,r2
    ac9c:	3005883a 	mov	r2,r6
    aca0:	dfc01017 	ldw	ra,64(sp)
    aca4:	dc400f17 	ldw	r17,60(sp)
    aca8:	dc000e17 	ldw	r16,56(sp)
    acac:	dec01104 	addi	sp,sp,68
    acb0:	f800283a 	ret

0000acb4 <__floatsidf>:
    acb4:	2006d7fa 	srli	r3,r4,31
    acb8:	defff604 	addi	sp,sp,-40
    acbc:	008000c4 	movi	r2,3
    acc0:	dfc00915 	stw	ra,36(sp)
    acc4:	dcc00815 	stw	r19,32(sp)
    acc8:	dc800715 	stw	r18,28(sp)
    accc:	dc400615 	stw	r17,24(sp)
    acd0:	dc000515 	stw	r16,20(sp)
    acd4:	d8800015 	stw	r2,0(sp)
    acd8:	d8c00115 	stw	r3,4(sp)
    acdc:	20000f1e 	bne	r4,zero,ad1c <__floatsidf+0x68>
    ace0:	00800084 	movi	r2,2
    ace4:	d8800015 	stw	r2,0(sp)
    ace8:	d809883a 	mov	r4,sp
    acec:	000b1300 	call	b130 <__pack_d>
    acf0:	1009883a 	mov	r4,r2
    acf4:	180b883a 	mov	r5,r3
    acf8:	2005883a 	mov	r2,r4
    acfc:	2807883a 	mov	r3,r5
    ad00:	dfc00917 	ldw	ra,36(sp)
    ad04:	dcc00817 	ldw	r19,32(sp)
    ad08:	dc800717 	ldw	r18,28(sp)
    ad0c:	dc400617 	ldw	r17,24(sp)
    ad10:	dc000517 	ldw	r16,20(sp)
    ad14:	dec00a04 	addi	sp,sp,40
    ad18:	f800283a 	ret
    ad1c:	00800f04 	movi	r2,60
    ad20:	1807003a 	cmpeq	r3,r3,zero
    ad24:	d8800215 	stw	r2,8(sp)
    ad28:	18001126 	beq	r3,zero,ad70 <__floatsidf+0xbc>
    ad2c:	0027883a 	mov	r19,zero
    ad30:	2025883a 	mov	r18,r4
    ad34:	d9000315 	stw	r4,12(sp)
    ad38:	dcc00415 	stw	r19,16(sp)
    ad3c:	000b0b00 	call	b0b0 <__clzsi2>
    ad40:	11000744 	addi	r4,r2,29
    ad44:	013fe80e 	bge	zero,r4,ace8 <__floatsidf+0x34>
    ad48:	10bfff44 	addi	r2,r2,-3
    ad4c:	10000c16 	blt	r2,zero,ad80 <__floatsidf+0xcc>
    ad50:	90a2983a 	sll	r17,r18,r2
    ad54:	0021883a 	mov	r16,zero
    ad58:	d8800217 	ldw	r2,8(sp)
    ad5c:	dc400415 	stw	r17,16(sp)
    ad60:	dc000315 	stw	r16,12(sp)
    ad64:	1105c83a 	sub	r2,r2,r4
    ad68:	d8800215 	stw	r2,8(sp)
    ad6c:	003fde06 	br	ace8 <__floatsidf+0x34>
    ad70:	00a00034 	movhi	r2,32768
    ad74:	20800a26 	beq	r4,r2,ada0 <__floatsidf+0xec>
    ad78:	0109c83a 	sub	r4,zero,r4
    ad7c:	003feb06 	br	ad2c <__floatsidf+0x78>
    ad80:	9006d07a 	srli	r3,r18,1
    ad84:	008007c4 	movi	r2,31
    ad88:	1105c83a 	sub	r2,r2,r4
    ad8c:	1886d83a 	srl	r3,r3,r2
    ad90:	9922983a 	sll	r17,r19,r4
    ad94:	9120983a 	sll	r16,r18,r4
    ad98:	1c62b03a 	or	r17,r3,r17
    ad9c:	003fee06 	br	ad58 <__floatsidf+0xa4>
    ada0:	0009883a 	mov	r4,zero
    ada4:	01707834 	movhi	r5,49632
    ada8:	003fd306 	br	acf8 <__floatsidf+0x44>

0000adac <__fixdfsi>:
    adac:	defff804 	addi	sp,sp,-32
    adb0:	2005883a 	mov	r2,r4
    adb4:	2807883a 	mov	r3,r5
    adb8:	d809883a 	mov	r4,sp
    adbc:	d9400204 	addi	r5,sp,8
    adc0:	d8c00115 	stw	r3,4(sp)
    adc4:	d8800015 	stw	r2,0(sp)
    adc8:	dfc00715 	stw	ra,28(sp)
    adcc:	000b4440 	call	b444 <__unpack_d>
    add0:	d8c00217 	ldw	r3,8(sp)
    add4:	00800084 	movi	r2,2
    add8:	1880051e 	bne	r3,r2,adf0 <__fixdfsi+0x44>
    addc:	0007883a 	mov	r3,zero
    ade0:	1805883a 	mov	r2,r3
    ade4:	dfc00717 	ldw	ra,28(sp)
    ade8:	dec00804 	addi	sp,sp,32
    adec:	f800283a 	ret
    adf0:	00800044 	movi	r2,1
    adf4:	10fff92e 	bgeu	r2,r3,addc <__fixdfsi+0x30>
    adf8:	00800104 	movi	r2,4
    adfc:	18800426 	beq	r3,r2,ae10 <__fixdfsi+0x64>
    ae00:	d8c00417 	ldw	r3,16(sp)
    ae04:	183ff516 	blt	r3,zero,addc <__fixdfsi+0x30>
    ae08:	00800784 	movi	r2,30
    ae0c:	10c0080e 	bge	r2,r3,ae30 <__fixdfsi+0x84>
    ae10:	d8800317 	ldw	r2,12(sp)
    ae14:	1000121e 	bne	r2,zero,ae60 <__fixdfsi+0xb4>
    ae18:	00e00034 	movhi	r3,32768
    ae1c:	18ffffc4 	addi	r3,r3,-1
    ae20:	1805883a 	mov	r2,r3
    ae24:	dfc00717 	ldw	ra,28(sp)
    ae28:	dec00804 	addi	sp,sp,32
    ae2c:	f800283a 	ret
    ae30:	00800f04 	movi	r2,60
    ae34:	10d1c83a 	sub	r8,r2,r3
    ae38:	40bff804 	addi	r2,r8,-32
    ae3c:	d9800517 	ldw	r6,20(sp)
    ae40:	d9c00617 	ldw	r7,24(sp)
    ae44:	10000816 	blt	r2,zero,ae68 <__fixdfsi+0xbc>
    ae48:	3888d83a 	srl	r4,r7,r2
    ae4c:	d8800317 	ldw	r2,12(sp)
    ae50:	2007883a 	mov	r3,r4
    ae54:	103fe226 	beq	r2,zero,ade0 <__fixdfsi+0x34>
    ae58:	0107c83a 	sub	r3,zero,r4
    ae5c:	003fe006 	br	ade0 <__fixdfsi+0x34>
    ae60:	00e00034 	movhi	r3,32768
    ae64:	003fde06 	br	ade0 <__fixdfsi+0x34>
    ae68:	39c7883a 	add	r3,r7,r7
    ae6c:	008007c4 	movi	r2,31
    ae70:	1205c83a 	sub	r2,r2,r8
    ae74:	1886983a 	sll	r3,r3,r2
    ae78:	3208d83a 	srl	r4,r6,r8
    ae7c:	1908b03a 	or	r4,r3,r4
    ae80:	003ff206 	br	ae4c <__fixdfsi+0xa0>

0000ae84 <__floatunsidf>:
    ae84:	defff204 	addi	sp,sp,-56
    ae88:	dfc00d15 	stw	ra,52(sp)
    ae8c:	ddc00c15 	stw	r23,48(sp)
    ae90:	dd800b15 	stw	r22,44(sp)
    ae94:	dd400a15 	stw	r21,40(sp)
    ae98:	dd000915 	stw	r20,36(sp)
    ae9c:	dcc00815 	stw	r19,32(sp)
    aea0:	dc800715 	stw	r18,28(sp)
    aea4:	dc400615 	stw	r17,24(sp)
    aea8:	dc000515 	stw	r16,20(sp)
    aeac:	d8000115 	stw	zero,4(sp)
    aeb0:	20000f1e 	bne	r4,zero,aef0 <__floatunsidf+0x6c>
    aeb4:	00800084 	movi	r2,2
    aeb8:	d8800015 	stw	r2,0(sp)
    aebc:	d809883a 	mov	r4,sp
    aec0:	000b1300 	call	b130 <__pack_d>
    aec4:	dfc00d17 	ldw	ra,52(sp)
    aec8:	ddc00c17 	ldw	r23,48(sp)
    aecc:	dd800b17 	ldw	r22,44(sp)
    aed0:	dd400a17 	ldw	r21,40(sp)
    aed4:	dd000917 	ldw	r20,36(sp)
    aed8:	dcc00817 	ldw	r19,32(sp)
    aedc:	dc800717 	ldw	r18,28(sp)
    aee0:	dc400617 	ldw	r17,24(sp)
    aee4:	dc000517 	ldw	r16,20(sp)
    aee8:	dec00e04 	addi	sp,sp,56
    aeec:	f800283a 	ret
    aef0:	008000c4 	movi	r2,3
    aef4:	00c00f04 	movi	r3,60
    aef8:	002f883a 	mov	r23,zero
    aefc:	202d883a 	mov	r22,r4
    af00:	d8800015 	stw	r2,0(sp)
    af04:	d8c00215 	stw	r3,8(sp)
    af08:	d9000315 	stw	r4,12(sp)
    af0c:	ddc00415 	stw	r23,16(sp)
    af10:	000b0b00 	call	b0b0 <__clzsi2>
    af14:	12400744 	addi	r9,r2,29
    af18:	48000b16 	blt	r9,zero,af48 <__floatunsidf+0xc4>
    af1c:	483fe726 	beq	r9,zero,aebc <__floatunsidf+0x38>
    af20:	10bfff44 	addi	r2,r2,-3
    af24:	10002e16 	blt	r2,zero,afe0 <__floatunsidf+0x15c>
    af28:	b0a2983a 	sll	r17,r22,r2
    af2c:	0021883a 	mov	r16,zero
    af30:	d8800217 	ldw	r2,8(sp)
    af34:	dc400415 	stw	r17,16(sp)
    af38:	dc000315 	stw	r16,12(sp)
    af3c:	1245c83a 	sub	r2,r2,r9
    af40:	d8800215 	stw	r2,8(sp)
    af44:	003fdd06 	br	aebc <__floatunsidf+0x38>
    af48:	0255c83a 	sub	r10,zero,r9
    af4c:	51bff804 	addi	r6,r10,-32
    af50:	30001b16 	blt	r6,zero,afc0 <__floatunsidf+0x13c>
    af54:	b9a8d83a 	srl	r20,r23,r6
    af58:	002b883a 	mov	r21,zero
    af5c:	000f883a 	mov	r7,zero
    af60:	01000044 	movi	r4,1
    af64:	0011883a 	mov	r8,zero
    af68:	30002516 	blt	r6,zero,b000 <__floatunsidf+0x17c>
    af6c:	21a6983a 	sll	r19,r4,r6
    af70:	0025883a 	mov	r18,zero
    af74:	00bfffc4 	movi	r2,-1
    af78:	9089883a 	add	r4,r18,r2
    af7c:	988b883a 	add	r5,r19,r2
    af80:	248d803a 	cmpltu	r6,r4,r18
    af84:	314b883a 	add	r5,r6,r5
    af88:	b104703a 	and	r2,r22,r4
    af8c:	b946703a 	and	r3,r23,r5
    af90:	10c4b03a 	or	r2,r2,r3
    af94:	10000226 	beq	r2,zero,afa0 <__floatunsidf+0x11c>
    af98:	01c00044 	movi	r7,1
    af9c:	0011883a 	mov	r8,zero
    afa0:	d9000217 	ldw	r4,8(sp)
    afa4:	a1c4b03a 	or	r2,r20,r7
    afa8:	aa06b03a 	or	r3,r21,r8
    afac:	2249c83a 	sub	r4,r4,r9
    afb0:	d8c00415 	stw	r3,16(sp)
    afb4:	d9000215 	stw	r4,8(sp)
    afb8:	d8800315 	stw	r2,12(sp)
    afbc:	003fbf06 	br	aebc <__floatunsidf+0x38>
    afc0:	bdc7883a 	add	r3,r23,r23
    afc4:	008007c4 	movi	r2,31
    afc8:	1285c83a 	sub	r2,r2,r10
    afcc:	1886983a 	sll	r3,r3,r2
    afd0:	b2a8d83a 	srl	r20,r22,r10
    afd4:	baaad83a 	srl	r21,r23,r10
    afd8:	1d28b03a 	or	r20,r3,r20
    afdc:	003fdf06 	br	af5c <__floatunsidf+0xd8>
    afe0:	b006d07a 	srli	r3,r22,1
    afe4:	008007c4 	movi	r2,31
    afe8:	1245c83a 	sub	r2,r2,r9
    afec:	1886d83a 	srl	r3,r3,r2
    aff0:	ba62983a 	sll	r17,r23,r9
    aff4:	b260983a 	sll	r16,r22,r9
    aff8:	1c62b03a 	or	r17,r3,r17
    affc:	003fcc06 	br	af30 <__floatunsidf+0xac>
    b000:	2006d07a 	srli	r3,r4,1
    b004:	008007c4 	movi	r2,31
    b008:	1285c83a 	sub	r2,r2,r10
    b00c:	18a6d83a 	srl	r19,r3,r2
    b010:	22a4983a 	sll	r18,r4,r10
    b014:	003fd706 	br	af74 <__floatunsidf+0xf0>

0000b018 <__muldi3>:
    b018:	2011883a 	mov	r8,r4
    b01c:	427fffcc 	andi	r9,r8,65535
    b020:	4018d43a 	srli	r12,r8,16
    b024:	32bfffcc 	andi	r10,r6,65535
    b028:	3016d43a 	srli	r11,r6,16
    b02c:	4a85383a 	mul	r2,r9,r10
    b030:	6295383a 	mul	r10,r12,r10
    b034:	4ad3383a 	mul	r9,r9,r11
    b038:	113fffcc 	andi	r4,r2,65535
    b03c:	1004d43a 	srli	r2,r2,16
    b040:	4a93883a 	add	r9,r9,r10
    b044:	3807883a 	mov	r3,r7
    b048:	1245883a 	add	r2,r2,r9
    b04c:	280f883a 	mov	r7,r5
    b050:	180b883a 	mov	r5,r3
    b054:	1006943a 	slli	r3,r2,16
    b058:	defffd04 	addi	sp,sp,-12
    b05c:	dc800215 	stw	r18,8(sp)
    b060:	1907883a 	add	r3,r3,r4
    b064:	dc400115 	stw	r17,4(sp)
    b068:	dc000015 	stw	r16,0(sp)
    b06c:	4165383a 	mul	r18,r8,r5
    b070:	31e3383a 	mul	r17,r6,r7
    b074:	1012d43a 	srli	r9,r2,16
    b078:	62d9383a 	mul	r12,r12,r11
    b07c:	181f883a 	mov	r15,r3
    b080:	1280022e 	bgeu	r2,r10,b08c <__muldi3+0x74>
    b084:	00800074 	movhi	r2,1
    b088:	6099883a 	add	r12,r12,r2
    b08c:	624d883a 	add	r6,r12,r9
    b090:	9187883a 	add	r3,r18,r6
    b094:	88c7883a 	add	r3,r17,r3
    b098:	7805883a 	mov	r2,r15
    b09c:	dc800217 	ldw	r18,8(sp)
    b0a0:	dc400117 	ldw	r17,4(sp)
    b0a4:	dc000017 	ldw	r16,0(sp)
    b0a8:	dec00304 	addi	sp,sp,12
    b0ac:	f800283a 	ret

0000b0b0 <__clzsi2>:
    b0b0:	00bfffd4 	movui	r2,65535
    b0b4:	11000e36 	bltu	r2,r4,b0f0 <__clzsi2+0x40>
    b0b8:	00803fc4 	movi	r2,255
    b0bc:	01400204 	movi	r5,8
    b0c0:	0007883a 	mov	r3,zero
    b0c4:	11001036 	bltu	r2,r4,b108 <__clzsi2+0x58>
    b0c8:	000b883a 	mov	r5,zero
    b0cc:	20c6d83a 	srl	r3,r4,r3
    b0d0:	00800074 	movhi	r2,1
    b0d4:	10b96904 	addi	r2,r2,-6748
    b0d8:	1887883a 	add	r3,r3,r2
    b0dc:	18800003 	ldbu	r2,0(r3)
    b0e0:	00c00804 	movi	r3,32
    b0e4:	2885883a 	add	r2,r5,r2
    b0e8:	1885c83a 	sub	r2,r3,r2
    b0ec:	f800283a 	ret
    b0f0:	01400404 	movi	r5,16
    b0f4:	00804034 	movhi	r2,256
    b0f8:	10bfffc4 	addi	r2,r2,-1
    b0fc:	2807883a 	mov	r3,r5
    b100:	113ff22e 	bgeu	r2,r4,b0cc <__clzsi2+0x1c>
    b104:	01400604 	movi	r5,24
    b108:	2807883a 	mov	r3,r5
    b10c:	20c6d83a 	srl	r3,r4,r3
    b110:	00800074 	movhi	r2,1
    b114:	10b96904 	addi	r2,r2,-6748
    b118:	1887883a 	add	r3,r3,r2
    b11c:	18800003 	ldbu	r2,0(r3)
    b120:	00c00804 	movi	r3,32
    b124:	2885883a 	add	r2,r5,r2
    b128:	1885c83a 	sub	r2,r3,r2
    b12c:	f800283a 	ret

0000b130 <__pack_d>:
    b130:	20c00017 	ldw	r3,0(r4)
    b134:	defffd04 	addi	sp,sp,-12
    b138:	dc000015 	stw	r16,0(sp)
    b13c:	dc800215 	stw	r18,8(sp)
    b140:	dc400115 	stw	r17,4(sp)
    b144:	00800044 	movi	r2,1
    b148:	22000317 	ldw	r8,12(r4)
    b14c:	001f883a 	mov	r15,zero
    b150:	22400417 	ldw	r9,16(r4)
    b154:	24000117 	ldw	r16,4(r4)
    b158:	10c0552e 	bgeu	r2,r3,b2b0 <__pack_d+0x180>
    b15c:	00800104 	movi	r2,4
    b160:	18804f26 	beq	r3,r2,b2a0 <__pack_d+0x170>
    b164:	00800084 	movi	r2,2
    b168:	18800226 	beq	r3,r2,b174 <__pack_d+0x44>
    b16c:	4244b03a 	or	r2,r8,r9
    b170:	10001a1e 	bne	r2,zero,b1dc <__pack_d+0xac>
    b174:	000d883a 	mov	r6,zero
    b178:	000f883a 	mov	r7,zero
    b17c:	0011883a 	mov	r8,zero
    b180:	00800434 	movhi	r2,16
    b184:	10bfffc4 	addi	r2,r2,-1
    b188:	301d883a 	mov	r14,r6
    b18c:	3884703a 	and	r2,r7,r2
    b190:	400a953a 	slli	r5,r8,20
    b194:	79bffc2c 	andhi	r6,r15,65520
    b198:	308cb03a 	or	r6,r6,r2
    b19c:	00e00434 	movhi	r3,32784
    b1a0:	18ffffc4 	addi	r3,r3,-1
    b1a4:	800497fa 	slli	r2,r16,31
    b1a8:	30c6703a 	and	r3,r6,r3
    b1ac:	1946b03a 	or	r3,r3,r5
    b1b0:	01600034 	movhi	r5,32768
    b1b4:	297fffc4 	addi	r5,r5,-1
    b1b8:	194a703a 	and	r5,r3,r5
    b1bc:	288ab03a 	or	r5,r5,r2
    b1c0:	2807883a 	mov	r3,r5
    b1c4:	7005883a 	mov	r2,r14
    b1c8:	dc800217 	ldw	r18,8(sp)
    b1cc:	dc400117 	ldw	r17,4(sp)
    b1d0:	dc000017 	ldw	r16,0(sp)
    b1d4:	dec00304 	addi	sp,sp,12
    b1d8:	f800283a 	ret
    b1dc:	21000217 	ldw	r4,8(r4)
    b1e0:	00bf0084 	movi	r2,-1022
    b1e4:	20803f16 	blt	r4,r2,b2e4 <__pack_d+0x1b4>
    b1e8:	0080ffc4 	movi	r2,1023
    b1ec:	11002c16 	blt	r2,r4,b2a0 <__pack_d+0x170>
    b1f0:	00803fc4 	movi	r2,255
    b1f4:	408c703a 	and	r6,r8,r2
    b1f8:	00802004 	movi	r2,128
    b1fc:	0007883a 	mov	r3,zero
    b200:	000f883a 	mov	r7,zero
    b204:	2280ffc4 	addi	r10,r4,1023
    b208:	30801e26 	beq	r6,r2,b284 <__pack_d+0x154>
    b20c:	00801fc4 	movi	r2,127
    b210:	4089883a 	add	r4,r8,r2
    b214:	220d803a 	cmpltu	r6,r4,r8
    b218:	324d883a 	add	r6,r6,r9
    b21c:	2011883a 	mov	r8,r4
    b220:	3013883a 	mov	r9,r6
    b224:	00880034 	movhi	r2,8192
    b228:	10bfffc4 	addi	r2,r2,-1
    b22c:	12400d36 	bltu	r2,r9,b264 <__pack_d+0x134>
    b230:	4804963a 	slli	r2,r9,24
    b234:	400cd23a 	srli	r6,r8,8
    b238:	480ed23a 	srli	r7,r9,8
    b23c:	013fffc4 	movi	r4,-1
    b240:	118cb03a 	or	r6,r2,r6
    b244:	01400434 	movhi	r5,16
    b248:	297fffc4 	addi	r5,r5,-1
    b24c:	3104703a 	and	r2,r6,r4
    b250:	3946703a 	and	r3,r7,r5
    b254:	5201ffcc 	andi	r8,r10,2047
    b258:	100d883a 	mov	r6,r2
    b25c:	180f883a 	mov	r7,r3
    b260:	003fc706 	br	b180 <__pack_d+0x50>
    b264:	480897fa 	slli	r4,r9,31
    b268:	4004d07a 	srli	r2,r8,1
    b26c:	4806d07a 	srli	r3,r9,1
    b270:	52800044 	addi	r10,r10,1
    b274:	2084b03a 	or	r2,r4,r2
    b278:	1011883a 	mov	r8,r2
    b27c:	1813883a 	mov	r9,r3
    b280:	003feb06 	br	b230 <__pack_d+0x100>
    b284:	383fe11e 	bne	r7,zero,b20c <__pack_d+0xdc>
    b288:	01004004 	movi	r4,256
    b28c:	4104703a 	and	r2,r8,r4
    b290:	10c4b03a 	or	r2,r2,r3
    b294:	103fe326 	beq	r2,zero,b224 <__pack_d+0xf4>
    b298:	3005883a 	mov	r2,r6
    b29c:	003fdc06 	br	b210 <__pack_d+0xe0>
    b2a0:	000d883a 	mov	r6,zero
    b2a4:	000f883a 	mov	r7,zero
    b2a8:	0201ffc4 	movi	r8,2047
    b2ac:	003fb406 	br	b180 <__pack_d+0x50>
    b2b0:	0005883a 	mov	r2,zero
    b2b4:	00c00234 	movhi	r3,8
    b2b8:	408cb03a 	or	r6,r8,r2
    b2bc:	48ceb03a 	or	r7,r9,r3
    b2c0:	013fffc4 	movi	r4,-1
    b2c4:	01400434 	movhi	r5,16
    b2c8:	297fffc4 	addi	r5,r5,-1
    b2cc:	3104703a 	and	r2,r6,r4
    b2d0:	3946703a 	and	r3,r7,r5
    b2d4:	100d883a 	mov	r6,r2
    b2d8:	180f883a 	mov	r7,r3
    b2dc:	0201ffc4 	movi	r8,2047
    b2e0:	003fa706 	br	b180 <__pack_d+0x50>
    b2e4:	1109c83a 	sub	r4,r2,r4
    b2e8:	00800e04 	movi	r2,56
    b2ec:	11004316 	blt	r2,r4,b3fc <__pack_d+0x2cc>
    b2f0:	21fff804 	addi	r7,r4,-32
    b2f4:	38004516 	blt	r7,zero,b40c <__pack_d+0x2dc>
    b2f8:	49d8d83a 	srl	r12,r9,r7
    b2fc:	001b883a 	mov	r13,zero
    b300:	0023883a 	mov	r17,zero
    b304:	01400044 	movi	r5,1
    b308:	0025883a 	mov	r18,zero
    b30c:	38004716 	blt	r7,zero,b42c <__pack_d+0x2fc>
    b310:	29d6983a 	sll	r11,r5,r7
    b314:	0015883a 	mov	r10,zero
    b318:	00bfffc4 	movi	r2,-1
    b31c:	5089883a 	add	r4,r10,r2
    b320:	588b883a 	add	r5,r11,r2
    b324:	228d803a 	cmpltu	r6,r4,r10
    b328:	314b883a 	add	r5,r6,r5
    b32c:	4104703a 	and	r2,r8,r4
    b330:	4946703a 	and	r3,r9,r5
    b334:	10c4b03a 	or	r2,r2,r3
    b338:	10000226 	beq	r2,zero,b344 <__pack_d+0x214>
    b33c:	04400044 	movi	r17,1
    b340:	0025883a 	mov	r18,zero
    b344:	00803fc4 	movi	r2,255
    b348:	644eb03a 	or	r7,r12,r17
    b34c:	3892703a 	and	r9,r7,r2
    b350:	00802004 	movi	r2,128
    b354:	6c90b03a 	or	r8,r13,r18
    b358:	0015883a 	mov	r10,zero
    b35c:	48801626 	beq	r9,r2,b3b8 <__pack_d+0x288>
    b360:	01001fc4 	movi	r4,127
    b364:	3905883a 	add	r2,r7,r4
    b368:	11cd803a 	cmpltu	r6,r2,r7
    b36c:	320d883a 	add	r6,r6,r8
    b370:	100f883a 	mov	r7,r2
    b374:	00840034 	movhi	r2,4096
    b378:	10bfffc4 	addi	r2,r2,-1
    b37c:	3011883a 	mov	r8,r6
    b380:	0007883a 	mov	r3,zero
    b384:	11801b36 	bltu	r2,r6,b3f4 <__pack_d+0x2c4>
    b388:	4004963a 	slli	r2,r8,24
    b38c:	3808d23a 	srli	r4,r7,8
    b390:	400ad23a 	srli	r5,r8,8
    b394:	1813883a 	mov	r9,r3
    b398:	1108b03a 	or	r4,r2,r4
    b39c:	00bfffc4 	movi	r2,-1
    b3a0:	00c00434 	movhi	r3,16
    b3a4:	18ffffc4 	addi	r3,r3,-1
    b3a8:	208c703a 	and	r6,r4,r2
    b3ac:	28ce703a 	and	r7,r5,r3
    b3b0:	4a01ffcc 	andi	r8,r9,2047
    b3b4:	003f7206 	br	b180 <__pack_d+0x50>
    b3b8:	503fe91e 	bne	r10,zero,b360 <__pack_d+0x230>
    b3bc:	01004004 	movi	r4,256
    b3c0:	3904703a 	and	r2,r7,r4
    b3c4:	0007883a 	mov	r3,zero
    b3c8:	10c4b03a 	or	r2,r2,r3
    b3cc:	10000626 	beq	r2,zero,b3e8 <__pack_d+0x2b8>
    b3d0:	3a45883a 	add	r2,r7,r9
    b3d4:	11cd803a 	cmpltu	r6,r2,r7
    b3d8:	320d883a 	add	r6,r6,r8
    b3dc:	100f883a 	mov	r7,r2
    b3e0:	3011883a 	mov	r8,r6
    b3e4:	0007883a 	mov	r3,zero
    b3e8:	00840034 	movhi	r2,4096
    b3ec:	10bfffc4 	addi	r2,r2,-1
    b3f0:	123fe52e 	bgeu	r2,r8,b388 <__pack_d+0x258>
    b3f4:	00c00044 	movi	r3,1
    b3f8:	003fe306 	br	b388 <__pack_d+0x258>
    b3fc:	0009883a 	mov	r4,zero
    b400:	0013883a 	mov	r9,zero
    b404:	000b883a 	mov	r5,zero
    b408:	003fe406 	br	b39c <__pack_d+0x26c>
    b40c:	4a47883a 	add	r3,r9,r9
    b410:	008007c4 	movi	r2,31
    b414:	1105c83a 	sub	r2,r2,r4
    b418:	1886983a 	sll	r3,r3,r2
    b41c:	4118d83a 	srl	r12,r8,r4
    b420:	491ad83a 	srl	r13,r9,r4
    b424:	1b18b03a 	or	r12,r3,r12
    b428:	003fb506 	br	b300 <__pack_d+0x1d0>
    b42c:	2806d07a 	srli	r3,r5,1
    b430:	008007c4 	movi	r2,31
    b434:	1105c83a 	sub	r2,r2,r4
    b438:	1896d83a 	srl	r11,r3,r2
    b43c:	2914983a 	sll	r10,r5,r4
    b440:	003fb506 	br	b318 <__pack_d+0x1e8>

0000b444 <__unpack_d>:
    b444:	20c00117 	ldw	r3,4(r4)
    b448:	22400017 	ldw	r9,0(r4)
    b44c:	00800434 	movhi	r2,16
    b450:	10bfffc4 	addi	r2,r2,-1
    b454:	1808d53a 	srli	r4,r3,20
    b458:	180cd7fa 	srli	r6,r3,31
    b45c:	1894703a 	and	r10,r3,r2
    b460:	2201ffcc 	andi	r8,r4,2047
    b464:	281b883a 	mov	r13,r5
    b468:	4817883a 	mov	r11,r9
    b46c:	29800115 	stw	r6,4(r5)
    b470:	5019883a 	mov	r12,r10
    b474:	40001e1e 	bne	r8,zero,b4f0 <__unpack_d+0xac>
    b478:	4a84b03a 	or	r2,r9,r10
    b47c:	10001926 	beq	r2,zero,b4e4 <__unpack_d+0xa0>
    b480:	4804d63a 	srli	r2,r9,24
    b484:	500c923a 	slli	r6,r10,8
    b488:	013f0084 	movi	r4,-1022
    b48c:	00c40034 	movhi	r3,4096
    b490:	18ffffc4 	addi	r3,r3,-1
    b494:	118cb03a 	or	r6,r2,r6
    b498:	008000c4 	movi	r2,3
    b49c:	480a923a 	slli	r5,r9,8
    b4a0:	68800015 	stw	r2,0(r13)
    b4a4:	69000215 	stw	r4,8(r13)
    b4a8:	19800b36 	bltu	r3,r6,b4d8 <__unpack_d+0x94>
    b4ac:	200f883a 	mov	r7,r4
    b4b0:	1811883a 	mov	r8,r3
    b4b4:	2945883a 	add	r2,r5,r5
    b4b8:	1149803a 	cmpltu	r4,r2,r5
    b4bc:	3187883a 	add	r3,r6,r6
    b4c0:	20c9883a 	add	r4,r4,r3
    b4c4:	100b883a 	mov	r5,r2
    b4c8:	200d883a 	mov	r6,r4
    b4cc:	39ffffc4 	addi	r7,r7,-1
    b4d0:	413ff82e 	bgeu	r8,r4,b4b4 <__unpack_d+0x70>
    b4d4:	69c00215 	stw	r7,8(r13)
    b4d8:	69800415 	stw	r6,16(r13)
    b4dc:	69400315 	stw	r5,12(r13)
    b4e0:	f800283a 	ret
    b4e4:	00800084 	movi	r2,2
    b4e8:	28800015 	stw	r2,0(r5)
    b4ec:	f800283a 	ret
    b4f0:	0081ffc4 	movi	r2,2047
    b4f4:	40800f26 	beq	r8,r2,b534 <__unpack_d+0xf0>
    b4f8:	480cd63a 	srli	r6,r9,24
    b4fc:	5006923a 	slli	r3,r10,8
    b500:	4804923a 	slli	r2,r9,8
    b504:	0009883a 	mov	r4,zero
    b508:	30c6b03a 	or	r3,r6,r3
    b50c:	01440034 	movhi	r5,4096
    b510:	110cb03a 	or	r6,r2,r4
    b514:	423f0044 	addi	r8,r8,-1023
    b518:	194eb03a 	or	r7,r3,r5
    b51c:	008000c4 	movi	r2,3
    b520:	69c00415 	stw	r7,16(r13)
    b524:	6a000215 	stw	r8,8(r13)
    b528:	68800015 	stw	r2,0(r13)
    b52c:	69800315 	stw	r6,12(r13)
    b530:	f800283a 	ret
    b534:	4a84b03a 	or	r2,r9,r10
    b538:	1000031e 	bne	r2,zero,b548 <__unpack_d+0x104>
    b53c:	00800104 	movi	r2,4
    b540:	28800015 	stw	r2,0(r5)
    b544:	f800283a 	ret
    b548:	0009883a 	mov	r4,zero
    b54c:	01400234 	movhi	r5,8
    b550:	4904703a 	and	r2,r9,r4
    b554:	5146703a 	and	r3,r10,r5
    b558:	10c4b03a 	or	r2,r2,r3
    b55c:	10000526 	beq	r2,zero,b574 <__unpack_d+0x130>
    b560:	00800044 	movi	r2,1
    b564:	68800015 	stw	r2,0(r13)
    b568:	6b000415 	stw	r12,16(r13)
    b56c:	6ac00315 	stw	r11,12(r13)
    b570:	f800283a 	ret
    b574:	68000015 	stw	zero,0(r13)
    b578:	003ffb06 	br	b568 <__unpack_d+0x124>

0000b57c <__fpcmp_parts_d>:
    b57c:	21800017 	ldw	r6,0(r4)
    b580:	00c00044 	movi	r3,1
    b584:	19800a2e 	bgeu	r3,r6,b5b0 <__fpcmp_parts_d+0x34>
    b588:	28800017 	ldw	r2,0(r5)
    b58c:	1880082e 	bgeu	r3,r2,b5b0 <__fpcmp_parts_d+0x34>
    b590:	00c00104 	movi	r3,4
    b594:	30c02626 	beq	r6,r3,b630 <__fpcmp_parts_d+0xb4>
    b598:	10c02226 	beq	r2,r3,b624 <__fpcmp_parts_d+0xa8>
    b59c:	00c00084 	movi	r3,2
    b5a0:	30c00526 	beq	r6,r3,b5b8 <__fpcmp_parts_d+0x3c>
    b5a4:	10c0071e 	bne	r2,r3,b5c4 <__fpcmp_parts_d+0x48>
    b5a8:	20800117 	ldw	r2,4(r4)
    b5ac:	1000091e 	bne	r2,zero,b5d4 <__fpcmp_parts_d+0x58>
    b5b0:	00800044 	movi	r2,1
    b5b4:	f800283a 	ret
    b5b8:	10c01a1e 	bne	r2,r3,b624 <__fpcmp_parts_d+0xa8>
    b5bc:	0005883a 	mov	r2,zero
    b5c0:	f800283a 	ret
    b5c4:	22000117 	ldw	r8,4(r4)
    b5c8:	28800117 	ldw	r2,4(r5)
    b5cc:	40800326 	beq	r8,r2,b5dc <__fpcmp_parts_d+0x60>
    b5d0:	403ff726 	beq	r8,zero,b5b0 <__fpcmp_parts_d+0x34>
    b5d4:	00bfffc4 	movi	r2,-1
    b5d8:	f800283a 	ret
    b5dc:	20c00217 	ldw	r3,8(r4)
    b5e0:	28800217 	ldw	r2,8(r5)
    b5e4:	10fffa16 	blt	r2,r3,b5d0 <__fpcmp_parts_d+0x54>
    b5e8:	18800916 	blt	r3,r2,b610 <__fpcmp_parts_d+0x94>
    b5ec:	21c00417 	ldw	r7,16(r4)
    b5f0:	28c00417 	ldw	r3,16(r5)
    b5f4:	21800317 	ldw	r6,12(r4)
    b5f8:	28800317 	ldw	r2,12(r5)
    b5fc:	19fff436 	bltu	r3,r7,b5d0 <__fpcmp_parts_d+0x54>
    b600:	38c00526 	beq	r7,r3,b618 <__fpcmp_parts_d+0x9c>
    b604:	38c00236 	bltu	r7,r3,b610 <__fpcmp_parts_d+0x94>
    b608:	19ffec1e 	bne	r3,r7,b5bc <__fpcmp_parts_d+0x40>
    b60c:	30bfeb2e 	bgeu	r6,r2,b5bc <__fpcmp_parts_d+0x40>
    b610:	403fe71e 	bne	r8,zero,b5b0 <__fpcmp_parts_d+0x34>
    b614:	003fef06 	br	b5d4 <__fpcmp_parts_d+0x58>
    b618:	11bffa2e 	bgeu	r2,r6,b604 <__fpcmp_parts_d+0x88>
    b61c:	403fe426 	beq	r8,zero,b5b0 <__fpcmp_parts_d+0x34>
    b620:	003fec06 	br	b5d4 <__fpcmp_parts_d+0x58>
    b624:	28800117 	ldw	r2,4(r5)
    b628:	103fe11e 	bne	r2,zero,b5b0 <__fpcmp_parts_d+0x34>
    b62c:	003fe906 	br	b5d4 <__fpcmp_parts_d+0x58>
    b630:	11bfdd1e 	bne	r2,r6,b5a8 <__fpcmp_parts_d+0x2c>
    b634:	28c00117 	ldw	r3,4(r5)
    b638:	20800117 	ldw	r2,4(r4)
    b63c:	1885c83a 	sub	r2,r3,r2
    b640:	f800283a 	ret

0000b644 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b644:	defff804 	addi	sp,sp,-32
    b648:	dfc00715 	stw	ra,28(sp)
    b64c:	df000615 	stw	fp,24(sp)
    b650:	df000604 	addi	fp,sp,24
    b654:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b658:	e0bffc17 	ldw	r2,-16(fp)
    b65c:	1004803a 	cmplt	r2,r2,zero
    b660:	1000081e 	bne	r2,zero,b684 <close+0x40>
    b664:	e0bffc17 	ldw	r2,-16(fp)
    b668:	10800324 	muli	r2,r2,12
    b66c:	1007883a 	mov	r3,r2
    b670:	00800074 	movhi	r2,1
    b674:	10bbd304 	addi	r2,r2,-4276
    b678:	1887883a 	add	r3,r3,r2
    b67c:	e0ffff15 	stw	r3,-4(fp)
    b680:	00000106 	br	b688 <close+0x44>
    b684:	e03fff15 	stw	zero,-4(fp)
    b688:	e0bfff17 	ldw	r2,-4(fp)
    b68c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    b690:	e0bffb17 	ldw	r2,-20(fp)
    b694:	1005003a 	cmpeq	r2,r2,zero
    b698:	10001d1e 	bne	r2,zero,b710 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b69c:	e0bffb17 	ldw	r2,-20(fp)
    b6a0:	10800017 	ldw	r2,0(r2)
    b6a4:	10800417 	ldw	r2,16(r2)
    b6a8:	1005003a 	cmpeq	r2,r2,zero
    b6ac:	1000071e 	bne	r2,zero,b6cc <close+0x88>
    b6b0:	e0bffb17 	ldw	r2,-20(fp)
    b6b4:	10800017 	ldw	r2,0(r2)
    b6b8:	10800417 	ldw	r2,16(r2)
    b6bc:	e13ffb17 	ldw	r4,-20(fp)
    b6c0:	103ee83a 	callr	r2
    b6c4:	e0bffe15 	stw	r2,-8(fp)
    b6c8:	00000106 	br	b6d0 <close+0x8c>
    b6cc:	e03ffe15 	stw	zero,-8(fp)
    b6d0:	e0bffe17 	ldw	r2,-8(fp)
    b6d4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b6d8:	e13ffc17 	ldw	r4,-16(fp)
    b6dc:	000c0a80 	call	c0a8 <alt_release_fd>
    if (rval < 0)
    b6e0:	e0bffa17 	ldw	r2,-24(fp)
    b6e4:	1004403a 	cmpge	r2,r2,zero
    b6e8:	1000071e 	bne	r2,zero,b708 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    b6ec:	000b7400 	call	b740 <alt_get_errno>
    b6f0:	e0fffa17 	ldw	r3,-24(fp)
    b6f4:	00c7c83a 	sub	r3,zero,r3
    b6f8:	10c00015 	stw	r3,0(r2)
      return -1;
    b6fc:	00bfffc4 	movi	r2,-1
    b700:	e0bffd15 	stw	r2,-12(fp)
    b704:	00000806 	br	b728 <close+0xe4>
    }
    return 0;
    b708:	e03ffd15 	stw	zero,-12(fp)
    b70c:	00000606 	br	b728 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b710:	000b7400 	call	b740 <alt_get_errno>
    b714:	1007883a 	mov	r3,r2
    b718:	00801444 	movi	r2,81
    b71c:	18800015 	stw	r2,0(r3)
    return -1;
    b720:	00bfffc4 	movi	r2,-1
    b724:	e0bffd15 	stw	r2,-12(fp)
    b728:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    b72c:	e037883a 	mov	sp,fp
    b730:	dfc00117 	ldw	ra,4(sp)
    b734:	df000017 	ldw	fp,0(sp)
    b738:	dec00204 	addi	sp,sp,8
    b73c:	f800283a 	ret

0000b740 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b740:	defffd04 	addi	sp,sp,-12
    b744:	dfc00215 	stw	ra,8(sp)
    b748:	df000115 	stw	fp,4(sp)
    b74c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b750:	00800074 	movhi	r2,1
    b754:	10805704 	addi	r2,r2,348
    b758:	10800017 	ldw	r2,0(r2)
    b75c:	1005003a 	cmpeq	r2,r2,zero
    b760:	1000061e 	bne	r2,zero,b77c <alt_get_errno+0x3c>
    b764:	00800074 	movhi	r2,1
    b768:	10805704 	addi	r2,r2,348
    b76c:	10800017 	ldw	r2,0(r2)
    b770:	103ee83a 	callr	r2
    b774:	e0bfff15 	stw	r2,-4(fp)
    b778:	00000306 	br	b788 <alt_get_errno+0x48>
    b77c:	00800074 	movhi	r2,1
    b780:	10870f04 	addi	r2,r2,7228
    b784:	e0bfff15 	stw	r2,-4(fp)
    b788:	e0bfff17 	ldw	r2,-4(fp)
}
    b78c:	e037883a 	mov	sp,fp
    b790:	dfc00117 	ldw	ra,4(sp)
    b794:	df000017 	ldw	fp,0(sp)
    b798:	dec00204 	addi	sp,sp,8
    b79c:	f800283a 	ret

0000b7a0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b7a0:	defffc04 	addi	sp,sp,-16
    b7a4:	df000315 	stw	fp,12(sp)
    b7a8:	df000304 	addi	fp,sp,12
    b7ac:	e13ffd15 	stw	r4,-12(fp)
    b7b0:	e17ffe15 	stw	r5,-8(fp)
    b7b4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b7b8:	e0bfff17 	ldw	r2,-4(fp)
}
    b7bc:	e037883a 	mov	sp,fp
    b7c0:	df000017 	ldw	fp,0(sp)
    b7c4:	dec00104 	addi	sp,sp,4
    b7c8:	f800283a 	ret

0000b7cc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    b7cc:	defffd04 	addi	sp,sp,-12
    b7d0:	df000215 	stw	fp,8(sp)
    b7d4:	df000204 	addi	fp,sp,8
    b7d8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    b7dc:	e0bfff17 	ldw	r2,-4(fp)
    b7e0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b7e4:	e0bffe17 	ldw	r2,-8(fp)
    b7e8:	1005003a 	cmpeq	r2,r2,zero
    b7ec:	1000021e 	bne	r2,zero,b7f8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    b7f0:	002af070 	cmpltui	zero,zero,43969
    b7f4:	00000106 	br	b7fc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    b7f8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    b7fc:	e037883a 	mov	sp,fp
    b800:	df000017 	ldw	fp,0(sp)
    b804:	dec00104 	addi	sp,sp,4
    b808:	f800283a 	ret

0000b80c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b80c:	defffd04 	addi	sp,sp,-12
    b810:	dfc00215 	stw	ra,8(sp)
    b814:	df000115 	stw	fp,4(sp)
    b818:	df000104 	addi	fp,sp,4
    b81c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    b820:	e13fff17 	ldw	r4,-4(fp)
    b824:	000b7cc0 	call	b7cc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b828:	003fff06 	br	b828 <_exit+0x1c>

0000b82c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b82c:	defff904 	addi	sp,sp,-28
    b830:	dfc00615 	stw	ra,24(sp)
    b834:	df000515 	stw	fp,20(sp)
    b838:	df000504 	addi	fp,sp,20
    b83c:	e13ffc15 	stw	r4,-16(fp)
    b840:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b844:	e0bffc17 	ldw	r2,-16(fp)
    b848:	1004803a 	cmplt	r2,r2,zero
    b84c:	1000081e 	bne	r2,zero,b870 <fstat+0x44>
    b850:	e0bffc17 	ldw	r2,-16(fp)
    b854:	10800324 	muli	r2,r2,12
    b858:	1007883a 	mov	r3,r2
    b85c:	00800074 	movhi	r2,1
    b860:	10bbd304 	addi	r2,r2,-4276
    b864:	1887883a 	add	r3,r3,r2
    b868:	e0ffff15 	stw	r3,-4(fp)
    b86c:	00000106 	br	b874 <fstat+0x48>
    b870:	e03fff15 	stw	zero,-4(fp)
    b874:	e0bfff17 	ldw	r2,-4(fp)
    b878:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b87c:	e0bffb17 	ldw	r2,-20(fp)
    b880:	1005003a 	cmpeq	r2,r2,zero
    b884:	1000121e 	bne	r2,zero,b8d0 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b888:	e0bffb17 	ldw	r2,-20(fp)
    b88c:	10800017 	ldw	r2,0(r2)
    b890:	10800817 	ldw	r2,32(r2)
    b894:	1005003a 	cmpeq	r2,r2,zero
    b898:	1000081e 	bne	r2,zero,b8bc <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    b89c:	e0bffb17 	ldw	r2,-20(fp)
    b8a0:	10800017 	ldw	r2,0(r2)
    b8a4:	10800817 	ldw	r2,32(r2)
    b8a8:	e13ffb17 	ldw	r4,-20(fp)
    b8ac:	e17ffd17 	ldw	r5,-12(fp)
    b8b0:	103ee83a 	callr	r2
    b8b4:	e0bffe15 	stw	r2,-8(fp)
    b8b8:	00000b06 	br	b8e8 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b8bc:	e0fffd17 	ldw	r3,-12(fp)
    b8c0:	00880004 	movi	r2,8192
    b8c4:	18800115 	stw	r2,4(r3)
      return 0;
    b8c8:	e03ffe15 	stw	zero,-8(fp)
    b8cc:	00000606 	br	b8e8 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b8d0:	000b9000 	call	b900 <alt_get_errno>
    b8d4:	1007883a 	mov	r3,r2
    b8d8:	00801444 	movi	r2,81
    b8dc:	18800015 	stw	r2,0(r3)
    return -1;
    b8e0:	00bfffc4 	movi	r2,-1
    b8e4:	e0bffe15 	stw	r2,-8(fp)
    b8e8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b8ec:	e037883a 	mov	sp,fp
    b8f0:	dfc00117 	ldw	ra,4(sp)
    b8f4:	df000017 	ldw	fp,0(sp)
    b8f8:	dec00204 	addi	sp,sp,8
    b8fc:	f800283a 	ret

0000b900 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b900:	defffd04 	addi	sp,sp,-12
    b904:	dfc00215 	stw	ra,8(sp)
    b908:	df000115 	stw	fp,4(sp)
    b90c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b910:	00800074 	movhi	r2,1
    b914:	10805704 	addi	r2,r2,348
    b918:	10800017 	ldw	r2,0(r2)
    b91c:	1005003a 	cmpeq	r2,r2,zero
    b920:	1000061e 	bne	r2,zero,b93c <alt_get_errno+0x3c>
    b924:	00800074 	movhi	r2,1
    b928:	10805704 	addi	r2,r2,348
    b92c:	10800017 	ldw	r2,0(r2)
    b930:	103ee83a 	callr	r2
    b934:	e0bfff15 	stw	r2,-4(fp)
    b938:	00000306 	br	b948 <alt_get_errno+0x48>
    b93c:	00800074 	movhi	r2,1
    b940:	10870f04 	addi	r2,r2,7228
    b944:	e0bfff15 	stw	r2,-4(fp)
    b948:	e0bfff17 	ldw	r2,-4(fp)
}
    b94c:	e037883a 	mov	sp,fp
    b950:	dfc00117 	ldw	ra,4(sp)
    b954:	df000017 	ldw	fp,0(sp)
    b958:	dec00204 	addi	sp,sp,8
    b95c:	f800283a 	ret

0000b960 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    b960:	deffef04 	addi	sp,sp,-68
    b964:	df001015 	stw	fp,64(sp)
    b968:	df001004 	addi	fp,sp,64
    b96c:	e13ffc15 	stw	r4,-16(fp)
    b970:	e17ffd15 	stw	r5,-12(fp)
    b974:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    b978:	00bffa84 	movi	r2,-22
    b97c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b980:	e0bffc17 	ldw	r2,-16(fp)
    b984:	10800828 	cmpgeui	r2,r2,32
    b988:	1000601e 	bne	r2,zero,bb0c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b98c:	0005303a 	rdctl	r2,status
    b990:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b994:	e0fff917 	ldw	r3,-28(fp)
    b998:	00bfff84 	movi	r2,-2
    b99c:	1884703a 	and	r2,r3,r2
    b9a0:	1001703a 	wrctl	status,r2
  
  return context;
    b9a4:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    b9a8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    b9ac:	e0bffc17 	ldw	r2,-16(fp)
    b9b0:	00c00074 	movhi	r3,1
    b9b4:	18c7cc04 	addi	r3,r3,7984
    b9b8:	100490fa 	slli	r2,r2,3
    b9bc:	10c7883a 	add	r3,r2,r3
    b9c0:	e0bffe17 	ldw	r2,-8(fp)
    b9c4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    b9c8:	e0bffc17 	ldw	r2,-16(fp)
    b9cc:	00c00074 	movhi	r3,1
    b9d0:	18c7cc04 	addi	r3,r3,7984
    b9d4:	100490fa 	slli	r2,r2,3
    b9d8:	10c5883a 	add	r2,r2,r3
    b9dc:	10c00104 	addi	r3,r2,4
    b9e0:	e0bffd17 	ldw	r2,-12(fp)
    b9e4:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    b9e8:	e0bffe17 	ldw	r2,-8(fp)
    b9ec:	1005003a 	cmpeq	r2,r2,zero
    b9f0:	1000201e 	bne	r2,zero,ba74 <alt_irq_register+0x114>
    b9f4:	e0bffc17 	ldw	r2,-16(fp)
    b9f8:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b9fc:	0005303a 	rdctl	r2,status
    ba00:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba04:	e0fff617 	ldw	r3,-40(fp)
    ba08:	00bfff84 	movi	r2,-2
    ba0c:	1884703a 	and	r2,r3,r2
    ba10:	1001703a 	wrctl	status,r2
  
  return context;
    ba14:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ba18:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    ba1c:	e0fff717 	ldw	r3,-36(fp)
    ba20:	00800044 	movi	r2,1
    ba24:	10c4983a 	sll	r2,r2,r3
    ba28:	1007883a 	mov	r3,r2
    ba2c:	00800074 	movhi	r2,1
    ba30:	10871304 	addi	r2,r2,7244
    ba34:	10800017 	ldw	r2,0(r2)
    ba38:	1886b03a 	or	r3,r3,r2
    ba3c:	00800074 	movhi	r2,1
    ba40:	10871304 	addi	r2,r2,7244
    ba44:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ba48:	00800074 	movhi	r2,1
    ba4c:	10871304 	addi	r2,r2,7244
    ba50:	10800017 	ldw	r2,0(r2)
    ba54:	100170fa 	wrctl	ienable,r2
    ba58:	e0bff817 	ldw	r2,-32(fp)
    ba5c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba60:	e0bff517 	ldw	r2,-44(fp)
    ba64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ba68:	0005883a 	mov	r2,zero
    ba6c:	e0bfff15 	stw	r2,-4(fp)
    ba70:	00002006 	br	baf4 <alt_irq_register+0x194>
    ba74:	e0bffc17 	ldw	r2,-16(fp)
    ba78:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba7c:	0005303a 	rdctl	r2,status
    ba80:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba84:	e0fff217 	ldw	r3,-56(fp)
    ba88:	00bfff84 	movi	r2,-2
    ba8c:	1884703a 	and	r2,r3,r2
    ba90:	1001703a 	wrctl	status,r2
  
  return context;
    ba94:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ba98:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    ba9c:	e0fff317 	ldw	r3,-52(fp)
    baa0:	00800044 	movi	r2,1
    baa4:	10c4983a 	sll	r2,r2,r3
    baa8:	0084303a 	nor	r2,zero,r2
    baac:	1007883a 	mov	r3,r2
    bab0:	00800074 	movhi	r2,1
    bab4:	10871304 	addi	r2,r2,7244
    bab8:	10800017 	ldw	r2,0(r2)
    babc:	1886703a 	and	r3,r3,r2
    bac0:	00800074 	movhi	r2,1
    bac4:	10871304 	addi	r2,r2,7244
    bac8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bacc:	00800074 	movhi	r2,1
    bad0:	10871304 	addi	r2,r2,7244
    bad4:	10800017 	ldw	r2,0(r2)
    bad8:	100170fa 	wrctl	ienable,r2
    badc:	e0bff417 	ldw	r2,-48(fp)
    bae0:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bae4:	e0bff117 	ldw	r2,-60(fp)
    bae8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    baec:	0005883a 	mov	r2,zero
    baf0:	e0bfff15 	stw	r2,-4(fp)
    baf4:	e0bfff17 	ldw	r2,-4(fp)
    baf8:	e0bffb15 	stw	r2,-20(fp)
    bafc:	e0bffa17 	ldw	r2,-24(fp)
    bb00:	e0bff015 	stw	r2,-64(fp)
    bb04:	e0bff017 	ldw	r2,-64(fp)
    bb08:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    bb0c:	e0bffb17 	ldw	r2,-20(fp)
}
    bb10:	e037883a 	mov	sp,fp
    bb14:	df000017 	ldw	fp,0(sp)
    bb18:	dec00104 	addi	sp,sp,4
    bb1c:	f800283a 	ret

0000bb20 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    bb20:	deffeb04 	addi	sp,sp,-84
    bb24:	dfc01415 	stw	ra,80(sp)
    bb28:	df001315 	stw	fp,76(sp)
    bb2c:	df001304 	addi	fp,sp,76
    bb30:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bb34:	e0bffd17 	ldw	r2,-12(fp)
    bb38:	1004803a 	cmplt	r2,r2,zero
    bb3c:	1000081e 	bne	r2,zero,bb60 <isatty+0x40>
    bb40:	e0bffd17 	ldw	r2,-12(fp)
    bb44:	10800324 	muli	r2,r2,12
    bb48:	1007883a 	mov	r3,r2
    bb4c:	00800074 	movhi	r2,1
    bb50:	10bbd304 	addi	r2,r2,-4276
    bb54:	1887883a 	add	r3,r3,r2
    bb58:	e0ffff15 	stw	r3,-4(fp)
    bb5c:	00000106 	br	bb64 <isatty+0x44>
    bb60:	e03fff15 	stw	zero,-4(fp)
    bb64:	e0bfff17 	ldw	r2,-4(fp)
    bb68:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    bb6c:	e0bfed17 	ldw	r2,-76(fp)
    bb70:	1005003a 	cmpeq	r2,r2,zero
    bb74:	10000f1e 	bne	r2,zero,bbb4 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    bb78:	e0bfed17 	ldw	r2,-76(fp)
    bb7c:	10800017 	ldw	r2,0(r2)
    bb80:	10800817 	ldw	r2,32(r2)
    bb84:	1004c03a 	cmpne	r2,r2,zero
    bb88:	1000031e 	bne	r2,zero,bb98 <isatty+0x78>
    {
      return 1;
    bb8c:	00800044 	movi	r2,1
    bb90:	e0bffe15 	stw	r2,-8(fp)
    bb94:	00000c06 	br	bbc8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    bb98:	e17fee04 	addi	r5,fp,-72
    bb9c:	e13ffd17 	ldw	r4,-12(fp)
    bba0:	000b82c0 	call	b82c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    bba4:	e0bfef17 	ldw	r2,-68(fp)
    bba8:	10880020 	cmpeqi	r2,r2,8192
    bbac:	e0bffe15 	stw	r2,-8(fp)
    bbb0:	00000506 	br	bbc8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    bbb4:	000bbe00 	call	bbe0 <alt_get_errno>
    bbb8:	1007883a 	mov	r3,r2
    bbbc:	00801444 	movi	r2,81
    bbc0:	18800015 	stw	r2,0(r3)
    return 0;
    bbc4:	e03ffe15 	stw	zero,-8(fp)
    bbc8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    bbcc:	e037883a 	mov	sp,fp
    bbd0:	dfc00117 	ldw	ra,4(sp)
    bbd4:	df000017 	ldw	fp,0(sp)
    bbd8:	dec00204 	addi	sp,sp,8
    bbdc:	f800283a 	ret

0000bbe0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bbe0:	defffd04 	addi	sp,sp,-12
    bbe4:	dfc00215 	stw	ra,8(sp)
    bbe8:	df000115 	stw	fp,4(sp)
    bbec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bbf0:	00800074 	movhi	r2,1
    bbf4:	10805704 	addi	r2,r2,348
    bbf8:	10800017 	ldw	r2,0(r2)
    bbfc:	1005003a 	cmpeq	r2,r2,zero
    bc00:	1000061e 	bne	r2,zero,bc1c <alt_get_errno+0x3c>
    bc04:	00800074 	movhi	r2,1
    bc08:	10805704 	addi	r2,r2,348
    bc0c:	10800017 	ldw	r2,0(r2)
    bc10:	103ee83a 	callr	r2
    bc14:	e0bfff15 	stw	r2,-4(fp)
    bc18:	00000306 	br	bc28 <alt_get_errno+0x48>
    bc1c:	00800074 	movhi	r2,1
    bc20:	10870f04 	addi	r2,r2,7228
    bc24:	e0bfff15 	stw	r2,-4(fp)
    bc28:	e0bfff17 	ldw	r2,-4(fp)
}
    bc2c:	e037883a 	mov	sp,fp
    bc30:	dfc00117 	ldw	ra,4(sp)
    bc34:	df000017 	ldw	fp,0(sp)
    bc38:	dec00204 	addi	sp,sp,8
    bc3c:	f800283a 	ret

0000bc40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    bc40:	defffe04 	addi	sp,sp,-8
    bc44:	dfc00115 	stw	ra,4(sp)
    bc48:	df000015 	stw	fp,0(sp)
    bc4c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    bc50:	01000074 	movhi	r4,1
    bc54:	21005c04 	addi	r4,r4,368
    bc58:	01400074 	movhi	r5,1
    bc5c:	2979b604 	addi	r5,r5,-6440
    bc60:	01800074 	movhi	r6,1
    bc64:	31805c04 	addi	r6,r6,368
    bc68:	000bcc00 	call	bcc0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    bc6c:	01000034 	movhi	r4,0
    bc70:	21000004 	addi	r4,r4,0
    bc74:	01408034 	movhi	r5,512
    bc78:	29400804 	addi	r5,r5,32
    bc7c:	01808034 	movhi	r6,512
    bc80:	31806d04 	addi	r6,r6,436
    bc84:	000bcc00 	call	bcc0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    bc88:	01000074 	movhi	r4,1
    bc8c:	21383b04 	addi	r4,r4,-7956
    bc90:	01400074 	movhi	r5,1
    bc94:	29783b04 	addi	r5,r5,-7956
    bc98:	01800074 	movhi	r6,1
    bc9c:	31b9b604 	addi	r6,r6,-6440
    bca0:	000bcc00 	call	bcc0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    bca4:	000d10c0 	call	d10c <alt_dcache_flush_all>
  alt_icache_flush_all();
    bca8:	000d3040 	call	d304 <alt_icache_flush_all>
}
    bcac:	e037883a 	mov	sp,fp
    bcb0:	dfc00117 	ldw	ra,4(sp)
    bcb4:	df000017 	ldw	fp,0(sp)
    bcb8:	dec00204 	addi	sp,sp,8
    bcbc:	f800283a 	ret

0000bcc0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    bcc0:	defffc04 	addi	sp,sp,-16
    bcc4:	df000315 	stw	fp,12(sp)
    bcc8:	df000304 	addi	fp,sp,12
    bccc:	e13ffd15 	stw	r4,-12(fp)
    bcd0:	e17ffe15 	stw	r5,-8(fp)
    bcd4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    bcd8:	e0fffe17 	ldw	r3,-8(fp)
    bcdc:	e0bffd17 	ldw	r2,-12(fp)
    bce0:	18800e26 	beq	r3,r2,bd1c <alt_load_section+0x5c>
  {
    while( to != end )
    bce4:	00000a06 	br	bd10 <alt_load_section+0x50>
    {
      *to++ = *from++;
    bce8:	e0bffd17 	ldw	r2,-12(fp)
    bcec:	10c00017 	ldw	r3,0(r2)
    bcf0:	e0bffe17 	ldw	r2,-8(fp)
    bcf4:	10c00015 	stw	r3,0(r2)
    bcf8:	e0bffe17 	ldw	r2,-8(fp)
    bcfc:	10800104 	addi	r2,r2,4
    bd00:	e0bffe15 	stw	r2,-8(fp)
    bd04:	e0bffd17 	ldw	r2,-12(fp)
    bd08:	10800104 	addi	r2,r2,4
    bd0c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    bd10:	e0fffe17 	ldw	r3,-8(fp)
    bd14:	e0bfff17 	ldw	r2,-4(fp)
    bd18:	18bff31e 	bne	r3,r2,bce8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    bd1c:	e037883a 	mov	sp,fp
    bd20:	df000017 	ldw	fp,0(sp)
    bd24:	dec00104 	addi	sp,sp,4
    bd28:	f800283a 	ret

0000bd2c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    bd2c:	defff804 	addi	sp,sp,-32
    bd30:	dfc00715 	stw	ra,28(sp)
    bd34:	df000615 	stw	fp,24(sp)
    bd38:	df000604 	addi	fp,sp,24
    bd3c:	e13ffc15 	stw	r4,-16(fp)
    bd40:	e17ffd15 	stw	r5,-12(fp)
    bd44:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    bd48:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bd4c:	e0bffc17 	ldw	r2,-16(fp)
    bd50:	1004803a 	cmplt	r2,r2,zero
    bd54:	1000081e 	bne	r2,zero,bd78 <lseek+0x4c>
    bd58:	e0bffc17 	ldw	r2,-16(fp)
    bd5c:	10800324 	muli	r2,r2,12
    bd60:	1007883a 	mov	r3,r2
    bd64:	00800074 	movhi	r2,1
    bd68:	10bbd304 	addi	r2,r2,-4276
    bd6c:	1887883a 	add	r3,r3,r2
    bd70:	e0ffff15 	stw	r3,-4(fp)
    bd74:	00000106 	br	bd7c <lseek+0x50>
    bd78:	e03fff15 	stw	zero,-4(fp)
    bd7c:	e0bfff17 	ldw	r2,-4(fp)
    bd80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    bd84:	e0bffb17 	ldw	r2,-20(fp)
    bd88:	1005003a 	cmpeq	r2,r2,zero
    bd8c:	1000111e 	bne	r2,zero,bdd4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    bd90:	e0bffb17 	ldw	r2,-20(fp)
    bd94:	10800017 	ldw	r2,0(r2)
    bd98:	10800717 	ldw	r2,28(r2)
    bd9c:	1005003a 	cmpeq	r2,r2,zero
    bda0:	1000091e 	bne	r2,zero,bdc8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    bda4:	e0bffb17 	ldw	r2,-20(fp)
    bda8:	10800017 	ldw	r2,0(r2)
    bdac:	10800717 	ldw	r2,28(r2)
    bdb0:	e13ffb17 	ldw	r4,-20(fp)
    bdb4:	e17ffd17 	ldw	r5,-12(fp)
    bdb8:	e1bffe17 	ldw	r6,-8(fp)
    bdbc:	103ee83a 	callr	r2
    bdc0:	e0bffa15 	stw	r2,-24(fp)
    bdc4:	00000506 	br	bddc <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    bdc8:	00bfde84 	movi	r2,-134
    bdcc:	e0bffa15 	stw	r2,-24(fp)
    bdd0:	00000206 	br	bddc <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    bdd4:	00bfebc4 	movi	r2,-81
    bdd8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    bddc:	e0bffa17 	ldw	r2,-24(fp)
    bde0:	1004403a 	cmpge	r2,r2,zero
    bde4:	1000071e 	bne	r2,zero,be04 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    bde8:	000be1c0 	call	be1c <alt_get_errno>
    bdec:	1007883a 	mov	r3,r2
    bdf0:	e0bffa17 	ldw	r2,-24(fp)
    bdf4:	0085c83a 	sub	r2,zero,r2
    bdf8:	18800015 	stw	r2,0(r3)
    rc = -1;
    bdfc:	00bfffc4 	movi	r2,-1
    be00:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    be04:	e0bffa17 	ldw	r2,-24(fp)
}
    be08:	e037883a 	mov	sp,fp
    be0c:	dfc00117 	ldw	ra,4(sp)
    be10:	df000017 	ldw	fp,0(sp)
    be14:	dec00204 	addi	sp,sp,8
    be18:	f800283a 	ret

0000be1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    be1c:	defffd04 	addi	sp,sp,-12
    be20:	dfc00215 	stw	ra,8(sp)
    be24:	df000115 	stw	fp,4(sp)
    be28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    be2c:	00800074 	movhi	r2,1
    be30:	10805704 	addi	r2,r2,348
    be34:	10800017 	ldw	r2,0(r2)
    be38:	1005003a 	cmpeq	r2,r2,zero
    be3c:	1000061e 	bne	r2,zero,be58 <alt_get_errno+0x3c>
    be40:	00800074 	movhi	r2,1
    be44:	10805704 	addi	r2,r2,348
    be48:	10800017 	ldw	r2,0(r2)
    be4c:	103ee83a 	callr	r2
    be50:	e0bfff15 	stw	r2,-4(fp)
    be54:	00000306 	br	be64 <alt_get_errno+0x48>
    be58:	00800074 	movhi	r2,1
    be5c:	10870f04 	addi	r2,r2,7228
    be60:	e0bfff15 	stw	r2,-4(fp)
    be64:	e0bfff17 	ldw	r2,-4(fp)
}
    be68:	e037883a 	mov	sp,fp
    be6c:	dfc00117 	ldw	ra,4(sp)
    be70:	df000017 	ldw	fp,0(sp)
    be74:	dec00204 	addi	sp,sp,8
    be78:	f800283a 	ret

0000be7c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    be7c:	defffd04 	addi	sp,sp,-12
    be80:	dfc00215 	stw	ra,8(sp)
    be84:	df000115 	stw	fp,4(sp)
    be88:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    be8c:	0009883a 	mov	r4,zero
    be90:	000c3440 	call	c344 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    be94:	000c3780 	call	c378 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    be98:	01000074 	movhi	r4,1
    be9c:	2139ac04 	addi	r4,r4,-6480
    bea0:	01400074 	movhi	r5,1
    bea4:	2979ac04 	addi	r5,r5,-6480
    bea8:	01800074 	movhi	r6,1
    beac:	31b9ac04 	addi	r6,r6,-6480
    beb0:	000d6c40 	call	d6c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    beb4:	000d23c0 	call	d23c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    beb8:	01000074 	movhi	r4,1
    bebc:	2134a804 	addi	r4,r4,-11616
    bec0:	000dec00 	call	dec0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    bec4:	d126c917 	ldw	r4,-25820(gp)
    bec8:	d166ca17 	ldw	r5,-25816(gp)
    becc:	d1a6cb17 	ldw	r6,-25812(gp)
    bed0:	0001a780 	call	1a78 <main>
    bed4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    bed8:	01000044 	movi	r4,1
    bedc:	000b6440 	call	b644 <close>
  exit (result);
    bee0:	e13fff17 	ldw	r4,-4(fp)
    bee4:	0001e380 	call	1e38 <exit>

0000bee8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    bee8:	defffe04 	addi	sp,sp,-8
    beec:	df000115 	stw	fp,4(sp)
    bef0:	df000104 	addi	fp,sp,4
    bef4:	e13fff15 	stw	r4,-4(fp)
}
    bef8:	e037883a 	mov	sp,fp
    befc:	df000017 	ldw	fp,0(sp)
    bf00:	dec00104 	addi	sp,sp,4
    bf04:	f800283a 	ret

0000bf08 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    bf08:	defffe04 	addi	sp,sp,-8
    bf0c:	df000115 	stw	fp,4(sp)
    bf10:	df000104 	addi	fp,sp,4
    bf14:	e13fff15 	stw	r4,-4(fp)
}
    bf18:	e037883a 	mov	sp,fp
    bf1c:	df000017 	ldw	fp,0(sp)
    bf20:	dec00104 	addi	sp,sp,4
    bf24:	f800283a 	ret

0000bf28 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    bf28:	defff704 	addi	sp,sp,-36
    bf2c:	dfc00815 	stw	ra,32(sp)
    bf30:	df000715 	stw	fp,28(sp)
    bf34:	df000704 	addi	fp,sp,28
    bf38:	e13ffb15 	stw	r4,-20(fp)
    bf3c:	e17ffc15 	stw	r5,-16(fp)
    bf40:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bf44:	e0bffb17 	ldw	r2,-20(fp)
    bf48:	1004803a 	cmplt	r2,r2,zero
    bf4c:	1000081e 	bne	r2,zero,bf70 <read+0x48>
    bf50:	e0bffb17 	ldw	r2,-20(fp)
    bf54:	10800324 	muli	r2,r2,12
    bf58:	1007883a 	mov	r3,r2
    bf5c:	00800074 	movhi	r2,1
    bf60:	10bbd304 	addi	r2,r2,-4276
    bf64:	1887883a 	add	r3,r3,r2
    bf68:	e0ffff15 	stw	r3,-4(fp)
    bf6c:	00000106 	br	bf74 <read+0x4c>
    bf70:	e03fff15 	stw	zero,-4(fp)
    bf74:	e0bfff17 	ldw	r2,-4(fp)
    bf78:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    bf7c:	e0bffa17 	ldw	r2,-24(fp)
    bf80:	1005003a 	cmpeq	r2,r2,zero
    bf84:	1000241e 	bne	r2,zero,c018 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    bf88:	e0bffa17 	ldw	r2,-24(fp)
    bf8c:	10800217 	ldw	r2,8(r2)
    bf90:	108000cc 	andi	r2,r2,3
    bf94:	10800060 	cmpeqi	r2,r2,1
    bf98:	10001a1e 	bne	r2,zero,c004 <read+0xdc>
    bf9c:	e0bffa17 	ldw	r2,-24(fp)
    bfa0:	10800017 	ldw	r2,0(r2)
    bfa4:	10800517 	ldw	r2,20(r2)
    bfa8:	1005003a 	cmpeq	r2,r2,zero
    bfac:	1000151e 	bne	r2,zero,c004 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    bfb0:	e0bffa17 	ldw	r2,-24(fp)
    bfb4:	10800017 	ldw	r2,0(r2)
    bfb8:	10800517 	ldw	r2,20(r2)
    bfbc:	e17ffc17 	ldw	r5,-16(fp)
    bfc0:	e1bffd17 	ldw	r6,-12(fp)
    bfc4:	e13ffa17 	ldw	r4,-24(fp)
    bfc8:	103ee83a 	callr	r2
    bfcc:	e0bff915 	stw	r2,-28(fp)
    bfd0:	e0bff917 	ldw	r2,-28(fp)
    bfd4:	1004403a 	cmpge	r2,r2,zero
    bfd8:	1000071e 	bne	r2,zero,bff8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    bfdc:	000c0480 	call	c048 <alt_get_errno>
    bfe0:	e0fff917 	ldw	r3,-28(fp)
    bfe4:	00c7c83a 	sub	r3,zero,r3
    bfe8:	10c00015 	stw	r3,0(r2)
          return -1;
    bfec:	00bfffc4 	movi	r2,-1
    bff0:	e0bffe15 	stw	r2,-8(fp)
    bff4:	00000e06 	br	c030 <read+0x108>
        }
        return rval;
    bff8:	e0bff917 	ldw	r2,-28(fp)
    bffc:	e0bffe15 	stw	r2,-8(fp)
    c000:	00000b06 	br	c030 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    c004:	000c0480 	call	c048 <alt_get_errno>
    c008:	1007883a 	mov	r3,r2
    c00c:	00800344 	movi	r2,13
    c010:	18800015 	stw	r2,0(r3)
    c014:	00000406 	br	c028 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    c018:	000c0480 	call	c048 <alt_get_errno>
    c01c:	1007883a 	mov	r3,r2
    c020:	00801444 	movi	r2,81
    c024:	18800015 	stw	r2,0(r3)
  }
  return -1;
    c028:	00bfffc4 	movi	r2,-1
    c02c:	e0bffe15 	stw	r2,-8(fp)
    c030:	e0bffe17 	ldw	r2,-8(fp)
}
    c034:	e037883a 	mov	sp,fp
    c038:	dfc00117 	ldw	ra,4(sp)
    c03c:	df000017 	ldw	fp,0(sp)
    c040:	dec00204 	addi	sp,sp,8
    c044:	f800283a 	ret

0000c048 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c048:	defffd04 	addi	sp,sp,-12
    c04c:	dfc00215 	stw	ra,8(sp)
    c050:	df000115 	stw	fp,4(sp)
    c054:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c058:	00800074 	movhi	r2,1
    c05c:	10805704 	addi	r2,r2,348
    c060:	10800017 	ldw	r2,0(r2)
    c064:	1005003a 	cmpeq	r2,r2,zero
    c068:	1000061e 	bne	r2,zero,c084 <alt_get_errno+0x3c>
    c06c:	00800074 	movhi	r2,1
    c070:	10805704 	addi	r2,r2,348
    c074:	10800017 	ldw	r2,0(r2)
    c078:	103ee83a 	callr	r2
    c07c:	e0bfff15 	stw	r2,-4(fp)
    c080:	00000306 	br	c090 <alt_get_errno+0x48>
    c084:	00800074 	movhi	r2,1
    c088:	10870f04 	addi	r2,r2,7228
    c08c:	e0bfff15 	stw	r2,-4(fp)
    c090:	e0bfff17 	ldw	r2,-4(fp)
}
    c094:	e037883a 	mov	sp,fp
    c098:	dfc00117 	ldw	ra,4(sp)
    c09c:	df000017 	ldw	fp,0(sp)
    c0a0:	dec00204 	addi	sp,sp,8
    c0a4:	f800283a 	ret

0000c0a8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c0a8:	defffe04 	addi	sp,sp,-8
    c0ac:	df000115 	stw	fp,4(sp)
    c0b0:	df000104 	addi	fp,sp,4
    c0b4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    c0b8:	e0bfff17 	ldw	r2,-4(fp)
    c0bc:	108000d0 	cmplti	r2,r2,3
    c0c0:	10000d1e 	bne	r2,zero,c0f8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    c0c4:	e0bfff17 	ldw	r2,-4(fp)
    c0c8:	00c00074 	movhi	r3,1
    c0cc:	18fbd304 	addi	r3,r3,-4276
    c0d0:	10800324 	muli	r2,r2,12
    c0d4:	10c5883a 	add	r2,r2,r3
    c0d8:	10800204 	addi	r2,r2,8
    c0dc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c0e0:	e0bfff17 	ldw	r2,-4(fp)
    c0e4:	00c00074 	movhi	r3,1
    c0e8:	18fbd304 	addi	r3,r3,-4276
    c0ec:	10800324 	muli	r2,r2,12
    c0f0:	10c5883a 	add	r2,r2,r3
    c0f4:	10000015 	stw	zero,0(r2)
  }
}
    c0f8:	e037883a 	mov	sp,fp
    c0fc:	df000017 	ldw	fp,0(sp)
    c100:	dec00104 	addi	sp,sp,4
    c104:	f800283a 	ret

0000c108 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    c108:	defff804 	addi	sp,sp,-32
    c10c:	df000715 	stw	fp,28(sp)
    c110:	df000704 	addi	fp,sp,28
    c114:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c118:	0005303a 	rdctl	r2,status
    c11c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c120:	e0fffb17 	ldw	r3,-20(fp)
    c124:	00bfff84 	movi	r2,-2
    c128:	1884703a 	and	r2,r3,r2
    c12c:	1001703a 	wrctl	status,r2
  
  return context;
    c130:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    c134:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    c138:	d0a00e17 	ldw	r2,-32712(gp)
    c13c:	10c000c4 	addi	r3,r2,3
    c140:	00bfff04 	movi	r2,-4
    c144:	1884703a 	and	r2,r3,r2
    c148:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    c14c:	d0e00e17 	ldw	r3,-32712(gp)
    c150:	e0bffe17 	ldw	r2,-8(fp)
    c154:	1887883a 	add	r3,r3,r2
    c158:	00808034 	movhi	r2,512
    c15c:	10800004 	addi	r2,r2,0
    c160:	10c0072e 	bgeu	r2,r3,c180 <sbrk+0x78>
    c164:	e0bffd17 	ldw	r2,-12(fp)
    c168:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c16c:	e0bffa17 	ldw	r2,-24(fp)
    c170:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    c174:	00bfffc4 	movi	r2,-1
    c178:	e0bfff15 	stw	r2,-4(fp)
    c17c:	00000c06 	br	c1b0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    c180:	d0a00e17 	ldw	r2,-32712(gp)
    c184:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    c188:	d0e00e17 	ldw	r3,-32712(gp)
    c18c:	e0bffe17 	ldw	r2,-8(fp)
    c190:	1885883a 	add	r2,r3,r2
    c194:	d0a00e15 	stw	r2,-32712(gp)
    c198:	e0bffd17 	ldw	r2,-12(fp)
    c19c:	e0bff915 	stw	r2,-28(fp)
    c1a0:	e0bff917 	ldw	r2,-28(fp)
    c1a4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    c1a8:	e0bffc17 	ldw	r2,-16(fp)
    c1ac:	e0bfff15 	stw	r2,-4(fp)
    c1b0:	e0bfff17 	ldw	r2,-4(fp)
} 
    c1b4:	e037883a 	mov	sp,fp
    c1b8:	df000017 	ldw	fp,0(sp)
    c1bc:	dec00104 	addi	sp,sp,4
    c1c0:	f800283a 	ret

0000c1c4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    c1c4:	defff704 	addi	sp,sp,-36
    c1c8:	dfc00815 	stw	ra,32(sp)
    c1cc:	df000715 	stw	fp,28(sp)
    c1d0:	df000704 	addi	fp,sp,28
    c1d4:	e13ffb15 	stw	r4,-20(fp)
    c1d8:	e17ffc15 	stw	r5,-16(fp)
    c1dc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c1e0:	e0bffb17 	ldw	r2,-20(fp)
    c1e4:	1004803a 	cmplt	r2,r2,zero
    c1e8:	1000081e 	bne	r2,zero,c20c <write+0x48>
    c1ec:	e0bffb17 	ldw	r2,-20(fp)
    c1f0:	10800324 	muli	r2,r2,12
    c1f4:	1007883a 	mov	r3,r2
    c1f8:	00800074 	movhi	r2,1
    c1fc:	10bbd304 	addi	r2,r2,-4276
    c200:	1887883a 	add	r3,r3,r2
    c204:	e0ffff15 	stw	r3,-4(fp)
    c208:	00000106 	br	c210 <write+0x4c>
    c20c:	e03fff15 	stw	zero,-4(fp)
    c210:	e0bfff17 	ldw	r2,-4(fp)
    c214:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    c218:	e0bffa17 	ldw	r2,-24(fp)
    c21c:	1005003a 	cmpeq	r2,r2,zero
    c220:	1000241e 	bne	r2,zero,c2b4 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    c224:	e0bffa17 	ldw	r2,-24(fp)
    c228:	10800217 	ldw	r2,8(r2)
    c22c:	108000cc 	andi	r2,r2,3
    c230:	1005003a 	cmpeq	r2,r2,zero
    c234:	10001a1e 	bne	r2,zero,c2a0 <write+0xdc>
    c238:	e0bffa17 	ldw	r2,-24(fp)
    c23c:	10800017 	ldw	r2,0(r2)
    c240:	10800617 	ldw	r2,24(r2)
    c244:	1005003a 	cmpeq	r2,r2,zero
    c248:	1000151e 	bne	r2,zero,c2a0 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    c24c:	e0bffa17 	ldw	r2,-24(fp)
    c250:	10800017 	ldw	r2,0(r2)
    c254:	10800617 	ldw	r2,24(r2)
    c258:	e17ffc17 	ldw	r5,-16(fp)
    c25c:	e1bffd17 	ldw	r6,-12(fp)
    c260:	e13ffa17 	ldw	r4,-24(fp)
    c264:	103ee83a 	callr	r2
    c268:	e0bff915 	stw	r2,-28(fp)
    c26c:	e0bff917 	ldw	r2,-28(fp)
    c270:	1004403a 	cmpge	r2,r2,zero
    c274:	1000071e 	bne	r2,zero,c294 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    c278:	000c2e40 	call	c2e4 <alt_get_errno>
    c27c:	e0fff917 	ldw	r3,-28(fp)
    c280:	00c7c83a 	sub	r3,zero,r3
    c284:	10c00015 	stw	r3,0(r2)
        return -1;
    c288:	00bfffc4 	movi	r2,-1
    c28c:	e0bffe15 	stw	r2,-8(fp)
    c290:	00000e06 	br	c2cc <write+0x108>
      }
      return rval;
    c294:	e0bff917 	ldw	r2,-28(fp)
    c298:	e0bffe15 	stw	r2,-8(fp)
    c29c:	00000b06 	br	c2cc <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    c2a0:	000c2e40 	call	c2e4 <alt_get_errno>
    c2a4:	1007883a 	mov	r3,r2
    c2a8:	00800344 	movi	r2,13
    c2ac:	18800015 	stw	r2,0(r3)
    c2b0:	00000406 	br	c2c4 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    c2b4:	000c2e40 	call	c2e4 <alt_get_errno>
    c2b8:	1007883a 	mov	r3,r2
    c2bc:	00801444 	movi	r2,81
    c2c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    c2c4:	00bfffc4 	movi	r2,-1
    c2c8:	e0bffe15 	stw	r2,-8(fp)
    c2cc:	e0bffe17 	ldw	r2,-8(fp)
}
    c2d0:	e037883a 	mov	sp,fp
    c2d4:	dfc00117 	ldw	ra,4(sp)
    c2d8:	df000017 	ldw	fp,0(sp)
    c2dc:	dec00204 	addi	sp,sp,8
    c2e0:	f800283a 	ret

0000c2e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c2e4:	defffd04 	addi	sp,sp,-12
    c2e8:	dfc00215 	stw	ra,8(sp)
    c2ec:	df000115 	stw	fp,4(sp)
    c2f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c2f4:	00800074 	movhi	r2,1
    c2f8:	10805704 	addi	r2,r2,348
    c2fc:	10800017 	ldw	r2,0(r2)
    c300:	1005003a 	cmpeq	r2,r2,zero
    c304:	1000061e 	bne	r2,zero,c320 <alt_get_errno+0x3c>
    c308:	00800074 	movhi	r2,1
    c30c:	10805704 	addi	r2,r2,348
    c310:	10800017 	ldw	r2,0(r2)
    c314:	103ee83a 	callr	r2
    c318:	e0bfff15 	stw	r2,-4(fp)
    c31c:	00000306 	br	c32c <alt_get_errno+0x48>
    c320:	00800074 	movhi	r2,1
    c324:	10870f04 	addi	r2,r2,7228
    c328:	e0bfff15 	stw	r2,-4(fp)
    c32c:	e0bfff17 	ldw	r2,-4(fp)
}
    c330:	e037883a 	mov	sp,fp
    c334:	dfc00117 	ldw	ra,4(sp)
    c338:	df000017 	ldw	fp,0(sp)
    c33c:	dec00204 	addi	sp,sp,8
    c340:	f800283a 	ret

0000c344 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    c344:	defffd04 	addi	sp,sp,-12
    c348:	dfc00215 	stw	ra,8(sp)
    c34c:	df000115 	stw	fp,4(sp)
    c350:	df000104 	addi	fp,sp,4
    c354:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    c358:	000dba40 	call	dba4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    c35c:	00800044 	movi	r2,1
    c360:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    c364:	e037883a 	mov	sp,fp
    c368:	dfc00117 	ldw	ra,4(sp)
    c36c:	df000017 	ldw	fp,0(sp)
    c370:	dec00204 	addi	sp,sp,8
    c374:	f800283a 	ret

0000c378 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c378:	defffe04 	addi	sp,sp,-8
    c37c:	dfc00115 	stw	ra,4(sp)
    c380:	df000015 	stw	fp,0(sp)
    c384:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    c388:	01008034 	movhi	r4,512
    c38c:	21142804 	addi	r4,r4,20640
    c390:	000b883a 	mov	r5,zero
    c394:	000d883a 	mov	r6,zero
    c398:	01c0fa04 	movi	r7,1000
    c39c:	000cf280 	call	cf28 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    c3a0:	01000074 	movhi	r4,1
    c3a4:	213c3d04 	addi	r4,r4,-3852
    c3a8:	000b883a 	mov	r5,zero
    c3ac:	018000c4 	movi	r6,3
    c3b0:	000c5540 	call	c554 <altera_avalon_jtag_uart_init>
    c3b4:	01000074 	movhi	r4,1
    c3b8:	213c3304 	addi	r4,r4,-3892
    c3bc:	000c3d40 	call	c3d4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    c3c0:	e037883a 	mov	sp,fp
    c3c4:	dfc00117 	ldw	ra,4(sp)
    c3c8:	df000017 	ldw	fp,0(sp)
    c3cc:	dec00204 	addi	sp,sp,8
    c3d0:	f800283a 	ret

0000c3d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    c3d4:	defffd04 	addi	sp,sp,-12
    c3d8:	dfc00215 	stw	ra,8(sp)
    c3dc:	df000115 	stw	fp,4(sp)
    c3e0:	df000104 	addi	fp,sp,4
    c3e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    c3e8:	e13fff17 	ldw	r4,-4(fp)
    c3ec:	01400074 	movhi	r5,1
    c3f0:	29405404 	addi	r5,r5,336
    c3f4:	000d1280 	call	d128 <alt_dev_llist_insert>
}
    c3f8:	e037883a 	mov	sp,fp
    c3fc:	dfc00117 	ldw	ra,4(sp)
    c400:	df000017 	ldw	fp,0(sp)
    c404:	dec00204 	addi	sp,sp,8
    c408:	f800283a 	ret

0000c40c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c40c:	defffa04 	addi	sp,sp,-24
    c410:	dfc00515 	stw	ra,20(sp)
    c414:	df000415 	stw	fp,16(sp)
    c418:	df000404 	addi	fp,sp,16
    c41c:	e13ffd15 	stw	r4,-12(fp)
    c420:	e17ffe15 	stw	r5,-8(fp)
    c424:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c428:	e0bffd17 	ldw	r2,-12(fp)
    c42c:	10800017 	ldw	r2,0(r2)
    c430:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c434:	e0bffc17 	ldw	r2,-16(fp)
    c438:	11000a04 	addi	r4,r2,40
    c43c:	e0bffd17 	ldw	r2,-12(fp)
    c440:	11c00217 	ldw	r7,8(r2)
    c444:	e17ffe17 	ldw	r5,-8(fp)
    c448:	e1bfff17 	ldw	r6,-4(fp)
    c44c:	000ca540 	call	ca54 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    c450:	e037883a 	mov	sp,fp
    c454:	dfc00117 	ldw	ra,4(sp)
    c458:	df000017 	ldw	fp,0(sp)
    c45c:	dec00204 	addi	sp,sp,8
    c460:	f800283a 	ret

0000c464 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c464:	defffa04 	addi	sp,sp,-24
    c468:	dfc00515 	stw	ra,20(sp)
    c46c:	df000415 	stw	fp,16(sp)
    c470:	df000404 	addi	fp,sp,16
    c474:	e13ffd15 	stw	r4,-12(fp)
    c478:	e17ffe15 	stw	r5,-8(fp)
    c47c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c480:	e0bffd17 	ldw	r2,-12(fp)
    c484:	10800017 	ldw	r2,0(r2)
    c488:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c48c:	e0bffc17 	ldw	r2,-16(fp)
    c490:	11000a04 	addi	r4,r2,40
    c494:	e0bffd17 	ldw	r2,-12(fp)
    c498:	11c00217 	ldw	r7,8(r2)
    c49c:	e17ffe17 	ldw	r5,-8(fp)
    c4a0:	e1bfff17 	ldw	r6,-4(fp)
    c4a4:	000cc780 	call	cc78 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c4a8:	e037883a 	mov	sp,fp
    c4ac:	dfc00117 	ldw	ra,4(sp)
    c4b0:	df000017 	ldw	fp,0(sp)
    c4b4:	dec00204 	addi	sp,sp,8
    c4b8:	f800283a 	ret

0000c4bc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    c4bc:	defffc04 	addi	sp,sp,-16
    c4c0:	dfc00315 	stw	ra,12(sp)
    c4c4:	df000215 	stw	fp,8(sp)
    c4c8:	df000204 	addi	fp,sp,8
    c4cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c4d0:	e0bfff17 	ldw	r2,-4(fp)
    c4d4:	10800017 	ldw	r2,0(r2)
    c4d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    c4dc:	e0bffe17 	ldw	r2,-8(fp)
    c4e0:	11000a04 	addi	r4,r2,40
    c4e4:	e0bfff17 	ldw	r2,-4(fp)
    c4e8:	11400217 	ldw	r5,8(r2)
    c4ec:	000c8ec0 	call	c8ec <altera_avalon_jtag_uart_close>
}
    c4f0:	e037883a 	mov	sp,fp
    c4f4:	dfc00117 	ldw	ra,4(sp)
    c4f8:	df000017 	ldw	fp,0(sp)
    c4fc:	dec00204 	addi	sp,sp,8
    c500:	f800283a 	ret

0000c504 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    c504:	defffa04 	addi	sp,sp,-24
    c508:	dfc00515 	stw	ra,20(sp)
    c50c:	df000415 	stw	fp,16(sp)
    c510:	df000404 	addi	fp,sp,16
    c514:	e13ffd15 	stw	r4,-12(fp)
    c518:	e17ffe15 	stw	r5,-8(fp)
    c51c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    c520:	e0bffd17 	ldw	r2,-12(fp)
    c524:	10800017 	ldw	r2,0(r2)
    c528:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    c52c:	e0bffc17 	ldw	r2,-16(fp)
    c530:	11000a04 	addi	r4,r2,40
    c534:	e17ffe17 	ldw	r5,-8(fp)
    c538:	e1bfff17 	ldw	r6,-4(fp)
    c53c:	000c9600 	call	c960 <altera_avalon_jtag_uart_ioctl>
}
    c540:	e037883a 	mov	sp,fp
    c544:	dfc00117 	ldw	ra,4(sp)
    c548:	df000017 	ldw	fp,0(sp)
    c54c:	dec00204 	addi	sp,sp,8
    c550:	f800283a 	ret

0000c554 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c554:	defffa04 	addi	sp,sp,-24
    c558:	dfc00515 	stw	ra,20(sp)
    c55c:	df000415 	stw	fp,16(sp)
    c560:	df000404 	addi	fp,sp,16
    c564:	e13ffd15 	stw	r4,-12(fp)
    c568:	e17ffe15 	stw	r5,-8(fp)
    c56c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c570:	e0fffd17 	ldw	r3,-12(fp)
    c574:	00800044 	movi	r2,1
    c578:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c57c:	e0bffd17 	ldw	r2,-12(fp)
    c580:	10800017 	ldw	r2,0(r2)
    c584:	11000104 	addi	r4,r2,4
    c588:	e0bffd17 	ldw	r2,-12(fp)
    c58c:	10800817 	ldw	r2,32(r2)
    c590:	1007883a 	mov	r3,r2
    c594:	2005883a 	mov	r2,r4
    c598:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    c59c:	e13ffe17 	ldw	r4,-8(fp)
    c5a0:	e17fff17 	ldw	r5,-4(fp)
    c5a4:	d8000015 	stw	zero,0(sp)
    c5a8:	01800074 	movhi	r6,1
    c5ac:	31b18504 	addi	r6,r6,-14828
    c5b0:	e1fffd17 	ldw	r7,-12(fp)
    c5b4:	000d3340 	call	d334 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c5b8:	e0bffd17 	ldw	r2,-12(fp)
    c5bc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c5c0:	e0bffd17 	ldw	r2,-12(fp)
    c5c4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c5c8:	00800074 	movhi	r2,1
    c5cc:	10871704 	addi	r2,r2,7260
    c5d0:	10800017 	ldw	r2,0(r2)
    c5d4:	100b883a 	mov	r5,r2
    c5d8:	01800074 	movhi	r6,1
    c5dc:	31b20f04 	addi	r6,r6,-14276
    c5e0:	e1fffd17 	ldw	r7,-12(fp)
    c5e4:	000cfb80 	call	cfb8 <alt_alarm_start>
    c5e8:	1004403a 	cmpge	r2,r2,zero
    c5ec:	1000041e 	bne	r2,zero,c600 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c5f0:	e0fffd17 	ldw	r3,-12(fp)
    c5f4:	00a00034 	movhi	r2,32768
    c5f8:	10bfffc4 	addi	r2,r2,-1
    c5fc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c600:	e037883a 	mov	sp,fp
    c604:	dfc00117 	ldw	ra,4(sp)
    c608:	df000017 	ldw	fp,0(sp)
    c60c:	dec00204 	addi	sp,sp,8
    c610:	f800283a 	ret

0000c614 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c614:	defff804 	addi	sp,sp,-32
    c618:	df000715 	stw	fp,28(sp)
    c61c:	df000704 	addi	fp,sp,28
    c620:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c624:	e0bfff17 	ldw	r2,-4(fp)
    c628:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    c62c:	e0bffe17 	ldw	r2,-8(fp)
    c630:	10800017 	ldw	r2,0(r2)
    c634:	e0bffd15 	stw	r2,-12(fp)
    c638:	00000006 	br	c63c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c63c:	e0bffd17 	ldw	r2,-12(fp)
    c640:	10800104 	addi	r2,r2,4
    c644:	10800037 	ldwio	r2,0(r2)
    c648:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c64c:	e0bffc17 	ldw	r2,-16(fp)
    c650:	1080c00c 	andi	r2,r2,768
    c654:	1005003a 	cmpeq	r2,r2,zero
    c658:	1000741e 	bne	r2,zero,c82c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c65c:	e0bffc17 	ldw	r2,-16(fp)
    c660:	1080400c 	andi	r2,r2,256
    c664:	1005003a 	cmpeq	r2,r2,zero
    c668:	1000351e 	bne	r2,zero,c740 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c66c:	00800074 	movhi	r2,1
    c670:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c674:	e0bffe17 	ldw	r2,-8(fp)
    c678:	10800a17 	ldw	r2,40(r2)
    c67c:	10800044 	addi	r2,r2,1
    c680:	1081ffcc 	andi	r2,r2,2047
    c684:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    c688:	e0bffe17 	ldw	r2,-8(fp)
    c68c:	10c00b17 	ldw	r3,44(r2)
    c690:	e0bffa17 	ldw	r2,-24(fp)
    c694:	18801626 	beq	r3,r2,c6f0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c698:	e0bffd17 	ldw	r2,-12(fp)
    c69c:	10800037 	ldwio	r2,0(r2)
    c6a0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c6a4:	e0bffb17 	ldw	r2,-20(fp)
    c6a8:	10a0000c 	andi	r2,r2,32768
    c6ac:	1005003a 	cmpeq	r2,r2,zero
    c6b0:	10000f1e 	bne	r2,zero,c6f0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c6b4:	e0bffe17 	ldw	r2,-8(fp)
    c6b8:	10c00a17 	ldw	r3,40(r2)
    c6bc:	e0bffb17 	ldw	r2,-20(fp)
    c6c0:	1009883a 	mov	r4,r2
    c6c4:	e0bffe17 	ldw	r2,-8(fp)
    c6c8:	1885883a 	add	r2,r3,r2
    c6cc:	10800e04 	addi	r2,r2,56
    c6d0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c6d4:	e0bffe17 	ldw	r2,-8(fp)
    c6d8:	10800a17 	ldw	r2,40(r2)
    c6dc:	10800044 	addi	r2,r2,1
    c6e0:	10c1ffcc 	andi	r3,r2,2047
    c6e4:	e0bffe17 	ldw	r2,-8(fp)
    c6e8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    c6ec:	003fe106 	br	c674 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c6f0:	e0bffb17 	ldw	r2,-20(fp)
    c6f4:	10bfffec 	andhi	r2,r2,65535
    c6f8:	1005003a 	cmpeq	r2,r2,zero
    c6fc:	1000101e 	bne	r2,zero,c740 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c700:	e0bffe17 	ldw	r2,-8(fp)
    c704:	10c00817 	ldw	r3,32(r2)
    c708:	00bfff84 	movi	r2,-2
    c70c:	1886703a 	and	r3,r3,r2
    c710:	e0bffe17 	ldw	r2,-8(fp)
    c714:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c718:	e0bffd17 	ldw	r2,-12(fp)
    c71c:	11000104 	addi	r4,r2,4
    c720:	e0bffe17 	ldw	r2,-8(fp)
    c724:	10800817 	ldw	r2,32(r2)
    c728:	1007883a 	mov	r3,r2
    c72c:	2005883a 	mov	r2,r4
    c730:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c734:	e0bffd17 	ldw	r2,-12(fp)
    c738:	10800104 	addi	r2,r2,4
    c73c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c740:	e0bffc17 	ldw	r2,-16(fp)
    c744:	1080800c 	andi	r2,r2,512
    c748:	1005003a 	cmpeq	r2,r2,zero
    c74c:	103fbb1e 	bne	r2,zero,c63c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c750:	e0bffc17 	ldw	r2,-16(fp)
    c754:	10bfffec 	andhi	r2,r2,65535
    c758:	1004d43a 	srli	r2,r2,16
    c75c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c760:	00001506 	br	c7b8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c764:	e13ffd17 	ldw	r4,-12(fp)
    c768:	e0bffe17 	ldw	r2,-8(fp)
    c76c:	10c00d17 	ldw	r3,52(r2)
    c770:	e0bffe17 	ldw	r2,-8(fp)
    c774:	1885883a 	add	r2,r3,r2
    c778:	10820e04 	addi	r2,r2,2104
    c77c:	10800003 	ldbu	r2,0(r2)
    c780:	10c03fcc 	andi	r3,r2,255
    c784:	18c0201c 	xori	r3,r3,128
    c788:	18ffe004 	addi	r3,r3,-128
    c78c:	2005883a 	mov	r2,r4
    c790:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c794:	e0bffe17 	ldw	r2,-8(fp)
    c798:	10800d17 	ldw	r2,52(r2)
    c79c:	10800044 	addi	r2,r2,1
    c7a0:	10c1ffcc 	andi	r3,r2,2047
    c7a4:	e0bffe17 	ldw	r2,-8(fp)
    c7a8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    c7ac:	e0bff917 	ldw	r2,-28(fp)
    c7b0:	10bfffc4 	addi	r2,r2,-1
    c7b4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c7b8:	e0bff917 	ldw	r2,-28(fp)
    c7bc:	1005003a 	cmpeq	r2,r2,zero
    c7c0:	1000051e 	bne	r2,zero,c7d8 <altera_avalon_jtag_uart_irq+0x1c4>
    c7c4:	e0bffe17 	ldw	r2,-8(fp)
    c7c8:	10c00d17 	ldw	r3,52(r2)
    c7cc:	e0bffe17 	ldw	r2,-8(fp)
    c7d0:	10800c17 	ldw	r2,48(r2)
    c7d4:	18bfe31e 	bne	r3,r2,c764 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    c7d8:	e0bff917 	ldw	r2,-28(fp)
    c7dc:	1005003a 	cmpeq	r2,r2,zero
    c7e0:	103f961e 	bne	r2,zero,c63c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c7e4:	e0bffe17 	ldw	r2,-8(fp)
    c7e8:	10c00817 	ldw	r3,32(r2)
    c7ec:	00bfff44 	movi	r2,-3
    c7f0:	1886703a 	and	r3,r3,r2
    c7f4:	e0bffe17 	ldw	r2,-8(fp)
    c7f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c7fc:	e0bffe17 	ldw	r2,-8(fp)
    c800:	10800017 	ldw	r2,0(r2)
    c804:	11000104 	addi	r4,r2,4
    c808:	e0bffe17 	ldw	r2,-8(fp)
    c80c:	10800817 	ldw	r2,32(r2)
    c810:	1007883a 	mov	r3,r2
    c814:	2005883a 	mov	r2,r4
    c818:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c81c:	e0bffd17 	ldw	r2,-12(fp)
    c820:	10800104 	addi	r2,r2,4
    c824:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    c828:	003f8406 	br	c63c <altera_avalon_jtag_uart_irq+0x28>
}
    c82c:	e037883a 	mov	sp,fp
    c830:	df000017 	ldw	fp,0(sp)
    c834:	dec00104 	addi	sp,sp,4
    c838:	f800283a 	ret

0000c83c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c83c:	defffc04 	addi	sp,sp,-16
    c840:	df000315 	stw	fp,12(sp)
    c844:	df000304 	addi	fp,sp,12
    c848:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c84c:	e0bfff17 	ldw	r2,-4(fp)
    c850:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c854:	e0bffe17 	ldw	r2,-8(fp)
    c858:	10800017 	ldw	r2,0(r2)
    c85c:	10800104 	addi	r2,r2,4
    c860:	10800037 	ldwio	r2,0(r2)
    c864:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c868:	e0bffd17 	ldw	r2,-12(fp)
    c86c:	1081000c 	andi	r2,r2,1024
    c870:	1005003a 	cmpeq	r2,r2,zero
    c874:	10000c1e 	bne	r2,zero,c8a8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c878:	e0bffe17 	ldw	r2,-8(fp)
    c87c:	10800017 	ldw	r2,0(r2)
    c880:	11000104 	addi	r4,r2,4
    c884:	e0bffe17 	ldw	r2,-8(fp)
    c888:	10800817 	ldw	r2,32(r2)
    c88c:	10810014 	ori	r2,r2,1024
    c890:	1007883a 	mov	r3,r2
    c894:	2005883a 	mov	r2,r4
    c898:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    c89c:	e0bffe17 	ldw	r2,-8(fp)
    c8a0:	10000915 	stw	zero,36(r2)
    c8a4:	00000a06 	br	c8d0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c8a8:	e0bffe17 	ldw	r2,-8(fp)
    c8ac:	10c00917 	ldw	r3,36(r2)
    c8b0:	00a00034 	movhi	r2,32768
    c8b4:	10bfff04 	addi	r2,r2,-4
    c8b8:	10c00536 	bltu	r2,r3,c8d0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    c8bc:	e0bffe17 	ldw	r2,-8(fp)
    c8c0:	10800917 	ldw	r2,36(r2)
    c8c4:	10c00044 	addi	r3,r2,1
    c8c8:	e0bffe17 	ldw	r2,-8(fp)
    c8cc:	10c00915 	stw	r3,36(r2)
    c8d0:	00800074 	movhi	r2,1
    c8d4:	10871704 	addi	r2,r2,7260
    c8d8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    c8dc:	e037883a 	mov	sp,fp
    c8e0:	df000017 	ldw	fp,0(sp)
    c8e4:	dec00104 	addi	sp,sp,4
    c8e8:	f800283a 	ret

0000c8ec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c8ec:	defffc04 	addi	sp,sp,-16
    c8f0:	df000315 	stw	fp,12(sp)
    c8f4:	df000304 	addi	fp,sp,12
    c8f8:	e13ffd15 	stw	r4,-12(fp)
    c8fc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c900:	00000706 	br	c920 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    c904:	e0bffe17 	ldw	r2,-8(fp)
    c908:	1090000c 	andi	r2,r2,16384
    c90c:	1005003a 	cmpeq	r2,r2,zero
    c910:	1000031e 	bne	r2,zero,c920 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    c914:	00bffd44 	movi	r2,-11
    c918:	e0bfff15 	stw	r2,-4(fp)
    c91c:	00000b06 	br	c94c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c920:	e0bffd17 	ldw	r2,-12(fp)
    c924:	10c00d17 	ldw	r3,52(r2)
    c928:	e0bffd17 	ldw	r2,-12(fp)
    c92c:	10800c17 	ldw	r2,48(r2)
    c930:	18800526 	beq	r3,r2,c948 <altera_avalon_jtag_uart_close+0x5c>
    c934:	e0bffd17 	ldw	r2,-12(fp)
    c938:	10c00917 	ldw	r3,36(r2)
    c93c:	e0bffd17 	ldw	r2,-12(fp)
    c940:	10800117 	ldw	r2,4(r2)
    c944:	18bfef36 	bltu	r3,r2,c904 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c948:	e03fff15 	stw	zero,-4(fp)
    c94c:	e0bfff17 	ldw	r2,-4(fp)
}
    c950:	e037883a 	mov	sp,fp
    c954:	df000017 	ldw	fp,0(sp)
    c958:	dec00104 	addi	sp,sp,4
    c95c:	f800283a 	ret

0000c960 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c960:	defff804 	addi	sp,sp,-32
    c964:	df000715 	stw	fp,28(sp)
    c968:	df000704 	addi	fp,sp,28
    c96c:	e13ffb15 	stw	r4,-20(fp)
    c970:	e17ffc15 	stw	r5,-16(fp)
    c974:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    c978:	00bff9c4 	movi	r2,-25
    c97c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    c980:	e0bffc17 	ldw	r2,-16(fp)
    c984:	e0bfff15 	stw	r2,-4(fp)
    c988:	e0ffff17 	ldw	r3,-4(fp)
    c98c:	189a8060 	cmpeqi	r2,r3,27137
    c990:	1000041e 	bne	r2,zero,c9a4 <altera_avalon_jtag_uart_ioctl+0x44>
    c994:	e0ffff17 	ldw	r3,-4(fp)
    c998:	189a80a0 	cmpeqi	r2,r3,27138
    c99c:	10001b1e 	bne	r2,zero,ca0c <altera_avalon_jtag_uart_ioctl+0xac>
    c9a0:	00002706 	br	ca40 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c9a4:	e0bffb17 	ldw	r2,-20(fp)
    c9a8:	10c00117 	ldw	r3,4(r2)
    c9ac:	00a00034 	movhi	r2,32768
    c9b0:	10bfffc4 	addi	r2,r2,-1
    c9b4:	18802226 	beq	r3,r2,ca40 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    c9b8:	e0bffd17 	ldw	r2,-12(fp)
    c9bc:	10800017 	ldw	r2,0(r2)
    c9c0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c9c4:	e0bff917 	ldw	r2,-28(fp)
    c9c8:	10800090 	cmplti	r2,r2,2
    c9cc:	1000071e 	bne	r2,zero,c9ec <altera_avalon_jtag_uart_ioctl+0x8c>
    c9d0:	e0fff917 	ldw	r3,-28(fp)
    c9d4:	00a00034 	movhi	r2,32768
    c9d8:	10bfffc4 	addi	r2,r2,-1
    c9dc:	18800326 	beq	r3,r2,c9ec <altera_avalon_jtag_uart_ioctl+0x8c>
    c9e0:	e0bff917 	ldw	r2,-28(fp)
    c9e4:	e0bffe15 	stw	r2,-8(fp)
    c9e8:	00000306 	br	c9f8 <altera_avalon_jtag_uart_ioctl+0x98>
    c9ec:	00e00034 	movhi	r3,32768
    c9f0:	18ffff84 	addi	r3,r3,-2
    c9f4:	e0fffe15 	stw	r3,-8(fp)
    c9f8:	e0bffb17 	ldw	r2,-20(fp)
    c9fc:	e0fffe17 	ldw	r3,-8(fp)
    ca00:	10c00115 	stw	r3,4(r2)
      rc = 0;
    ca04:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    ca08:	00000d06 	br	ca40 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ca0c:	e0bffb17 	ldw	r2,-20(fp)
    ca10:	10c00117 	ldw	r3,4(r2)
    ca14:	00a00034 	movhi	r2,32768
    ca18:	10bfffc4 	addi	r2,r2,-1
    ca1c:	18800826 	beq	r3,r2,ca40 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ca20:	e13ffd17 	ldw	r4,-12(fp)
    ca24:	e0bffb17 	ldw	r2,-20(fp)
    ca28:	10c00917 	ldw	r3,36(r2)
    ca2c:	e0bffb17 	ldw	r2,-20(fp)
    ca30:	10800117 	ldw	r2,4(r2)
    ca34:	1885803a 	cmpltu	r2,r3,r2
    ca38:	20800015 	stw	r2,0(r4)
      rc = 0;
    ca3c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    ca40:	e0bffa17 	ldw	r2,-24(fp)
}
    ca44:	e037883a 	mov	sp,fp
    ca48:	df000017 	ldw	fp,0(sp)
    ca4c:	dec00104 	addi	sp,sp,4
    ca50:	f800283a 	ret

0000ca54 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ca54:	defff204 	addi	sp,sp,-56
    ca58:	dfc00d15 	stw	ra,52(sp)
    ca5c:	df000c15 	stw	fp,48(sp)
    ca60:	df000c04 	addi	fp,sp,48
    ca64:	e13ffb15 	stw	r4,-20(fp)
    ca68:	e17ffc15 	stw	r5,-16(fp)
    ca6c:	e1bffd15 	stw	r6,-12(fp)
    ca70:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    ca74:	e0bffc17 	ldw	r2,-16(fp)
    ca78:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ca7c:	00004806 	br	cba0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ca80:	e0bffb17 	ldw	r2,-20(fp)
    ca84:	10800a17 	ldw	r2,40(r2)
    ca88:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ca8c:	e0bffb17 	ldw	r2,-20(fp)
    ca90:	10800b17 	ldw	r2,44(r2)
    ca94:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    ca98:	e0fff717 	ldw	r3,-36(fp)
    ca9c:	e0bff617 	ldw	r2,-40(fp)
    caa0:	18800536 	bltu	r3,r2,cab8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    caa4:	e0bff717 	ldw	r2,-36(fp)
    caa8:	e0fff617 	ldw	r3,-40(fp)
    caac:	10c5c83a 	sub	r2,r2,r3
    cab0:	e0bff815 	stw	r2,-32(fp)
    cab4:	00000406 	br	cac8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    cab8:	00820004 	movi	r2,2048
    cabc:	e0fff617 	ldw	r3,-40(fp)
    cac0:	10c5c83a 	sub	r2,r2,r3
    cac4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    cac8:	e0bff817 	ldw	r2,-32(fp)
    cacc:	1005003a 	cmpeq	r2,r2,zero
    cad0:	10001f1e 	bne	r2,zero,cb50 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    cad4:	e0fffd17 	ldw	r3,-12(fp)
    cad8:	e0bff817 	ldw	r2,-32(fp)
    cadc:	1880022e 	bgeu	r3,r2,cae8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    cae0:	e0bffd17 	ldw	r2,-12(fp)
    cae4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    cae8:	e0bffb17 	ldw	r2,-20(fp)
    caec:	10c00e04 	addi	r3,r2,56
    caf0:	e0bff617 	ldw	r2,-40(fp)
    caf4:	1887883a 	add	r3,r3,r2
    caf8:	e0bffa17 	ldw	r2,-24(fp)
    cafc:	1009883a 	mov	r4,r2
    cb00:	180b883a 	mov	r5,r3
    cb04:	e1bff817 	ldw	r6,-32(fp)
    cb08:	00074540 	call	7454 <memcpy>
      ptr   += n;
    cb0c:	e0fff817 	ldw	r3,-32(fp)
    cb10:	e0bffa17 	ldw	r2,-24(fp)
    cb14:	10c5883a 	add	r2,r2,r3
    cb18:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    cb1c:	e0fffd17 	ldw	r3,-12(fp)
    cb20:	e0bff817 	ldw	r2,-32(fp)
    cb24:	1885c83a 	sub	r2,r3,r2
    cb28:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cb2c:	e0fff617 	ldw	r3,-40(fp)
    cb30:	e0bff817 	ldw	r2,-32(fp)
    cb34:	1885883a 	add	r2,r3,r2
    cb38:	10c1ffcc 	andi	r3,r2,2047
    cb3c:	e0bffb17 	ldw	r2,-20(fp)
    cb40:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    cb44:	e0bffd17 	ldw	r2,-12(fp)
    cb48:	10800048 	cmpgei	r2,r2,1
    cb4c:	103fcc1e 	bne	r2,zero,ca80 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    cb50:	e0fffa17 	ldw	r3,-24(fp)
    cb54:	e0bffc17 	ldw	r2,-16(fp)
    cb58:	1880141e 	bne	r3,r2,cbac <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    cb5c:	e0bffe17 	ldw	r2,-8(fp)
    cb60:	1090000c 	andi	r2,r2,16384
    cb64:	1004c03a 	cmpne	r2,r2,zero
    cb68:	1000101e 	bne	r2,zero,cbac <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    cb6c:	e0bffb17 	ldw	r2,-20(fp)
    cb70:	10c00a17 	ldw	r3,40(r2)
    cb74:	e0bff717 	ldw	r2,-36(fp)
    cb78:	1880051e 	bne	r3,r2,cb90 <altera_avalon_jtag_uart_read+0x13c>
    cb7c:	e0bffb17 	ldw	r2,-20(fp)
    cb80:	10c00917 	ldw	r3,36(r2)
    cb84:	e0bffb17 	ldw	r2,-20(fp)
    cb88:	10800117 	ldw	r2,4(r2)
    cb8c:	18bff736 	bltu	r3,r2,cb6c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    cb90:	e0bffb17 	ldw	r2,-20(fp)
    cb94:	10c00a17 	ldw	r3,40(r2)
    cb98:	e0bff717 	ldw	r2,-36(fp)
    cb9c:	18800326 	beq	r3,r2,cbac <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    cba0:	e0bffd17 	ldw	r2,-12(fp)
    cba4:	10800048 	cmpgei	r2,r2,1
    cba8:	103fb51e 	bne	r2,zero,ca80 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    cbac:	e0fffa17 	ldw	r3,-24(fp)
    cbb0:	e0bffc17 	ldw	r2,-16(fp)
    cbb4:	18801926 	beq	r3,r2,cc1c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cbb8:	0005303a 	rdctl	r2,status
    cbbc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cbc0:	e0fff517 	ldw	r3,-44(fp)
    cbc4:	00bfff84 	movi	r2,-2
    cbc8:	1884703a 	and	r2,r3,r2
    cbcc:	1001703a 	wrctl	status,r2
  
  return context;
    cbd0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    cbd4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    cbd8:	e0bffb17 	ldw	r2,-20(fp)
    cbdc:	10800817 	ldw	r2,32(r2)
    cbe0:	10c00054 	ori	r3,r2,1
    cbe4:	e0bffb17 	ldw	r2,-20(fp)
    cbe8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    cbec:	e0bffb17 	ldw	r2,-20(fp)
    cbf0:	10800017 	ldw	r2,0(r2)
    cbf4:	11000104 	addi	r4,r2,4
    cbf8:	e0bffb17 	ldw	r2,-20(fp)
    cbfc:	10800817 	ldw	r2,32(r2)
    cc00:	1007883a 	mov	r3,r2
    cc04:	2005883a 	mov	r2,r4
    cc08:	10c00035 	stwio	r3,0(r2)
    cc0c:	e0bff917 	ldw	r2,-28(fp)
    cc10:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cc14:	e0bff417 	ldw	r2,-48(fp)
    cc18:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    cc1c:	e0fffa17 	ldw	r3,-24(fp)
    cc20:	e0bffc17 	ldw	r2,-16(fp)
    cc24:	18800526 	beq	r3,r2,cc3c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    cc28:	e0fffa17 	ldw	r3,-24(fp)
    cc2c:	e0bffc17 	ldw	r2,-16(fp)
    cc30:	1887c83a 	sub	r3,r3,r2
    cc34:	e0ffff15 	stw	r3,-4(fp)
    cc38:	00000906 	br	cc60 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    cc3c:	e0bffe17 	ldw	r2,-8(fp)
    cc40:	1090000c 	andi	r2,r2,16384
    cc44:	1005003a 	cmpeq	r2,r2,zero
    cc48:	1000031e 	bne	r2,zero,cc58 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    cc4c:	00bffd44 	movi	r2,-11
    cc50:	e0bfff15 	stw	r2,-4(fp)
    cc54:	00000206 	br	cc60 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    cc58:	00bffec4 	movi	r2,-5
    cc5c:	e0bfff15 	stw	r2,-4(fp)
    cc60:	e0bfff17 	ldw	r2,-4(fp)
}
    cc64:	e037883a 	mov	sp,fp
    cc68:	dfc00117 	ldw	ra,4(sp)
    cc6c:	df000017 	ldw	fp,0(sp)
    cc70:	dec00204 	addi	sp,sp,8
    cc74:	f800283a 	ret

0000cc78 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    cc78:	defff204 	addi	sp,sp,-56
    cc7c:	dfc00d15 	stw	ra,52(sp)
    cc80:	df000c15 	stw	fp,48(sp)
    cc84:	df000c04 	addi	fp,sp,48
    cc88:	e13ffb15 	stw	r4,-20(fp)
    cc8c:	e17ffc15 	stw	r5,-16(fp)
    cc90:	e1bffd15 	stw	r6,-12(fp)
    cc94:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    cc98:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    cc9c:	e0bffc17 	ldw	r2,-16(fp)
    cca0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    cca4:	00003a06 	br	cd90 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    cca8:	e0bffb17 	ldw	r2,-20(fp)
    ccac:	10800c17 	ldw	r2,48(r2)
    ccb0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    ccb4:	e0bffb17 	ldw	r2,-20(fp)
    ccb8:	10800d17 	ldw	r2,52(r2)
    ccbc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    ccc0:	e0fffa17 	ldw	r3,-24(fp)
    ccc4:	e0bff917 	ldw	r2,-28(fp)
    ccc8:	1880062e 	bgeu	r3,r2,cce4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    cccc:	e0fff917 	ldw	r3,-28(fp)
    ccd0:	e0bffa17 	ldw	r2,-24(fp)
    ccd4:	1885c83a 	sub	r2,r3,r2
    ccd8:	10bfffc4 	addi	r2,r2,-1
    ccdc:	e0bff815 	stw	r2,-32(fp)
    cce0:	00000c06 	br	cd14 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    cce4:	e0bff917 	ldw	r2,-28(fp)
    cce8:	1005003a 	cmpeq	r2,r2,zero
    ccec:	1000051e 	bne	r2,zero,cd04 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    ccf0:	00820004 	movi	r2,2048
    ccf4:	e0fffa17 	ldw	r3,-24(fp)
    ccf8:	10c5c83a 	sub	r2,r2,r3
    ccfc:	e0bff815 	stw	r2,-32(fp)
    cd00:	00000406 	br	cd14 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    cd04:	0081ffc4 	movi	r2,2047
    cd08:	e0fffa17 	ldw	r3,-24(fp)
    cd0c:	10c5c83a 	sub	r2,r2,r3
    cd10:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    cd14:	e0bff817 	ldw	r2,-32(fp)
    cd18:	1005003a 	cmpeq	r2,r2,zero
    cd1c:	10001f1e 	bne	r2,zero,cd9c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    cd20:	e0fffd17 	ldw	r3,-12(fp)
    cd24:	e0bff817 	ldw	r2,-32(fp)
    cd28:	1880022e 	bgeu	r3,r2,cd34 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    cd2c:	e0bffd17 	ldw	r2,-12(fp)
    cd30:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    cd34:	e0bffb17 	ldw	r2,-20(fp)
    cd38:	10c20e04 	addi	r3,r2,2104
    cd3c:	e0bffa17 	ldw	r2,-24(fp)
    cd40:	1885883a 	add	r2,r3,r2
    cd44:	e0fffc17 	ldw	r3,-16(fp)
    cd48:	1009883a 	mov	r4,r2
    cd4c:	180b883a 	mov	r5,r3
    cd50:	e1bff817 	ldw	r6,-32(fp)
    cd54:	00074540 	call	7454 <memcpy>
      ptr   += n;
    cd58:	e0fff817 	ldw	r3,-32(fp)
    cd5c:	e0bffc17 	ldw	r2,-16(fp)
    cd60:	10c5883a 	add	r2,r2,r3
    cd64:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    cd68:	e0fffd17 	ldw	r3,-12(fp)
    cd6c:	e0bff817 	ldw	r2,-32(fp)
    cd70:	1885c83a 	sub	r2,r3,r2
    cd74:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cd78:	e0fffa17 	ldw	r3,-24(fp)
    cd7c:	e0bff817 	ldw	r2,-32(fp)
    cd80:	1885883a 	add	r2,r3,r2
    cd84:	10c1ffcc 	andi	r3,r2,2047
    cd88:	e0bffb17 	ldw	r2,-20(fp)
    cd8c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    cd90:	e0bffd17 	ldw	r2,-12(fp)
    cd94:	10800048 	cmpgei	r2,r2,1
    cd98:	103fc31e 	bne	r2,zero,cca8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cd9c:	0005303a 	rdctl	r2,status
    cda0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cda4:	e0fff517 	ldw	r3,-44(fp)
    cda8:	00bfff84 	movi	r2,-2
    cdac:	1884703a 	and	r2,r3,r2
    cdb0:	1001703a 	wrctl	status,r2
  
  return context;
    cdb4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    cdb8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    cdbc:	e0bffb17 	ldw	r2,-20(fp)
    cdc0:	10800817 	ldw	r2,32(r2)
    cdc4:	10c00094 	ori	r3,r2,2
    cdc8:	e0bffb17 	ldw	r2,-20(fp)
    cdcc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    cdd0:	e0bffb17 	ldw	r2,-20(fp)
    cdd4:	10800017 	ldw	r2,0(r2)
    cdd8:	11000104 	addi	r4,r2,4
    cddc:	e0bffb17 	ldw	r2,-20(fp)
    cde0:	10800817 	ldw	r2,32(r2)
    cde4:	1007883a 	mov	r3,r2
    cde8:	2005883a 	mov	r2,r4
    cdec:	10c00035 	stwio	r3,0(r2)
    cdf0:	e0bff717 	ldw	r2,-36(fp)
    cdf4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cdf8:	e0bff417 	ldw	r2,-48(fp)
    cdfc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    ce00:	e0bffd17 	ldw	r2,-12(fp)
    ce04:	10800050 	cmplti	r2,r2,1
    ce08:	1000111e 	bne	r2,zero,ce50 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    ce0c:	e0bffe17 	ldw	r2,-8(fp)
    ce10:	1090000c 	andi	r2,r2,16384
    ce14:	1004c03a 	cmpne	r2,r2,zero
    ce18:	1000101e 	bne	r2,zero,ce5c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ce1c:	e0bffb17 	ldw	r2,-20(fp)
    ce20:	10c00d17 	ldw	r3,52(r2)
    ce24:	e0bff917 	ldw	r2,-28(fp)
    ce28:	1880051e 	bne	r3,r2,ce40 <altera_avalon_jtag_uart_write+0x1c8>
    ce2c:	e0bffb17 	ldw	r2,-20(fp)
    ce30:	10c00917 	ldw	r3,36(r2)
    ce34:	e0bffb17 	ldw	r2,-20(fp)
    ce38:	10800117 	ldw	r2,4(r2)
    ce3c:	18bff736 	bltu	r3,r2,ce1c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    ce40:	e0bffb17 	ldw	r2,-20(fp)
    ce44:	10c00d17 	ldw	r3,52(r2)
    ce48:	e0bff917 	ldw	r2,-28(fp)
    ce4c:	18800326 	beq	r3,r2,ce5c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    ce50:	e0bffd17 	ldw	r2,-12(fp)
    ce54:	10800048 	cmpgei	r2,r2,1
    ce58:	103fcd1e 	bne	r2,zero,cd90 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    ce5c:	e0fffc17 	ldw	r3,-16(fp)
    ce60:	e0bff617 	ldw	r2,-40(fp)
    ce64:	18800526 	beq	r3,r2,ce7c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    ce68:	e0fffc17 	ldw	r3,-16(fp)
    ce6c:	e0bff617 	ldw	r2,-40(fp)
    ce70:	1887c83a 	sub	r3,r3,r2
    ce74:	e0ffff15 	stw	r3,-4(fp)
    ce78:	00000906 	br	cea0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    ce7c:	e0bffe17 	ldw	r2,-8(fp)
    ce80:	1090000c 	andi	r2,r2,16384
    ce84:	1005003a 	cmpeq	r2,r2,zero
    ce88:	1000031e 	bne	r2,zero,ce98 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    ce8c:	00bffd44 	movi	r2,-11
    ce90:	e0bfff15 	stw	r2,-4(fp)
    ce94:	00000206 	br	cea0 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    ce98:	00bffec4 	movi	r2,-5
    ce9c:	e0bfff15 	stw	r2,-4(fp)
    cea0:	e0bfff17 	ldw	r2,-4(fp)
}
    cea4:	e037883a 	mov	sp,fp
    cea8:	dfc00117 	ldw	ra,4(sp)
    ceac:	df000017 	ldw	fp,0(sp)
    ceb0:	dec00204 	addi	sp,sp,8
    ceb4:	f800283a 	ret

0000ceb8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    ceb8:	defffa04 	addi	sp,sp,-24
    cebc:	dfc00515 	stw	ra,20(sp)
    cec0:	df000415 	stw	fp,16(sp)
    cec4:	df000404 	addi	fp,sp,16
    cec8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    cecc:	e0bfff17 	ldw	r2,-4(fp)
    ced0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    ced4:	e0bfff17 	ldw	r2,-4(fp)
    ced8:	10800104 	addi	r2,r2,4
    cedc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cee0:	0005303a 	rdctl	r2,status
    cee4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cee8:	e0fffd17 	ldw	r3,-12(fp)
    ceec:	00bfff84 	movi	r2,-2
    cef0:	1884703a 	and	r2,r3,r2
    cef4:	1001703a 	wrctl	status,r2
  
  return context;
    cef8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    cefc:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    cf00:	000da980 	call	da98 <alt_tick>
    cf04:	e0bffe17 	ldw	r2,-8(fp)
    cf08:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cf0c:	e0bffc17 	ldw	r2,-16(fp)
    cf10:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    cf14:	e037883a 	mov	sp,fp
    cf18:	dfc00117 	ldw	ra,4(sp)
    cf1c:	df000017 	ldw	fp,0(sp)
    cf20:	dec00204 	addi	sp,sp,8
    cf24:	f800283a 	ret

0000cf28 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    cf28:	defff804 	addi	sp,sp,-32
    cf2c:	dfc00715 	stw	ra,28(sp)
    cf30:	df000615 	stw	fp,24(sp)
    cf34:	df000604 	addi	fp,sp,24
    cf38:	e13ffc15 	stw	r4,-16(fp)
    cf3c:	e17ffd15 	stw	r5,-12(fp)
    cf40:	e1bffe15 	stw	r6,-8(fp)
    cf44:	e1ffff15 	stw	r7,-4(fp)
    cf48:	e0bfff17 	ldw	r2,-4(fp)
    cf4c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    cf50:	00800074 	movhi	r2,1
    cf54:	10871704 	addi	r2,r2,7260
    cf58:	10800017 	ldw	r2,0(r2)
    cf5c:	1004c03a 	cmpne	r2,r2,zero
    cf60:	1000041e 	bne	r2,zero,cf74 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    cf64:	00c00074 	movhi	r3,1
    cf68:	18c71704 	addi	r3,r3,7260
    cf6c:	e0bffb17 	ldw	r2,-20(fp)
    cf70:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    cf74:	e0bffc17 	ldw	r2,-16(fp)
    cf78:	10800104 	addi	r2,r2,4
    cf7c:	1007883a 	mov	r3,r2
    cf80:	008001c4 	movi	r2,7
    cf84:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    cf88:	d8000015 	stw	zero,0(sp)
    cf8c:	e13ffd17 	ldw	r4,-12(fp)
    cf90:	e17ffe17 	ldw	r5,-8(fp)
    cf94:	01800074 	movhi	r6,1
    cf98:	31b3ae04 	addi	r6,r6,-12616
    cf9c:	e1fffc17 	ldw	r7,-16(fp)
    cfa0:	000d3340 	call	d334 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    cfa4:	e037883a 	mov	sp,fp
    cfa8:	dfc00117 	ldw	ra,4(sp)
    cfac:	df000017 	ldw	fp,0(sp)
    cfb0:	dec00204 	addi	sp,sp,8
    cfb4:	f800283a 	ret

0000cfb8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    cfb8:	defff404 	addi	sp,sp,-48
    cfbc:	df000b15 	stw	fp,44(sp)
    cfc0:	df000b04 	addi	fp,sp,44
    cfc4:	e13ffb15 	stw	r4,-20(fp)
    cfc8:	e17ffc15 	stw	r5,-16(fp)
    cfcc:	e1bffd15 	stw	r6,-12(fp)
    cfd0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    cfd4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    cfd8:	00800074 	movhi	r2,1
    cfdc:	10871704 	addi	r2,r2,7260
    cfe0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    cfe4:	1005003a 	cmpeq	r2,r2,zero
    cfe8:	1000411e 	bne	r2,zero,d0f0 <alt_alarm_start+0x138>
  {
    if (alarm)
    cfec:	e0bffb17 	ldw	r2,-20(fp)
    cff0:	1005003a 	cmpeq	r2,r2,zero
    cff4:	10003b1e 	bne	r2,zero,d0e4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    cff8:	e0fffb17 	ldw	r3,-20(fp)
    cffc:	e0bffd17 	ldw	r2,-12(fp)
    d000:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    d004:	e0fffb17 	ldw	r3,-20(fp)
    d008:	e0bffe17 	ldw	r2,-8(fp)
    d00c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d010:	0005303a 	rdctl	r2,status
    d014:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d018:	e0fff817 	ldw	r3,-32(fp)
    d01c:	00bfff84 	movi	r2,-2
    d020:	1884703a 	and	r2,r3,r2
    d024:	1001703a 	wrctl	status,r2
  
  return context;
    d028:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    d02c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    d030:	00800074 	movhi	r2,1
    d034:	10871804 	addi	r2,r2,7264
    d038:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    d03c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    d040:	e0fffc17 	ldw	r3,-16(fp)
    d044:	e0bff917 	ldw	r2,-28(fp)
    d048:	1885883a 	add	r2,r3,r2
    d04c:	10c00044 	addi	r3,r2,1
    d050:	e0bffb17 	ldw	r2,-20(fp)
    d054:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    d058:	e0bffb17 	ldw	r2,-20(fp)
    d05c:	10c00217 	ldw	r3,8(r2)
    d060:	e0bff917 	ldw	r2,-28(fp)
    d064:	1880042e 	bgeu	r3,r2,d078 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    d068:	e0fffb17 	ldw	r3,-20(fp)
    d06c:	00800044 	movi	r2,1
    d070:	18800405 	stb	r2,16(r3)
    d074:	00000206 	br	d080 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    d078:	e0bffb17 	ldw	r2,-20(fp)
    d07c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    d080:	e0fffb17 	ldw	r3,-20(fp)
    d084:	00800074 	movhi	r2,1
    d088:	10805a04 	addi	r2,r2,360
    d08c:	e0bff615 	stw	r2,-40(fp)
    d090:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d094:	e0fff717 	ldw	r3,-36(fp)
    d098:	e0bff617 	ldw	r2,-40(fp)
    d09c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    d0a0:	e0bff617 	ldw	r2,-40(fp)
    d0a4:	10c00017 	ldw	r3,0(r2)
    d0a8:	e0bff717 	ldw	r2,-36(fp)
    d0ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d0b0:	e0bff617 	ldw	r2,-40(fp)
    d0b4:	10c00017 	ldw	r3,0(r2)
    d0b8:	e0bff717 	ldw	r2,-36(fp)
    d0bc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    d0c0:	e0fff617 	ldw	r3,-40(fp)
    d0c4:	e0bff717 	ldw	r2,-36(fp)
    d0c8:	18800015 	stw	r2,0(r3)
    d0cc:	e0bffa17 	ldw	r2,-24(fp)
    d0d0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d0d4:	e0bff517 	ldw	r2,-44(fp)
    d0d8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    d0dc:	e03fff15 	stw	zero,-4(fp)
    d0e0:	00000506 	br	d0f8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    d0e4:	00bffa84 	movi	r2,-22
    d0e8:	e0bfff15 	stw	r2,-4(fp)
    d0ec:	00000206 	br	d0f8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    d0f0:	00bfde84 	movi	r2,-134
    d0f4:	e0bfff15 	stw	r2,-4(fp)
    d0f8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    d0fc:	e037883a 	mov	sp,fp
    d100:	df000017 	ldw	fp,0(sp)
    d104:	dec00104 	addi	sp,sp,4
    d108:	f800283a 	ret

0000d10c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    d10c:	deffff04 	addi	sp,sp,-4
    d110:	df000015 	stw	fp,0(sp)
    d114:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    d118:	e037883a 	mov	sp,fp
    d11c:	df000017 	ldw	fp,0(sp)
    d120:	dec00104 	addi	sp,sp,4
    d124:	f800283a 	ret

0000d128 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    d128:	defff904 	addi	sp,sp,-28
    d12c:	dfc00615 	stw	ra,24(sp)
    d130:	df000515 	stw	fp,20(sp)
    d134:	df000504 	addi	fp,sp,20
    d138:	e13ffd15 	stw	r4,-12(fp)
    d13c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    d140:	e0bffd17 	ldw	r2,-12(fp)
    d144:	1005003a 	cmpeq	r2,r2,zero
    d148:	1000041e 	bne	r2,zero,d15c <alt_dev_llist_insert+0x34>
    d14c:	e0bffd17 	ldw	r2,-12(fp)
    d150:	10800217 	ldw	r2,8(r2)
    d154:	1004c03a 	cmpne	r2,r2,zero
    d158:	1000071e 	bne	r2,zero,d178 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    d15c:	000d1dc0 	call	d1dc <alt_get_errno>
    d160:	1007883a 	mov	r3,r2
    d164:	00800584 	movi	r2,22
    d168:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    d16c:	00bffa84 	movi	r2,-22
    d170:	e0bfff15 	stw	r2,-4(fp)
    d174:	00001306 	br	d1c4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    d178:	e0fffd17 	ldw	r3,-12(fp)
    d17c:	e0bffe17 	ldw	r2,-8(fp)
    d180:	e0bffb15 	stw	r2,-20(fp)
    d184:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d188:	e0fffc17 	ldw	r3,-16(fp)
    d18c:	e0bffb17 	ldw	r2,-20(fp)
    d190:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    d194:	e0bffb17 	ldw	r2,-20(fp)
    d198:	10c00017 	ldw	r3,0(r2)
    d19c:	e0bffc17 	ldw	r2,-16(fp)
    d1a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d1a4:	e0bffb17 	ldw	r2,-20(fp)
    d1a8:	10c00017 	ldw	r3,0(r2)
    d1ac:	e0bffc17 	ldw	r2,-16(fp)
    d1b0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    d1b4:	e0fffb17 	ldw	r3,-20(fp)
    d1b8:	e0bffc17 	ldw	r2,-16(fp)
    d1bc:	18800015 	stw	r2,0(r3)

  return 0;  
    d1c0:	e03fff15 	stw	zero,-4(fp)
    d1c4:	e0bfff17 	ldw	r2,-4(fp)
}
    d1c8:	e037883a 	mov	sp,fp
    d1cc:	dfc00117 	ldw	ra,4(sp)
    d1d0:	df000017 	ldw	fp,0(sp)
    d1d4:	dec00204 	addi	sp,sp,8
    d1d8:	f800283a 	ret

0000d1dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d1dc:	defffd04 	addi	sp,sp,-12
    d1e0:	dfc00215 	stw	ra,8(sp)
    d1e4:	df000115 	stw	fp,4(sp)
    d1e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d1ec:	00800074 	movhi	r2,1
    d1f0:	10805704 	addi	r2,r2,348
    d1f4:	10800017 	ldw	r2,0(r2)
    d1f8:	1005003a 	cmpeq	r2,r2,zero
    d1fc:	1000061e 	bne	r2,zero,d218 <alt_get_errno+0x3c>
    d200:	00800074 	movhi	r2,1
    d204:	10805704 	addi	r2,r2,348
    d208:	10800017 	ldw	r2,0(r2)
    d20c:	103ee83a 	callr	r2
    d210:	e0bfff15 	stw	r2,-4(fp)
    d214:	00000306 	br	d224 <alt_get_errno+0x48>
    d218:	00800074 	movhi	r2,1
    d21c:	10870f04 	addi	r2,r2,7228
    d220:	e0bfff15 	stw	r2,-4(fp)
    d224:	e0bfff17 	ldw	r2,-4(fp)
}
    d228:	e037883a 	mov	sp,fp
    d22c:	dfc00117 	ldw	ra,4(sp)
    d230:	df000017 	ldw	fp,0(sp)
    d234:	dec00204 	addi	sp,sp,8
    d238:	f800283a 	ret

0000d23c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    d23c:	defffd04 	addi	sp,sp,-12
    d240:	dfc00215 	stw	ra,8(sp)
    d244:	df000115 	stw	fp,4(sp)
    d248:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d24c:	00bfff04 	movi	r2,-4
    d250:	00c00074 	movhi	r3,1
    d254:	18f83b04 	addi	r3,r3,-7956
    d258:	1885883a 	add	r2,r3,r2
    d25c:	e0bfff15 	stw	r2,-4(fp)
    d260:	00000606 	br	d27c <_do_ctors+0x40>
        (*ctor) (); 
    d264:	e0bfff17 	ldw	r2,-4(fp)
    d268:	10800017 	ldw	r2,0(r2)
    d26c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d270:	e0bfff17 	ldw	r2,-4(fp)
    d274:	10bfff04 	addi	r2,r2,-4
    d278:	e0bfff15 	stw	r2,-4(fp)
    d27c:	e0ffff17 	ldw	r3,-4(fp)
    d280:	00800074 	movhi	r2,1
    d284:	10b83a04 	addi	r2,r2,-7960
    d288:	18bff62e 	bgeu	r3,r2,d264 <_do_ctors+0x28>
        (*ctor) (); 
}
    d28c:	e037883a 	mov	sp,fp
    d290:	dfc00117 	ldw	ra,4(sp)
    d294:	df000017 	ldw	fp,0(sp)
    d298:	dec00204 	addi	sp,sp,8
    d29c:	f800283a 	ret

0000d2a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    d2a0:	defffd04 	addi	sp,sp,-12
    d2a4:	dfc00215 	stw	ra,8(sp)
    d2a8:	df000115 	stw	fp,4(sp)
    d2ac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d2b0:	00bfff04 	movi	r2,-4
    d2b4:	00c00074 	movhi	r3,1
    d2b8:	18f83b04 	addi	r3,r3,-7956
    d2bc:	1885883a 	add	r2,r3,r2
    d2c0:	e0bfff15 	stw	r2,-4(fp)
    d2c4:	00000606 	br	d2e0 <_do_dtors+0x40>
        (*dtor) (); 
    d2c8:	e0bfff17 	ldw	r2,-4(fp)
    d2cc:	10800017 	ldw	r2,0(r2)
    d2d0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d2d4:	e0bfff17 	ldw	r2,-4(fp)
    d2d8:	10bfff04 	addi	r2,r2,-4
    d2dc:	e0bfff15 	stw	r2,-4(fp)
    d2e0:	e0ffff17 	ldw	r3,-4(fp)
    d2e4:	00800074 	movhi	r2,1
    d2e8:	10b83b04 	addi	r2,r2,-7956
    d2ec:	18bff62e 	bgeu	r3,r2,d2c8 <_do_dtors+0x28>
        (*dtor) (); 
}
    d2f0:	e037883a 	mov	sp,fp
    d2f4:	dfc00117 	ldw	ra,4(sp)
    d2f8:	df000017 	ldw	fp,0(sp)
    d2fc:	dec00204 	addi	sp,sp,8
    d300:	f800283a 	ret

0000d304 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    d304:	defffe04 	addi	sp,sp,-8
    d308:	dfc00115 	stw	ra,4(sp)
    d30c:	df000015 	stw	fp,0(sp)
    d310:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    d314:	0009883a 	mov	r4,zero
    d318:	01440004 	movi	r5,4096
    d31c:	000de300 	call	de30 <alt_icache_flush>
#endif
}
    d320:	e037883a 	mov	sp,fp
    d324:	dfc00117 	ldw	ra,4(sp)
    d328:	df000017 	ldw	fp,0(sp)
    d32c:	dec00204 	addi	sp,sp,8
    d330:	f800283a 	ret

0000d334 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d334:	defff904 	addi	sp,sp,-28
    d338:	dfc00615 	stw	ra,24(sp)
    d33c:	df000515 	stw	fp,20(sp)
    d340:	df000504 	addi	fp,sp,20
    d344:	e13ffc15 	stw	r4,-16(fp)
    d348:	e17ffd15 	stw	r5,-12(fp)
    d34c:	e1bffe15 	stw	r6,-8(fp)
    d350:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    d354:	e0800217 	ldw	r2,8(fp)
    d358:	d8800015 	stw	r2,0(sp)
    d35c:	e13ffc17 	ldw	r4,-16(fp)
    d360:	e17ffd17 	ldw	r5,-12(fp)
    d364:	e1bffe17 	ldw	r6,-8(fp)
    d368:	e1ffff17 	ldw	r7,-4(fp)
    d36c:	000d5080 	call	d508 <alt_iic_isr_register>
}  
    d370:	e037883a 	mov	sp,fp
    d374:	dfc00117 	ldw	ra,4(sp)
    d378:	df000017 	ldw	fp,0(sp)
    d37c:	dec00204 	addi	sp,sp,8
    d380:	f800283a 	ret

0000d384 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    d384:	defff904 	addi	sp,sp,-28
    d388:	df000615 	stw	fp,24(sp)
    d38c:	df000604 	addi	fp,sp,24
    d390:	e13ffe15 	stw	r4,-8(fp)
    d394:	e17fff15 	stw	r5,-4(fp)
    d398:	e0bfff17 	ldw	r2,-4(fp)
    d39c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d3a0:	0005303a 	rdctl	r2,status
    d3a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d3a8:	e0fffb17 	ldw	r3,-20(fp)
    d3ac:	00bfff84 	movi	r2,-2
    d3b0:	1884703a 	and	r2,r3,r2
    d3b4:	1001703a 	wrctl	status,r2
  
  return context;
    d3b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d3bc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    d3c0:	e0fffc17 	ldw	r3,-16(fp)
    d3c4:	00800044 	movi	r2,1
    d3c8:	10c4983a 	sll	r2,r2,r3
    d3cc:	1007883a 	mov	r3,r2
    d3d0:	00800074 	movhi	r2,1
    d3d4:	10871304 	addi	r2,r2,7244
    d3d8:	10800017 	ldw	r2,0(r2)
    d3dc:	1886b03a 	or	r3,r3,r2
    d3e0:	00800074 	movhi	r2,1
    d3e4:	10871304 	addi	r2,r2,7244
    d3e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d3ec:	00800074 	movhi	r2,1
    d3f0:	10871304 	addi	r2,r2,7244
    d3f4:	10800017 	ldw	r2,0(r2)
    d3f8:	100170fa 	wrctl	ienable,r2
    d3fc:	e0bffd17 	ldw	r2,-12(fp)
    d400:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d404:	e0bffa17 	ldw	r2,-24(fp)
    d408:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d40c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    d410:	e037883a 	mov	sp,fp
    d414:	df000017 	ldw	fp,0(sp)
    d418:	dec00104 	addi	sp,sp,4
    d41c:	f800283a 	ret

0000d420 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    d420:	defff904 	addi	sp,sp,-28
    d424:	df000615 	stw	fp,24(sp)
    d428:	df000604 	addi	fp,sp,24
    d42c:	e13ffe15 	stw	r4,-8(fp)
    d430:	e17fff15 	stw	r5,-4(fp)
    d434:	e0bfff17 	ldw	r2,-4(fp)
    d438:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d43c:	0005303a 	rdctl	r2,status
    d440:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d444:	e0fffb17 	ldw	r3,-20(fp)
    d448:	00bfff84 	movi	r2,-2
    d44c:	1884703a 	and	r2,r3,r2
    d450:	1001703a 	wrctl	status,r2
  
  return context;
    d454:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d458:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    d45c:	e0fffc17 	ldw	r3,-16(fp)
    d460:	00800044 	movi	r2,1
    d464:	10c4983a 	sll	r2,r2,r3
    d468:	0084303a 	nor	r2,zero,r2
    d46c:	1007883a 	mov	r3,r2
    d470:	00800074 	movhi	r2,1
    d474:	10871304 	addi	r2,r2,7244
    d478:	10800017 	ldw	r2,0(r2)
    d47c:	1886703a 	and	r3,r3,r2
    d480:	00800074 	movhi	r2,1
    d484:	10871304 	addi	r2,r2,7244
    d488:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d48c:	00800074 	movhi	r2,1
    d490:	10871304 	addi	r2,r2,7244
    d494:	10800017 	ldw	r2,0(r2)
    d498:	100170fa 	wrctl	ienable,r2
    d49c:	e0bffd17 	ldw	r2,-12(fp)
    d4a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d4a4:	e0bffa17 	ldw	r2,-24(fp)
    d4a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d4ac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    d4b0:	e037883a 	mov	sp,fp
    d4b4:	df000017 	ldw	fp,0(sp)
    d4b8:	dec00104 	addi	sp,sp,4
    d4bc:	f800283a 	ret

0000d4c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d4c0:	defffc04 	addi	sp,sp,-16
    d4c4:	df000315 	stw	fp,12(sp)
    d4c8:	df000304 	addi	fp,sp,12
    d4cc:	e13ffe15 	stw	r4,-8(fp)
    d4d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d4d4:	000530fa 	rdctl	r2,ienable
    d4d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d4dc:	e0ffff17 	ldw	r3,-4(fp)
    d4e0:	00800044 	movi	r2,1
    d4e4:	10c4983a 	sll	r2,r2,r3
    d4e8:	1007883a 	mov	r3,r2
    d4ec:	e0bffd17 	ldw	r2,-12(fp)
    d4f0:	1884703a 	and	r2,r3,r2
    d4f4:	1004c03a 	cmpne	r2,r2,zero
}
    d4f8:	e037883a 	mov	sp,fp
    d4fc:	df000017 	ldw	fp,0(sp)
    d500:	dec00104 	addi	sp,sp,4
    d504:	f800283a 	ret

0000d508 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d508:	defff404 	addi	sp,sp,-48
    d50c:	dfc00b15 	stw	ra,44(sp)
    d510:	df000a15 	stw	fp,40(sp)
    d514:	df000a04 	addi	fp,sp,40
    d518:	e13ffb15 	stw	r4,-20(fp)
    d51c:	e17ffc15 	stw	r5,-16(fp)
    d520:	e1bffd15 	stw	r6,-12(fp)
    d524:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    d528:	00bffa84 	movi	r2,-22
    d52c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    d530:	e0bffc17 	ldw	r2,-16(fp)
    d534:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d538:	e0bff917 	ldw	r2,-28(fp)
    d53c:	10800808 	cmpgei	r2,r2,32
    d540:	1000291e 	bne	r2,zero,d5e8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d544:	0005303a 	rdctl	r2,status
    d548:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d54c:	e0fff717 	ldw	r3,-36(fp)
    d550:	00bfff84 	movi	r2,-2
    d554:	1884703a 	and	r2,r3,r2
    d558:	1001703a 	wrctl	status,r2
  
  return context;
    d55c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d560:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    d564:	e0bff917 	ldw	r2,-28(fp)
    d568:	00c00074 	movhi	r3,1
    d56c:	18c7cc04 	addi	r3,r3,7984
    d570:	100490fa 	slli	r2,r2,3
    d574:	10c7883a 	add	r3,r2,r3
    d578:	e0bffd17 	ldw	r2,-12(fp)
    d57c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    d580:	e0bff917 	ldw	r2,-28(fp)
    d584:	00c00074 	movhi	r3,1
    d588:	18c7cc04 	addi	r3,r3,7984
    d58c:	100490fa 	slli	r2,r2,3
    d590:	10c5883a 	add	r2,r2,r3
    d594:	10c00104 	addi	r3,r2,4
    d598:	e0bffe17 	ldw	r2,-8(fp)
    d59c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d5a0:	e0bffd17 	ldw	r2,-12(fp)
    d5a4:	1005003a 	cmpeq	r2,r2,zero
    d5a8:	1000051e 	bne	r2,zero,d5c0 <alt_iic_isr_register+0xb8>
    d5ac:	e17ff917 	ldw	r5,-28(fp)
    d5b0:	e13ffb17 	ldw	r4,-20(fp)
    d5b4:	000d3840 	call	d384 <alt_ic_irq_enable>
    d5b8:	e0bfff15 	stw	r2,-4(fp)
    d5bc:	00000406 	br	d5d0 <alt_iic_isr_register+0xc8>
    d5c0:	e17ff917 	ldw	r5,-28(fp)
    d5c4:	e13ffb17 	ldw	r4,-20(fp)
    d5c8:	000d4200 	call	d420 <alt_ic_irq_disable>
    d5cc:	e0bfff15 	stw	r2,-4(fp)
    d5d0:	e0bfff17 	ldw	r2,-4(fp)
    d5d4:	e0bffa15 	stw	r2,-24(fp)
    d5d8:	e0bff817 	ldw	r2,-32(fp)
    d5dc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d5e0:	e0bff617 	ldw	r2,-40(fp)
    d5e4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d5e8:	e0bffa17 	ldw	r2,-24(fp)
}
    d5ec:	e037883a 	mov	sp,fp
    d5f0:	dfc00117 	ldw	ra,4(sp)
    d5f4:	df000017 	ldw	fp,0(sp)
    d5f8:	dec00204 	addi	sp,sp,8
    d5fc:	f800283a 	ret

0000d600 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    d600:	defff904 	addi	sp,sp,-28
    d604:	dfc00615 	stw	ra,24(sp)
    d608:	df000515 	stw	fp,20(sp)
    d60c:	df000504 	addi	fp,sp,20
    d610:	e13ffc15 	stw	r4,-16(fp)
    d614:	e17ffd15 	stw	r5,-12(fp)
    d618:	e1bffe15 	stw	r6,-8(fp)
    d61c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    d620:	e13ffd17 	ldw	r4,-12(fp)
    d624:	e17ffe17 	ldw	r5,-8(fp)
    d628:	e1bfff17 	ldw	r6,-4(fp)
    d62c:	000d8180 	call	d818 <open>
    d630:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    d634:	e0bffb17 	ldw	r2,-20(fp)
    d638:	1004803a 	cmplt	r2,r2,zero
    d63c:	10001c1e 	bne	r2,zero,d6b0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    d640:	e0bffb17 	ldw	r2,-20(fp)
    d644:	00c00074 	movhi	r3,1
    d648:	18fbd304 	addi	r3,r3,-4276
    d64c:	10800324 	muli	r2,r2,12
    d650:	10c5883a 	add	r2,r2,r3
    d654:	10c00017 	ldw	r3,0(r2)
    d658:	e0bffc17 	ldw	r2,-16(fp)
    d65c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    d660:	e0bffb17 	ldw	r2,-20(fp)
    d664:	00c00074 	movhi	r3,1
    d668:	18fbd304 	addi	r3,r3,-4276
    d66c:	10800324 	muli	r2,r2,12
    d670:	10c5883a 	add	r2,r2,r3
    d674:	10800104 	addi	r2,r2,4
    d678:	10c00017 	ldw	r3,0(r2)
    d67c:	e0bffc17 	ldw	r2,-16(fp)
    d680:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d684:	e0bffb17 	ldw	r2,-20(fp)
    d688:	00c00074 	movhi	r3,1
    d68c:	18fbd304 	addi	r3,r3,-4276
    d690:	10800324 	muli	r2,r2,12
    d694:	10c5883a 	add	r2,r2,r3
    d698:	10800204 	addi	r2,r2,8
    d69c:	10c00017 	ldw	r3,0(r2)
    d6a0:	e0bffc17 	ldw	r2,-16(fp)
    d6a4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d6a8:	e13ffb17 	ldw	r4,-20(fp)
    d6ac:	000c0a80 	call	c0a8 <alt_release_fd>
  }
} 
    d6b0:	e037883a 	mov	sp,fp
    d6b4:	dfc00117 	ldw	ra,4(sp)
    d6b8:	df000017 	ldw	fp,0(sp)
    d6bc:	dec00204 	addi	sp,sp,8
    d6c0:	f800283a 	ret

0000d6c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d6c4:	defffb04 	addi	sp,sp,-20
    d6c8:	dfc00415 	stw	ra,16(sp)
    d6cc:	df000315 	stw	fp,12(sp)
    d6d0:	df000304 	addi	fp,sp,12
    d6d4:	e13ffd15 	stw	r4,-12(fp)
    d6d8:	e17ffe15 	stw	r5,-8(fp)
    d6dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d6e0:	01000074 	movhi	r4,1
    d6e4:	213bd604 	addi	r4,r4,-4264
    d6e8:	e17ffd17 	ldw	r5,-12(fp)
    d6ec:	01800044 	movi	r6,1
    d6f0:	01c07fc4 	movi	r7,511
    d6f4:	000d6000 	call	d600 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d6f8:	01000074 	movhi	r4,1
    d6fc:	213bd304 	addi	r4,r4,-4276
    d700:	e17ffe17 	ldw	r5,-8(fp)
    d704:	000d883a 	mov	r6,zero
    d708:	01c07fc4 	movi	r7,511
    d70c:	000d6000 	call	d600 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d710:	01000074 	movhi	r4,1
    d714:	213bd904 	addi	r4,r4,-4252
    d718:	e17fff17 	ldw	r5,-4(fp)
    d71c:	01800044 	movi	r6,1
    d720:	01c07fc4 	movi	r7,511
    d724:	000d6000 	call	d600 <alt_open_fd>
}  
    d728:	e037883a 	mov	sp,fp
    d72c:	dfc00117 	ldw	ra,4(sp)
    d730:	df000017 	ldw	fp,0(sp)
    d734:	dec00204 	addi	sp,sp,8
    d738:	f800283a 	ret

0000d73c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d73c:	defffc04 	addi	sp,sp,-16
    d740:	df000315 	stw	fp,12(sp)
    d744:	df000304 	addi	fp,sp,12
    d748:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d74c:	e0bffe17 	ldw	r2,-8(fp)
    d750:	10800217 	ldw	r2,8(r2)
    d754:	10d00034 	orhi	r3,r2,16384
    d758:	e0bffe17 	ldw	r2,-8(fp)
    d75c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d760:	e03ffd15 	stw	zero,-12(fp)
    d764:	00002006 	br	d7e8 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d768:	e0bffd17 	ldw	r2,-12(fp)
    d76c:	00c00074 	movhi	r3,1
    d770:	18fbd304 	addi	r3,r3,-4276
    d774:	10800324 	muli	r2,r2,12
    d778:	10c5883a 	add	r2,r2,r3
    d77c:	10c00017 	ldw	r3,0(r2)
    d780:	e0bffe17 	ldw	r2,-8(fp)
    d784:	10800017 	ldw	r2,0(r2)
    d788:	1880141e 	bne	r3,r2,d7dc <alt_file_locked+0xa0>
    d78c:	e0bffd17 	ldw	r2,-12(fp)
    d790:	00c00074 	movhi	r3,1
    d794:	18fbd304 	addi	r3,r3,-4276
    d798:	10800324 	muli	r2,r2,12
    d79c:	10c5883a 	add	r2,r2,r3
    d7a0:	10800204 	addi	r2,r2,8
    d7a4:	10800017 	ldw	r2,0(r2)
    d7a8:	1004403a 	cmpge	r2,r2,zero
    d7ac:	10000b1e 	bne	r2,zero,d7dc <alt_file_locked+0xa0>
    d7b0:	e0bffd17 	ldw	r2,-12(fp)
    d7b4:	10800324 	muli	r2,r2,12
    d7b8:	1007883a 	mov	r3,r2
    d7bc:	00800074 	movhi	r2,1
    d7c0:	10bbd304 	addi	r2,r2,-4276
    d7c4:	1887883a 	add	r3,r3,r2
    d7c8:	e0bffe17 	ldw	r2,-8(fp)
    d7cc:	18800326 	beq	r3,r2,d7dc <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d7d0:	00bffcc4 	movi	r2,-13
    d7d4:	e0bfff15 	stw	r2,-4(fp)
    d7d8:	00000a06 	br	d804 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d7dc:	e0bffd17 	ldw	r2,-12(fp)
    d7e0:	10800044 	addi	r2,r2,1
    d7e4:	e0bffd15 	stw	r2,-12(fp)
    d7e8:	00800074 	movhi	r2,1
    d7ec:	10805604 	addi	r2,r2,344
    d7f0:	10800017 	ldw	r2,0(r2)
    d7f4:	1007883a 	mov	r3,r2
    d7f8:	e0bffd17 	ldw	r2,-12(fp)
    d7fc:	18bfda2e 	bgeu	r3,r2,d768 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d800:	e03fff15 	stw	zero,-4(fp)
    d804:	e0bfff17 	ldw	r2,-4(fp)
}
    d808:	e037883a 	mov	sp,fp
    d80c:	df000017 	ldw	fp,0(sp)
    d810:	dec00104 	addi	sp,sp,4
    d814:	f800283a 	ret

0000d818 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d818:	defff404 	addi	sp,sp,-48
    d81c:	dfc00b15 	stw	ra,44(sp)
    d820:	df000a15 	stw	fp,40(sp)
    d824:	df000a04 	addi	fp,sp,40
    d828:	e13ffb15 	stw	r4,-20(fp)
    d82c:	e17ffc15 	stw	r5,-16(fp)
    d830:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d834:	00bfffc4 	movi	r2,-1
    d838:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    d83c:	00bffb44 	movi	r2,-19
    d840:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    d844:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d848:	e13ffb17 	ldw	r4,-20(fp)
    d84c:	01400074 	movhi	r5,1
    d850:	29405404 	addi	r5,r5,336
    d854:	000dbc40 	call	dbc4 <alt_find_dev>
    d858:	e0bffa15 	stw	r2,-24(fp)
    d85c:	e0bffa17 	ldw	r2,-24(fp)
    d860:	1004c03a 	cmpne	r2,r2,zero
    d864:	1000051e 	bne	r2,zero,d87c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d868:	e13ffb17 	ldw	r4,-20(fp)
    d86c:	000dc580 	call	dc58 <alt_find_file>
    d870:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    d874:	00800044 	movi	r2,1
    d878:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d87c:	e0bffa17 	ldw	r2,-24(fp)
    d880:	1005003a 	cmpeq	r2,r2,zero
    d884:	1000301e 	bne	r2,zero,d948 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d888:	e13ffa17 	ldw	r4,-24(fp)
    d88c:	000dd780 	call	dd78 <alt_get_fd>
    d890:	e0bff815 	stw	r2,-32(fp)
    d894:	e0bff817 	ldw	r2,-32(fp)
    d898:	1004403a 	cmpge	r2,r2,zero
    d89c:	1000031e 	bne	r2,zero,d8ac <open+0x94>
    {
      status = index;
    d8a0:	e0bff817 	ldw	r2,-32(fp)
    d8a4:	e0bff715 	stw	r2,-36(fp)
    d8a8:	00002906 	br	d950 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    d8ac:	e0bff817 	ldw	r2,-32(fp)
    d8b0:	10800324 	muli	r2,r2,12
    d8b4:	1007883a 	mov	r3,r2
    d8b8:	00800074 	movhi	r2,1
    d8bc:	10bbd304 	addi	r2,r2,-4276
    d8c0:	1885883a 	add	r2,r3,r2
    d8c4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d8c8:	e0fffc17 	ldw	r3,-16(fp)
    d8cc:	00900034 	movhi	r2,16384
    d8d0:	10bfffc4 	addi	r2,r2,-1
    d8d4:	1886703a 	and	r3,r3,r2
    d8d8:	e0bff917 	ldw	r2,-28(fp)
    d8dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d8e0:	e0bff617 	ldw	r2,-40(fp)
    d8e4:	1004c03a 	cmpne	r2,r2,zero
    d8e8:	1000061e 	bne	r2,zero,d904 <open+0xec>
    d8ec:	e13ff917 	ldw	r4,-28(fp)
    d8f0:	000d73c0 	call	d73c <alt_file_locked>
    d8f4:	e0bff715 	stw	r2,-36(fp)
    d8f8:	e0bff717 	ldw	r2,-36(fp)
    d8fc:	1004803a 	cmplt	r2,r2,zero
    d900:	1000131e 	bne	r2,zero,d950 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d904:	e0bffa17 	ldw	r2,-24(fp)
    d908:	10800317 	ldw	r2,12(r2)
    d90c:	1005003a 	cmpeq	r2,r2,zero
    d910:	1000091e 	bne	r2,zero,d938 <open+0x120>
    d914:	e0bffa17 	ldw	r2,-24(fp)
    d918:	10800317 	ldw	r2,12(r2)
    d91c:	e13ff917 	ldw	r4,-28(fp)
    d920:	e17ffb17 	ldw	r5,-20(fp)
    d924:	e1bffc17 	ldw	r6,-16(fp)
    d928:	e1fffd17 	ldw	r7,-12(fp)
    d92c:	103ee83a 	callr	r2
    d930:	e0bfff15 	stw	r2,-4(fp)
    d934:	00000106 	br	d93c <open+0x124>
    d938:	e03fff15 	stw	zero,-4(fp)
    d93c:	e0bfff17 	ldw	r2,-4(fp)
    d940:	e0bff715 	stw	r2,-36(fp)
    d944:	00000206 	br	d950 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d948:	00bffb44 	movi	r2,-19
    d94c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d950:	e0bff717 	ldw	r2,-36(fp)
    d954:	1004403a 	cmpge	r2,r2,zero
    d958:	1000091e 	bne	r2,zero,d980 <open+0x168>
  {
    alt_release_fd (index);  
    d95c:	e13ff817 	ldw	r4,-32(fp)
    d960:	000c0a80 	call	c0a8 <alt_release_fd>
    ALT_ERRNO = -status;
    d964:	000d9a00 	call	d9a0 <alt_get_errno>
    d968:	e0fff717 	ldw	r3,-36(fp)
    d96c:	00c7c83a 	sub	r3,zero,r3
    d970:	10c00015 	stw	r3,0(r2)
    return -1;
    d974:	00bfffc4 	movi	r2,-1
    d978:	e0bffe15 	stw	r2,-8(fp)
    d97c:	00000206 	br	d988 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    d980:	e0bff817 	ldw	r2,-32(fp)
    d984:	e0bffe15 	stw	r2,-8(fp)
    d988:	e0bffe17 	ldw	r2,-8(fp)
}
    d98c:	e037883a 	mov	sp,fp
    d990:	dfc00117 	ldw	ra,4(sp)
    d994:	df000017 	ldw	fp,0(sp)
    d998:	dec00204 	addi	sp,sp,8
    d99c:	f800283a 	ret

0000d9a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d9a0:	defffd04 	addi	sp,sp,-12
    d9a4:	dfc00215 	stw	ra,8(sp)
    d9a8:	df000115 	stw	fp,4(sp)
    d9ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d9b0:	00800074 	movhi	r2,1
    d9b4:	10805704 	addi	r2,r2,348
    d9b8:	10800017 	ldw	r2,0(r2)
    d9bc:	1005003a 	cmpeq	r2,r2,zero
    d9c0:	1000061e 	bne	r2,zero,d9dc <alt_get_errno+0x3c>
    d9c4:	00800074 	movhi	r2,1
    d9c8:	10805704 	addi	r2,r2,348
    d9cc:	10800017 	ldw	r2,0(r2)
    d9d0:	103ee83a 	callr	r2
    d9d4:	e0bfff15 	stw	r2,-4(fp)
    d9d8:	00000306 	br	d9e8 <alt_get_errno+0x48>
    d9dc:	00800074 	movhi	r2,1
    d9e0:	10870f04 	addi	r2,r2,7228
    d9e4:	e0bfff15 	stw	r2,-4(fp)
    d9e8:	e0bfff17 	ldw	r2,-4(fp)
}
    d9ec:	e037883a 	mov	sp,fp
    d9f0:	dfc00117 	ldw	ra,4(sp)
    d9f4:	df000017 	ldw	fp,0(sp)
    d9f8:	dec00204 	addi	sp,sp,8
    d9fc:	f800283a 	ret

0000da00 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    da00:	defffa04 	addi	sp,sp,-24
    da04:	df000515 	stw	fp,20(sp)
    da08:	df000504 	addi	fp,sp,20
    da0c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    da10:	0005303a 	rdctl	r2,status
    da14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    da18:	e0fffd17 	ldw	r3,-12(fp)
    da1c:	00bfff84 	movi	r2,-2
    da20:	1884703a 	and	r2,r3,r2
    da24:	1001703a 	wrctl	status,r2
  
  return context;
    da28:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    da2c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    da30:	e0bfff17 	ldw	r2,-4(fp)
    da34:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    da38:	e0bffc17 	ldw	r2,-16(fp)
    da3c:	10c00017 	ldw	r3,0(r2)
    da40:	e0bffc17 	ldw	r2,-16(fp)
    da44:	10800117 	ldw	r2,4(r2)
    da48:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    da4c:	e0bffc17 	ldw	r2,-16(fp)
    da50:	10c00117 	ldw	r3,4(r2)
    da54:	e0bffc17 	ldw	r2,-16(fp)
    da58:	10800017 	ldw	r2,0(r2)
    da5c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    da60:	e0fffc17 	ldw	r3,-16(fp)
    da64:	e0bffc17 	ldw	r2,-16(fp)
    da68:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    da6c:	e0fffc17 	ldw	r3,-16(fp)
    da70:	e0bffc17 	ldw	r2,-16(fp)
    da74:	18800015 	stw	r2,0(r3)
    da78:	e0bffe17 	ldw	r2,-8(fp)
    da7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    da80:	e0bffb17 	ldw	r2,-20(fp)
    da84:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    da88:	e037883a 	mov	sp,fp
    da8c:	df000017 	ldw	fp,0(sp)
    da90:	dec00104 	addi	sp,sp,4
    da94:	f800283a 	ret

0000da98 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    da98:	defffb04 	addi	sp,sp,-20
    da9c:	dfc00415 	stw	ra,16(sp)
    daa0:	df000315 	stw	fp,12(sp)
    daa4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    daa8:	d0a00f17 	ldw	r2,-32708(gp)
    daac:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    dab0:	d0a6cd17 	ldw	r2,-25804(gp)
    dab4:	10800044 	addi	r2,r2,1
    dab8:	d0a6cd15 	stw	r2,-25804(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    dabc:	00003106 	br	db84 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    dac0:	e0bffe17 	ldw	r2,-8(fp)
    dac4:	10800017 	ldw	r2,0(r2)
    dac8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    dacc:	e0bffe17 	ldw	r2,-8(fp)
    dad0:	10800403 	ldbu	r2,16(r2)
    dad4:	10803fcc 	andi	r2,r2,255
    dad8:	1005003a 	cmpeq	r2,r2,zero
    dadc:	1000051e 	bne	r2,zero,daf4 <alt_tick+0x5c>
    dae0:	d0a6cd17 	ldw	r2,-25804(gp)
    dae4:	1004c03a 	cmpne	r2,r2,zero
    dae8:	1000021e 	bne	r2,zero,daf4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    daec:	e0bffe17 	ldw	r2,-8(fp)
    daf0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    daf4:	e0bffe17 	ldw	r2,-8(fp)
    daf8:	10c00217 	ldw	r3,8(r2)
    dafc:	d0a6cd17 	ldw	r2,-25804(gp)
    db00:	10c01e36 	bltu	r2,r3,db7c <alt_tick+0xe4>
    db04:	e0bffe17 	ldw	r2,-8(fp)
    db08:	10800403 	ldbu	r2,16(r2)
    db0c:	10803fcc 	andi	r2,r2,255
    db10:	1004c03a 	cmpne	r2,r2,zero
    db14:	1000191e 	bne	r2,zero,db7c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    db18:	e0bffe17 	ldw	r2,-8(fp)
    db1c:	10c00317 	ldw	r3,12(r2)
    db20:	e0bffe17 	ldw	r2,-8(fp)
    db24:	11000517 	ldw	r4,20(r2)
    db28:	183ee83a 	callr	r3
    db2c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    db30:	e0bffd17 	ldw	r2,-12(fp)
    db34:	1004c03a 	cmpne	r2,r2,zero
    db38:	1000031e 	bne	r2,zero,db48 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    db3c:	e13ffe17 	ldw	r4,-8(fp)
    db40:	000da000 	call	da00 <alt_alarm_stop>
    db44:	00000d06 	br	db7c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    db48:	e0bffe17 	ldw	r2,-8(fp)
    db4c:	10c00217 	ldw	r3,8(r2)
    db50:	e0bffd17 	ldw	r2,-12(fp)
    db54:	1887883a 	add	r3,r3,r2
    db58:	e0bffe17 	ldw	r2,-8(fp)
    db5c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    db60:	e0bffe17 	ldw	r2,-8(fp)
    db64:	10c00217 	ldw	r3,8(r2)
    db68:	d0a6cd17 	ldw	r2,-25804(gp)
    db6c:	1880032e 	bgeu	r3,r2,db7c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    db70:	e0fffe17 	ldw	r3,-8(fp)
    db74:	00800044 	movi	r2,1
    db78:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    db7c:	e0bfff17 	ldw	r2,-4(fp)
    db80:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    db84:	d0e00f04 	addi	r3,gp,-32708
    db88:	e0bffe17 	ldw	r2,-8(fp)
    db8c:	10ffcc1e 	bne	r2,r3,dac0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    db90:	e037883a 	mov	sp,fp
    db94:	dfc00117 	ldw	ra,4(sp)
    db98:	df000017 	ldw	fp,0(sp)
    db9c:	dec00204 	addi	sp,sp,8
    dba0:	f800283a 	ret

0000dba4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    dba4:	deffff04 	addi	sp,sp,-4
    dba8:	df000015 	stw	fp,0(sp)
    dbac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    dbb0:	000170fa 	wrctl	ienable,zero
}
    dbb4:	e037883a 	mov	sp,fp
    dbb8:	df000017 	ldw	fp,0(sp)
    dbbc:	dec00104 	addi	sp,sp,4
    dbc0:	f800283a 	ret

0000dbc4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    dbc4:	defff904 	addi	sp,sp,-28
    dbc8:	dfc00615 	stw	ra,24(sp)
    dbcc:	df000515 	stw	fp,20(sp)
    dbd0:	df000504 	addi	fp,sp,20
    dbd4:	e13ffd15 	stw	r4,-12(fp)
    dbd8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    dbdc:	e0bffe17 	ldw	r2,-8(fp)
    dbe0:	10800017 	ldw	r2,0(r2)
    dbe4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    dbe8:	e13ffd17 	ldw	r4,-12(fp)
    dbec:	00027740 	call	2774 <strlen>
    dbf0:	10800044 	addi	r2,r2,1
    dbf4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    dbf8:	00000d06 	br	dc30 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    dbfc:	e0bffc17 	ldw	r2,-16(fp)
    dc00:	11000217 	ldw	r4,8(r2)
    dc04:	e1bffb17 	ldw	r6,-20(fp)
    dc08:	e17ffd17 	ldw	r5,-12(fp)
    dc0c:	000ded40 	call	ded4 <memcmp>
    dc10:	1004c03a 	cmpne	r2,r2,zero
    dc14:	1000031e 	bne	r2,zero,dc24 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    dc18:	e0bffc17 	ldw	r2,-16(fp)
    dc1c:	e0bfff15 	stw	r2,-4(fp)
    dc20:	00000706 	br	dc40 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    dc24:	e0bffc17 	ldw	r2,-16(fp)
    dc28:	10800017 	ldw	r2,0(r2)
    dc2c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    dc30:	e0fffe17 	ldw	r3,-8(fp)
    dc34:	e0bffc17 	ldw	r2,-16(fp)
    dc38:	10fff01e 	bne	r2,r3,dbfc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    dc3c:	e03fff15 	stw	zero,-4(fp)
    dc40:	e0bfff17 	ldw	r2,-4(fp)
}
    dc44:	e037883a 	mov	sp,fp
    dc48:	dfc00117 	ldw	ra,4(sp)
    dc4c:	df000017 	ldw	fp,0(sp)
    dc50:	dec00204 	addi	sp,sp,8
    dc54:	f800283a 	ret

0000dc58 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    dc58:	defffa04 	addi	sp,sp,-24
    dc5c:	dfc00515 	stw	ra,20(sp)
    dc60:	df000415 	stw	fp,16(sp)
    dc64:	df000404 	addi	fp,sp,16
    dc68:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    dc6c:	00800074 	movhi	r2,1
    dc70:	10805204 	addi	r2,r2,328
    dc74:	10800017 	ldw	r2,0(r2)
    dc78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    dc7c:	00003306 	br	dd4c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    dc80:	e0bffd17 	ldw	r2,-12(fp)
    dc84:	11000217 	ldw	r4,8(r2)
    dc88:	00027740 	call	2774 <strlen>
    dc8c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    dc90:	e0bffd17 	ldw	r2,-12(fp)
    dc94:	10c00217 	ldw	r3,8(r2)
    dc98:	e0bffc17 	ldw	r2,-16(fp)
    dc9c:	1885883a 	add	r2,r3,r2
    dca0:	10bfffc4 	addi	r2,r2,-1
    dca4:	10800003 	ldbu	r2,0(r2)
    dca8:	10803fcc 	andi	r2,r2,255
    dcac:	1080201c 	xori	r2,r2,128
    dcb0:	10bfe004 	addi	r2,r2,-128
    dcb4:	10800bd8 	cmpnei	r2,r2,47
    dcb8:	1000031e 	bne	r2,zero,dcc8 <alt_find_file+0x70>
    {
      len -= 1;
    dcbc:	e0bffc17 	ldw	r2,-16(fp)
    dcc0:	10bfffc4 	addi	r2,r2,-1
    dcc4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    dcc8:	e0bffc17 	ldw	r2,-16(fp)
    dccc:	1007883a 	mov	r3,r2
    dcd0:	e0bffe17 	ldw	r2,-8(fp)
    dcd4:	1885883a 	add	r2,r3,r2
    dcd8:	10800003 	ldbu	r2,0(r2)
    dcdc:	10803fcc 	andi	r2,r2,255
    dce0:	1080201c 	xori	r2,r2,128
    dce4:	10bfe004 	addi	r2,r2,-128
    dce8:	10800be0 	cmpeqi	r2,r2,47
    dcec:	10000a1e 	bne	r2,zero,dd18 <alt_find_file+0xc0>
    dcf0:	e0bffc17 	ldw	r2,-16(fp)
    dcf4:	1007883a 	mov	r3,r2
    dcf8:	e0bffe17 	ldw	r2,-8(fp)
    dcfc:	1885883a 	add	r2,r3,r2
    dd00:	10800003 	ldbu	r2,0(r2)
    dd04:	10803fcc 	andi	r2,r2,255
    dd08:	1080201c 	xori	r2,r2,128
    dd0c:	10bfe004 	addi	r2,r2,-128
    dd10:	1004c03a 	cmpne	r2,r2,zero
    dd14:	10000a1e 	bne	r2,zero,dd40 <alt_find_file+0xe8>
    dd18:	e0bffd17 	ldw	r2,-12(fp)
    dd1c:	11000217 	ldw	r4,8(r2)
    dd20:	e1bffc17 	ldw	r6,-16(fp)
    dd24:	e17ffe17 	ldw	r5,-8(fp)
    dd28:	000ded40 	call	ded4 <memcmp>
    dd2c:	1004c03a 	cmpne	r2,r2,zero
    dd30:	1000031e 	bne	r2,zero,dd40 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    dd34:	e0bffd17 	ldw	r2,-12(fp)
    dd38:	e0bfff15 	stw	r2,-4(fp)
    dd3c:	00000806 	br	dd60 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    dd40:	e0bffd17 	ldw	r2,-12(fp)
    dd44:	10800017 	ldw	r2,0(r2)
    dd48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    dd4c:	00c00074 	movhi	r3,1
    dd50:	18c05204 	addi	r3,r3,328
    dd54:	e0bffd17 	ldw	r2,-12(fp)
    dd58:	10ffc91e 	bne	r2,r3,dc80 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    dd5c:	e03fff15 	stw	zero,-4(fp)
    dd60:	e0bfff17 	ldw	r2,-4(fp)
}
    dd64:	e037883a 	mov	sp,fp
    dd68:	dfc00117 	ldw	ra,4(sp)
    dd6c:	df000017 	ldw	fp,0(sp)
    dd70:	dec00204 	addi	sp,sp,8
    dd74:	f800283a 	ret

0000dd78 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    dd78:	defffc04 	addi	sp,sp,-16
    dd7c:	df000315 	stw	fp,12(sp)
    dd80:	df000304 	addi	fp,sp,12
    dd84:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    dd88:	00bffa04 	movi	r2,-24
    dd8c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    dd90:	e03ffe15 	stw	zero,-8(fp)
    dd94:	00001e06 	br	de10 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    dd98:	e0bffe17 	ldw	r2,-8(fp)
    dd9c:	00c00074 	movhi	r3,1
    dda0:	18fbd304 	addi	r3,r3,-4276
    dda4:	10800324 	muli	r2,r2,12
    dda8:	10c5883a 	add	r2,r2,r3
    ddac:	10800017 	ldw	r2,0(r2)
    ddb0:	1004c03a 	cmpne	r2,r2,zero
    ddb4:	1000131e 	bne	r2,zero,de04 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    ddb8:	e0bffe17 	ldw	r2,-8(fp)
    ddbc:	00c00074 	movhi	r3,1
    ddc0:	18fbd304 	addi	r3,r3,-4276
    ddc4:	10800324 	muli	r2,r2,12
    ddc8:	10c7883a 	add	r3,r2,r3
    ddcc:	e0bfff17 	ldw	r2,-4(fp)
    ddd0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    ddd4:	00800074 	movhi	r2,1
    ddd8:	10805604 	addi	r2,r2,344
    dddc:	10c00017 	ldw	r3,0(r2)
    dde0:	e0bffe17 	ldw	r2,-8(fp)
    dde4:	1880040e 	bge	r3,r2,ddf8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    dde8:	00c00074 	movhi	r3,1
    ddec:	18c05604 	addi	r3,r3,344
    ddf0:	e0bffe17 	ldw	r2,-8(fp)
    ddf4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    ddf8:	e0bffe17 	ldw	r2,-8(fp)
    ddfc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    de00:	00000606 	br	de1c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    de04:	e0bffe17 	ldw	r2,-8(fp)
    de08:	10800044 	addi	r2,r2,1
    de0c:	e0bffe15 	stw	r2,-8(fp)
    de10:	e0bffe17 	ldw	r2,-8(fp)
    de14:	10800810 	cmplti	r2,r2,32
    de18:	103fdf1e 	bne	r2,zero,dd98 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    de1c:	e0bffd17 	ldw	r2,-12(fp)
}
    de20:	e037883a 	mov	sp,fp
    de24:	df000017 	ldw	fp,0(sp)
    de28:	dec00104 	addi	sp,sp,4
    de2c:	f800283a 	ret

0000de30 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    de30:	defffb04 	addi	sp,sp,-20
    de34:	df000415 	stw	fp,16(sp)
    de38:	df000404 	addi	fp,sp,16
    de3c:	e13ffe15 	stw	r4,-8(fp)
    de40:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    de44:	e0bfff17 	ldw	r2,-4(fp)
    de48:	10840070 	cmpltui	r2,r2,4097
    de4c:	1000021e 	bne	r2,zero,de58 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    de50:	00840004 	movi	r2,4096
    de54:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    de58:	e0fffe17 	ldw	r3,-8(fp)
    de5c:	e0bfff17 	ldw	r2,-4(fp)
    de60:	1885883a 	add	r2,r3,r2
    de64:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    de68:	e0bffe17 	ldw	r2,-8(fp)
    de6c:	e0bffd15 	stw	r2,-12(fp)
    de70:	00000506 	br	de88 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    de74:	e0bffd17 	ldw	r2,-12(fp)
    de78:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    de7c:	e0bffd17 	ldw	r2,-12(fp)
    de80:	10800804 	addi	r2,r2,32
    de84:	e0bffd15 	stw	r2,-12(fp)
    de88:	e0fffd17 	ldw	r3,-12(fp)
    de8c:	e0bffc17 	ldw	r2,-16(fp)
    de90:	18bff836 	bltu	r3,r2,de74 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    de94:	e0bffe17 	ldw	r2,-8(fp)
    de98:	108007cc 	andi	r2,r2,31
    de9c:	1005003a 	cmpeq	r2,r2,zero
    dea0:	1000021e 	bne	r2,zero,deac <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    dea4:	e0bffd17 	ldw	r2,-12(fp)
    dea8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    deac:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    deb0:	e037883a 	mov	sp,fp
    deb4:	df000017 	ldw	fp,0(sp)
    deb8:	dec00104 	addi	sp,sp,4
    debc:	f800283a 	ret

0000dec0 <atexit>:
    dec0:	200b883a 	mov	r5,r4
    dec4:	000d883a 	mov	r6,zero
    dec8:	0009883a 	mov	r4,zero
    decc:	000f883a 	mov	r7,zero
    ded0:	000df481 	jmpi	df48 <__register_exitproc>

0000ded4 <memcmp>:
    ded4:	00c000c4 	movi	r3,3
    ded8:	1980032e 	bgeu	r3,r6,dee8 <memcmp+0x14>
    dedc:	2144b03a 	or	r2,r4,r5
    dee0:	10c4703a 	and	r2,r2,r3
    dee4:	10000f26 	beq	r2,zero,df24 <memcmp+0x50>
    dee8:	31ffffc4 	addi	r7,r6,-1
    deec:	3000061e 	bne	r6,zero,df08 <memcmp+0x34>
    def0:	00000a06 	br	df1c <memcmp+0x48>
    def4:	39ffffc4 	addi	r7,r7,-1
    def8:	00bfffc4 	movi	r2,-1
    defc:	21000044 	addi	r4,r4,1
    df00:	29400044 	addi	r5,r5,1
    df04:	38800526 	beq	r7,r2,df1c <memcmp+0x48>
    df08:	20c00003 	ldbu	r3,0(r4)
    df0c:	28800003 	ldbu	r2,0(r5)
    df10:	18bff826 	beq	r3,r2,def4 <memcmp+0x20>
    df14:	1885c83a 	sub	r2,r3,r2
    df18:	f800283a 	ret
    df1c:	0005883a 	mov	r2,zero
    df20:	f800283a 	ret
    df24:	180f883a 	mov	r7,r3
    df28:	20c00017 	ldw	r3,0(r4)
    df2c:	28800017 	ldw	r2,0(r5)
    df30:	18bfed1e 	bne	r3,r2,dee8 <memcmp+0x14>
    df34:	31bfff04 	addi	r6,r6,-4
    df38:	21000104 	addi	r4,r4,4
    df3c:	29400104 	addi	r5,r5,4
    df40:	39bff936 	bltu	r7,r6,df28 <memcmp+0x54>
    df44:	003fe806 	br	dee8 <memcmp+0x14>

0000df48 <__register_exitproc>:
    df48:	defffa04 	addi	sp,sp,-24
    df4c:	00800074 	movhi	r2,1
    df50:	10804d04 	addi	r2,r2,308
    df54:	dc000015 	stw	r16,0(sp)
    df58:	14000017 	ldw	r16,0(r2)
    df5c:	dd000415 	stw	r20,16(sp)
    df60:	2829883a 	mov	r20,r5
    df64:	81405217 	ldw	r5,328(r16)
    df68:	dcc00315 	stw	r19,12(sp)
    df6c:	dc800215 	stw	r18,8(sp)
    df70:	dc400115 	stw	r17,4(sp)
    df74:	dfc00515 	stw	ra,20(sp)
    df78:	2023883a 	mov	r17,r4
    df7c:	3027883a 	mov	r19,r6
    df80:	3825883a 	mov	r18,r7
    df84:	28002526 	beq	r5,zero,e01c <__register_exitproc+0xd4>
    df88:	29000117 	ldw	r4,4(r5)
    df8c:	008007c4 	movi	r2,31
    df90:	11002716 	blt	r2,r4,e030 <__register_exitproc+0xe8>
    df94:	8800101e 	bne	r17,zero,dfd8 <__register_exitproc+0x90>
    df98:	2105883a 	add	r2,r4,r4
    df9c:	1085883a 	add	r2,r2,r2
    dfa0:	20c00044 	addi	r3,r4,1
    dfa4:	1145883a 	add	r2,r2,r5
    dfa8:	0009883a 	mov	r4,zero
    dfac:	15000215 	stw	r20,8(r2)
    dfb0:	28c00115 	stw	r3,4(r5)
    dfb4:	2005883a 	mov	r2,r4
    dfb8:	dfc00517 	ldw	ra,20(sp)
    dfbc:	dd000417 	ldw	r20,16(sp)
    dfc0:	dcc00317 	ldw	r19,12(sp)
    dfc4:	dc800217 	ldw	r18,8(sp)
    dfc8:	dc400117 	ldw	r17,4(sp)
    dfcc:	dc000017 	ldw	r16,0(sp)
    dfd0:	dec00604 	addi	sp,sp,24
    dfd4:	f800283a 	ret
    dfd8:	29802204 	addi	r6,r5,136
    dfdc:	00800044 	movi	r2,1
    dfe0:	110e983a 	sll	r7,r2,r4
    dfe4:	30c04017 	ldw	r3,256(r6)
    dfe8:	2105883a 	add	r2,r4,r4
    dfec:	1085883a 	add	r2,r2,r2
    dff0:	1185883a 	add	r2,r2,r6
    dff4:	19c6b03a 	or	r3,r3,r7
    dff8:	14802015 	stw	r18,128(r2)
    dffc:	14c00015 	stw	r19,0(r2)
    e000:	00800084 	movi	r2,2
    e004:	30c04015 	stw	r3,256(r6)
    e008:	88bfe31e 	bne	r17,r2,df98 <__register_exitproc+0x50>
    e00c:	30804117 	ldw	r2,260(r6)
    e010:	11c4b03a 	or	r2,r2,r7
    e014:	30804115 	stw	r2,260(r6)
    e018:	003fdf06 	br	df98 <__register_exitproc+0x50>
    e01c:	00800074 	movhi	r2,1
    e020:	10880c04 	addi	r2,r2,8240
    e024:	100b883a 	mov	r5,r2
    e028:	80805215 	stw	r2,328(r16)
    e02c:	003fd606 	br	df88 <__register_exitproc+0x40>
    e030:	00800034 	movhi	r2,0
    e034:	1087a104 	addi	r2,r2,7812
    e038:	1000021e 	bne	r2,zero,e044 <__register_exitproc+0xfc>
    e03c:	013fffc4 	movi	r4,-1
    e040:	003fdc06 	br	dfb4 <__register_exitproc+0x6c>
    e044:	01006404 	movi	r4,400
    e048:	103ee83a 	callr	r2
    e04c:	1007883a 	mov	r3,r2
    e050:	103ffa26 	beq	r2,zero,e03c <__register_exitproc+0xf4>
    e054:	80805217 	ldw	r2,328(r16)
    e058:	180b883a 	mov	r5,r3
    e05c:	18000115 	stw	zero,4(r3)
    e060:	18800015 	stw	r2,0(r3)
    e064:	80c05215 	stw	r3,328(r16)
    e068:	18006215 	stw	zero,392(r3)
    e06c:	18006315 	stw	zero,396(r3)
    e070:	0009883a 	mov	r4,zero
    e074:	883fc826 	beq	r17,zero,df98 <__register_exitproc+0x50>
    e078:	003fd706 	br	dfd8 <__register_exitproc+0x90>
    e07c:	00000010 	cmplti	zero,zero,0
    e080:	00000000 	call	0 <__alt_mem_sdram>
    e084:	00527a01 	jmpi	527a0 <_gp+0x3a674>
    e088:	011f7c01 	jmpi	11f7c0 <_gp+0x107694>
    e08c:	001b0c0b 	ldhu	zero,27696(zero)
    e090:	00000028 	cmpgeui	zero,zero,0
    e094:	00000018 	cmpnei	zero,zero,0
    e098:	00009360 	cmpeqi	zero,zero,589
    e09c:	000005dc 	xori	zero,zero,23
    e0a0:	400e4400 	call	400e440 <__ram_exceptions_end+0x200e28c>
    e0a4:	92099170 	cmpltui	r8,r18,9797
    e0a8:	95079308 	cmpgei	r20,r18,7756
    e0ac:	97049605 	stb	fp,4696(r18)
    e0b0:	90019f03 	ldbu	zero,1660(r18)
    e0b4:	9c06940a 	0x9c06940a
    e0b8:	00000002 	0x2
    e0bc:	00000028 	cmpgeui	zero,zero,0
    e0c0:	00000044 	movi	zero,1
    e0c4:	0000993c 	xorhi	zero,zero,612
    e0c8:	000005b0 	cmpltui	zero,zero,22
    e0cc:	3c0e4400 	call	3c0e440 <__ram_exceptions_end+0x1c0e28c>
    e0d0:	92099168 	cmpgeui	r8,r18,9797
    e0d4:	95079308 	cmpgei	r20,r18,7756
    e0d8:	9c039705 	stb	r16,3676(r19)
    e0dc:	90019f02 	0x90019f02
    e0e0:	9606940a 	0x9606940a
    e0e4:	00000004 	movi	zero,0
    e0e8:	0000484c 	andi	zero,zero,289

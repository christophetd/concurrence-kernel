
kernel.elf:     file format elf32-littlenios2
kernel.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000194

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x00000000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x00000194 paddr 0x00000194 align 2**12
         filesz 0x0000f180 memsz 0x0000f180 flags r-x
    LOAD off    0x00011314 vaddr 0x0000f314 paddr 0x00010db0 align 2**12
         filesz 0x00001a9c memsz 0x00001a9c flags rw-
    LOAD off    0x0001384c vaddr 0x0001284c paddr 0x0001284c align 2**12
         filesz 0x00000000 memsz 0x00000648 flags rw-
    LOAD off    0x00013000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00013000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  00000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ea70  00000194  00000194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000710  0000ec04  0000ec04  00010c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a9c  0000f314  00010db0  00011314  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000648  0001284c  0001284c  0001384c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00013020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d58  00000000  00000000  00013048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000016e9  00000000  00000000  00013da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025e2f  00000000  00000000  00015489  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000082f2  00000000  00000000  0003b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014e34  00000000  00000000  000435aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001df0  00000000  00000000  000583e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002282  00000000  00000000  0005a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c632  00000000  00000000  0005c452  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00068a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00068aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006cb0e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006cb11  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006cb1d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006cb1e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006cb1f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006cb23  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006cb27  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0006cb2b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0006cb36  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0006cb41  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0006cb4c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000018  00000000  00000000  0006cb54  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0005f6a9  00000000  00000000  0006cb6c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
00000194 l    d  .text	00000000 .text
0000ec04 l    d  .rodata	00000000 .rodata
0000f314 l    d  .rwdata	00000000 .rwdata
0001284c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 kernel2.c
00010d68 l     O .rwdata	00000004 readyList
0001285c l     O .bss	00000004 nextProcessId
00012860 l     O .bss	00000004 nextMonitorId
00000508 l     F .text	000000c8 addLast
000005d0 l     F .text	00000050 addFirst
00000684 l     F .text	000000a0 removeHead
00000724 l     F .text	000000b4 removeFromList
000007d8 l     F .text	00000028 head
00000800 l     F .text	0000002c isEmpty
00000bc8 l     F .text	00000074 checkAndTransfer
00000dd4 l     F .text	0000006c getCurrentMonitor
00000000 l    df *ABS*	00000000 kernelTest2.c
00000000 l    df *ABS*	00000000 system_m.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000027a4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 impure.c
0000f34c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00003300 l     F .text	00000058 __sprint_r
0000f046 l     O .rodata	00000010 blanks.3452
0000f036 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00005364 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
00005518 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006f14 l     F .text	00000058 std
00007020 l     F .text	00000008 __fp_lock
00007028 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00010d84 l     O .rwdata	00000004 charset
0000f078 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000f1c0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000aa04 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000c258 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000c2b8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000c2e4 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0000c418 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000c6f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000c7d8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000c934 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000cb60 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00010da4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000cdfc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fd08 l     O .rwdata	00001060 jtag_uart_0
0000ceec l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000d12c l     F .text	00000228 altera_avalon_jtag_uart_irq
0000d354 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000d9d0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000dcf4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000e118 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000e254 l     F .text	000000dc alt_file_locked
0000e4b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00008590 g     F .text	00000094 _mprec_log10
0000205c g     F .text	000000b0 timedGet
0000867c g     F .text	00000088 __any_on
00009d18 g     F .text	00000070 _isatty_r
0000f198 g     O .rodata	00000028 __mprec_tinytens
0000c994 g     F .text	0000006c alt_main
00003168 g     F .text	000000a0 _puts_r
00012c04 g     O .bss	00000100 alt_irq
00009d88 g     F .text	00000078 _lseek_r
0000269c g       .text	00000000 _transfer
00000c3c g     F .text	0000006c yield
000025f0 g     F .text	0000004c transfer
00010db0 g       *ABS*	00000000 __flash_rwdata_start
00001f5c g     F .text	0000007c put
0000b524 g     F .text	00000088 __eqdf2
00012e94 g       *ABS*	00000000 __alt_heap_start
000030f0 g     F .text	00000044 printf
000097e4 g     F .text	00000068 __sseek
00006f7c g     F .text	000000a4 __sinit
00007c54 g     F .text	00000084 _setlocale_r
0000707c g     F .text	00000068 __sfmoreglue
0000ca20 g     F .text	00000020 __malloc_unlock
00012900 g     O .bss	000000a0 monitors
0000800c g     F .text	000000e0 memmove
0000706c g     F .text	00000010 _cleanup
00008704 g     F .text	000000bc _Balloc
0000b634 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000001c __reset
00012854 g     O .bss	00000004 edge_capture
00000ca8 g     F .text	0000012c createMonitor
00000000 g       *ABS*	00000000 __flash_exceptions_start
00002174 g     F .text	0000007c displayNumber
00009ca4 g     F .text	00000074 _fstat_r
00000400 g     F .text	00000060 init_button
00012888 g     O .bss	00000004 errno
00001bb8 g     F .text	00000140 timedWait
000128a0 g     O .bss	00000004 alt_argv
00012874 g     O .bss	00000004 running
00018d68 g       *ABS*	00000000 _gp
0001286c g     O .bss	00000004 reset
0000fb88 g     O .rwdata	00000180 alt_fd_list
000129a0 g     O .bss	00000258 processes
0000e6dc g     F .text	00000094 alt_find_dev
00007f6c g     F .text	000000a0 memcpy
00007060 g     F .text	0000000c _cleanup_r
0000b7cc g     F .text	000000f8 __floatsidf
0000e1dc g     F .text	00000078 alt_io_redirect
0000b744 g     F .text	00000088 __ltdf2
0000ec04 g       *ABS*	00000000 __DTOR_END__
00003208 g     F .text	00000014 puts
000084e0 g     F .text	000000b0 __ratio
00012858 g     O .bss	00000004 timer_capture
0000d56c g     F .text	00000224 altera_avalon_jtag_uart_read
0000299c g     F .text	00000014 malloc
00003134 g     F .text	00000034 _printf_r
000028e0 g     F .text	00000008 __udivsi3
0000c638 g     F .text	000000c0 isatty
0000f0a8 g     O .rodata	000000c8 __mprec_tens
00001cf8 g     F .text	00000144 sleep
00007c30 g     F .text	00000008 __locale_charset
000004b8 g     F .text	00000050 init_clock
0000e948 g     F .text	00000090 alt_icache_flush
0001287c g     O .bss	00000004 __malloc_top_pad
00010d80 g     O .rwdata	00000004 __mb_cur_max
00007c38 g     F .text	0000000c _localeconv_r
00008dfc g     F .text	0000003c __i2b
00007614 g     F .text	0000049c __sfvwrite_r
0000321c g     F .text	00000070 _sbrk_r
0000237c g     F .text	00000130 consumer
00009e00 g     F .text	00000078 _read_r
0000fb54 g     O .rwdata	0000000c __lc_ctype
00010d98 g     O .rwdata	00000004 alt_max_fd
0000bf5c g     F .text	00000138 __unpack_d
00009b80 g     F .text	00000110 _fclose_r
00006ee0 g     F .text	00000034 fflush
00012880 g     O .bss	00000004 __malloc_max_sbrked_mem
0000c478 g     F .text	000001c0 alt_irq_register
0000ae94 g     F .text	00000074 __adddf3
000083c0 g     F .text	00000120 __b2d
0000a454 g     F .text	000005b0 __umoddi3
0000c844 g     F .text	000000f0 lseek
00010d74 g     O .rwdata	00000004 _global_impure_ptr
00009178 g     F .text	000005f4 _realloc_r
00012e94 g       *ABS*	00000000 __bss_end
0000e020 g     F .text	000000f8 alt_iic_isr_register
0000e5b0 g     F .text	0000010c alt_tick
00009e78 g     F .text	000005dc __udivdi3
0000f170 g     O .rodata	00000028 __mprec_bigtens
00009058 g     F .text	00000120 __s2b
0000b99c g     F .text	00000194 __floatunsidf
00012878 g     O .bss	00000004 nextP
000082e0 g     F .text	00000060 __mcmp
00007048 g     F .text	00000018 __fp_lock_all
0000dfd8 g     F .text	00000048 alt_ic_irq_enabled
000021f0 g     F .text	0000018c producer
00001130 g     F .text	000001c4 exitMonitor
00012864 g     O .bss	00000004 idle_pid
000012f4 g     F .text	00000128 notify
0000e518 g     F .text	00000098 alt_alarm_stop
00010d6c g     O .rwdata	00000004 displayOn
00012898 g     O .bss	00000004 alt_irq_active
02000000 g       *ABS*	00000000 __alt_mem_onchip_mem
020000ec g     F .exceptions	000000c8 alt_irq_handler
0000fb60 g     O .rwdata	00000028 alt_dev_null
00012870 g     O .bss	00000004 started
0000dc24 g     F .text	0000001c alt_dcache_flush_all
000081ac g     F .text	00000070 __hi0bits
0000b8c4 g     F .text	000000d8 __fixdfsi
0000263c g     F .text	00000044 iotransfer
00010db0 g       *ABS*	00000000 __ram_rwdata_end
00010d90 g     O .rwdata	00000008 alt_dev_list
0000ccdc g     F .text	00000120 write
0000f314 g       *ABS*	00000000 __ram_rodata_end
0000c344 g     F .text	000000d4 fstat
00002928 g     F .text	0000002c fprintf
00001f20 g     F .text	0000003c initBuffer
00008f38 g     F .text	00000120 __pow5mult
0001288c g     O .bss	00000004 __nlocale_changed
000028e8 g     F .text	00000008 __umodsi3
00012e94 g       *ABS*	00000000 end
0000d06c g     F .text	000000c0 altera_avalon_jtag_uart_init
00002798 g       .text	00000000 allowInterrupts
0000ec00 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000da40 g     F .text	00000090 alt_avalon_timer_sc_init
0000bbc8 g     F .text	00000080 __clzsi2
0000d790 g     F .text	00000240 altera_avalon_jtag_uart_write
00006f6c g     F .text	00000004 __sfp_lock_acquire
00007e88 g     F .text	000000e4 memchr
00003358 g     F .text	00001eac ___vfprintf_internal_r
00007300 g     F .text	00000314 _free_r
00001934 g     F .text	00000030 wait
00005368 g     F .text	000001b0 __call_exitprocs
0001284c g     O .bss	00000008 interruptVector
00012890 g     O .bss	00000004 __mlocale_changed
00010d7c g     O .rwdata	00000004 __malloc_sbrk_base
00000194 g     F .text	0000003c _start
0000082c g     F .text	000001d0 createProcess
000128a8 g     O .bss	00000004 _alt_tick_rate
00001964 g     F .text	00000254 _wait
00001594 g     F .text	0000025c scheduler
00008ac8 g     F .text	0000014c __lshift
000128ac g     O .bss	00000004 _alt_nticks
0000ca40 g     F .text	00000120 read
0000ce90 g     F .text	0000005c alt_sys_init
0000ea60 g     F .text	00000134 __register_exitproc
00008c14 g     F .text	000001e8 __multiply
0000d404 g     F .text	00000074 altera_avalon_jtag_uart_close
0000f314 g       *ABS*	00000000 __ram_rwdata_start
0000ec04 g       *ABS*	00000000 __ram_rodata_start
000128d8 g     O .bss	00000028 __malloc_current_mallinfo
000087c0 g     F .text	0000017c __d2b
0000278c g       .text	00000000 maskInterrupts
0000cf24 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000e890 g     F .text	000000b8 alt_get_fd
0000c094 g     F .text	000000c8 __fpcmp_parts_d
00009b10 g     F .text	00000070 _close_r
0000e9ec g     F .text	00000074 memcmp
0000cfd4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00012e94 g       *ABS*	00000000 __alt_stack_base
0000d01c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00005228 g     F .text	0000013c __swsetup_r
0000b2cc g     F .text	00000258 __divdf3
000070e4 g     F .text	000000f0 __sfp
00008624 g     F .text	00000058 __copybits
0000f74c g     O .rwdata	00000408 __malloc_av_
00006f78 g     F .text	00000004 __sinit_lock_release
0000af08 g     F .text	000003c4 __muldf3
000098c8 g     F .text	00000060 __sread
0000e770 g     F .text	00000120 alt_find_file
0000dc40 g     F .text	000000b4 alt_dev_llist_insert
0000ca00 g     F .text	00000020 __malloc_lock
00002954 g     F .text	00000034 _fprintf_r
0000cc20 g     F .text	000000bc sbrk
00006ce4 g     F .text	000001fc _fflush_r
00009a5c g     F .text	000000b4 _calloc_r
0001284c g       *ABS*	00000000 __bss_start
000080ec g     F .text	00000098 memset
0000251c g     F .text	00000078 main
000002a4 g     F .text	000000d8 insertTail
000128a4 g     O .bss	00000004 alt_envp
00012884 g     O .bss	00000004 __malloc_max_total_mem
0000cf7c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000f340 g     O .rwdata	0000000c lcdZones
00000460 g     F .text	00000058 handle_timer_interrupts
00000e40 g     F .text	000002f0 enterMonitor
000097dc g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00009c90 g     F .text	00000014 fclose
00000620 g     F .text	00000064 size
00012d04 g     O .bss	00000190 _atexit0
00005730 g     F .text	000015b4 _dtoa_r
000029b0 g     F .text	00000740 _malloc_r
00010d9c g     O .rwdata	00000004 alt_errno
00007b78 g     F .text	000000b8 _fwalk
000009fc g     F .text	000001cc createSpecialProcess
00002820 g     F .text	00000060 __divsi3
0000f1cc g     O .rodata	00000014 __thenan_df
000071d4 g     F .text	0000012c _malloc_trim_r
0000ec04 g       *ABS*	00000000 __CTOR_END__
00009928 g     F .text	000000bc strcmp
0000ec04 g       *ABS*	00000000 __flash_rodata_start
000128b0 g     O .bss	00000028 timedWaiting
0000ec04 g       *ABS*	00000000 __DTOR_LIST__
00001828 g     F .text	0000010c waitInterrupt
0000b5ac g     F .text	00000088 __nedf2
0000ce5c g     F .text	00000034 alt_irq_init
0000cbc0 g     F .text	00000060 alt_release_fd
0000f1e0 g     O .rodata	00000100 __clz_tab
00012894 g     O .bss	00000004 _PathLocale
0000e9d8 g     F .text	00000014 atexit
000099e4 g     F .text	00000078 _write_r
0000210c g     F .text	00000068 displayDigit
00007cd8 g     F .text	0000001c setlocale
00001fd8 g     F .text	00000084 get
00010d70 g     O .rwdata	00000004 _impure_ptr
0001289c g     O .bss	00000004 alt_argc
0000152c g     F .text	00000030 idle_code
0000ddb8 g     F .text	00000064 _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
00008340 g     F .text	00000080 __ulp
0000976c g     F .text	00000040 __isinfd
00007030 g     F .text	00000018 __fp_unlock_all
00010d88 g     O .rwdata	00000008 alt_fs_list
0000f314 g     O .rwdata	0000002c digitCodes
02000020 g       *ABS*	00000000 __ram_exceptions_start
00007c44 g     F .text	00000010 localeconv
000001d0 g     F .text	000000d4 removeHeadI
0000de4c g     F .text	00000050 alt_ic_isr_register
00010db0 g       *ABS*	00000000 _edata
00012e94 g       *ABS*	00000000 _end
00002594 g     F .text	0000005c newProcess
020001b4 g       *ABS*	00000000 __ram_exceptions_end
0000d478 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000df38 g     F .text	000000a0 alt_ic_irq_disable
0000984c g     F .text	0000007c __swrite
00010d78 g     O .rwdata	00000004 __malloc_trim_threshold
0000e6bc g     F .text	00000020 altera_nios2_qsys_irq_init
00012bf8 g     O .bss	0000000c b0
000028f0 g     F .text	00000038 exit
00007ab0 g     F .text	000000c8 _fwalk_reent
00012868 g     O .bss	00000004 scheduler_pid
0000893c g     F .text	0000018c __mdiff
00002880 g     F .text	00000060 __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
00006f70 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000024ac g     F .text	00000070 countAndDisplay
00001e3c g     F .text	000000e4 start
000097ac g     F .text	00000030 __isnand
0000c324 g     F .text	00000020 _exit
0000dad0 g     F .text	00000154 alt_alarm_start
0000bb30 g     F .text	00000098 __muldi3
00007cf4 g     F .text	00000194 __smakebuf_r
0000328c g     F .text	00000074 strlen
000017f0 g     F .text	00000038 createScheduler
0000e330 g     F .text	00000188 open
0000b6bc g     F .text	00000088 __gedf2
0000155c g     F .text	00000038 createIdle
00002680 g       .text	00000000 _createStack
0000de1c g     F .text	00000030 alt_icache_flush_all
00010da0 g     O .rwdata	00000004 alt_priority_mask
0000de9c g     F .text	0000009c alt_ic_irq_enable
00005204 g     F .text	00000024 __vfprintf_internal
0000141c g     F .text	00000110 notifyAll
0000ae14 g     F .text	00000080 __subdf3
0000821c g     F .text	000000c4 __lo0bits
00010da8 g     O .rwdata	00000008 alt_alarm_list
0000dd54 g     F .text	00000064 _do_ctors
0000037c g     F .text	00000084 handle_button_interrupts
0000c15c g     F .text	000000fc close
0000c758 g     F .text	00000080 alt_load
0000bc48 g     F .text	00000314 __pack_d
00002988 g     F .text	00000014 free
00006f74 g     F .text	00000004 __sinit_lock_acquire
00008e38 g     F .text	00000100 __multadd
00008184 g     F .text	00000028 _Bfree



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 2000014:	08406514 	ori	at,at,404
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__alt_mem_sdram>

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c00074 	movhi	r3,1
 2000134:	18cb0104 	addi	r3,r3,11268
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c00074 	movhi	r3,1
 200014c:	18cb0104 	addi	r3,r3,11268
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

00000194 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     194:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     19c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1a0:	d6a35a14 	ori	gp,gp,36200
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1a4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1a8:	108a1314 	ori	r2,r2,10316

    movhi r3, %hi(__bss_end)
     1ac:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1b0:	18cba514 	ori	r3,r3,11924

    beq r2, r3, 1f
     1b4:	10c00326 	beq	r2,r3,1c4 <_start+0x30>

0:
    stw zero, (r2)
     1b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1c0:	10fffd36 	bltu	r2,r3,1b8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1c4:	000c7580 	call	c758 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1c8:	000c9940 	call	c994 <alt_main>

000001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1cc:	003fff06 	br	1cc <alt_after_alt_main>

000001d0 <removeHeadI>:
} ListElem;

ListElem* interruptVector[2]={NULL,NULL};


Process removeHeadI(int i){
     1d0:	defff904 	addi	sp,sp,-28
     1d4:	dfc00615 	stw	ra,24(sp)
     1d8:	df000515 	stw	fp,20(sp)
     1dc:	df000504 	addi	fp,sp,20
     1e0:	e13ffe15 	stw	r4,-8(fp)
    
    ListElem* removed = interruptVector[i];
     1e4:	e0bffe17 	ldw	r2,-8(fp)
     1e8:	1085883a 	add	r2,r2,r2
     1ec:	1087883a 	add	r3,r2,r2
     1f0:	d0a6b904 	addi	r2,gp,-25884
     1f4:	1885883a 	add	r2,r3,r2
     1f8:	10800017 	ldw	r2,0(r2)
     1fc:	e0bffd15 	stw	r2,-12(fp)
    if(interruptVector[i] != NULL){
     200:	e0bffe17 	ldw	r2,-8(fp)
     204:	1085883a 	add	r2,r2,r2
     208:	1087883a 	add	r3,r2,r2
     20c:	d0a6b904 	addi	r2,gp,-25884
     210:	1885883a 	add	r2,r3,r2
     214:	10800017 	ldw	r2,0(r2)
     218:	1005003a 	cmpeq	r2,r2,zero
     21c:	10000d1e 	bne	r2,zero,254 <removeHeadI+0x84>
        interruptVector[i] = interruptVector[i] -> next;
     220:	e17ffe17 	ldw	r5,-8(fp)
     224:	e0bffe17 	ldw	r2,-8(fp)
     228:	1085883a 	add	r2,r2,r2
     22c:	1087883a 	add	r3,r2,r2
     230:	d0a6b904 	addi	r2,gp,-25884
     234:	1885883a 	add	r2,r3,r2
     238:	10800017 	ldw	r2,0(r2)
     23c:	11000117 	ldw	r4,4(r2)
     240:	2945883a 	add	r2,r5,r5
     244:	1087883a 	add	r3,r2,r2
     248:	d0a6b904 	addi	r2,gp,-25884
     24c:	1885883a 	add	r2,r3,r2
     250:	11000015 	stw	r4,0(r2)
    }
    if(removed != NULL){
     254:	e0bffd17 	ldw	r2,-12(fp)
     258:	1005003a 	cmpeq	r2,r2,zero
     25c:	1000081e 	bne	r2,zero,280 <removeHeadI+0xb0>
        Process result = removed -> p; 
     260:	e0bffd17 	ldw	r2,-12(fp)
     264:	10800017 	ldw	r2,0(r2)
     268:	e0bffc15 	stw	r2,-16(fp)
		free(removed); 
     26c:	e13ffd17 	ldw	r4,-12(fp)
     270:	00029880 	call	2988 <free>
		return result;
     274:	e0bffc17 	ldw	r2,-16(fp)
     278:	e0bfff15 	stw	r2,-4(fp)
     27c:	00000306 	br	28c <removeHeadI+0xbc>
    }
    else{
        Process result = NULL;
     280:	e03ffb15 	stw	zero,-20(fp)
        return result;
     284:	e0bffb17 	ldw	r2,-20(fp)
     288:	e0bfff15 	stw	r2,-4(fp)
     28c:	e0bfff17 	ldw	r2,-4(fp)
    }  
}
     290:	e037883a 	mov	sp,fp
     294:	dfc00117 	ldw	ra,4(sp)
     298:	df000017 	ldw	fp,0(sp)
     29c:	dec00204 	addi	sp,sp,8
     2a0:	f800283a 	ret

000002a4 <insertTail>:

void insertTail(int i, Process toBeInserted){
     2a4:	defffa04 	addi	sp,sp,-24
     2a8:	dfc00515 	stw	ra,20(sp)
     2ac:	df000415 	stw	fp,16(sp)
     2b0:	df000404 	addi	fp,sp,16
     2b4:	e13ffe15 	stw	r4,-8(fp)
     2b8:	e17fff15 	stw	r5,-4(fp)
    
    ListElem* elem = malloc(sizeof(ListElem));
     2bc:	01000204 	movi	r4,8
     2c0:	000299c0 	call	299c <malloc>
     2c4:	e0bffd15 	stw	r2,-12(fp)
    elem -> p = toBeInserted;
     2c8:	e0fffd17 	ldw	r3,-12(fp)
     2cc:	e0bfff17 	ldw	r2,-4(fp)
     2d0:	18800015 	stw	r2,0(r3)
    elem -> next = NULL;
     2d4:	e0bffd17 	ldw	r2,-12(fp)
     2d8:	10000115 	stw	zero,4(r2)
    
    ListElem* temp= NULL;
     2dc:	e03ffc15 	stw	zero,-16(fp)
    if(interruptVector[i] == NULL){
     2e0:	e0bffe17 	ldw	r2,-8(fp)
     2e4:	1085883a 	add	r2,r2,r2
     2e8:	1087883a 	add	r3,r2,r2
     2ec:	d0a6b904 	addi	r2,gp,-25884
     2f0:	1885883a 	add	r2,r3,r2
     2f4:	10800017 	ldw	r2,0(r2)
     2f8:	1004c03a 	cmpne	r2,r2,zero
     2fc:	1000081e 	bne	r2,zero,320 <insertTail+0x7c>
        
       interruptVector[i] = elem; 
     300:	e0bffe17 	ldw	r2,-8(fp)
     304:	1085883a 	add	r2,r2,r2
     308:	1087883a 	add	r3,r2,r2
     30c:	d0a6b904 	addi	r2,gp,-25884
     310:	1887883a 	add	r3,r3,r2
     314:	e0bffd17 	ldw	r2,-12(fp)
     318:	18800015 	stw	r2,0(r3)
     31c:	00001206 	br	368 <insertTail+0xc4>
    }
    else{
        
        temp = interruptVector[i];
     320:	e0bffe17 	ldw	r2,-8(fp)
     324:	1085883a 	add	r2,r2,r2
     328:	1087883a 	add	r3,r2,r2
     32c:	d0a6b904 	addi	r2,gp,-25884
     330:	1885883a 	add	r2,r3,r2
     334:	10800017 	ldw	r2,0(r2)
     338:	e0bffc15 	stw	r2,-16(fp)
        while((temp -> next) != NULL){
     33c:	00000306 	br	34c <insertTail+0xa8>
        
            temp = temp -> next;
     340:	e0bffc17 	ldw	r2,-16(fp)
     344:	10800117 	ldw	r2,4(r2)
     348:	e0bffc15 	stw	r2,-16(fp)
       interruptVector[i] = elem; 
    }
    else{
        
        temp = interruptVector[i];
        while((temp -> next) != NULL){
     34c:	e0bffc17 	ldw	r2,-16(fp)
     350:	10800117 	ldw	r2,4(r2)
     354:	1004c03a 	cmpne	r2,r2,zero
     358:	103ff91e 	bne	r2,zero,340 <insertTail+0x9c>
        
            temp = temp -> next;
        }
        temp -> next = elem;  
     35c:	e0fffc17 	ldw	r3,-16(fp)
     360:	e0bffd17 	ldw	r2,-12(fp)
     364:	18800115 	stw	r2,4(r3)
    
    }
    
        
}
     368:	e037883a 	mov	sp,fp
     36c:	dfc00117 	ldw	ra,4(sp)
     370:	df000017 	ldw	fp,0(sp)
     374:	dec00204 	addi	sp,sp,8
     378:	f800283a 	ret

0000037c <handle_button_interrupts>:
/* A variable to hold the value of the button pio edge capture register. */
volatile int edge_capture = 0;


void handle_button_interrupts(void* context, alt_u32 id)
{
     37c:	defffa04 	addi	sp,sp,-24
     380:	dfc00515 	stw	ra,20(sp)
     384:	df000415 	stw	fp,16(sp)
     388:	df000404 	addi	fp,sp,16
     38c:	e13ffe15 	stw	r4,-8(fp)
     390:	e17fff15 	stw	r5,-4(fp)
    
    /* Cast context to edge_capture's type. It is important that this be 
     * declared volatile to avoid unwanted compiler optimization.
     */
    volatile int* edge_capture_ptr = (volatile int*) context;
     394:	e0bffe17 	ldw	r2,-8(fp)
     398:	e0bffd15 	stw	r2,-12(fp)
    
    /* Store the value in the Button's edge capture register in *context. */
    *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
     39c:	00808034 	movhi	r2,512
     3a0:	10940304 	addi	r2,r2,20492
     3a4:	10c00037 	ldwio	r3,0(r2)
     3a8:	e0bffd17 	ldw	r2,-12(fp)
     3ac:	10c00015 	stw	r3,0(r2)
	/* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0xf);
     3b0:	00c08034 	movhi	r3,512
     3b4:	18d40304 	addi	r3,r3,20492
     3b8:	008003c4 	movi	r2,15
     3bc:	18800035 	stwio	r2,0(r3)
    
    /* Read the PIO to delay ISR exit. This is done to prevent a spurious interrupt in systems
     * with high processor -> pio latency and fast interrupts.  */
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
     3c0:	00808034 	movhi	r2,512
     3c4:	10940304 	addi	r2,r2,20492
     3c8:	10800037 	ldwio	r2,0(r2)
    
    Process p2 = removeHeadI(1);
     3cc:	01000044 	movi	r4,1
     3d0:	00001d00 	call	1d0 <removeHeadI>
     3d4:	e0bffc15 	stw	r2,-16(fp)
   
    if(p2 != NULL){
     3d8:	e0bffc17 	ldw	r2,-16(fp)
     3dc:	1005003a 	cmpeq	r2,r2,zero
     3e0:	1000021e 	bne	r2,zero,3ec <handle_button_interrupts+0x70>
        
        transfer(p2);
     3e4:	e13ffc17 	ldw	r4,-16(fp)
     3e8:	00025f00 	call	25f0 <transfer>
       
    }
}
     3ec:	e037883a 	mov	sp,fp
     3f0:	dfc00117 	ldw	ra,4(sp)
     3f4:	df000017 	ldw	fp,0(sp)
     3f8:	dec00204 	addi	sp,sp,8
     3fc:	f800283a 	ret

00000400 <init_button>:

/* Initialize the button_pio. */

void init_button()
{
     400:	defffd04 	addi	sp,sp,-12
     404:	dfc00215 	stw	ra,8(sp)
     408:	df000115 	stw	fp,4(sp)
     40c:	df000104 	addi	fp,sp,4
    /* Recast the edge_capture pointer to match the alt_irq_register() function
     * prototype. */
    void* edge_capture_ptr = (void*) &edge_capture;
     410:	d0a6bb04 	addi	r2,gp,-25876
     414:	e0bfff15 	stw	r2,-4(fp)
    
    /* Enable all 4 button interrupts. */
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0xf);
     418:	00c08034 	movhi	r3,512
     41c:	18d40204 	addi	r3,r3,20488
     420:	008003c4 	movi	r2,15
     424:	18800035 	stwio	r2,0(r3)
    
    /* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0xf);
     428:	00c08034 	movhi	r3,512
     42c:	18d40304 	addi	r3,r3,20492
     430:	008003c4 	movi	r2,15
     434:	18800035 	stwio	r2,0(r3)
    
    /* Register the interrupt handler. */
    alt_irq_register (BUTTONS_IRQ, edge_capture_ptr, handle_button_interrupts);
     438:	01000084 	movi	r4,2
     43c:	e17fff17 	ldw	r5,-4(fp)
     440:	01800034 	movhi	r6,0
     444:	3180df04 	addi	r6,r6,892
     448:	000c4780 	call	c478 <alt_irq_register>
}
     44c:	e037883a 	mov	sp,fp
     450:	dfc00117 	ldw	ra,4(sp)
     454:	df000017 	ldw	fp,0(sp)
     458:	dec00204 	addi	sp,sp,8
     45c:	f800283a 	ret

00000460 <handle_timer_interrupts>:

/* A variable to set up context for timer interrupt. */
volatile int timer_capture = 0;

void handle_timer_interrupts(void* context, alt_u32 id)
{
     460:	defffb04 	addi	sp,sp,-20
     464:	dfc00415 	stw	ra,16(sp)
     468:	df000315 	stw	fp,12(sp)
     46c:	df000304 	addi	fp,sp,12
     470:	e13ffe15 	stw	r4,-8(fp)
     474:	e17fff15 	stw	r5,-4(fp)
	/* clear the interrupt */
	IOWR_ALTERA_AVALON_TIMER_STATUS (TIMER_BASE, 0);
     478:	00808034 	movhi	r2,512
     47c:	10942804 	addi	r2,r2,20640
     480:	10000035 	stwio	zero,0(r2)

	Process p2 = removeHeadI(0);
     484:	0009883a 	mov	r4,zero
     488:	00001d00 	call	1d0 <removeHeadI>
     48c:	e0bffd15 	stw	r2,-12(fp)
    if(p2 != NULL){
     490:	e0bffd17 	ldw	r2,-12(fp)
     494:	1005003a 	cmpeq	r2,r2,zero
     498:	1000021e 	bne	r2,zero,4a4 <handle_timer_interrupts+0x44>
        transfer(p2);
     49c:	e13ffd17 	ldw	r4,-12(fp)
     4a0:	00025f00 	call	25f0 <transfer>
    }
}
     4a4:	e037883a 	mov	sp,fp
     4a8:	dfc00117 	ldw	ra,4(sp)
     4ac:	df000017 	ldw	fp,0(sp)
     4b0:	dec00204 	addi	sp,sp,8
     4b4:	f800283a 	ret

000004b8 <init_clock>:

void init_clock()
{
     4b8:	defffd04 	addi	sp,sp,-12
     4bc:	dfc00215 	stw	ra,8(sp)
     4c0:	df000115 	stw	fp,4(sp)
     4c4:	df000104 	addi	fp,sp,4
    
  void* timer_capture_ptr = (void*) &timer_capture;  
     4c8:	d0a6bc04 	addi	r2,gp,-25872
     4cc:	e0bfff15 	stw	r2,-4(fp)
  /* set to free running mode */
  IOWR_ALTERA_AVALON_TIMER_CONTROL (TIMER_BASE, 
     4d0:	00c08034 	movhi	r3,512
     4d4:	18d42904 	addi	r3,r3,20644
     4d8:	008001c4 	movi	r2,7
     4dc:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_ITO_MSK  |
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */ 
  alt_irq_register (TIMER_IRQ, timer_capture_ptr, handle_timer_interrupts);  
     4e0:	0009883a 	mov	r4,zero
     4e4:	e17fff17 	ldw	r5,-4(fp)
     4e8:	01800034 	movhi	r6,0
     4ec:	31811804 	addi	r6,r6,1120
     4f0:	000c4780 	call	c478 <alt_irq_register>
  
}
     4f4:	e037883a 	mov	sp,fp
     4f8:	dfc00117 	ldw	ra,4(sp)
     4fc:	df000017 	ldw	fp,0(sp)
     500:	dec00204 	addi	sp,sp,8
     504:	f800283a 	ret

00000508 <addLast>:


/*************** Functions for process list manipulation **********/

/* add element to the tail of the list */
static void addLast(int* list, int processId) {
     508:	defffc04 	addi	sp,sp,-16
     50c:	df000315 	stw	fp,12(sp)
     510:	df000304 	addi	fp,sp,12
     514:	e13ffe15 	stw	r4,-8(fp)
     518:	e17fff15 	stw	r5,-4(fp)
	if (*list == -1){
     51c:	e0bffe17 	ldw	r2,-8(fp)
     520:	10800017 	ldw	r2,0(r2)
     524:	10bfffd8 	cmpnei	r2,r2,-1
     528:	1000041e 	bne	r2,zero,53c <addLast+0x34>
		*list = processId;
     52c:	e0fffe17 	ldw	r3,-8(fp)
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	18800015 	stw	r2,0(r3)
     538:	00001a06 	br	5a4 <addLast+0x9c>
	}
	else {
		int temp = *list;
     53c:	e0bffe17 	ldw	r2,-8(fp)
     540:	10800017 	ldw	r2,0(r2)
     544:	e0bffd15 	stw	r2,-12(fp)
		while (processes[temp].next != -1){
     548:	00000706 	br	568 <addLast+0x60>
			temp = processes[temp].next;
     54c:	e0bffd17 	ldw	r2,-12(fp)
     550:	00c00074 	movhi	r3,1
     554:	18ca6804 	addi	r3,r3,10656
     558:	10800f24 	muli	r2,r2,60
     55c:	10c5883a 	add	r2,r2,r3
     560:	10800017 	ldw	r2,0(r2)
     564:	e0bffd15 	stw	r2,-12(fp)
	if (*list == -1){
		*list = processId;
	}
	else {
		int temp = *list;
		while (processes[temp].next != -1){
     568:	e0bffd17 	ldw	r2,-12(fp)
     56c:	00c00074 	movhi	r3,1
     570:	18ca6804 	addi	r3,r3,10656
     574:	10800f24 	muli	r2,r2,60
     578:	10c5883a 	add	r2,r2,r3
     57c:	10800017 	ldw	r2,0(r2)
     580:	10bfffd8 	cmpnei	r2,r2,-1
     584:	103ff11e 	bne	r2,zero,54c <addLast+0x44>
			temp = processes[temp].next;
		}
		processes[temp].next = processId;
     588:	e0bffd17 	ldw	r2,-12(fp)
     58c:	00c00074 	movhi	r3,1
     590:	18ca6804 	addi	r3,r3,10656
     594:	10800f24 	muli	r2,r2,60
     598:	10c7883a 	add	r3,r2,r3
     59c:	e0bfff17 	ldw	r2,-4(fp)
     5a0:	18800015 	stw	r2,0(r3)
	}
	processes[processId].next = -1;
     5a4:	e0bfff17 	ldw	r2,-4(fp)
     5a8:	00c00074 	movhi	r3,1
     5ac:	18ca6804 	addi	r3,r3,10656
     5b0:	10800f24 	muli	r2,r2,60
     5b4:	10c7883a 	add	r3,r2,r3
     5b8:	00bfffc4 	movi	r2,-1
     5bc:	18800015 	stw	r2,0(r3)
}
     5c0:	e037883a 	mov	sp,fp
     5c4:	df000017 	ldw	fp,0(sp)
     5c8:	dec00104 	addi	sp,sp,4
     5cc:	f800283a 	ret

000005d0 <addFirst>:

/* add element to the head of list */
static void addFirst(int* list, int processId){
     5d0:	defffd04 	addi	sp,sp,-12
     5d4:	df000215 	stw	fp,8(sp)
     5d8:	df000204 	addi	fp,sp,8
     5dc:	e13ffe15 	stw	r4,-8(fp)
     5e0:	e17fff15 	stw	r5,-4(fp)
	processes[processId].next = *list;
     5e4:	e13fff17 	ldw	r4,-4(fp)
     5e8:	e0bffe17 	ldw	r2,-8(fp)
     5ec:	11400017 	ldw	r5,0(r2)
     5f0:	00c00074 	movhi	r3,1
     5f4:	18ca6804 	addi	r3,r3,10656
     5f8:	20800f24 	muli	r2,r4,60
     5fc:	10c5883a 	add	r2,r2,r3
     600:	11400015 	stw	r5,0(r2)
	*list = processId;
     604:	e0fffe17 	ldw	r3,-8(fp)
     608:	e0bfff17 	ldw	r2,-4(fp)
     60c:	18800015 	stw	r2,0(r3)
}
     610:	e037883a 	mov	sp,fp
     614:	df000017 	ldw	fp,0(sp)
     618:	dec00104 	addi	sp,sp,4
     61c:	f800283a 	ret

00000620 <size>:

int size(int* list) {
     620:	defffd04 	addi	sp,sp,-12
     624:	df000215 	stw	fp,8(sp)
     628:	df000204 	addi	fp,sp,8
     62c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i=0 ; *list != -1 ; i++) {
     630:	e03ffe15 	stw	zero,-8(fp)
     634:	00000a06 	br	660 <size+0x40>
		list = &processes[*list].next;
     638:	e0bfff17 	ldw	r2,-4(fp)
     63c:	10800017 	ldw	r2,0(r2)
     640:	10c00f24 	muli	r3,r2,60
     644:	00800074 	movhi	r2,1
     648:	108a6804 	addi	r2,r2,10656
     64c:	10c5883a 	add	r2,r2,r3
     650:	e0bfff15 	stw	r2,-4(fp)
	*list = processId;
}

int size(int* list) {
	int i;
	for (i=0 ; *list != -1 ; i++) {
     654:	e0bffe17 	ldw	r2,-8(fp)
     658:	10800044 	addi	r2,r2,1
     65c:	e0bffe15 	stw	r2,-8(fp)
     660:	e0bfff17 	ldw	r2,-4(fp)
     664:	10800017 	ldw	r2,0(r2)
     668:	10bfffd8 	cmpnei	r2,r2,-1
     66c:	103ff21e 	bne	r2,zero,638 <size+0x18>
		list = &processes[*list].next;
	}

	return i;
     670:	e0bffe17 	ldw	r2,-8(fp)
}
     674:	e037883a 	mov	sp,fp
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00104 	addi	sp,sp,4
     680:	f800283a 	ret

00000684 <removeHead>:

/* remove an element from the head of the list */
static int removeHead(int* list){
     684:	defffb04 	addi	sp,sp,-20
     688:	df000415 	stw	fp,16(sp)
     68c:	df000404 	addi	fp,sp,16
     690:	e13ffe15 	stw	r4,-8(fp)
	if (*list == -1){
     694:	e0bffe17 	ldw	r2,-8(fp)
     698:	10800017 	ldw	r2,0(r2)
     69c:	10bfffd8 	cmpnei	r2,r2,-1
     6a0:	1000031e 	bne	r2,zero,6b0 <removeHead+0x2c>
		return(-1);
     6a4:	00bfffc4 	movi	r2,-1
     6a8:	e0bfff15 	stw	r2,-4(fp)
     6ac:	00001806 	br	710 <removeHead+0x8c>
	}
	else {
		int head = *list;
     6b0:	e0bffe17 	ldw	r2,-8(fp)
     6b4:	10800017 	ldw	r2,0(r2)
     6b8:	e0bffd15 	stw	r2,-12(fp)
		int next = processes[*list].next;
     6bc:	e0bffe17 	ldw	r2,-8(fp)
     6c0:	10800017 	ldw	r2,0(r2)
     6c4:	00c00074 	movhi	r3,1
     6c8:	18ca6804 	addi	r3,r3,10656
     6cc:	10800f24 	muli	r2,r2,60
     6d0:	10c5883a 	add	r2,r2,r3
     6d4:	10800017 	ldw	r2,0(r2)
     6d8:	e0bffc15 	stw	r2,-16(fp)
		processes[*list].next = -1;
     6dc:	e0bffe17 	ldw	r2,-8(fp)
     6e0:	10800017 	ldw	r2,0(r2)
     6e4:	00c00074 	movhi	r3,1
     6e8:	18ca6804 	addi	r3,r3,10656
     6ec:	10800f24 	muli	r2,r2,60
     6f0:	10c7883a 	add	r3,r2,r3
     6f4:	00bfffc4 	movi	r2,-1
     6f8:	18800015 	stw	r2,0(r3)
		*list = next;
     6fc:	e0fffe17 	ldw	r3,-8(fp)
     700:	e0bffc17 	ldw	r2,-16(fp)
     704:	18800015 	stw	r2,0(r3)
		return head;
     708:	e0bffd17 	ldw	r2,-12(fp)
     70c:	e0bfff15 	stw	r2,-4(fp)
     710:	e0bfff17 	ldw	r2,-4(fp)
	}
}
     714:	e037883a 	mov	sp,fp
     718:	df000017 	ldw	fp,0(sp)
     71c:	dec00104 	addi	sp,sp,4
     720:	f800283a 	ret

00000724 <removeFromList>:

static void removeFromList(int* list, int processId) {
     724:	defffc04 	addi	sp,sp,-16
     728:	df000315 	stw	fp,12(sp)
     72c:	df000304 	addi	fp,sp,12
     730:	e13ffe15 	stw	r4,-8(fp)
     734:	e17fff15 	stw	r5,-4(fp)
	int i;

	for (i=0 ; *list != -1 ; i++) {
     738:	e03ffd15 	stw	zero,-12(fp)
     73c:	00001e06 	br	7b8 <removeFromList+0x94>
		if (*list == processId) {
     740:	e0bffe17 	ldw	r2,-8(fp)
     744:	10c00017 	ldw	r3,0(r2)
     748:	e0bfff17 	ldw	r2,-4(fp)
     74c:	1880101e 	bne	r3,r2,790 <removeFromList+0x6c>
			*list = processes[processId].next;
     750:	e0bfff17 	ldw	r2,-4(fp)
     754:	00c00074 	movhi	r3,1
     758:	18ca6804 	addi	r3,r3,10656
     75c:	10800f24 	muli	r2,r2,60
     760:	10c5883a 	add	r2,r2,r3
     764:	10c00017 	ldw	r3,0(r2)
     768:	e0bffe17 	ldw	r2,-8(fp)
     76c:	10c00015 	stw	r3,0(r2)
			processes[processId].next = -1;
     770:	e0bfff17 	ldw	r2,-4(fp)
     774:	00c00074 	movhi	r3,1
     778:	18ca6804 	addi	r3,r3,10656
     77c:	10800f24 	muli	r2,r2,60
     780:	10c7883a 	add	r3,r2,r3
     784:	00bfffc4 	movi	r2,-1
     788:	18800015 	stw	r2,0(r3)
			break;
     78c:	00000e06 	br	7c8 <removeFromList+0xa4>
		}
		list = &processes[*list].next;
     790:	e0bffe17 	ldw	r2,-8(fp)
     794:	10800017 	ldw	r2,0(r2)
     798:	10c00f24 	muli	r3,r2,60
     79c:	00800074 	movhi	r2,1
     7a0:	108a6804 	addi	r2,r2,10656
     7a4:	10c5883a 	add	r2,r2,r3
     7a8:	e0bffe15 	stw	r2,-8(fp)
}

static void removeFromList(int* list, int processId) {
	int i;

	for (i=0 ; *list != -1 ; i++) {
     7ac:	e0bffd17 	ldw	r2,-12(fp)
     7b0:	10800044 	addi	r2,r2,1
     7b4:	e0bffd15 	stw	r2,-12(fp)
     7b8:	e0bffe17 	ldw	r2,-8(fp)
     7bc:	10800017 	ldw	r2,0(r2)
     7c0:	10bfffd8 	cmpnei	r2,r2,-1
     7c4:	103fde1e 	bne	r2,zero,740 <removeFromList+0x1c>
			processes[processId].next = -1;
			break;
		}
		list = &processes[*list].next;
	}
}
     7c8:	e037883a 	mov	sp,fp
     7cc:	df000017 	ldw	fp,0(sp)
     7d0:	dec00104 	addi	sp,sp,4
     7d4:	f800283a 	ret

000007d8 <head>:

/* returns the head of the list */
static int head(int* list){
     7d8:	defffe04 	addi	sp,sp,-8
     7dc:	df000115 	stw	fp,4(sp)
     7e0:	df000104 	addi	fp,sp,4
     7e4:	e13fff15 	stw	r4,-4(fp)
	return *list;
     7e8:	e0bfff17 	ldw	r2,-4(fp)
     7ec:	10800017 	ldw	r2,0(r2)
}
     7f0:	e037883a 	mov	sp,fp
     7f4:	df000017 	ldw	fp,0(sp)
     7f8:	dec00104 	addi	sp,sp,4
     7fc:	f800283a 	ret

00000800 <isEmpty>:

/* checks if the list is empty */
static int isEmpty(int* list) {
     800:	defffe04 	addi	sp,sp,-8
     804:	df000115 	stw	fp,4(sp)
     808:	df000104 	addi	fp,sp,4
     80c:	e13fff15 	stw	r4,-4(fp)
	return *list < 0;
     810:	e0bfff17 	ldw	r2,-4(fp)
     814:	10800017 	ldw	r2,0(r2)
     818:	1004d7fa 	srli	r2,r2,31
}
     81c:	e037883a 	mov	sp,fp
     820:	df000017 	ldw	fp,0(sp)
     824:	dec00104 	addi	sp,sp,4
     828:	f800283a 	ret

0000082c <createProcess>:
 ***********************************************************
                    Kernel functions
************************************************************
* **********************************************************/

void createProcess (void (*f)(), int stackSize) {
     82c:	defff804 	addi	sp,sp,-32
     830:	dfc00715 	stw	ra,28(sp)
     834:	df000615 	stw	fp,24(sp)
     838:	dc000515 	stw	r16,20(sp)
     83c:	df000504 	addi	fp,sp,20
     840:	e13ffe15 	stw	r4,-8(fp)
     844:	e17fff15 	stw	r5,-4(fp)
	if (nextProcessId == MAX_PROC){
     848:	d0a6bd17 	ldw	r2,-25868(gp)
     84c:	10800298 	cmpnei	r2,r2,10
     850:	1000171e 	bne	r2,zero,8b0 <createProcess+0x84>
		ERR("Maximum number of processes reached!");
     854:	00800074 	movhi	r2,1
     858:	10835c04 	addi	r2,r2,3440
     85c:	10800017 	ldw	r2,0(r2)
     860:	14000317 	ldw	r16,12(r2)
     864:	d1200004 	addi	r4,gp,-32768
     868:	00007d80 	call	7d8 <head>
     86c:	100d883a 	mov	r6,r2
     870:	8009883a 	mov	r4,r16
     874:	01400074 	movhi	r5,1
     878:	297b0104 	addi	r5,r5,-5116
     87c:	000f883a 	mov	r7,zero
     880:	00029280 	call	2928 <fprintf>
     884:	e03ffc15 	stw	zero,-16(fp)
     888:	00000306 	br	898 <createProcess+0x6c>
     88c:	e0bffc17 	ldw	r2,-16(fp)
     890:	10800044 	addi	r2,r2,1
     894:	e0bffc15 	stw	r2,-16(fp)
     898:	e0fffc17 	ldw	r3,-16(fp)
     89c:	00800074 	movhi	r2,1
     8a0:	10893dc4 	addi	r2,r2,9463
     8a4:	10fff90e 	bge	r2,r3,88c <createProcess+0x60>
		exit(1);
     8a8:	01000044 	movi	r4,1
     8ac:	00028f00 	call	28f0 <exit>
	}
	unsigned int* stack = malloc(stackSize);
     8b0:	e13fff17 	ldw	r4,-4(fp)
     8b4:	000299c0 	call	299c <malloc>
     8b8:	e0bffd15 	stw	r2,-12(fp)
	if (stack==NULL) {
     8bc:	e0bffd17 	ldw	r2,-12(fp)
     8c0:	1004c03a 	cmpne	r2,r2,zero
     8c4:	1000171e 	bne	r2,zero,924 <createProcess+0xf8>
		ERR("Could not allocate stack. Exiting...");
     8c8:	00800074 	movhi	r2,1
     8cc:	10835c04 	addi	r2,r2,3440
     8d0:	10800017 	ldw	r2,0(r2)
     8d4:	14000317 	ldw	r16,12(r2)
     8d8:	d1200004 	addi	r4,gp,-32768
     8dc:	00007d80 	call	7d8 <head>
     8e0:	100d883a 	mov	r6,r2
     8e4:	8009883a 	mov	r4,r16
     8e8:	01400074 	movhi	r5,1
     8ec:	297b0e04 	addi	r5,r5,-5064
     8f0:	000f883a 	mov	r7,zero
     8f4:	00029280 	call	2928 <fprintf>
     8f8:	e03ffb15 	stw	zero,-20(fp)
     8fc:	00000306 	br	90c <createProcess+0xe0>
     900:	e0bffb17 	ldw	r2,-20(fp)
     904:	10800044 	addi	r2,r2,1
     908:	e0bffb15 	stw	r2,-20(fp)
     90c:	e0fffb17 	ldw	r3,-20(fp)
     910:	00800074 	movhi	r2,1
     914:	10893dc4 	addi	r2,r2,9463
     918:	10fff90e 	bge	r2,r3,900 <createProcess+0xd4>
		exit(1);
     91c:	01000044 	movi	r4,1
     920:	00028f00 	call	28f0 <exit>
	}
	processes[nextProcessId].p = newProcess(f, stack, stackSize);
     924:	d426bd17 	ldw	r16,-25868(gp)
     928:	e13ffe17 	ldw	r4,-8(fp)
     92c:	e17ffd17 	ldw	r5,-12(fp)
     930:	e1bfff17 	ldw	r6,-4(fp)
     934:	00025940 	call	2594 <newProcess>
     938:	1009883a 	mov	r4,r2
     93c:	00c00074 	movhi	r3,1
     940:	18ca6804 	addi	r3,r3,10656
     944:	80800f24 	muli	r2,r16,60
     948:	10c5883a 	add	r2,r2,r3
     94c:	10800104 	addi	r2,r2,4
     950:	11000015 	stw	r4,0(r2)
	processes[nextProcessId].next = -1;
     954:	d0a6bd17 	ldw	r2,-25868(gp)
     958:	00c00074 	movhi	r3,1
     95c:	18ca6804 	addi	r3,r3,10656
     960:	10800f24 	muli	r2,r2,60
     964:	10c7883a 	add	r3,r2,r3
     968:	00bfffc4 	movi	r2,-1
     96c:	18800015 	stw	r2,0(r3)
	processes[nextProcessId].currentMonitor = 0;
     970:	d0a6bd17 	ldw	r2,-25868(gp)
     974:	00c00074 	movhi	r3,1
     978:	18ca6804 	addi	r3,r3,10656
     97c:	10800f24 	muli	r2,r2,60
     980:	10c5883a 	add	r2,r2,r3
     984:	10800204 	addi	r2,r2,8
     988:	10000015 	stw	zero,0(r2)
	processes[nextProcessId].monitors[0] = -1;
     98c:	d0a6bd17 	ldw	r2,-25868(gp)
     990:	00c00074 	movhi	r3,1
     994:	18ca6804 	addi	r3,r3,10656
     998:	10800f24 	muli	r2,r2,60
     99c:	10c5883a 	add	r2,r2,r3
     9a0:	10c00304 	addi	r3,r2,12
     9a4:	00bfffc4 	movi	r2,-1
     9a8:	18800015 	stw	r2,0(r3)
	processes[nextProcessId].timeout = -1;
     9ac:	d0a6bd17 	ldw	r2,-25868(gp)
     9b0:	00c00074 	movhi	r3,1
     9b4:	18ca6804 	addi	r3,r3,10656
     9b8:	10800f24 	muli	r2,r2,60
     9bc:	10c5883a 	add	r2,r2,r3
     9c0:	10c00e04 	addi	r3,r2,56
     9c4:	00bfffc4 	movi	r2,-1
     9c8:	18800015 	stw	r2,0(r3)

	addLast(&readyList, nextProcessId);
     9cc:	d166bd17 	ldw	r5,-25868(gp)
     9d0:	d1200004 	addi	r4,gp,-32768
     9d4:	00005080 	call	508 <addLast>
	nextProcessId++;
     9d8:	d0a6bd17 	ldw	r2,-25868(gp)
     9dc:	10800044 	addi	r2,r2,1
     9e0:	d0a6bd15 	stw	r2,-25868(gp)
}
     9e4:	e037883a 	mov	sp,fp
     9e8:	dfc00217 	ldw	ra,8(sp)
     9ec:	df000117 	ldw	fp,4(sp)
     9f0:	dc000017 	ldw	r16,0(sp)
     9f4:	dec00304 	addi	sp,sp,12
     9f8:	f800283a 	ret

000009fc <createSpecialProcess>:

int createSpecialProcess(void (*f)()) {
     9fc:	defff804 	addi	sp,sp,-32
     a00:	dfc00715 	stw	ra,28(sp)
     a04:	df000615 	stw	fp,24(sp)
     a08:	dc000515 	stw	r16,20(sp)
     a0c:	df000504 	addi	fp,sp,20
     a10:	e13fff15 	stw	r4,-4(fp)

	if (nextProcessId == MAX_PROC){
     a14:	d0a6bd17 	ldw	r2,-25868(gp)
     a18:	10800298 	cmpnei	r2,r2,10
     a1c:	1000171e 	bne	r2,zero,a7c <createSpecialProcess+0x80>
		ERR("Maximum number of processes reached!");
     a20:	00800074 	movhi	r2,1
     a24:	10835c04 	addi	r2,r2,3440
     a28:	10800017 	ldw	r2,0(r2)
     a2c:	14000317 	ldw	r16,12(r2)
     a30:	d1200004 	addi	r4,gp,-32768
     a34:	00007d80 	call	7d8 <head>
     a38:	100d883a 	mov	r6,r2
     a3c:	8009883a 	mov	r4,r16
     a40:	01400074 	movhi	r5,1
     a44:	297b0104 	addi	r5,r5,-5116
     a48:	000f883a 	mov	r7,zero
     a4c:	00029280 	call	2928 <fprintf>
     a50:	e03ffc15 	stw	zero,-16(fp)
     a54:	00000306 	br	a64 <createSpecialProcess+0x68>
     a58:	e0bffc17 	ldw	r2,-16(fp)
     a5c:	10800044 	addi	r2,r2,1
     a60:	e0bffc15 	stw	r2,-16(fp)
     a64:	e0fffc17 	ldw	r3,-16(fp)
     a68:	00800074 	movhi	r2,1
     a6c:	10893dc4 	addi	r2,r2,9463
     a70:	10fff90e 	bge	r2,r3,a58 <createSpecialProcess+0x5c>
		exit(1);
     a74:	01000044 	movi	r4,1
     a78:	00028f00 	call	28f0 <exit>
	}

	unsigned int* stack = malloc(STACK_SIZE);
     a7c:	0109c404 	movi	r4,10000
     a80:	000299c0 	call	299c <malloc>
     a84:	e0bffe15 	stw	r2,-8(fp)
	if (stack==NULL) {
     a88:	e0bffe17 	ldw	r2,-8(fp)
     a8c:	1004c03a 	cmpne	r2,r2,zero
     a90:	1000171e 	bne	r2,zero,af0 <createSpecialProcess+0xf4>
		ERR("Could not allocate stack. Exiting...");
     a94:	00800074 	movhi	r2,1
     a98:	10835c04 	addi	r2,r2,3440
     a9c:	10800017 	ldw	r2,0(r2)
     aa0:	14000317 	ldw	r16,12(r2)
     aa4:	d1200004 	addi	r4,gp,-32768
     aa8:	00007d80 	call	7d8 <head>
     aac:	100d883a 	mov	r6,r2
     ab0:	8009883a 	mov	r4,r16
     ab4:	01400074 	movhi	r5,1
     ab8:	297b0e04 	addi	r5,r5,-5064
     abc:	000f883a 	mov	r7,zero
     ac0:	00029280 	call	2928 <fprintf>
     ac4:	e03ffb15 	stw	zero,-20(fp)
     ac8:	00000306 	br	ad8 <createSpecialProcess+0xdc>
     acc:	e0bffb17 	ldw	r2,-20(fp)
     ad0:	10800044 	addi	r2,r2,1
     ad4:	e0bffb15 	stw	r2,-20(fp)
     ad8:	e0fffb17 	ldw	r3,-20(fp)
     adc:	00800074 	movhi	r2,1
     ae0:	10893dc4 	addi	r2,r2,9463
     ae4:	10fff90e 	bge	r2,r3,acc <createSpecialProcess+0xd0>
		exit(1);
     ae8:	01000044 	movi	r4,1
     aec:	00028f00 	call	28f0 <exit>
	}
	processes[nextProcessId].p = newProcess(f, stack, STACK_SIZE);
     af0:	d426bd17 	ldw	r16,-25868(gp)
     af4:	e13fff17 	ldw	r4,-4(fp)
     af8:	e17ffe17 	ldw	r5,-8(fp)
     afc:	0189c404 	movi	r6,10000
     b00:	00025940 	call	2594 <newProcess>
     b04:	1009883a 	mov	r4,r2
     b08:	00c00074 	movhi	r3,1
     b0c:	18ca6804 	addi	r3,r3,10656
     b10:	80800f24 	muli	r2,r16,60
     b14:	10c5883a 	add	r2,r2,r3
     b18:	10800104 	addi	r2,r2,4
     b1c:	11000015 	stw	r4,0(r2)
	processes[nextProcessId].next = -1;
     b20:	d0a6bd17 	ldw	r2,-25868(gp)
     b24:	00c00074 	movhi	r3,1
     b28:	18ca6804 	addi	r3,r3,10656
     b2c:	10800f24 	muli	r2,r2,60
     b30:	10c7883a 	add	r3,r2,r3
     b34:	00bfffc4 	movi	r2,-1
     b38:	18800015 	stw	r2,0(r3)
	processes[nextProcessId].currentMonitor = 0;
     b3c:	d0a6bd17 	ldw	r2,-25868(gp)
     b40:	00c00074 	movhi	r3,1
     b44:	18ca6804 	addi	r3,r3,10656
     b48:	10800f24 	muli	r2,r2,60
     b4c:	10c5883a 	add	r2,r2,r3
     b50:	10800204 	addi	r2,r2,8
     b54:	10000015 	stw	zero,0(r2)
	processes[nextProcessId].monitors[0] = -1;
     b58:	d0a6bd17 	ldw	r2,-25868(gp)
     b5c:	00c00074 	movhi	r3,1
     b60:	18ca6804 	addi	r3,r3,10656
     b64:	10800f24 	muli	r2,r2,60
     b68:	10c5883a 	add	r2,r2,r3
     b6c:	10c00304 	addi	r3,r2,12
     b70:	00bfffc4 	movi	r2,-1
     b74:	18800015 	stw	r2,0(r3)
	processes[nextProcessId].timeout = -1;
     b78:	d0a6bd17 	ldw	r2,-25868(gp)
     b7c:	00c00074 	movhi	r3,1
     b80:	18ca6804 	addi	r3,r3,10656
     b84:	10800f24 	muli	r2,r2,60
     b88:	10c5883a 	add	r2,r2,r3
     b8c:	10c00e04 	addi	r3,r2,56
     b90:	00bfffc4 	movi	r2,-1
     b94:	18800015 	stw	r2,0(r3)

	int pid = nextProcessId;
     b98:	d0a6bd17 	ldw	r2,-25868(gp)
     b9c:	e0bffd15 	stw	r2,-12(fp)
	nextProcessId++;
     ba0:	d0a6bd17 	ldw	r2,-25868(gp)
     ba4:	10800044 	addi	r2,r2,1
     ba8:	d0a6bd15 	stw	r2,-25868(gp)
	return pid;
     bac:	e0bffd17 	ldw	r2,-12(fp)
}
     bb0:	e037883a 	mov	sp,fp
     bb4:	dfc00217 	ldw	ra,8(sp)
     bb8:	df000117 	ldw	fp,4(sp)
     bbc:	dc000017 	ldw	r16,0(sp)
     bc0:	dec00304 	addi	sp,sp,12
     bc4:	f800283a 	ret

00000bc8 <checkAndTransfer>:

static void checkAndTransfer() {
     bc8:	defffc04 	addi	sp,sp,-16
     bcc:	dfc00315 	stw	ra,12(sp)
     bd0:	df000215 	stw	fp,8(sp)
     bd4:	df000204 	addi	fp,sp,8
	/*if (isEmpty(&readyList)){
		/*ERR("No processes in the ready list! Exiting...");
		exit(1);
	}*/
	int pid = isEmpty(&readyList) ? idle_pid : head(&readyList);
     bd8:	d1200004 	addi	r4,gp,-32768
     bdc:	00008000 	call	800 <isEmpty>
     be0:	1004c03a 	cmpne	r2,r2,zero
     be4:	1000041e 	bne	r2,zero,bf8 <checkAndTransfer+0x30>
     be8:	d1200004 	addi	r4,gp,-32768
     bec:	00007d80 	call	7d8 <head>
     bf0:	e0bfff15 	stw	r2,-4(fp)
     bf4:	00000206 	br	c00 <checkAndTransfer+0x38>
     bf8:	d0a6bf17 	ldw	r2,-25860(gp)
     bfc:	e0bfff15 	stw	r2,-4(fp)
     c00:	e0bfff17 	ldw	r2,-4(fp)
     c04:	e0bffe15 	stw	r2,-8(fp)
	transfer(processes[pid].p);
     c08:	e0bffe17 	ldw	r2,-8(fp)
     c0c:	00c00074 	movhi	r3,1
     c10:	18ca6804 	addi	r3,r3,10656
     c14:	10800f24 	muli	r2,r2,60
     c18:	10c5883a 	add	r2,r2,r3
     c1c:	10800104 	addi	r2,r2,4
     c20:	11000017 	ldw	r4,0(r2)
     c24:	00025f00 	call	25f0 <transfer>
}
     c28:	e037883a 	mov	sp,fp
     c2c:	dfc00117 	ldw	ra,4(sp)
     c30:	df000017 	ldw	fp,0(sp)
     c34:	dec00204 	addi	sp,sp,8
     c38:	f800283a 	ret

00000c3c <yield>:



void yield(){
     c3c:	defffc04 	addi	sp,sp,-16
     c40:	dfc00315 	stw	ra,12(sp)
     c44:	df000215 	stw	fp,8(sp)
     c48:	df000204 	addi	fp,sp,8
	maskInterrupts();
     c4c:	000278c0 	call	278c <maskInterrupts>
	int pid = isEmpty(&readyList) ? idle_pid : removeHead(&readyList);
     c50:	d1200004 	addi	r4,gp,-32768
     c54:	00008000 	call	800 <isEmpty>
     c58:	1004c03a 	cmpne	r2,r2,zero
     c5c:	1000041e 	bne	r2,zero,c70 <yield+0x34>
     c60:	d1200004 	addi	r4,gp,-32768
     c64:	00006840 	call	684 <removeHead>
     c68:	e0bfff15 	stw	r2,-4(fp)
     c6c:	00000206 	br	c78 <yield+0x3c>
     c70:	d0a6bf17 	ldw	r2,-25860(gp)
     c74:	e0bfff15 	stw	r2,-4(fp)
     c78:	e0bfff17 	ldw	r2,-4(fp)
     c7c:	e0bffe15 	stw	r2,-8(fp)
	addLast(&readyList, pid);
     c80:	d1200004 	addi	r4,gp,-32768
     c84:	e17ffe17 	ldw	r5,-8(fp)
     c88:	00005080 	call	508 <addLast>
	checkAndTransfer();
     c8c:	0000bc80 	call	bc8 <checkAndTransfer>
	allowInterrupts();
     c90:	00027980 	call	2798 <allowInterrupts>
}
     c94:	e037883a 	mov	sp,fp
     c98:	dfc00117 	ldw	ra,4(sp)
     c9c:	df000017 	ldw	fp,0(sp)
     ca0:	dec00204 	addi	sp,sp,8
     ca4:	f800283a 	ret

00000ca8 <createMonitor>:

int createMonitor(){
     ca8:	defffb04 	addi	sp,sp,-20
     cac:	dfc00415 	stw	ra,16(sp)
     cb0:	df000315 	stw	fp,12(sp)
     cb4:	dc000215 	stw	r16,8(sp)
     cb8:	df000204 	addi	fp,sp,8
	maskInterrupts();
     cbc:	000278c0 	call	278c <maskInterrupts>
	if (nextMonitorId == MAX_MONITORS){
     cc0:	d0a6be17 	ldw	r2,-25864(gp)
     cc4:	10800298 	cmpnei	r2,r2,10
     cc8:	1000171e 	bne	r2,zero,d28 <createMonitor+0x80>
		ERR("Maximum number of monitors reached!\n");
     ccc:	00800074 	movhi	r2,1
     cd0:	10835c04 	addi	r2,r2,3440
     cd4:	10800017 	ldw	r2,0(r2)
     cd8:	14000317 	ldw	r16,12(r2)
     cdc:	d1200004 	addi	r4,gp,-32768
     ce0:	00007d80 	call	7d8 <head>
     ce4:	100d883a 	mov	r6,r2
     ce8:	8009883a 	mov	r4,r16
     cec:	01400074 	movhi	r5,1
     cf0:	297b1b04 	addi	r5,r5,-5012
     cf4:	000f883a 	mov	r7,zero
     cf8:	00029280 	call	2928 <fprintf>
     cfc:	e03ffe15 	stw	zero,-8(fp)
     d00:	00000306 	br	d10 <createMonitor+0x68>
     d04:	e0bffe17 	ldw	r2,-8(fp)
     d08:	10800044 	addi	r2,r2,1
     d0c:	e0bffe15 	stw	r2,-8(fp)
     d10:	e0fffe17 	ldw	r3,-8(fp)
     d14:	00800074 	movhi	r2,1
     d18:	10893dc4 	addi	r2,r2,9463
     d1c:	10fff90e 	bge	r2,r3,d04 <createMonitor+0x5c>
		exit(1);
     d20:	01000044 	movi	r4,1
     d24:	00028f00 	call	28f0 <exit>
	}
	monitors[nextMonitorId].timesTaken = 0;
     d28:	d0a6be17 	ldw	r2,-25864(gp)
     d2c:	00c00074 	movhi	r3,1
     d30:	18ca4004 	addi	r3,r3,10496
     d34:	1004913a 	slli	r2,r2,4
     d38:	10c5883a 	add	r2,r2,r3
     d3c:	10000015 	stw	zero,0(r2)
	monitors[nextMonitorId].takenBy = -1;
     d40:	d0a6be17 	ldw	r2,-25864(gp)
     d44:	00c00074 	movhi	r3,1
     d48:	18ca4004 	addi	r3,r3,10496
     d4c:	1004913a 	slli	r2,r2,4
     d50:	10c5883a 	add	r2,r2,r3
     d54:	10c00104 	addi	r3,r2,4
     d58:	00bfffc4 	movi	r2,-1
     d5c:	18800015 	stw	r2,0(r3)
	monitors[nextMonitorId].entryList = -1;
     d60:	d0a6be17 	ldw	r2,-25864(gp)
     d64:	00c00074 	movhi	r3,1
     d68:	18ca4004 	addi	r3,r3,10496
     d6c:	1004913a 	slli	r2,r2,4
     d70:	10c5883a 	add	r2,r2,r3
     d74:	10c00204 	addi	r3,r2,8
     d78:	00bfffc4 	movi	r2,-1
     d7c:	18800015 	stw	r2,0(r3)
	monitors[nextMonitorId].waitingList = -1;
     d80:	d0a6be17 	ldw	r2,-25864(gp)
     d84:	00c00074 	movhi	r3,1
     d88:	18ca4004 	addi	r3,r3,10496
     d8c:	1004913a 	slli	r2,r2,4
     d90:	10c5883a 	add	r2,r2,r3
     d94:	10c00304 	addi	r3,r2,12
     d98:	00bfffc4 	movi	r2,-1
     d9c:	18800015 	stw	r2,0(r3)
	int mid = nextMonitorId;
     da0:	d0a6be17 	ldw	r2,-25864(gp)
     da4:	e0bfff15 	stw	r2,-4(fp)
	nextMonitorId++;
     da8:	d0a6be17 	ldw	r2,-25864(gp)
     dac:	10800044 	addi	r2,r2,1
     db0:	d0a6be15 	stw	r2,-25864(gp)
	allowInterrupts();
     db4:	00027980 	call	2798 <allowInterrupts>
	return mid;
     db8:	e0bfff17 	ldw	r2,-4(fp)
}
     dbc:	e037883a 	mov	sp,fp
     dc0:	dfc00217 	ldw	ra,8(sp)
     dc4:	df000117 	ldw	fp,4(sp)
     dc8:	dc000017 	ldw	r16,0(sp)
     dcc:	dec00304 	addi	sp,sp,12
     dd0:	f800283a 	ret

00000dd4 <getCurrentMonitor>:

static int getCurrentMonitor(int pid) {
     dd4:	defffd04 	addi	sp,sp,-12
     dd8:	df000215 	stw	fp,8(sp)
     ddc:	df000204 	addi	fp,sp,8
     de0:	e13fff15 	stw	r4,-4(fp)
	int result = processes[pid].monitors[processes[pid].currentMonitor];
     de4:	e17fff17 	ldw	r5,-4(fp)
     de8:	e0bfff17 	ldw	r2,-4(fp)
     dec:	00c00074 	movhi	r3,1
     df0:	18ca6804 	addi	r3,r3,10656
     df4:	10800f24 	muli	r2,r2,60
     df8:	10c5883a 	add	r2,r2,r3
     dfc:	10800204 	addi	r2,r2,8
     e00:	10c00017 	ldw	r3,0(r2)
     e04:	01000074 	movhi	r4,1
     e08:	210a6804 	addi	r4,r4,10656
     e0c:	288003e4 	muli	r2,r5,15
     e10:	10c5883a 	add	r2,r2,r3
     e14:	1085883a 	add	r2,r2,r2
     e18:	1085883a 	add	r2,r2,r2
     e1c:	1105883a 	add	r2,r2,r4
     e20:	10800304 	addi	r2,r2,12
     e24:	10800017 	ldw	r2,0(r2)
     e28:	e0bffe15 	stw	r2,-8(fp)
	return result;
     e2c:	e0bffe17 	ldw	r2,-8(fp)
}
     e30:	e037883a 	mov	sp,fp
     e34:	df000017 	ldw	fp,0(sp)
     e38:	dec00104 	addi	sp,sp,4
     e3c:	f800283a 	ret

00000e40 <enterMonitor>:

void enterMonitor(int monitorID) {
     e40:	defff904 	addi	sp,sp,-28
     e44:	dfc00615 	stw	ra,24(sp)
     e48:	df000515 	stw	fp,20(sp)
     e4c:	dc000415 	stw	r16,16(sp)
     e50:	df000404 	addi	fp,sp,16
     e54:	e13fff15 	stw	r4,-4(fp)
	maskInterrupts();
     e58:	000278c0 	call	278c <maskInterrupts>

	int myID = head(&readyList);
     e5c:	d1200004 	addi	r4,gp,-32768
     e60:	00007d80 	call	7d8 <head>
     e64:	e0bffe15 	stw	r2,-8(fp)

	if (monitorID > nextMonitorId || monitorID < 0) {
     e68:	d0e6be17 	ldw	r3,-25864(gp)
     e6c:	e0bfff17 	ldw	r2,-4(fp)
     e70:	18800316 	blt	r3,r2,e80 <enterMonitor+0x40>
     e74:	e0bfff17 	ldw	r2,-4(fp)
     e78:	1004403a 	cmpge	r2,r2,zero
     e7c:	10000e1e 	bne	r2,zero,eb8 <enterMonitor+0x78>
		ERRA("Monitor %d does not exist.", nextMonitorId);
     e80:	00800074 	movhi	r2,1
     e84:	10835c04 	addi	r2,r2,3440
     e88:	10800017 	ldw	r2,0(r2)
     e8c:	14000317 	ldw	r16,12(r2)
     e90:	d1200004 	addi	r4,gp,-32768
     e94:	00007d80 	call	7d8 <head>
     e98:	100d883a 	mov	r6,r2
     e9c:	d1e6be17 	ldw	r7,-25864(gp)
     ea0:	8009883a 	mov	r4,r16
     ea4:	01400074 	movhi	r5,1
     ea8:	297b2804 	addi	r5,r5,-4960
     eac:	00029280 	call	2928 <fprintf>
		exit(1);
     eb0:	01000044 	movi	r4,1
     eb4:	00028f00 	call	28f0 <exit>
	}

	if (processes[myID].currentMonitor >= MAX_MONITORS) {
     eb8:	e0bffe17 	ldw	r2,-8(fp)
     ebc:	00c00074 	movhi	r3,1
     ec0:	18ca6804 	addi	r3,r3,10656
     ec4:	10800f24 	muli	r2,r2,60
     ec8:	10c5883a 	add	r2,r2,r3
     ecc:	10800204 	addi	r2,r2,8
     ed0:	10800017 	ldw	r2,0(r2)
     ed4:	10800290 	cmplti	r2,r2,10
     ed8:	1000171e 	bne	r2,zero,f38 <enterMonitor+0xf8>
		ERR("Too many nested calls.");
     edc:	00800074 	movhi	r2,1
     ee0:	10835c04 	addi	r2,r2,3440
     ee4:	10800017 	ldw	r2,0(r2)
     ee8:	14000317 	ldw	r16,12(r2)
     eec:	d1200004 	addi	r4,gp,-32768
     ef0:	00007d80 	call	7d8 <head>
     ef4:	100d883a 	mov	r6,r2
     ef8:	8009883a 	mov	r4,r16
     efc:	01400074 	movhi	r5,1
     f00:	297b3204 	addi	r5,r5,-4920
     f04:	000f883a 	mov	r7,zero
     f08:	00029280 	call	2928 <fprintf>
     f0c:	e03ffd15 	stw	zero,-12(fp)
     f10:	00000306 	br	f20 <enterMonitor+0xe0>
     f14:	e0bffd17 	ldw	r2,-12(fp)
     f18:	10800044 	addi	r2,r2,1
     f1c:	e0bffd15 	stw	r2,-12(fp)
     f20:	e0fffd17 	ldw	r3,-12(fp)
     f24:	00800074 	movhi	r2,1
     f28:	10893dc4 	addi	r2,r2,9463
     f2c:	10fff90e 	bge	r2,r3,f14 <enterMonitor+0xd4>
		exit(1);
     f30:	01000044 	movi	r4,1
     f34:	00028f00 	call	28f0 <exit>
	}

	if (monitors[monitorID].timesTaken > 0 && monitors[monitorID].takenBy != myID) {
     f38:	e0bfff17 	ldw	r2,-4(fp)
     f3c:	00c00074 	movhi	r3,1
     f40:	18ca4004 	addi	r3,r3,10496
     f44:	1004913a 	slli	r2,r2,4
     f48:	10c5883a 	add	r2,r2,r3
     f4c:	10800017 	ldw	r2,0(r2)
     f50:	10800050 	cmplti	r2,r2,1
     f54:	10003c1e 	bne	r2,zero,1048 <enterMonitor+0x208>
     f58:	e0bfff17 	ldw	r2,-4(fp)
     f5c:	00c00074 	movhi	r3,1
     f60:	18ca4004 	addi	r3,r3,10496
     f64:	1004913a 	slli	r2,r2,4
     f68:	10c5883a 	add	r2,r2,r3
     f6c:	10800104 	addi	r2,r2,4
     f70:	10c00017 	ldw	r3,0(r2)
     f74:	e0bffe17 	ldw	r2,-8(fp)
     f78:	18803326 	beq	r3,r2,1048 <enterMonitor+0x208>
		removeHead(&readyList);
     f7c:	d1200004 	addi	r4,gp,-32768
     f80:	00006840 	call	684 <removeHead>
		addLast(&(monitors[monitorID].entryList), myID);
     f84:	e0bfff17 	ldw	r2,-4(fp)
     f88:	1004913a 	slli	r2,r2,4
     f8c:	10c00204 	addi	r3,r2,8
     f90:	00800074 	movhi	r2,1
     f94:	108a4004 	addi	r2,r2,10496
     f98:	1889883a 	add	r4,r3,r2
     f9c:	e17ffe17 	ldw	r5,-8(fp)
     fa0:	00005080 	call	508 <addLast>
		checkAndTransfer();
     fa4:	0000bc80 	call	bc8 <checkAndTransfer>

		/* I am woken up by exitMonitor -- check if the monitor state is consistent */
		if ((monitors[monitorID].timesTaken != 1) || (monitors[monitorID].takenBy != myID)) {
     fa8:	e0bfff17 	ldw	r2,-4(fp)
     fac:	00c00074 	movhi	r3,1
     fb0:	18ca4004 	addi	r3,r3,10496
     fb4:	1004913a 	slli	r2,r2,4
     fb8:	10c5883a 	add	r2,r2,r3
     fbc:	10800017 	ldw	r2,0(r2)
     fc0:	10800058 	cmpnei	r2,r2,1
     fc4:	1000091e 	bne	r2,zero,fec <enterMonitor+0x1ac>
     fc8:	e0bfff17 	ldw	r2,-4(fp)
     fcc:	00c00074 	movhi	r3,1
     fd0:	18ca4004 	addi	r3,r3,10496
     fd4:	1004913a 	slli	r2,r2,4
     fd8:	10c5883a 	add	r2,r2,r3
     fdc:	10800104 	addi	r2,r2,4
     fe0:	10c00017 	ldw	r3,0(r2)
     fe4:	e0bffe17 	ldw	r2,-8(fp)
     fe8:	18802b26 	beq	r3,r2,1098 <enterMonitor+0x258>
			ERR("The kernel has performed an illegal operation. Please contact customer support.");
     fec:	00800074 	movhi	r2,1
     ff0:	10835c04 	addi	r2,r2,3440
     ff4:	10800017 	ldw	r2,0(r2)
     ff8:	14000317 	ldw	r16,12(r2)
     ffc:	d1200004 	addi	r4,gp,-32768
    1000:	00007d80 	call	7d8 <head>
    1004:	100d883a 	mov	r6,r2
    1008:	8009883a 	mov	r4,r16
    100c:	01400074 	movhi	r5,1
    1010:	297b3b04 	addi	r5,r5,-4884
    1014:	000f883a 	mov	r7,zero
    1018:	00029280 	call	2928 <fprintf>
    101c:	e03ffc15 	stw	zero,-16(fp)
    1020:	00000306 	br	1030 <enterMonitor+0x1f0>
    1024:	e0bffc17 	ldw	r2,-16(fp)
    1028:	10800044 	addi	r2,r2,1
    102c:	e0bffc15 	stw	r2,-16(fp)
    1030:	e0fffc17 	ldw	r3,-16(fp)
    1034:	00800074 	movhi	r2,1
    1038:	10893dc4 	addi	r2,r2,9463
    103c:	10fff90e 	bge	r2,r3,1024 <enterMonitor+0x1e4>
			exit(1);
    1040:	01000044 	movi	r4,1
    1044:	00028f00 	call	28f0 <exit>
		}
	}
	else {
		monitors[monitorID].timesTaken++;
    1048:	e13fff17 	ldw	r4,-4(fp)
    104c:	00c00074 	movhi	r3,1
    1050:	18ca4004 	addi	r3,r3,10496
    1054:	2004913a 	slli	r2,r4,4
    1058:	10c5883a 	add	r2,r2,r3
    105c:	10800017 	ldw	r2,0(r2)
    1060:	11400044 	addi	r5,r2,1
    1064:	00c00074 	movhi	r3,1
    1068:	18ca4004 	addi	r3,r3,10496
    106c:	2004913a 	slli	r2,r4,4
    1070:	10c5883a 	add	r2,r2,r3
    1074:	11400015 	stw	r5,0(r2)
		monitors[monitorID].takenBy = myID;
    1078:	e0bfff17 	ldw	r2,-4(fp)
    107c:	00c00074 	movhi	r3,1
    1080:	18ca4004 	addi	r3,r3,10496
    1084:	1004913a 	slli	r2,r2,4
    1088:	10c5883a 	add	r2,r2,r3
    108c:	10c00104 	addi	r3,r2,4
    1090:	e0bffe17 	ldw	r2,-8(fp)
    1094:	18800015 	stw	r2,0(r3)
	}

	/* push the new call onto the call stack */
	processes[myID].monitors[++processes[myID].currentMonitor] = monitorID;
    1098:	e1bffe17 	ldw	r6,-8(fp)
    109c:	e13ffe17 	ldw	r4,-8(fp)
    10a0:	00c00074 	movhi	r3,1
    10a4:	18ca6804 	addi	r3,r3,10656
    10a8:	20800f24 	muli	r2,r4,60
    10ac:	10c5883a 	add	r2,r2,r3
    10b0:	10800204 	addi	r2,r2,8
    10b4:	10800017 	ldw	r2,0(r2)
    10b8:	11400044 	addi	r5,r2,1
    10bc:	00c00074 	movhi	r3,1
    10c0:	18ca6804 	addi	r3,r3,10656
    10c4:	20800f24 	muli	r2,r4,60
    10c8:	10c5883a 	add	r2,r2,r3
    10cc:	10800204 	addi	r2,r2,8
    10d0:	11400015 	stw	r5,0(r2)
    10d4:	00c00074 	movhi	r3,1
    10d8:	18ca6804 	addi	r3,r3,10656
    10dc:	20800f24 	muli	r2,r4,60
    10e0:	10c5883a 	add	r2,r2,r3
    10e4:	10800204 	addi	r2,r2,8
    10e8:	10c00017 	ldw	r3,0(r2)
    10ec:	01000074 	movhi	r4,1
    10f0:	210a6804 	addi	r4,r4,10656
    10f4:	308003e4 	muli	r2,r6,15
    10f8:	10c5883a 	add	r2,r2,r3
    10fc:	1085883a 	add	r2,r2,r2
    1100:	1085883a 	add	r2,r2,r2
    1104:	1105883a 	add	r2,r2,r4
    1108:	10c00304 	addi	r3,r2,12
    110c:	e0bfff17 	ldw	r2,-4(fp)
    1110:	18800015 	stw	r2,0(r3)

	allowInterrupts();
    1114:	00027980 	call	2798 <allowInterrupts>
}
    1118:	e037883a 	mov	sp,fp
    111c:	dfc00217 	ldw	ra,8(sp)
    1120:	df000117 	ldw	fp,4(sp)
    1124:	dc000017 	ldw	r16,0(sp)
    1128:	dec00304 	addi	sp,sp,12
    112c:	f800283a 	ret

00001130 <exitMonitor>:

void exitMonitor() {
    1130:	defffa04 	addi	sp,sp,-24
    1134:	dfc00515 	stw	ra,20(sp)
    1138:	df000415 	stw	fp,16(sp)
    113c:	dc000315 	stw	r16,12(sp)
    1140:	df000304 	addi	fp,sp,12
	maskInterrupts();
    1144:	000278c0 	call	278c <maskInterrupts>

	int myID = head(&readyList);
    1148:	d1200004 	addi	r4,gp,-32768
    114c:	00007d80 	call	7d8 <head>
    1150:	e0bfff15 	stw	r2,-4(fp)
	int myMonitor = getCurrentMonitor(myID);
    1154:	e13fff17 	ldw	r4,-4(fp)
    1158:	0000dd40 	call	dd4 <getCurrentMonitor>
    115c:	e0bffe15 	stw	r2,-8(fp)

	if (myMonitor < 0) {
    1160:	e0bffe17 	ldw	r2,-8(fp)
    1164:	1004403a 	cmpge	r2,r2,zero
    1168:	10000e1e 	bne	r2,zero,11a4 <exitMonitor+0x74>
		ERRA("Process %d called exitMonitor outside of a monitor.", myID);
    116c:	00800074 	movhi	r2,1
    1170:	10835c04 	addi	r2,r2,3440
    1174:	10800017 	ldw	r2,0(r2)
    1178:	14000317 	ldw	r16,12(r2)
    117c:	d1200004 	addi	r4,gp,-32768
    1180:	00007d80 	call	7d8 <head>
    1184:	100d883a 	mov	r6,r2
    1188:	8009883a 	mov	r4,r16
    118c:	01400074 	movhi	r5,1
    1190:	297b5304 	addi	r5,r5,-4788
    1194:	e1ffff17 	ldw	r7,-4(fp)
    1198:	00029280 	call	2928 <fprintf>
		exit(1);
    119c:	01000044 	movi	r4,1
    11a0:	00028f00 	call	28f0 <exit>
	}

	/* go backwards in the stack of called monitors */
	processes[myID].currentMonitor--;
    11a4:	e17fff17 	ldw	r5,-4(fp)
    11a8:	00c00074 	movhi	r3,1
    11ac:	18ca6804 	addi	r3,r3,10656
    11b0:	28800f24 	muli	r2,r5,60
    11b4:	10c5883a 	add	r2,r2,r3
    11b8:	10800204 	addi	r2,r2,8
    11bc:	10800017 	ldw	r2,0(r2)
    11c0:	113fffc4 	addi	r4,r2,-1
    11c4:	00c00074 	movhi	r3,1
    11c8:	18ca6804 	addi	r3,r3,10656
    11cc:	28800f24 	muli	r2,r5,60
    11d0:	10c5883a 	add	r2,r2,r3
    11d4:	10800204 	addi	r2,r2,8
    11d8:	11000015 	stw	r4,0(r2)

	if (--monitors[myMonitor].timesTaken == 0) {
    11dc:	e13ffe17 	ldw	r4,-8(fp)
    11e0:	00c00074 	movhi	r3,1
    11e4:	18ca4004 	addi	r3,r3,10496
    11e8:	2004913a 	slli	r2,r4,4
    11ec:	10c5883a 	add	r2,r2,r3
    11f0:	10800017 	ldw	r2,0(r2)
    11f4:	117fffc4 	addi	r5,r2,-1
    11f8:	00c00074 	movhi	r3,1
    11fc:	18ca4004 	addi	r3,r3,10496
    1200:	2004913a 	slli	r2,r4,4
    1204:	10c5883a 	add	r2,r2,r3
    1208:	11400015 	stw	r5,0(r2)
    120c:	00c00074 	movhi	r3,1
    1210:	18ca4004 	addi	r3,r3,10496
    1214:	2004913a 	slli	r2,r4,4
    1218:	10c5883a 	add	r2,r2,r3
    121c:	10800017 	ldw	r2,0(r2)
    1220:	1004c03a 	cmpne	r2,r2,zero
    1224:	10002c1e 	bne	r2,zero,12d8 <exitMonitor+0x1a8>
		/* see if someone is waiting, and if yes, let the next process in */
		if (!isEmpty(&(monitors[myMonitor].entryList))) {
    1228:	e0bffe17 	ldw	r2,-8(fp)
    122c:	1004913a 	slli	r2,r2,4
    1230:	10c00204 	addi	r3,r2,8
    1234:	00800074 	movhi	r2,1
    1238:	108a4004 	addi	r2,r2,10496
    123c:	1889883a 	add	r4,r3,r2
    1240:	00008000 	call	800 <isEmpty>
    1244:	1004c03a 	cmpne	r2,r2,zero
    1248:	10001b1e 	bne	r2,zero,12b8 <exitMonitor+0x188>
			int pid = removeHead(&(monitors[myMonitor].entryList));
    124c:	e0bffe17 	ldw	r2,-8(fp)
    1250:	1004913a 	slli	r2,r2,4
    1254:	10c00204 	addi	r3,r2,8
    1258:	00800074 	movhi	r2,1
    125c:	108a4004 	addi	r2,r2,10496
    1260:	1889883a 	add	r4,r3,r2
    1264:	00006840 	call	684 <removeHead>
    1268:	e0bffd15 	stw	r2,-12(fp)
			addLast(&readyList, pid);
    126c:	d1200004 	addi	r4,gp,-32768
    1270:	e17ffd17 	ldw	r5,-12(fp)
    1274:	00005080 	call	508 <addLast>
			monitors[myMonitor].timesTaken = 1;
    1278:	e0bffe17 	ldw	r2,-8(fp)
    127c:	00c00074 	movhi	r3,1
    1280:	18ca4004 	addi	r3,r3,10496
    1284:	1004913a 	slli	r2,r2,4
    1288:	10c7883a 	add	r3,r2,r3
    128c:	00800044 	movi	r2,1
    1290:	18800015 	stw	r2,0(r3)
			monitors[myMonitor].takenBy = pid;
    1294:	e0bffe17 	ldw	r2,-8(fp)
    1298:	00c00074 	movhi	r3,1
    129c:	18ca4004 	addi	r3,r3,10496
    12a0:	1004913a 	slli	r2,r2,4
    12a4:	10c5883a 	add	r2,r2,r3
    12a8:	10c00104 	addi	r3,r2,4
    12ac:	e0bffd17 	ldw	r2,-12(fp)
    12b0:	18800015 	stw	r2,0(r3)
    12b4:	00000806 	br	12d8 <exitMonitor+0x1a8>
		} else {
			monitors[myMonitor].takenBy = -1;
    12b8:	e0bffe17 	ldw	r2,-8(fp)
    12bc:	00c00074 	movhi	r3,1
    12c0:	18ca4004 	addi	r3,r3,10496
    12c4:	1004913a 	slli	r2,r2,4
    12c8:	10c5883a 	add	r2,r2,r3
    12cc:	10c00104 	addi	r3,r2,4
    12d0:	00bfffc4 	movi	r2,-1
    12d4:	18800015 	stw	r2,0(r3)
		}
	}

	allowInterrupts();
    12d8:	00027980 	call	2798 <allowInterrupts>
}
    12dc:	e037883a 	mov	sp,fp
    12e0:	dfc00217 	ldw	ra,8(sp)
    12e4:	df000117 	ldw	fp,4(sp)
    12e8:	dc000017 	ldw	r16,0(sp)
    12ec:	dec00304 	addi	sp,sp,12
    12f0:	f800283a 	ret

000012f4 <notify>:

void notify() {
    12f4:	defffa04 	addi	sp,sp,-24
    12f8:	dfc00515 	stw	ra,20(sp)
    12fc:	df000415 	stw	fp,16(sp)
    1300:	dc000315 	stw	r16,12(sp)
    1304:	df000304 	addi	fp,sp,12
	maskInterrupts();
    1308:	000278c0 	call	278c <maskInterrupts>

	printf("notify: readylist.size = %d", size(&readyList));
    130c:	d1200004 	addi	r4,gp,-32768
    1310:	00006200 	call	620 <size>
    1314:	100b883a 	mov	r5,r2
    1318:	01000074 	movhi	r4,1
    131c:	213b6404 	addi	r4,r4,-4720
    1320:	00030f00 	call	30f0 <printf>

	int myID = head(&readyList);
    1324:	d1200004 	addi	r4,gp,-32768
    1328:	00007d80 	call	7d8 <head>
    132c:	e0bfff15 	stw	r2,-4(fp)
	int myMonitor = getCurrentMonitor(myID);
    1330:	e13fff17 	ldw	r4,-4(fp)
    1334:	0000dd40 	call	dd4 <getCurrentMonitor>
    1338:	e0bffe15 	stw	r2,-8(fp)

	if (myMonitor < 0) {
    133c:	e0bffe17 	ldw	r2,-8(fp)
    1340:	1004403a 	cmpge	r2,r2,zero
    1344:	10000e1e 	bne	r2,zero,1380 <notify+0x8c>
		ERRA("Process %d called notify outside of a monitor.", myID);
    1348:	00800074 	movhi	r2,1
    134c:	10835c04 	addi	r2,r2,3440
    1350:	10800017 	ldw	r2,0(r2)
    1354:	14000317 	ldw	r16,12(r2)
    1358:	d1200004 	addi	r4,gp,-32768
    135c:	00007d80 	call	7d8 <head>
    1360:	100d883a 	mov	r6,r2
    1364:	8009883a 	mov	r4,r16
    1368:	01400074 	movhi	r5,1
    136c:	297b6b04 	addi	r5,r5,-4692
    1370:	e1ffff17 	ldw	r7,-4(fp)
    1374:	00029280 	call	2928 <fprintf>
		exit(1);
    1378:	01000044 	movi	r4,1
    137c:	00028f00 	call	28f0 <exit>
	}

	if (!isEmpty(&(monitors[myMonitor].waitingList))) {
    1380:	e0bffe17 	ldw	r2,-8(fp)
    1384:	1004913a 	slli	r2,r2,4
    1388:	10c00304 	addi	r3,r2,12
    138c:	00800074 	movhi	r2,1
    1390:	108a4004 	addi	r2,r2,10496
    1394:	1889883a 	add	r4,r3,r2
    1398:	00008000 	call	800 <isEmpty>
    139c:	1004c03a 	cmpne	r2,r2,zero
    13a0:	1000171e 	bne	r2,zero,1400 <notify+0x10c>
		int pid = removeHead(&monitors[myMonitor].waitingList);
    13a4:	e0bffe17 	ldw	r2,-8(fp)
    13a8:	1004913a 	slli	r2,r2,4
    13ac:	10c00304 	addi	r3,r2,12
    13b0:	00800074 	movhi	r2,1
    13b4:	108a4004 	addi	r2,r2,10496
    13b8:	1889883a 	add	r4,r3,r2
    13bc:	00006840 	call	684 <removeHead>
    13c0:	e0bffd15 	stw	r2,-12(fp)
		timedWaiting[pid] = 0;
    13c4:	e0bffd17 	ldw	r2,-12(fp)
    13c8:	00c00074 	movhi	r3,1
    13cc:	18ca2c04 	addi	r3,r3,10416
    13d0:	1085883a 	add	r2,r2,r2
    13d4:	1085883a 	add	r2,r2,r2
    13d8:	10c5883a 	add	r2,r2,r3
    13dc:	10000015 	stw	zero,0(r2)
		addLast(&monitors[myMonitor].entryList, pid);
    13e0:	e0bffe17 	ldw	r2,-8(fp)
    13e4:	1004913a 	slli	r2,r2,4
    13e8:	10c00204 	addi	r3,r2,8
    13ec:	00800074 	movhi	r2,1
    13f0:	108a4004 	addi	r2,r2,10496
    13f4:	1889883a 	add	r4,r3,r2
    13f8:	e17ffd17 	ldw	r5,-12(fp)
    13fc:	00005080 	call	508 <addLast>
	}

	allowInterrupts();
    1400:	00027980 	call	2798 <allowInterrupts>
}
    1404:	e037883a 	mov	sp,fp
    1408:	dfc00217 	ldw	ra,8(sp)
    140c:	df000117 	ldw	fp,4(sp)
    1410:	dc000017 	ldw	r16,0(sp)
    1414:	dec00304 	addi	sp,sp,12
    1418:	f800283a 	ret

0000141c <notifyAll>:

void notifyAll() {
    141c:	defffa04 	addi	sp,sp,-24
    1420:	dfc00515 	stw	ra,20(sp)
    1424:	df000415 	stw	fp,16(sp)
    1428:	dc000315 	stw	r16,12(sp)
    142c:	df000304 	addi	fp,sp,12
	maskInterrupts();
    1430:	000278c0 	call	278c <maskInterrupts>

	int myID = head(&readyList);
    1434:	d1200004 	addi	r4,gp,-32768
    1438:	00007d80 	call	7d8 <head>
    143c:	e0bfff15 	stw	r2,-4(fp)
	int myMonitor = getCurrentMonitor(myID);
    1440:	e13fff17 	ldw	r4,-4(fp)
    1444:	0000dd40 	call	dd4 <getCurrentMonitor>
    1448:	e0bffe15 	stw	r2,-8(fp)

	if (myMonitor < 0) {
    144c:	e0bffe17 	ldw	r2,-8(fp)
    1450:	1004403a 	cmpge	r2,r2,zero
    1454:	1000251e 	bne	r2,zero,14ec <notifyAll+0xd0>
		ERRA("Process %d called notify outside of a monitor.", myID);
    1458:	00800074 	movhi	r2,1
    145c:	10835c04 	addi	r2,r2,3440
    1460:	10800017 	ldw	r2,0(r2)
    1464:	14000317 	ldw	r16,12(r2)
    1468:	d1200004 	addi	r4,gp,-32768
    146c:	00007d80 	call	7d8 <head>
    1470:	100d883a 	mov	r6,r2
    1474:	8009883a 	mov	r4,r16
    1478:	01400074 	movhi	r5,1
    147c:	297b6b04 	addi	r5,r5,-4692
    1480:	e1ffff17 	ldw	r7,-4(fp)
    1484:	00029280 	call	2928 <fprintf>
		exit(1);
    1488:	01000044 	movi	r4,1
    148c:	00028f00 	call	28f0 <exit>
	}

	while (!isEmpty(&(monitors[myMonitor].waitingList))) {
		int pid = removeHead(&monitors[myMonitor].waitingList);
    1490:	e0bffe17 	ldw	r2,-8(fp)
    1494:	1004913a 	slli	r2,r2,4
    1498:	10c00304 	addi	r3,r2,12
    149c:	00800074 	movhi	r2,1
    14a0:	108a4004 	addi	r2,r2,10496
    14a4:	1889883a 	add	r4,r3,r2
    14a8:	00006840 	call	684 <removeHead>
    14ac:	e0bffd15 	stw	r2,-12(fp)
		timedWaiting[pid] = 0;
    14b0:	e0bffd17 	ldw	r2,-12(fp)
    14b4:	00c00074 	movhi	r3,1
    14b8:	18ca2c04 	addi	r3,r3,10416
    14bc:	1085883a 	add	r2,r2,r2
    14c0:	1085883a 	add	r2,r2,r2
    14c4:	10c5883a 	add	r2,r2,r3
    14c8:	10000015 	stw	zero,0(r2)
		addLast(&monitors[myMonitor].entryList, pid);
    14cc:	e0bffe17 	ldw	r2,-8(fp)
    14d0:	1004913a 	slli	r2,r2,4
    14d4:	10c00204 	addi	r3,r2,8
    14d8:	00800074 	movhi	r2,1
    14dc:	108a4004 	addi	r2,r2,10496
    14e0:	1889883a 	add	r4,r3,r2
    14e4:	e17ffd17 	ldw	r5,-12(fp)
    14e8:	00005080 	call	508 <addLast>
	if (myMonitor < 0) {
		ERRA("Process %d called notify outside of a monitor.", myID);
		exit(1);
	}

	while (!isEmpty(&(monitors[myMonitor].waitingList))) {
    14ec:	e0bffe17 	ldw	r2,-8(fp)
    14f0:	1004913a 	slli	r2,r2,4
    14f4:	10c00304 	addi	r3,r2,12
    14f8:	00800074 	movhi	r2,1
    14fc:	108a4004 	addi	r2,r2,10496
    1500:	1889883a 	add	r4,r3,r2
    1504:	00008000 	call	800 <isEmpty>
    1508:	1005003a 	cmpeq	r2,r2,zero
    150c:	103fe01e 	bne	r2,zero,1490 <notifyAll+0x74>
		int pid = removeHead(&monitors[myMonitor].waitingList);
		timedWaiting[pid] = 0;
		addLast(&monitors[myMonitor].entryList, pid);
	}
	allowInterrupts();
    1510:	00027980 	call	2798 <allowInterrupts>
}
    1514:	e037883a 	mov	sp,fp
    1518:	dfc00217 	ldw	ra,8(sp)
    151c:	df000117 	ldw	fp,4(sp)
    1520:	dc000017 	ldw	r16,0(sp)
    1524:	dec00304 	addi	sp,sp,12
    1528:	f800283a 	ret

0000152c <idle_code>:


void idle_code() {
    152c:	defffe04 	addi	sp,sp,-8
    1530:	df000115 	stw	fp,4(sp)
    1534:	df000104 	addi	fp,sp,4
	unsigned int the_answer = 42;
    1538:	00800a84 	movi	r2,42
    153c:	e0bfff15 	stw	r2,-4(fp)
	while(the_answer == 42) {
    1540:	e0bfff17 	ldw	r2,-4(fp)
    1544:	10800aa0 	cmpeqi	r2,r2,42
    1548:	103ffd1e 	bne	r2,zero,1540 <idle_code+0x14>
		// Everything is fine
	}
}
    154c:	e037883a 	mov	sp,fp
    1550:	df000017 	ldw	fp,0(sp)
    1554:	dec00104 	addi	sp,sp,4
    1558:	f800283a 	ret

0000155c <createIdle>:
int createIdle() {
    155c:	defffd04 	addi	sp,sp,-12
    1560:	dfc00215 	stw	ra,8(sp)
    1564:	df000115 	stw	fp,4(sp)
    1568:	df000104 	addi	fp,sp,4
    int result = createSpecialProcess(&idle_code);
    156c:	01000034 	movhi	r4,0
    1570:	21054b04 	addi	r4,r4,5420
    1574:	00009fc0 	call	9fc <createSpecialProcess>
    1578:	e0bfff15 	stw	r2,-4(fp)
    return result;
    157c:	e0bfff17 	ldw	r2,-4(fp)
}
    1580:	e037883a 	mov	sp,fp
    1584:	dfc00117 	ldw	ra,4(sp)
    1588:	df000017 	ldw	fp,0(sp)
    158c:	dec00204 	addi	sp,sp,8
    1590:	f800283a 	ret

00001594 <scheduler>:

// Clock process
void scheduler() {
    1594:	defff504 	addi	sp,sp,-44
    1598:	dfc00a15 	stw	ra,40(sp)
    159c:	df000915 	stw	fp,36(sp)
    15a0:	df000904 	addi	fp,sp,36
	maskInterrupts();
    15a4:	000278c0 	call	278c <maskInterrupts>
	int i;

	// Enable clock interrupts
	init_clock();
    15a8:	00004b80 	call	4b8 <init_clock>
	init_button();
    15ac:	00004000 	call	400 <init_button>
	unsigned int time_since_last_commutation = 0;
    15b0:	e03ffd15 	stw	zero,-12(fp)
	while(1) {
		int next_pid = !isEmpty(&readyList) ? head(&readyList) : idle_pid;
    15b4:	d1200004 	addi	r4,gp,-32768
    15b8:	00008000 	call	800 <isEmpty>
    15bc:	1004c03a 	cmpne	r2,r2,zero
    15c0:	1000041e 	bne	r2,zero,15d4 <scheduler+0x40>
    15c4:	d1200004 	addi	r4,gp,-32768
    15c8:	00007d80 	call	7d8 <head>
    15cc:	e0bfff15 	stw	r2,-4(fp)
    15d0:	00000206 	br	15dc <scheduler+0x48>
    15d4:	d0a6bf17 	ldw	r2,-25860(gp)
    15d8:	e0bfff15 	stw	r2,-4(fp)
    15dc:	e0bfff17 	ldw	r2,-4(fp)
    15e0:	e0bffc15 	stw	r2,-16(fp)
		iotransfer(processes[next_pid].p, 0);
    15e4:	e0bffc17 	ldw	r2,-16(fp)
    15e8:	00c00074 	movhi	r3,1
    15ec:	18ca6804 	addi	r3,r3,10656
    15f0:	10800f24 	muli	r2,r2,60
    15f4:	10c5883a 	add	r2,r2,r3
    15f8:	10800104 	addi	r2,r2,4
    15fc:	11000017 	ldw	r4,0(r2)
    1600:	000b883a 	mov	r5,zero
    1604:	000263c0 	call	263c <iotransfer>

		// Rising edge has happened!
		time_since_last_commutation += CLOCK_PERIOD;
    1608:	e0bffd17 	ldw	r2,-12(fp)
    160c:	10800044 	addi	r2,r2,1
    1610:	e0bffd15 	stw	r2,-12(fp)

		/* **********/
		/* CHECK 1  */
		/* **********/
		// Should we switch process? (scheduling part)
		if(time_since_last_commutation > TIME_SLICING_FREQUENCY) {
    1614:	e0bffd17 	ldw	r2,-12(fp)
    1618:	10800570 	cmpltui	r2,r2,21
    161c:	1000071e 	bne	r2,zero,163c <scheduler+0xa8>
			int current = removeHead(&readyList);
    1620:	d1200004 	addi	r4,gp,-32768
    1624:	00006840 	call	684 <removeHead>
    1628:	e0bffa15 	stw	r2,-24(fp)
			addLast(&readyList, current);
    162c:	d1200004 	addi	r4,gp,-32768
    1630:	e17ffa17 	ldw	r5,-24(fp)
    1634:	00005080 	call	508 <addLast>
			time_since_last_commutation = 0;
    1638:	e03ffd15 	stw	zero,-12(fp)
		/* CHECK 2  */
		/* **********/
		/* All the processes that have called timedWait and have not been notified / kicked out
		 * are in the timedWaiting list.
		 * We check one by one that none of them has timed out */
		int dbg_proc_waiting = 0;
    163c:	e03ffb15 	stw	zero,-20(fp)
		for(i = 0; i < MAX_PROC ; ++i) { // considering MAX_PROC is small, not a big performance deal
    1640:	e03ffe15 	stw	zero,-8(fp)
    1644:	00006606 	br	17e0 <scheduler+0x24c>
			if (timedWaiting[i]) {
    1648:	e0bffe17 	ldw	r2,-8(fp)
    164c:	00c00074 	movhi	r3,1
    1650:	18ca2c04 	addi	r3,r3,10416
    1654:	1085883a 	add	r2,r2,r2
    1658:	1085883a 	add	r2,r2,r2
    165c:	10c5883a 	add	r2,r2,r3
    1660:	10800017 	ldw	r2,0(r2)
    1664:	1005003a 	cmpeq	r2,r2,zero
    1668:	10005a1e 	bne	r2,zero,17d4 <scheduler+0x240>
				dbg_proc_waiting++;
    166c:	e0bffb17 	ldw	r2,-20(fp)
    1670:	10800044 	addi	r2,r2,1
    1674:	e0bffb15 	stw	r2,-20(fp)
				int* timeout = &(processes[i].timeout);
    1678:	e0bffe17 	ldw	r2,-8(fp)
    167c:	10800f24 	muli	r2,r2,60
    1680:	10c00e04 	addi	r3,r2,56
    1684:	00800074 	movhi	r2,1
    1688:	108a6804 	addi	r2,r2,10656
    168c:	10c5883a 	add	r2,r2,r3
    1690:	e0bff915 	stw	r2,-28(fp)
				if(*timeout <= 0) {
    1694:	e0bff917 	ldw	r2,-28(fp)
    1698:	10800017 	ldw	r2,0(r2)
    169c:	10800050 	cmplti	r2,r2,1
    16a0:	10004c1e 	bne	r2,zero,17d4 <scheduler+0x240>
					// Here, the process has timed out but was not notified
					continue;
				}

				*timeout -= CLOCK_PERIOD;
    16a4:	e0bff917 	ldw	r2,-28(fp)
    16a8:	10800017 	ldw	r2,0(r2)
    16ac:	10ffffc4 	addi	r3,r2,-1
    16b0:	e0bff917 	ldw	r2,-28(fp)
    16b4:	10c00015 	stw	r3,0(r2)


				if(*timeout <= 0) {
    16b8:	e0bff917 	ldw	r2,-28(fp)
    16bc:	10800017 	ldw	r2,0(r2)
    16c0:	10800048 	cmpgei	r2,r2,1
    16c4:	1000431e 	bne	r2,zero,17d4 <scheduler+0x240>

					/* If it is in a monitor's waiting list, remove from that list */
					int currMon = getCurrentMonitor(i);
    16c8:	e13ffe17 	ldw	r4,-8(fp)
    16cc:	0000dd40 	call	dd4 <getCurrentMonitor>
    16d0:	e0bff815 	stw	r2,-32(fp)
					if (currMon >= 0 && monitors[currMon].takenBy != i) {
    16d4:	e0bff817 	ldw	r2,-32(fp)
    16d8:	1004803a 	cmplt	r2,r2,zero
    16dc:	10003a1e 	bne	r2,zero,17c8 <scheduler+0x234>
    16e0:	e0bff817 	ldw	r2,-32(fp)
    16e4:	00c00074 	movhi	r3,1
    16e8:	18ca4004 	addi	r3,r3,10496
    16ec:	1004913a 	slli	r2,r2,4
    16f0:	10c5883a 	add	r2,r2,r3
    16f4:	10800104 	addi	r2,r2,4
    16f8:	10c00017 	ldw	r3,0(r2)
    16fc:	e0bffe17 	ldw	r2,-8(fp)
    1700:	18803126 	beq	r3,r2,17c8 <scheduler+0x234>
						printf("removed from monitor");
    1704:	01000074 	movhi	r4,1
    1708:	213b7a04 	addi	r4,r4,-4632
    170c:	00030f00 	call	30f0 <printf>

						int* list = &(monitors[currMon].waitingList);
    1710:	e0bff817 	ldw	r2,-32(fp)
    1714:	1004913a 	slli	r2,r2,4
    1718:	10c00304 	addi	r3,r2,12
    171c:	00800074 	movhi	r2,1
    1720:	108a4004 	addi	r2,r2,10496
    1724:	10c5883a 	add	r2,r2,r3
    1728:	e0bff715 	stw	r2,-36(fp)
						removeFromList(list, i);
    172c:	e13ff717 	ldw	r4,-36(fp)
    1730:	e17ffe17 	ldw	r5,-8(fp)
    1734:	00007240 	call	724 <removeFromList>
						if (monitors[currMon].timesTaken > 0) {
    1738:	e0bff817 	ldw	r2,-32(fp)
    173c:	00c00074 	movhi	r3,1
    1740:	18ca4004 	addi	r3,r3,10496
    1744:	1004913a 	slli	r2,r2,4
    1748:	10c5883a 	add	r2,r2,r3
    174c:	10800017 	ldw	r2,0(r2)
    1750:	10800050 	cmplti	r2,r2,1
    1754:	1000091e 	bne	r2,zero,177c <scheduler+0x1e8>
							addLast(&monitors[currMon].entryList, i);
    1758:	e0bff817 	ldw	r2,-32(fp)
    175c:	1004913a 	slli	r2,r2,4
    1760:	10c00204 	addi	r3,r2,8
    1764:	00800074 	movhi	r2,1
    1768:	108a4004 	addi	r2,r2,10496
    176c:	1889883a 	add	r4,r3,r2
    1770:	e17ffe17 	ldw	r5,-8(fp)
    1774:	00005080 	call	508 <addLast>
    1778:	00001606 	br	17d4 <scheduler+0x240>
						} else {
							monitors[currMon].timesTaken = 1;
    177c:	e0bff817 	ldw	r2,-32(fp)
    1780:	00c00074 	movhi	r3,1
    1784:	18ca4004 	addi	r3,r3,10496
    1788:	1004913a 	slli	r2,r2,4
    178c:	10c7883a 	add	r3,r2,r3
    1790:	00800044 	movi	r2,1
    1794:	18800015 	stw	r2,0(r3)
							monitors[currMon].takenBy = i;
    1798:	e0bff817 	ldw	r2,-32(fp)
    179c:	00c00074 	movhi	r3,1
    17a0:	18ca4004 	addi	r3,r3,10496
    17a4:	1004913a 	slli	r2,r2,4
    17a8:	10c5883a 	add	r2,r2,r3
    17ac:	10c00104 	addi	r3,r2,4
    17b0:	e0bffe17 	ldw	r2,-8(fp)
    17b4:	18800015 	stw	r2,0(r3)
							addFirst(&readyList, i);
    17b8:	d1200004 	addi	r4,gp,-32768
    17bc:	e17ffe17 	ldw	r5,-8(fp)
    17c0:	00005d00 	call	5d0 <addFirst>

				if(*timeout <= 0) {

					/* If it is in a monitor's waiting list, remove from that list */
					int currMon = getCurrentMonitor(i);
					if (currMon >= 0 && monitors[currMon].takenBy != i) {
    17c4:	00000306 	br	17d4 <scheduler+0x240>
							monitors[currMon].timesTaken = 1;
							monitors[currMon].takenBy = i;
							addFirst(&readyList, i);
						}
					} else {
						addFirst(&readyList, i);
    17c8:	d1200004 	addi	r4,gp,-32768
    17cc:	e17ffe17 	ldw	r5,-8(fp)
    17d0:	00005d00 	call	5d0 <addFirst>
		/* **********/
		/* All the processes that have called timedWait and have not been notified / kicked out
		 * are in the timedWaiting list.
		 * We check one by one that none of them has timed out */
		int dbg_proc_waiting = 0;
		for(i = 0; i < MAX_PROC ; ++i) { // considering MAX_PROC is small, not a big performance deal
    17d4:	e0bffe17 	ldw	r2,-8(fp)
    17d8:	10800044 	addi	r2,r2,1
    17dc:	e0bffe15 	stw	r2,-8(fp)
    17e0:	e0bffe17 	ldw	r2,-8(fp)
    17e4:	10800290 	cmplti	r2,r2,10
    17e8:	103f971e 	bne	r2,zero,1648 <scheduler+0xb4>
				}

			}
			
		}
	}
    17ec:	003f7106 	br	15b4 <scheduler+0x20>

000017f0 <createScheduler>:
	allowInterrupts();
}
int createScheduler() {
    17f0:	defffd04 	addi	sp,sp,-12
    17f4:	dfc00215 	stw	ra,8(sp)
    17f8:	df000115 	stw	fp,4(sp)
    17fc:	df000104 	addi	fp,sp,4
	int result = createSpecialProcess(&scheduler);
    1800:	01000034 	movhi	r4,0
    1804:	21056504 	addi	r4,r4,5524
    1808:	00009fc0 	call	9fc <createSpecialProcess>
    180c:	e0bfff15 	stw	r2,-4(fp)
	return result;
    1810:	e0bfff17 	ldw	r2,-4(fp)
}
    1814:	e037883a 	mov	sp,fp
    1818:	dfc00117 	ldw	ra,4(sp)
    181c:	df000017 	ldw	fp,0(sp)
    1820:	dec00204 	addi	sp,sp,8
    1824:	f800283a 	ret

00001828 <waitInterrupt>:

void waitInterrupt(int peripherique) {
    1828:	defff804 	addi	sp,sp,-32
    182c:	dfc00715 	stw	ra,28(sp)
    1830:	df000615 	stw	fp,24(sp)
    1834:	dc000515 	stw	r16,20(sp)
    1838:	df000504 	addi	fp,sp,20
    183c:	e13ffe15 	stw	r4,-8(fp)
	maskInterrupts();
    1840:	000278c0 	call	278c <maskInterrupts>

	if(peripherique == 0) {
    1844:	e0bffe17 	ldw	r2,-8(fp)
    1848:	1004c03a 	cmpne	r2,r2,zero
    184c:	1000171e 	bne	r2,zero,18ac <waitInterrupt+0x84>
		ERR("Error, you are not allowed to wait clock interrupts ");
    1850:	00800074 	movhi	r2,1
    1854:	10835c04 	addi	r2,r2,3440
    1858:	10800017 	ldw	r2,0(r2)
    185c:	14000317 	ldw	r16,12(r2)
    1860:	d1200004 	addi	r4,gp,-32768
    1864:	00007d80 	call	7d8 <head>
    1868:	100d883a 	mov	r6,r2
    186c:	8009883a 	mov	r4,r16
    1870:	01400074 	movhi	r5,1
    1874:	297b8004 	addi	r5,r5,-4608
    1878:	000f883a 	mov	r7,zero
    187c:	00029280 	call	2928 <fprintf>
    1880:	e03ffb15 	stw	zero,-20(fp)
    1884:	00000306 	br	1894 <waitInterrupt+0x6c>
    1888:	e0bffb17 	ldw	r2,-20(fp)
    188c:	10800044 	addi	r2,r2,1
    1890:	e0bffb15 	stw	r2,-20(fp)
    1894:	e0fffb17 	ldw	r3,-20(fp)
    1898:	00800074 	movhi	r2,1
    189c:	10893dc4 	addi	r2,r2,9463
    18a0:	10fff90e 	bge	r2,r3,1888 <waitInterrupt+0x60>
		exit(1);
    18a4:	01000044 	movi	r4,1
    18a8:	00028f00 	call	28f0 <exit>
	}
	int caller_pid = removeHead(&readyList);
    18ac:	d1200004 	addi	r4,gp,-32768
    18b0:	00006840 	call	684 <removeHead>
    18b4:	e0bffd15 	stw	r2,-12(fp)

	int next_pid = isEmpty(&readyList) ? idle_pid : head(&readyList);
    18b8:	d1200004 	addi	r4,gp,-32768
    18bc:	00008000 	call	800 <isEmpty>
    18c0:	1004c03a 	cmpne	r2,r2,zero
    18c4:	1000041e 	bne	r2,zero,18d8 <waitInterrupt+0xb0>
    18c8:	d1200004 	addi	r4,gp,-32768
    18cc:	00007d80 	call	7d8 <head>
    18d0:	e0bfff15 	stw	r2,-4(fp)
    18d4:	00000206 	br	18e0 <waitInterrupt+0xb8>
    18d8:	d0a6bf17 	ldw	r2,-25860(gp)
    18dc:	e0bfff15 	stw	r2,-4(fp)
    18e0:	e0bfff17 	ldw	r2,-4(fp)
    18e4:	e0bffc15 	stw	r2,-16(fp)

	iotransfer(processes[next_pid].p, peripherique);
    18e8:	e0bffc17 	ldw	r2,-16(fp)
    18ec:	00c00074 	movhi	r3,1
    18f0:	18ca6804 	addi	r3,r3,10656
    18f4:	10800f24 	muli	r2,r2,60
    18f8:	10c5883a 	add	r2,r2,r3
    18fc:	10800104 	addi	r2,r2,4
    1900:	11000017 	ldw	r4,0(r2)
    1904:	e17ffe17 	ldw	r5,-8(fp)
    1908:	000263c0 	call	263c <iotransfer>

	// When we get back here, an interruption has happened :
	// we regive the CPU to the caller
	addFirst(&readyList, caller_pid);
    190c:	d1200004 	addi	r4,gp,-32768
    1910:	e17ffd17 	ldw	r5,-12(fp)
    1914:	00005d00 	call	5d0 <addFirst>

	allowInterrupts();
    1918:	00027980 	call	2798 <allowInterrupts>
}
    191c:	e037883a 	mov	sp,fp
    1920:	dfc00217 	ldw	ra,8(sp)
    1924:	df000117 	ldw	fp,4(sp)
    1928:	dc000017 	ldw	r16,0(sp)
    192c:	dec00304 	addi	sp,sp,12
    1930:	f800283a 	ret

00001934 <wait>:




void wait() {
    1934:	defffe04 	addi	sp,sp,-8
    1938:	dfc00115 	stw	ra,4(sp)
    193c:	df000015 	stw	fp,0(sp)
    1940:	d839883a 	mov	fp,sp
	maskInterrupts();
    1944:	000278c0 	call	278c <maskInterrupts>

	_wait();
    1948:	00019640 	call	1964 <_wait>

	allowInterrupts();
    194c:	00027980 	call	2798 <allowInterrupts>
}
    1950:	e037883a 	mov	sp,fp
    1954:	dfc00117 	ldw	ra,4(sp)
    1958:	df000017 	ldw	fp,0(sp)
    195c:	dec00204 	addi	sp,sp,8
    1960:	f800283a 	ret

00001964 <_wait>:

void _wait() {
    1964:	defff804 	addi	sp,sp,-32
    1968:	dfc00715 	stw	ra,28(sp)
    196c:	df000615 	stw	fp,24(sp)
    1970:	dc000515 	stw	r16,20(sp)
    1974:	df000504 	addi	fp,sp,20
	int myID = head(&readyList);
    1978:	d1200004 	addi	r4,gp,-32768
    197c:	00007d80 	call	7d8 <head>
    1980:	e0bfff15 	stw	r2,-4(fp)
	int myMonitor = getCurrentMonitor(myID);
    1984:	e13fff17 	ldw	r4,-4(fp)
    1988:	0000dd40 	call	dd4 <getCurrentMonitor>
    198c:	e0bffe15 	stw	r2,-8(fp)
	int myTaken;

	if (myMonitor < 0) {
    1990:	e0bffe17 	ldw	r2,-8(fp)
    1994:	1004403a 	cmpge	r2,r2,zero
    1998:	10000e1e 	bne	r2,zero,19d4 <_wait+0x70>
		ERRA("Process %d called wait outside of a monitor.", myID);
    199c:	00800074 	movhi	r2,1
    19a0:	10835c04 	addi	r2,r2,3440
    19a4:	10800017 	ldw	r2,0(r2)
    19a8:	14000317 	ldw	r16,12(r2)
    19ac:	d1200004 	addi	r4,gp,-32768
    19b0:	00007d80 	call	7d8 <head>
    19b4:	100d883a 	mov	r6,r2
    19b8:	8009883a 	mov	r4,r16
    19bc:	01400074 	movhi	r5,1
    19c0:	297b9104 	addi	r5,r5,-4540
    19c4:	e1ffff17 	ldw	r7,-4(fp)
    19c8:	00029280 	call	2928 <fprintf>
		exit(1);
    19cc:	01000044 	movi	r4,1
    19d0:	00028f00 	call	28f0 <exit>
	}

	removeHead(&readyList);
    19d4:	d1200004 	addi	r4,gp,-32768
    19d8:	00006840 	call	684 <removeHead>
	addLast(&monitors[myMonitor].waitingList, myID);
    19dc:	e0bffe17 	ldw	r2,-8(fp)
    19e0:	1004913a 	slli	r2,r2,4
    19e4:	10c00304 	addi	r3,r2,12
    19e8:	00800074 	movhi	r2,1
    19ec:	108a4004 	addi	r2,r2,10496
    19f0:	1889883a 	add	r4,r3,r2
    19f4:	e17fff17 	ldw	r5,-4(fp)
    19f8:	00005080 	call	508 <addLast>

	/* save timesTaken so we can restore it later */
	myTaken = monitors[myMonitor].timesTaken;
    19fc:	e0bffe17 	ldw	r2,-8(fp)
    1a00:	00c00074 	movhi	r3,1
    1a04:	18ca4004 	addi	r3,r3,10496
    1a08:	1004913a 	slli	r2,r2,4
    1a0c:	10c5883a 	add	r2,r2,r3
    1a10:	10800017 	ldw	r2,0(r2)
    1a14:	e0bffd15 	stw	r2,-12(fp)

	/* let the next process in, if any */
	if (!isEmpty(&(monitors[myMonitor].entryList))) {
    1a18:	e0bffe17 	ldw	r2,-8(fp)
    1a1c:	1004913a 	slli	r2,r2,4
    1a20:	10c00204 	addi	r3,r2,8
    1a24:	00800074 	movhi	r2,1
    1a28:	108a4004 	addi	r2,r2,10496
    1a2c:	1889883a 	add	r4,r3,r2
    1a30:	00008000 	call	800 <isEmpty>
    1a34:	1004c03a 	cmpne	r2,r2,zero
    1a38:	10001b1e 	bne	r2,zero,1aa8 <_wait+0x144>
		int pid = removeHead(&(monitors[myMonitor].entryList));
    1a3c:	e0bffe17 	ldw	r2,-8(fp)
    1a40:	1004913a 	slli	r2,r2,4
    1a44:	10c00204 	addi	r3,r2,8
    1a48:	00800074 	movhi	r2,1
    1a4c:	108a4004 	addi	r2,r2,10496
    1a50:	1889883a 	add	r4,r3,r2
    1a54:	00006840 	call	684 <removeHead>
    1a58:	e0bffc15 	stw	r2,-16(fp)
		addLast(&readyList, pid);
    1a5c:	d1200004 	addi	r4,gp,-32768
    1a60:	e17ffc17 	ldw	r5,-16(fp)
    1a64:	00005080 	call	508 <addLast>
		monitors[myMonitor].timesTaken = 1;
    1a68:	e0bffe17 	ldw	r2,-8(fp)
    1a6c:	00c00074 	movhi	r3,1
    1a70:	18ca4004 	addi	r3,r3,10496
    1a74:	1004913a 	slli	r2,r2,4
    1a78:	10c7883a 	add	r3,r2,r3
    1a7c:	00800044 	movi	r2,1
    1a80:	18800015 	stw	r2,0(r3)
		monitors[myMonitor].takenBy = pid;
    1a84:	e0bffe17 	ldw	r2,-8(fp)
    1a88:	00c00074 	movhi	r3,1
    1a8c:	18ca4004 	addi	r3,r3,10496
    1a90:	1004913a 	slli	r2,r2,4
    1a94:	10c5883a 	add	r2,r2,r3
    1a98:	10c00104 	addi	r3,r2,4
    1a9c:	e0bffc17 	ldw	r2,-16(fp)
    1aa0:	18800015 	stw	r2,0(r3)
    1aa4:	00000e06 	br	1ae0 <_wait+0x17c>
	} else {
		monitors[myMonitor].timesTaken = 0;
    1aa8:	e0bffe17 	ldw	r2,-8(fp)
    1aac:	00c00074 	movhi	r3,1
    1ab0:	18ca4004 	addi	r3,r3,10496
    1ab4:	1004913a 	slli	r2,r2,4
    1ab8:	10c5883a 	add	r2,r2,r3
    1abc:	10000015 	stw	zero,0(r2)
		monitors[myMonitor].takenBy = -1;
    1ac0:	e0bffe17 	ldw	r2,-8(fp)
    1ac4:	00c00074 	movhi	r3,1
    1ac8:	18ca4004 	addi	r3,r3,10496
    1acc:	1004913a 	slli	r2,r2,4
    1ad0:	10c5883a 	add	r2,r2,r3
    1ad4:	10c00104 	addi	r3,r2,4
    1ad8:	00bfffc4 	movi	r2,-1
    1adc:	18800015 	stw	r2,0(r3)
	}
	checkAndTransfer();
    1ae0:	0000bc80 	call	bc8 <checkAndTransfer>

	/* I am woken up by exitMonitor -- check if the monitor state is consistent */
	if ((monitors[myMonitor].timesTaken != 1) || (monitors[myMonitor].takenBy != myID)) {
    1ae4:	e0bffe17 	ldw	r2,-8(fp)
    1ae8:	00c00074 	movhi	r3,1
    1aec:	18ca4004 	addi	r3,r3,10496
    1af0:	1004913a 	slli	r2,r2,4
    1af4:	10c5883a 	add	r2,r2,r3
    1af8:	10800017 	ldw	r2,0(r2)
    1afc:	10800058 	cmpnei	r2,r2,1
    1b00:	1000091e 	bne	r2,zero,1b28 <_wait+0x1c4>
    1b04:	e0bffe17 	ldw	r2,-8(fp)
    1b08:	00c00074 	movhi	r3,1
    1b0c:	18ca4004 	addi	r3,r3,10496
    1b10:	1004913a 	slli	r2,r2,4
    1b14:	10c5883a 	add	r2,r2,r3
    1b18:	10800104 	addi	r2,r2,4
    1b1c:	10c00017 	ldw	r3,0(r2)
    1b20:	e0bfff17 	ldw	r2,-4(fp)
    1b24:	18801726 	beq	r3,r2,1b84 <_wait+0x220>
		ERR("The kernel has performed an illegal operation. Please contact customer support.");
    1b28:	00800074 	movhi	r2,1
    1b2c:	10835c04 	addi	r2,r2,3440
    1b30:	10800017 	ldw	r2,0(r2)
    1b34:	14000317 	ldw	r16,12(r2)
    1b38:	d1200004 	addi	r4,gp,-32768
    1b3c:	00007d80 	call	7d8 <head>
    1b40:	100d883a 	mov	r6,r2
    1b44:	8009883a 	mov	r4,r16
    1b48:	01400074 	movhi	r5,1
    1b4c:	297b3b04 	addi	r5,r5,-4884
    1b50:	000f883a 	mov	r7,zero
    1b54:	00029280 	call	2928 <fprintf>
    1b58:	e03ffb15 	stw	zero,-20(fp)
    1b5c:	00000306 	br	1b6c <_wait+0x208>
    1b60:	e0bffb17 	ldw	r2,-20(fp)
    1b64:	10800044 	addi	r2,r2,1
    1b68:	e0bffb15 	stw	r2,-20(fp)
    1b6c:	e0fffb17 	ldw	r3,-20(fp)
    1b70:	00800074 	movhi	r2,1
    1b74:	10893dc4 	addi	r2,r2,9463
    1b78:	10fff90e 	bge	r2,r3,1b60 <_wait+0x1fc>
		exit(1);
    1b7c:	01000044 	movi	r4,1
    1b80:	00028f00 	call	28f0 <exit>
	}

	/* we're back, restore timesTaken */
	monitors[myMonitor].timesTaken = myTaken;
    1b84:	e0bffe17 	ldw	r2,-8(fp)
    1b88:	00c00074 	movhi	r3,1
    1b8c:	18ca4004 	addi	r3,r3,10496
    1b90:	1004913a 	slli	r2,r2,4
    1b94:	10c7883a 	add	r3,r2,r3
    1b98:	e0bffd17 	ldw	r2,-12(fp)
    1b9c:	18800015 	stw	r2,0(r3)
}
    1ba0:	e037883a 	mov	sp,fp
    1ba4:	dfc00217 	ldw	ra,8(sp)
    1ba8:	df000117 	ldw	fp,4(sp)
    1bac:	dc000017 	ldw	r16,0(sp)
    1bb0:	dec00304 	addi	sp,sp,12
    1bb4:	f800283a 	ret

00001bb8 <timedWait>:

int timedWait(int time) {
    1bb8:	defff904 	addi	sp,sp,-28
    1bbc:	dfc00615 	stw	ra,24(sp)
    1bc0:	df000515 	stw	fp,20(sp)
    1bc4:	dc000415 	stw	r16,16(sp)
    1bc8:	df000404 	addi	fp,sp,16
    1bcc:	e13fff15 	stw	r4,-4(fp)
	maskInterrupts();
    1bd0:	000278c0 	call	278c <maskInterrupts>
	
	if(time < 0) {
    1bd4:	e0bfff17 	ldw	r2,-4(fp)
    1bd8:	1004403a 	cmpge	r2,r2,zero
    1bdc:	1000171e 	bne	r2,zero,1c3c <timedWait+0x84>
		ERR("[TimedWait] Please provide a valid timeout");
    1be0:	00800074 	movhi	r2,1
    1be4:	10835c04 	addi	r2,r2,3440
    1be8:	10800017 	ldw	r2,0(r2)
    1bec:	14000317 	ldw	r16,12(r2)
    1bf0:	d1200004 	addi	r4,gp,-32768
    1bf4:	00007d80 	call	7d8 <head>
    1bf8:	100d883a 	mov	r6,r2
    1bfc:	8009883a 	mov	r4,r16
    1c00:	01400074 	movhi	r5,1
    1c04:	297ba004 	addi	r5,r5,-4480
    1c08:	000f883a 	mov	r7,zero
    1c0c:	00029280 	call	2928 <fprintf>
    1c10:	e03ffc15 	stw	zero,-16(fp)
    1c14:	00000306 	br	1c24 <timedWait+0x6c>
    1c18:	e0bffc17 	ldw	r2,-16(fp)
    1c1c:	10800044 	addi	r2,r2,1
    1c20:	e0bffc15 	stw	r2,-16(fp)
    1c24:	e0fffc17 	ldw	r3,-16(fp)
    1c28:	00800074 	movhi	r2,1
    1c2c:	10893dc4 	addi	r2,r2,9463
    1c30:	10fff90e 	bge	r2,r3,1c18 <timedWait+0x60>
		exit(1);
    1c34:	01000044 	movi	r4,1
    1c38:	00028f00 	call	28f0 <exit>
	}
	
	int myPid = head(&readyList);
    1c3c:	d1200004 	addi	r4,gp,-32768
    1c40:	00007d80 	call	7d8 <head>
    1c44:	e0bffe15 	stw	r2,-8(fp)
	int returnValue = 1;
    1c48:	00800044 	movi	r2,1
    1c4c:	e0bffd15 	stw	r2,-12(fp)

	// Mark that the process is waiting
	processes[myPid].timeout = time;
    1c50:	e0bffe17 	ldw	r2,-8(fp)
    1c54:	00c00074 	movhi	r3,1
    1c58:	18ca6804 	addi	r3,r3,10656
    1c5c:	10800f24 	muli	r2,r2,60
    1c60:	10c5883a 	add	r2,r2,r3
    1c64:	10c00e04 	addi	r3,r2,56
    1c68:	e0bfff17 	ldw	r2,-4(fp)
    1c6c:	18800015 	stw	r2,0(r3)
	timedWaiting[myPid] = 1;
    1c70:	e0bffe17 	ldw	r2,-8(fp)
    1c74:	00c00074 	movhi	r3,1
    1c78:	18ca2c04 	addi	r3,r3,10416
    1c7c:	1085883a 	add	r2,r2,r2
    1c80:	1085883a 	add	r2,r2,r2
    1c84:	10c7883a 	add	r3,r2,r3
    1c88:	00800044 	movi	r2,1
    1c8c:	18800015 	stw	r2,0(r3)

	wait();
    1c90:	00019340 	call	1934 <wait>
	
	if(timedWaiting[myPid] != 0) {
    1c94:	e0bffe17 	ldw	r2,-8(fp)
    1c98:	00c00074 	movhi	r3,1
    1c9c:	18ca2c04 	addi	r3,r3,10416
    1ca0:	1085883a 	add	r2,r2,r2
    1ca4:	1085883a 	add	r2,r2,r2
    1ca8:	10c5883a 	add	r2,r2,r3
    1cac:	10800017 	ldw	r2,0(r2)
    1cb0:	1005003a 	cmpeq	r2,r2,zero
    1cb4:	1000081e 	bne	r2,zero,1cd8 <timedWait+0x120>
		returnValue = 0;
    1cb8:	e03ffd15 	stw	zero,-12(fp)
		timedWaiting[myPid] = 0;
    1cbc:	e0bffe17 	ldw	r2,-8(fp)
    1cc0:	00c00074 	movhi	r3,1
    1cc4:	18ca2c04 	addi	r3,r3,10416
    1cc8:	1085883a 	add	r2,r2,r2
    1ccc:	1085883a 	add	r2,r2,r2
    1cd0:	10c5883a 	add	r2,r2,r3
    1cd4:	10000015 	stw	zero,0(r2)
	}
	
	allowInterrupts();
    1cd8:	00027980 	call	2798 <allowInterrupts>
	
	return returnValue;
    1cdc:	e0bffd17 	ldw	r2,-12(fp)
}
    1ce0:	e037883a 	mov	sp,fp
    1ce4:	dfc00217 	ldw	ra,8(sp)
    1ce8:	df000117 	ldw	fp,4(sp)
    1cec:	dc000017 	ldw	r16,0(sp)
    1cf0:	dec00304 	addi	sp,sp,12
    1cf4:	f800283a 	ret

00001cf8 <sleep>:

void sleep(int time) {
    1cf8:	defffa04 	addi	sp,sp,-24
    1cfc:	dfc00515 	stw	ra,20(sp)
    1d00:	df000415 	stw	fp,16(sp)
    1d04:	dc000315 	stw	r16,12(sp)
    1d08:	df000304 	addi	fp,sp,12
    1d0c:	e13fff15 	stw	r4,-4(fp)
	maskInterrupts();
    1d10:	000278c0 	call	278c <maskInterrupts>

	if(time < 0) {
    1d14:	e0bfff17 	ldw	r2,-4(fp)
    1d18:	1004403a 	cmpge	r2,r2,zero
    1d1c:	1000171e 	bne	r2,zero,1d7c <sleep+0x84>
		ERR("[sleep] Please provide a valid timeout");
    1d20:	00800074 	movhi	r2,1
    1d24:	10835c04 	addi	r2,r2,3440
    1d28:	10800017 	ldw	r2,0(r2)
    1d2c:	14000317 	ldw	r16,12(r2)
    1d30:	d1200004 	addi	r4,gp,-32768
    1d34:	00007d80 	call	7d8 <head>
    1d38:	100d883a 	mov	r6,r2
    1d3c:	8009883a 	mov	r4,r16
    1d40:	01400074 	movhi	r5,1
    1d44:	297bae04 	addi	r5,r5,-4424
    1d48:	000f883a 	mov	r7,zero
    1d4c:	00029280 	call	2928 <fprintf>
    1d50:	e03ffd15 	stw	zero,-12(fp)
    1d54:	00000306 	br	1d64 <sleep+0x6c>
    1d58:	e0bffd17 	ldw	r2,-12(fp)
    1d5c:	10800044 	addi	r2,r2,1
    1d60:	e0bffd15 	stw	r2,-12(fp)
    1d64:	e0fffd17 	ldw	r3,-12(fp)
    1d68:	00800074 	movhi	r2,1
    1d6c:	10893dc4 	addi	r2,r2,9463
    1d70:	10fff90e 	bge	r2,r3,1d58 <sleep+0x60>
		exit(1);
    1d74:	01000044 	movi	r4,1
    1d78:	00028f00 	call	28f0 <exit>
	}

	int myPid = removeHead(&readyList);
    1d7c:	d1200004 	addi	r4,gp,-32768
    1d80:	00006840 	call	684 <removeHead>
    1d84:	e0bffe15 	stw	r2,-8(fp)

	timedWaiting[myPid] = 1;
    1d88:	e0bffe17 	ldw	r2,-8(fp)
    1d8c:	00c00074 	movhi	r3,1
    1d90:	18ca2c04 	addi	r3,r3,10416
    1d94:	1085883a 	add	r2,r2,r2
    1d98:	1085883a 	add	r2,r2,r2
    1d9c:	10c7883a 	add	r3,r2,r3
    1da0:	00800044 	movi	r2,1
    1da4:	18800015 	stw	r2,0(r3)
	processes[myPid].timeout = time;
    1da8:	e0bffe17 	ldw	r2,-8(fp)
    1dac:	00c00074 	movhi	r3,1
    1db0:	18ca6804 	addi	r3,r3,10656
    1db4:	10800f24 	muli	r2,r2,60
    1db8:	10c5883a 	add	r2,r2,r3
    1dbc:	10c00e04 	addi	r3,r2,56
    1dc0:	e0bfff17 	ldw	r2,-4(fp)
    1dc4:	18800015 	stw	r2,0(r3)

	if ( isEmpty(&readyList)) {
    1dc8:	d1200004 	addi	r4,gp,-32768
    1dcc:	00008000 	call	800 <isEmpty>
    1dd0:	1005003a 	cmpeq	r2,r2,zero
    1dd4:	1000091e 	bne	r2,zero,1dfc <sleep+0x104>
		transfer(processes[idle_pid].p);
    1dd8:	d0a6bf17 	ldw	r2,-25860(gp)
    1ddc:	00c00074 	movhi	r3,1
    1de0:	18ca6804 	addi	r3,r3,10656
    1de4:	10800f24 	muli	r2,r2,60
    1de8:	10c5883a 	add	r2,r2,r3
    1dec:	10800104 	addi	r2,r2,4
    1df0:	11000017 	ldw	r4,0(r2)
    1df4:	00025f00 	call	25f0 <transfer>
    1df8:	00000906 	br	1e20 <sleep+0x128>
	} else {
		transfer(processes[head(&readyList)].p);
    1dfc:	d1200004 	addi	r4,gp,-32768
    1e00:	00007d80 	call	7d8 <head>
    1e04:	00c00074 	movhi	r3,1
    1e08:	18ca6804 	addi	r3,r3,10656
    1e0c:	10800f24 	muli	r2,r2,60
    1e10:	10c5883a 	add	r2,r2,r3
    1e14:	10800104 	addi	r2,r2,4
    1e18:	11000017 	ldw	r4,0(r2)
    1e1c:	00025f00 	call	25f0 <transfer>
	}
	//timedWaiting[myPid] = 0;

	allowInterrupts();
    1e20:	00027980 	call	2798 <allowInterrupts>
}
    1e24:	e037883a 	mov	sp,fp
    1e28:	dfc00217 	ldw	ra,8(sp)
    1e2c:	df000117 	ldw	fp,4(sp)
    1e30:	dc000017 	ldw	r16,0(sp)
    1e34:	dec00304 	addi	sp,sp,12
    1e38:	f800283a 	ret

00001e3c <start>:
void start(){
    1e3c:	defffc04 	addi	sp,sp,-16
    1e40:	dfc00315 	stw	ra,12(sp)
    1e44:	df000215 	stw	fp,8(sp)
    1e48:	dc000115 	stw	r16,4(sp)
    1e4c:	df000104 	addi	fp,sp,4

	if(isEmpty(&readyList)) {
    1e50:	d1200004 	addi	r4,gp,-32768
    1e54:	00008000 	call	800 <isEmpty>
    1e58:	1005003a 	cmpeq	r2,r2,zero
    1e5c:	1000171e 	bne	r2,zero,1ebc <start+0x80>
		ERR("No processes in the ready list! Exiting...");
    1e60:	00800074 	movhi	r2,1
    1e64:	10835c04 	addi	r2,r2,3440
    1e68:	10800017 	ldw	r2,0(r2)
    1e6c:	14000317 	ldw	r16,12(r2)
    1e70:	d1200004 	addi	r4,gp,-32768
    1e74:	00007d80 	call	7d8 <head>
    1e78:	100d883a 	mov	r6,r2
    1e7c:	8009883a 	mov	r4,r16
    1e80:	01400074 	movhi	r5,1
    1e84:	297bbb04 	addi	r5,r5,-4372
    1e88:	000f883a 	mov	r7,zero
    1e8c:	00029280 	call	2928 <fprintf>
    1e90:	e03fff15 	stw	zero,-4(fp)
    1e94:	00000306 	br	1ea4 <start+0x68>
    1e98:	e0bfff17 	ldw	r2,-4(fp)
    1e9c:	10800044 	addi	r2,r2,1
    1ea0:	e0bfff15 	stw	r2,-4(fp)
    1ea4:	e0ffff17 	ldw	r3,-4(fp)
    1ea8:	00800074 	movhi	r2,1
    1eac:	10893dc4 	addi	r2,r2,9463
    1eb0:	10fff90e 	bge	r2,r3,1e98 <start+0x5c>
		exit(1);
    1eb4:	01000044 	movi	r4,1
    1eb8:	00028f00 	call	28f0 <exit>
	}
	DPRINT("Starting kernel...");
    1ebc:	d1200004 	addi	r4,gp,-32768
    1ec0:	00007d80 	call	7d8 <head>
    1ec4:	100b883a 	mov	r5,r2
    1ec8:	01000074 	movhi	r4,1
    1ecc:	213bc904 	addi	r4,r4,-4316
    1ed0:	000d883a 	mov	r6,zero
    1ed4:	00030f00 	call	30f0 <printf>

	idle_pid = createIdle();
    1ed8:	000155c0 	call	155c <createIdle>
    1edc:	d0a6bf15 	stw	r2,-25860(gp)
	scheduler_pid = createScheduler();
    1ee0:	00017f00 	call	17f0 <createScheduler>
    1ee4:	d0a6c015 	stw	r2,-25856(gp)

	//checkAndTransfer();
	transfer(processes[scheduler_pid].p);
    1ee8:	d0a6c017 	ldw	r2,-25856(gp)
    1eec:	00c00074 	movhi	r3,1
    1ef0:	18ca6804 	addi	r3,r3,10656
    1ef4:	10800f24 	muli	r2,r2,60
    1ef8:	10c5883a 	add	r2,r2,r3
    1efc:	10800104 	addi	r2,r2,4
    1f00:	11000017 	ldw	r4,0(r2)
    1f04:	00025f00 	call	25f0 <transfer>
}
    1f08:	e037883a 	mov	sp,fp
    1f0c:	dfc00217 	ldw	ra,8(sp)
    1f10:	df000117 	ldw	fp,4(sp)
    1f14:	dc000017 	ldw	r16,0(sp)
    1f18:	dec00304 	addi	sp,sp,12
    1f1c:	f800283a 	ret

00001f20 <initBuffer>:
	int message;
	int full;
	int monitor;
} Buffer;

void initBuffer(Buffer* b) {
    1f20:	defffd04 	addi	sp,sp,-12
    1f24:	dfc00215 	stw	ra,8(sp)
    1f28:	df000115 	stw	fp,4(sp)
    1f2c:	df000104 	addi	fp,sp,4
    1f30:	e13fff15 	stw	r4,-4(fp)
	b->monitor = createMonitor();
    1f34:	0000ca80 	call	ca8 <createMonitor>
    1f38:	e0ffff17 	ldw	r3,-4(fp)
    1f3c:	18800215 	stw	r2,8(r3)
	b->full = 0;
    1f40:	e0bfff17 	ldw	r2,-4(fp)
    1f44:	10000115 	stw	zero,4(r2)
}
    1f48:	e037883a 	mov	sp,fp
    1f4c:	dfc00117 	ldw	ra,4(sp)
    1f50:	df000017 	ldw	fp,0(sp)
    1f54:	dec00204 	addi	sp,sp,8
    1f58:	f800283a 	ret

00001f5c <put>:

void put(Buffer* b, int m) {
    1f5c:	defffc04 	addi	sp,sp,-16
    1f60:	dfc00315 	stw	ra,12(sp)
    1f64:	df000215 	stw	fp,8(sp)
    1f68:	df000204 	addi	fp,sp,8
    1f6c:	e13ffe15 	stw	r4,-8(fp)
    1f70:	e17fff15 	stw	r5,-4(fp)
	printf("put\n");
    1f74:	01000074 	movhi	r4,1
    1f78:	213bd004 	addi	r4,r4,-4288
    1f7c:	00032080 	call	3208 <puts>
	enterMonitor(b->monitor);
    1f80:	e0bffe17 	ldw	r2,-8(fp)
    1f84:	11000217 	ldw	r4,8(r2)
    1f88:	0000e400 	call	e40 <enterMonitor>
	while(b->full) {
    1f8c:	00000106 	br	1f94 <put+0x38>
		wait();
    1f90:	00019340 	call	1934 <wait>
}

void put(Buffer* b, int m) {
	printf("put\n");
	enterMonitor(b->monitor);
	while(b->full) {
    1f94:	e0bffe17 	ldw	r2,-8(fp)
    1f98:	10800117 	ldw	r2,4(r2)
    1f9c:	1004c03a 	cmpne	r2,r2,zero
    1fa0:	103ffb1e 	bne	r2,zero,1f90 <put+0x34>
		wait();
	}
	b->message = m;
    1fa4:	e0fffe17 	ldw	r3,-8(fp)
    1fa8:	e0bfff17 	ldw	r2,-4(fp)
    1fac:	18800015 	stw	r2,0(r3)
	b->full = 1;
    1fb0:	e0fffe17 	ldw	r3,-8(fp)
    1fb4:	00800044 	movi	r2,1
    1fb8:	18800115 	stw	r2,4(r3)
	notify();
    1fbc:	00012f40 	call	12f4 <notify>
	exitMonitor();
    1fc0:	00011300 	call	1130 <exitMonitor>

	return;
}
    1fc4:	e037883a 	mov	sp,fp
    1fc8:	dfc00117 	ldw	ra,4(sp)
    1fcc:	df000017 	ldw	fp,0(sp)
    1fd0:	dec00204 	addi	sp,sp,8
    1fd4:	f800283a 	ret

00001fd8 <get>:

int get(Buffer* b) {
    1fd8:	defffc04 	addi	sp,sp,-16
    1fdc:	dfc00315 	stw	ra,12(sp)
    1fe0:	df000215 	stw	fp,8(sp)
    1fe4:	df000204 	addi	fp,sp,8
    1fe8:	e13fff15 	stw	r4,-4(fp)
	printf("get\n");
    1fec:	01000074 	movhi	r4,1
    1ff0:	213bd104 	addi	r4,r4,-4284
    1ff4:	00032080 	call	3208 <puts>
	int m;

	enterMonitor(b->monitor);
    1ff8:	e0bfff17 	ldw	r2,-4(fp)
    1ffc:	11000217 	ldw	r4,8(r2)
    2000:	0000e400 	call	e40 <enterMonitor>
	while (!b->full) {
    2004:	00000106 	br	200c <get+0x34>
		wait();
    2008:	00019340 	call	1934 <wait>
int get(Buffer* b) {
	printf("get\n");
	int m;

	enterMonitor(b->monitor);
	while (!b->full) {
    200c:	e0bfff17 	ldw	r2,-4(fp)
    2010:	10800117 	ldw	r2,4(r2)
    2014:	1005003a 	cmpeq	r2,r2,zero
    2018:	103ffb1e 	bne	r2,zero,2008 <get+0x30>
		wait();
	}
	printf("got\n");
    201c:	01000074 	movhi	r4,1
    2020:	213bd204 	addi	r4,r4,-4280
    2024:	00032080 	call	3208 <puts>
	m = b->message;
    2028:	e0bfff17 	ldw	r2,-4(fp)
    202c:	10800017 	ldw	r2,0(r2)
    2030:	e0bffe15 	stw	r2,-8(fp)
	b->full = 0;
    2034:	e0bfff17 	ldw	r2,-4(fp)
    2038:	10000115 	stw	zero,4(r2)
	notifyAll();
    203c:	000141c0 	call	141c <notifyAll>
	exitMonitor();
    2040:	00011300 	call	1130 <exitMonitor>

	return m;
    2044:	e0bffe17 	ldw	r2,-8(fp)
}
    2048:	e037883a 	mov	sp,fp
    204c:	dfc00117 	ldw	ra,4(sp)
    2050:	df000017 	ldw	fp,0(sp)
    2054:	dec00204 	addi	sp,sp,8
    2058:	f800283a 	ret

0000205c <timedGet>:

int timedGet(Buffer *b, int timeout) {
    205c:	defffa04 	addi	sp,sp,-24
    2060:	dfc00515 	stw	ra,20(sp)
    2064:	df000415 	stw	fp,16(sp)
    2068:	df000404 	addi	fp,sp,16
    206c:	e13ffe15 	stw	r4,-8(fp)
    2070:	e17fff15 	stw	r5,-4(fp)
	printf("timedget\n");
    2074:	01000074 	movhi	r4,1
    2078:	213bd304 	addi	r4,r4,-4276
    207c:	00032080 	call	3208 <puts>
	int m, ret;

	enterMonitor(b->monitor);
    2080:	e0bffe17 	ldw	r2,-8(fp)
    2084:	11000217 	ldw	r4,8(r2)
    2088:	0000e400 	call	e40 <enterMonitor>
	if (!b->full) {
    208c:	e0bffe17 	ldw	r2,-8(fp)
    2090:	10800117 	ldw	r2,4(r2)
    2094:	1004c03a 	cmpne	r2,r2,zero
    2098:	1000031e 	bne	r2,zero,20a8 <timedGet+0x4c>
		ret = timedWait(timeout);
    209c:	e13fff17 	ldw	r4,-4(fp)
    20a0:	0001bb80 	call	1bb8 <timedWait>
    20a4:	e0bffc15 	stw	r2,-16(fp)
	}
	if (ret) {
    20a8:	e0bffc17 	ldw	r2,-16(fp)
    20ac:	1005003a 	cmpeq	r2,r2,zero
    20b0:	10000a1e 	bne	r2,zero,20dc <timedGet+0x80>
		m = b->message;
    20b4:	e0bffe17 	ldw	r2,-8(fp)
    20b8:	10800017 	ldw	r2,0(r2)
    20bc:	e0bffd15 	stw	r2,-12(fp)
		b->full = 0;
    20c0:	e0bffe17 	ldw	r2,-8(fp)
    20c4:	10000115 	stw	zero,4(r2)
		printf("timedgot\n");
    20c8:	01000074 	movhi	r4,1
    20cc:	213bd604 	addi	r4,r4,-4264
    20d0:	00032080 	call	3208 <puts>
		notifyAll();
    20d4:	000141c0 	call	141c <notifyAll>
    20d8:	00000506 	br	20f0 <timedGet+0x94>
	} else {
		m = TIMEOUT;
    20dc:	00bfffd4 	movui	r2,65535
    20e0:	e0bffd15 	stw	r2,-12(fp)
		printf("timedout\n");
    20e4:	01000074 	movhi	r4,1
    20e8:	213bd904 	addi	r4,r4,-4252
    20ec:	00032080 	call	3208 <puts>
	}

	exitMonitor();
    20f0:	00011300 	call	1130 <exitMonitor>
	return m;
    20f4:	e0bffd17 	ldw	r2,-12(fp)
}
    20f8:	e037883a 	mov	sp,fp
    20fc:	dfc00117 	ldw	ra,4(sp)
    2100:	df000017 	ldw	fp,0(sp)
    2104:	dec00204 	addi	sp,sp,8
    2108:	f800283a 	ret

0000210c <displayDigit>:
int digitCodes[] = {0x3E223E00, 0x203E2400, 0x2E2A3A00, 0x3E2A2A00, 0x3E080E00,
		0x3A2A2E00, 0x3A2A3E00, 0x3E020200, 0x3E2A3E00, 0x3E2A2E00, 0};
int lcdZones[] = {LED_0_BASE, LED_1_BASE, LED_2_BASE};

/* displays digit "no" in LCD zone "zone" */
void displayDigit(int zone, int no) {
    210c:	defffd04 	addi	sp,sp,-12
    2110:	df000215 	stw	fp,8(sp)
    2114:	df000204 	addi	fp,sp,8
    2118:	e13ffe15 	stw	r4,-8(fp)
    211c:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[zone], digitCodes[no]);
    2120:	e0bffe17 	ldw	r2,-8(fp)
    2124:	00c00074 	movhi	r3,1
    2128:	18fcd004 	addi	r3,r3,-3264
    212c:	1085883a 	add	r2,r2,r2
    2130:	1085883a 	add	r2,r2,r2
    2134:	10c5883a 	add	r2,r2,r3
    2138:	10800017 	ldw	r2,0(r2)
    213c:	1009883a 	mov	r4,r2
    2140:	e0bfff17 	ldw	r2,-4(fp)
    2144:	00c00074 	movhi	r3,1
    2148:	18fcc504 	addi	r3,r3,-3308
    214c:	1085883a 	add	r2,r2,r2
    2150:	1085883a 	add	r2,r2,r2
    2154:	10c5883a 	add	r2,r2,r3
    2158:	10c00017 	ldw	r3,0(r2)
    215c:	2005883a 	mov	r2,r4
    2160:	10c00035 	stwio	r3,0(r2)
}
    2164:	e037883a 	mov	sp,fp
    2168:	df000017 	ldw	fp,0(sp)
    216c:	dec00104 	addi	sp,sp,4
    2170:	f800283a 	ret

00002174 <displayNumber>:

void displayNumber(int no) {
    2174:	defffd04 	addi	sp,sp,-12
    2178:	dfc00215 	stw	ra,8(sp)
    217c:	df000115 	stw	fp,4(sp)
    2180:	df000104 	addi	fp,sp,4
    2184:	e13fff15 	stw	r4,-4(fp)
	displayDigit(2, no % 10);
    2188:	e13fff17 	ldw	r4,-4(fp)
    218c:	01400284 	movi	r5,10
    2190:	00028800 	call	2880 <__modsi3>
    2194:	100b883a 	mov	r5,r2
    2198:	01000084 	movi	r4,2
    219c:	000210c0 	call	210c <displayDigit>
	displayDigit(1, (no / 10) % 10);
    21a0:	e13fff17 	ldw	r4,-4(fp)
    21a4:	01400284 	movi	r5,10
    21a8:	00028200 	call	2820 <__divsi3>
    21ac:	1009883a 	mov	r4,r2
    21b0:	01400284 	movi	r5,10
    21b4:	00028800 	call	2880 <__modsi3>
    21b8:	100b883a 	mov	r5,r2
    21bc:	01000044 	movi	r4,1
    21c0:	000210c0 	call	210c <displayDigit>
	displayDigit(0, no / 100);
    21c4:	e13fff17 	ldw	r4,-4(fp)
    21c8:	01401904 	movi	r5,100
    21cc:	00028200 	call	2820 <__divsi3>
    21d0:	100b883a 	mov	r5,r2
    21d4:	0009883a 	mov	r4,zero
    21d8:	000210c0 	call	210c <displayDigit>
}
    21dc:	e037883a 	mov	sp,fp
    21e0:	dfc00117 	ldw	ra,4(sp)
    21e4:	df000017 	ldw	fp,0(sp)
    21e8:	dec00204 	addi	sp,sp,8
    21ec:	f800283a 	ret

000021f0 <producer>:

void producer(){
    21f0:	defffa04 	addi	sp,sp,-24
    21f4:	dfc00515 	stw	ra,20(sp)
    21f8:	df000415 	stw	fp,16(sp)
    21fc:	df000404 	addi	fp,sp,16
	int temp;

	printf("Producer starting...\n");
    2200:	01000074 	movhi	r4,1
    2204:	213bdc04 	addi	r4,r4,-4240
    2208:	00032080 	call	3208 <puts>
    220c:	00000006 	br	2210 <producer+0x20>

	while(1) {
		waitInterrupt(1);
    2210:	01000044 	movi	r4,1
    2214:	00018280 	call	1828 <waitInterrupt>
		temp = edge_capture;
    2218:	00800074 	movhi	r2,1
    221c:	108a1504 	addi	r2,r2,10324
    2220:	10800017 	ldw	r2,0(r2)
    2224:	e0bffc15 	stw	r2,-16(fp)
		if (temp != 0) {
    2228:	e0bffc17 	ldw	r2,-16(fp)
    222c:	1005003a 	cmpeq	r2,r2,zero
    2230:	103ff71e 	bne	r2,zero,2210 <producer+0x20>

			/* check button 0 */
			if (temp%2==1) {
    2234:	e0bffc17 	ldw	r2,-16(fp)
    2238:	00e00034 	movhi	r3,32768
    223c:	18c00044 	addi	r3,r3,1
    2240:	10c4703a 	and	r2,r2,r3
    2244:	e0bffd15 	stw	r2,-12(fp)
    2248:	e0fffd17 	ldw	r3,-12(fp)
    224c:	1804403a 	cmpge	r2,r3,zero
    2250:	10000a1e 	bne	r2,zero,227c <producer+0x8c>
    2254:	e0bffd17 	ldw	r2,-12(fp)
    2258:	10bfffc4 	addi	r2,r2,-1
    225c:	e0bffd15 	stw	r2,-12(fp)
    2260:	00bfff84 	movi	r2,-2
    2264:	e0fffd17 	ldw	r3,-12(fp)
    2268:	1886b03a 	or	r3,r3,r2
    226c:	e0fffd15 	stw	r3,-12(fp)
    2270:	e0bffd17 	ldw	r2,-12(fp)
    2274:	10800044 	addi	r2,r2,1
    2278:	e0bffd15 	stw	r2,-12(fp)
    227c:	e0bffd17 	ldw	r2,-12(fp)
    2280:	10800058 	cmpnei	r2,r2,1
    2284:	1000041e 	bne	r2,zero,2298 <producer+0xa8>

				put(&b0, RESET);
    2288:	01000074 	movhi	r4,1
    228c:	210afe04 	addi	r4,r4,11256
    2290:	01444444 	movi	r5,4369
    2294:	0001f5c0 	call	1f5c <put>
			}

			/* check button 1 */
			temp = temp >> 1;
    2298:	e0bffc17 	ldw	r2,-16(fp)
    229c:	1005d07a 	srai	r2,r2,1
    22a0:	e0bffc15 	stw	r2,-16(fp)
			if (temp%2==1) {
    22a4:	e0fffc17 	ldw	r3,-16(fp)
    22a8:	00a00034 	movhi	r2,32768
    22ac:	10800044 	addi	r2,r2,1
    22b0:	1886703a 	and	r3,r3,r2
    22b4:	e0fffe15 	stw	r3,-8(fp)
    22b8:	e0fffe17 	ldw	r3,-8(fp)
    22bc:	1804403a 	cmpge	r2,r3,zero
    22c0:	10000a1e 	bne	r2,zero,22ec <producer+0xfc>
    22c4:	e0bffe17 	ldw	r2,-8(fp)
    22c8:	10bfffc4 	addi	r2,r2,-1
    22cc:	e0bffe15 	stw	r2,-8(fp)
    22d0:	00bfff84 	movi	r2,-2
    22d4:	e0fffe17 	ldw	r3,-8(fp)
    22d8:	1886b03a 	or	r3,r3,r2
    22dc:	e0fffe15 	stw	r3,-8(fp)
    22e0:	e0bffe17 	ldw	r2,-8(fp)
    22e4:	10800044 	addi	r2,r2,1
    22e8:	e0bffe15 	stw	r2,-8(fp)
    22ec:	e0bffe17 	ldw	r2,-8(fp)
    22f0:	10800058 	cmpnei	r2,r2,1
    22f4:	1000041e 	bne	r2,zero,2308 <producer+0x118>

				put(&b0, START);
    22f8:	01000074 	movhi	r4,1
    22fc:	210afe04 	addi	r4,r4,11256
    2300:	01488884 	movi	r5,8738
    2304:	0001f5c0 	call	1f5c <put>
			}

			/* check button 2 */
			temp = temp >> 1;
    2308:	e0bffc17 	ldw	r2,-16(fp)
    230c:	1005d07a 	srai	r2,r2,1
    2310:	e0bffc15 	stw	r2,-16(fp)
			if (temp%2==1) {
    2314:	e0fffc17 	ldw	r3,-16(fp)
    2318:	00a00034 	movhi	r2,32768
    231c:	10800044 	addi	r2,r2,1
    2320:	1886703a 	and	r3,r3,r2
    2324:	e0ffff15 	stw	r3,-4(fp)
    2328:	e0ffff17 	ldw	r3,-4(fp)
    232c:	1804403a 	cmpge	r2,r3,zero
    2330:	10000a1e 	bne	r2,zero,235c <producer+0x16c>
    2334:	e0bfff17 	ldw	r2,-4(fp)
    2338:	10bfffc4 	addi	r2,r2,-1
    233c:	e0bfff15 	stw	r2,-4(fp)
    2340:	00bfff84 	movi	r2,-2
    2344:	e0ffff17 	ldw	r3,-4(fp)
    2348:	1886b03a 	or	r3,r3,r2
    234c:	e0ffff15 	stw	r3,-4(fp)
    2350:	e0bfff17 	ldw	r2,-4(fp)
    2354:	10800044 	addi	r2,r2,1
    2358:	e0bfff15 	stw	r2,-4(fp)
    235c:	e0bfff17 	ldw	r2,-4(fp)
    2360:	10800058 	cmpnei	r2,r2,1
    2364:	103faa1e 	bne	r2,zero,2210 <producer+0x20>

				put(&b0, STOP);
    2368:	01000074 	movhi	r4,1
    236c:	210afe04 	addi	r4,r4,11256
    2370:	014cccc4 	movi	r5,13107
    2374:	0001f5c0 	call	1f5c <put>
			}

			/* button 3 ignored */
		}
	}
    2378:	003fa506 	br	2210 <producer+0x20>

0000237c <consumer>:
}


void consumer(){
    237c:	defffb04 	addi	sp,sp,-20
    2380:	dfc00415 	stw	ra,16(sp)
    2384:	df000315 	stw	fp,12(sp)
    2388:	df000304 	addi	fp,sp,12
	int m;

	printf("Consumer starting...\n");
    238c:	01000074 	movhi	r4,1
    2390:	213be204 	addi	r4,r4,-4216
    2394:	00032080 	call	3208 <puts>
    2398:	00000006 	br	239c <consumer+0x20>
	while (1) {
		m = displayOn ? get(&b0) : timedGet(&b0, FREEZE_FOR);
    239c:	d0a00117 	ldw	r2,-32764(gp)
    23a0:	1005003a 	cmpeq	r2,r2,zero
    23a4:	1000051e 	bne	r2,zero,23bc <consumer+0x40>
    23a8:	01000074 	movhi	r4,1
    23ac:	210afe04 	addi	r4,r4,11256
    23b0:	0001fd80 	call	1fd8 <get>
    23b4:	e0bffe15 	stw	r2,-8(fp)
    23b8:	00000506 	br	23d0 <consumer+0x54>
    23bc:	01000074 	movhi	r4,1
    23c0:	210afe04 	addi	r4,r4,11256
    23c4:	0142ee04 	movi	r5,3000
    23c8:	000205c0 	call	205c <timedGet>
    23cc:	e0bffe15 	stw	r2,-8(fp)
    23d0:	e0bffe17 	ldw	r2,-8(fp)
    23d4:	e0bffd15 	stw	r2,-12(fp)

		switch (m) {
    23d8:	e0fffd17 	ldw	r3,-12(fp)
    23dc:	e0ffff15 	stw	r3,-4(fp)
    23e0:	e0ffff17 	ldw	r3,-4(fp)
    23e4:	188888a0 	cmpeqi	r2,r3,8738
    23e8:	1000161e 	bne	r2,zero,2444 <consumer+0xc8>
    23ec:	e0ffff17 	ldw	r3,-4(fp)
    23f0:	188888c8 	cmpgei	r2,r3,8739
    23f4:	1000041e 	bne	r2,zero,2408 <consumer+0x8c>
    23f8:	e0ffff17 	ldw	r3,-4(fp)
    23fc:	18844460 	cmpeqi	r2,r3,4369
    2400:	1000081e 	bne	r2,zero,2424 <consumer+0xa8>
    2404:	00002506 	br	249c <consumer+0x120>
    2408:	e0ffff17 	ldw	r3,-4(fp)
    240c:	188ccce0 	cmpeqi	r2,r3,13107
    2410:	10001a1e 	bne	r2,zero,247c <consumer+0x100>
    2414:	00bfffd4 	movui	r2,65535
    2418:	e0ffff17 	ldw	r3,-4(fp)
    241c:	18801c26 	beq	r3,r2,2490 <consumer+0x114>
    2420:	00001e06 	br	249c <consumer+0x120>
		case RESET:
			printf("Reset.\n");
    2424:	01000074 	movhi	r4,1
    2428:	213be804 	addi	r4,r4,-4192
    242c:	00032080 	call	3208 <puts>
			displayOn = 1;
    2430:	00800044 	movi	r2,1
    2434:	d0a00115 	stw	r2,-32764(gp)
			reset = 1;
    2438:	00800044 	movi	r2,1
    243c:	d0a6c115 	stw	r2,-25852(gp)
			break;
    2440:	003fd606 	br	239c <consumer+0x20>
		case START:
			printf("Start/Freeze.\n");
    2444:	01000074 	movhi	r4,1
    2448:	213bea04 	addi	r4,r4,-4184
    244c:	00032080 	call	3208 <puts>
			if (started)
    2450:	d0a6c217 	ldw	r2,-25848(gp)
    2454:	1005003a 	cmpeq	r2,r2,zero
    2458:	1000051e 	bne	r2,zero,2470 <consumer+0xf4>
				displayOn = 1 - displayOn;
    245c:	d0a00117 	ldw	r2,-32764(gp)
    2460:	00c00044 	movi	r3,1
    2464:	1885c83a 	sub	r2,r3,r2
    2468:	d0a00115 	stw	r2,-32764(gp)
    246c:	003fcb06 	br	239c <consumer+0x20>
			else
				started = 1;
    2470:	00800044 	movi	r2,1
    2474:	d0a6c215 	stw	r2,-25848(gp)
			break;
    2478:	003fc806 	br	239c <consumer+0x20>
		case STOP:
			printf("Stop.\n");
    247c:	01000074 	movhi	r4,1
    2480:	213bee04 	addi	r4,r4,-4168
    2484:	00032080 	call	3208 <puts>
			started = 0;
    2488:	d026c215 	stw	zero,-25848(gp)
			break;
    248c:	003fc306 	br	239c <consumer+0x20>
		case TIMEOUT:
			displayOn = 1;
    2490:	00800044 	movi	r2,1
    2494:	d0a00115 	stw	r2,-32764(gp)
			break;
    2498:	003fc006 	br	239c <consumer+0x20>
		default:
			printf("Wrong command!\n");
    249c:	01000074 	movhi	r4,1
    24a0:	213bf004 	addi	r4,r4,-4160
    24a4:	00032080 	call	3208 <puts>
			break;
		}
	}
    24a8:	003fbc06 	br	239c <consumer+0x20>

000024ac <countAndDisplay>:
}

void countAndDisplay() {
    24ac:	defffd04 	addi	sp,sp,-12
    24b0:	dfc00215 	stw	ra,8(sp)
    24b4:	df000115 	stw	fp,4(sp)
    24b8:	df000104 	addi	fp,sp,4
	int counter = 0;
    24bc:	e03fff15 	stw	zero,-4(fp)

	displayNumber(counter);
    24c0:	e13fff17 	ldw	r4,-4(fp)
    24c4:	00021740 	call	2174 <displayNumber>

	while(1) {
		if (displayOn) {
    24c8:	d0a00117 	ldw	r2,-32764(gp)
    24cc:	1005003a 	cmpeq	r2,r2,zero
    24d0:	1000021e 	bne	r2,zero,24dc <countAndDisplay+0x30>
			displayNumber(counter);
    24d4:	e13fff17 	ldw	r4,-4(fp)
    24d8:	00021740 	call	2174 <displayNumber>
		}
		if (started)
    24dc:	d0a6c217 	ldw	r2,-25848(gp)
    24e0:	1005003a 	cmpeq	r2,r2,zero
    24e4:	1000051e 	bne	r2,zero,24fc <countAndDisplay+0x50>
			counter = (counter + 1) % 1000;
    24e8:	e0bfff17 	ldw	r2,-4(fp)
    24ec:	11000044 	addi	r4,r2,1
    24f0:	0140fa04 	movi	r5,1000
    24f4:	00028800 	call	2880 <__modsi3>
    24f8:	e0bfff15 	stw	r2,-4(fp)
		if (reset) {
    24fc:	d0a6c117 	ldw	r2,-25852(gp)
    2500:	1005003a 	cmpeq	r2,r2,zero
    2504:	1000021e 	bne	r2,zero,2510 <countAndDisplay+0x64>
			counter = 0;
    2508:	e03fff15 	stw	zero,-4(fp)
			reset = 0;
    250c:	d026c115 	stw	zero,-25852(gp)
		}

		sleep(INTERVAL);
    2510:	01001904 	movi	r4,100
    2514:	0001cf80 	call	1cf8 <sleep>
	}
    2518:	003feb06 	br	24c8 <countAndDisplay+0x1c>

0000251c <main>:
}

int main() {
    251c:	defffe04 	addi	sp,sp,-8
    2520:	dfc00115 	stw	ra,4(sp)
    2524:	df000015 	stw	fp,0(sp)
    2528:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LED_COLOR_BASE, LED_COLOR_RESET_VALUE);
    252c:	00c08034 	movhi	r3,512
    2530:	18d43c04 	addi	r3,r3,20720
    2534:	00803ff4 	movhi	r2,255
    2538:	18800035 	stwio	r2,0(r3)
	initBuffer(&b0);
    253c:	01000074 	movhi	r4,1
    2540:	210afe04 	addi	r4,r4,11256
    2544:	0001f200 	call	1f20 <initBuffer>

	createProcess(producer, STACK_SIZE);
    2548:	01000034 	movhi	r4,0
    254c:	21087c04 	addi	r4,r4,8688
    2550:	0149c404 	movi	r5,10000
    2554:	000082c0 	call	82c <createProcess>
	createProcess(consumer, STACK_SIZE);
    2558:	01000034 	movhi	r4,0
    255c:	2108df04 	addi	r4,r4,9084
    2560:	0149c404 	movi	r5,10000
    2564:	000082c0 	call	82c <createProcess>
	createProcess(countAndDisplay, STACK_SIZE);
    2568:	01000034 	movhi	r4,0
    256c:	21092b04 	addi	r4,r4,9388
    2570:	0149c404 	movi	r5,10000
    2574:	000082c0 	call	82c <createProcess>

	start();
    2578:	0001e3c0 	call	1e3c <start>
	return 0;
    257c:	0005883a 	mov	r2,zero
}
    2580:	e037883a 	mov	sp,fp
    2584:	dfc00117 	ldw	ra,4(sp)
    2588:	df000017 	ldw	fp,0(sp)
    258c:	dec00204 	addi	sp,sp,8
    2590:	f800283a 	ret

00002594 <newProcess>:


Process running = NULL;  // pointer to the current process.
Process nextP = NULL;  // variable used internally to implement transfer and iotransfer procedures

Process newProcess(void (*f), unsigned int* stack, int stackSize){
    2594:	defff804 	addi	sp,sp,-32
    2598:	dfc00715 	stw	ra,28(sp)
    259c:	df000615 	stw	fp,24(sp)
    25a0:	df000604 	addi	fp,sp,24
    25a4:	e13ffd15 	stw	r4,-12(fp)
    25a8:	e17ffe15 	stw	r5,-8(fp)
    25ac:	e1bfff15 	stw	r6,-4(fp)
    
    unsigned int* newPC = f;
    25b0:	e0bffd17 	ldw	r2,-12(fp)
    25b4:	e0bffc15 	stw	r2,-16(fp)
    int size = stackSize - 4;
    25b8:	e0bfff17 	ldw	r2,-4(fp)
    25bc:	10bfff04 	addi	r2,r2,-4
    25c0:	e0bffb15 	stw	r2,-20(fp)
    
    Process process = _createStack(stack,newPC,size);
    25c4:	e13ffe17 	ldw	r4,-8(fp)
    25c8:	e17ffc17 	ldw	r5,-16(fp)
    25cc:	e1bffb17 	ldw	r6,-20(fp)
    25d0:	00026800 	call	2680 <_createStack>
    25d4:	e0bffa15 	stw	r2,-24(fp)
    return process;
    25d8:	e0bffa17 	ldw	r2,-24(fp)
}
    25dc:	e037883a 	mov	sp,fp
    25e0:	dfc00117 	ldw	ra,4(sp)
    25e4:	df000017 	ldw	fp,0(sp)
    25e8:	dec00204 	addi	sp,sp,8
    25ec:	f800283a 	ret

000025f0 <transfer>:

/**
 * Called mainly from interrupt routine.
 * (Except for the first call)
 */
void transfer(Process p){
    25f0:	defffd04 	addi	sp,sp,-12
    25f4:	dfc00215 	stw	ra,8(sp)
    25f8:	df000115 	stw	fp,4(sp)
    25fc:	df000104 	addi	fp,sp,4
    2600:	e13fff15 	stw	r4,-4(fp)
    
    if(running == NULL){
    2604:	d0a6c317 	ldw	r2,-25844(gp)
    2608:	1004c03a 	cmpne	r2,r2,zero
    260c:	1000031e 	bne	r2,zero,261c <transfer+0x2c>
        running = malloc(sizeof(Process));
    2610:	01000104 	movi	r4,4
    2614:	000299c0 	call	299c <malloc>
    2618:	d0a6c315 	stw	r2,-25844(gp)
    }
    nextP = p ;
    261c:	e0bfff17 	ldw	r2,-4(fp)
    2620:	d0a6c415 	stw	r2,-25840(gp)
    _transfer();
    2624:	000269c0 	call	269c <_transfer>
   
}
    2628:	e037883a 	mov	sp,fp
    262c:	dfc00117 	ldw	ra,4(sp)
    2630:	df000017 	ldw	fp,0(sp)
    2634:	dec00204 	addi	sp,sp,8
    2638:	f800283a 	ret

0000263c <iotransfer>:

/**
 * Called from kernel thread.
 */
void iotransfer(Process p, int interruptV){
    263c:	defffc04 	addi	sp,sp,-16
    2640:	dfc00315 	stw	ra,12(sp)
    2644:	df000215 	stw	fp,8(sp)
    2648:	df000204 	addi	fp,sp,8
    264c:	e13ffe15 	stw	r4,-8(fp)
    2650:	e17fff15 	stw	r5,-4(fp)
    
    insertTail(interruptV, running);
    2654:	d166c317 	ldw	r5,-25844(gp)
    2658:	e13fff17 	ldw	r4,-4(fp)
    265c:	00002a40 	call	2a4 <insertTail>
    nextP = p;
    2660:	e0bffe17 	ldw	r2,-8(fp)
    2664:	d0a6c415 	stw	r2,-25840(gp)
    _transfer();
    2668:	000269c0 	call	269c <_transfer>
   
}
    266c:	e037883a 	mov	sp,fp
    2670:	dfc00117 	ldw	ra,4(sp)
    2674:	df000017 	ldw	fp,0(sp)
    2678:	dec00204 	addi	sp,sp,8
    267c:	f800283a 	ret

00002680 <_createStack>:
.text
_createStack: #r4 = newSP
			  #r5 = newPC
			  #r6 = stackSize - 4
	   # pointer to the bottom of the stack
	   add r2, r4, r6
    2680:	2185883a 	add	r2,r4,r6
	   # init sp with r8
	   addi r8, r2, -100 # sp
    2684:	123fe704 	addi	r8,r2,-100
	   stw  r5, 0(r8)   # sp[0] = PC
    2688:	41400015 	stw	r5,0(r8)
	   addi r9, r0, 1
    268c:	02400044 	movi	r9,1
	   stw  r9, 96(r8)  # sp[24] = status = 1
    2690:	42401815 	stw	r9,96(r8)
	   # store sp on the stack bottom
	   stw  r8, 0(r2)
    2694:	12000015 	stw	r8,0(r2)
	   # return pointer to stack address
	   ret
    2698:	f800283a 	ret

0000269c <_transfer>:
 * (eret instruction retores estatus into status register, while jumping at ea)
 */
.global _transfer
.text
_transfer:
	addi sp, sp, -100
    269c:	deffe704 	addi	sp,sp,-100
	stw ra,  0(sp)
    26a0:	dfc00015 	stw	ra,0(sp)
    stw fp,  4(sp)
    26a4:	df000115 	stw	fp,4(sp)
    stw r2,  8(sp)
    26a8:	d8800215 	stw	r2,8(sp)
    stw r3,  12(sp)
    26ac:	d8c00315 	stw	r3,12(sp)
    stw r4,  16(sp)
    26b0:	d9000415 	stw	r4,16(sp)
    stw r5,  20(sp)
    26b4:	d9400515 	stw	r5,20(sp)
    stw r6,  24(sp)
    26b8:	d9800615 	stw	r6,24(sp)
    stw r7,  28(sp)
    26bc:	d9c00715 	stw	r7,28(sp)
    stw r8,  32(sp)
    26c0:	da000815 	stw	r8,32(sp)
    stw r9,  36(sp)
    26c4:	da400915 	stw	r9,36(sp)
    stw r10, 40(sp)
    26c8:	da800a15 	stw	r10,40(sp)
    stw r11, 44(sp)
    26cc:	dac00b15 	stw	r11,44(sp)
    stw r12, 48(sp)
    26d0:	db000c15 	stw	r12,48(sp)
    stw r13, 52(sp)
    26d4:	db400d15 	stw	r13,52(sp)
    stw r14, 56(sp)
    26d8:	db800e15 	stw	r14,56(sp)
    stw r15, 60(sp)
    26dc:	dbc00f15 	stw	r15,60(sp)
    stw r16, 64(sp)
    26e0:	dc001015 	stw	r16,64(sp)
    stw r17, 68(sp)
    26e4:	dc401115 	stw	r17,68(sp)
    stw r18, 72(sp)
    26e8:	dc801215 	stw	r18,72(sp)
    stw r19, 76(sp)
    26ec:	dcc01315 	stw	r19,76(sp)
    stw r20, 80(sp)
    26f0:	dd001415 	stw	r20,80(sp)
    stw r21, 84(sp)
    26f4:	dd401515 	stw	r21,84(sp)
    stw r22, 88(sp)
    26f8:	dd801615 	stw	r22,88(sp)
    stw r23, 92(sp)
    26fc:	ddc01715 	stw	r23,92(sp)
	# save the current interrupt switch status
    rdctl r2, status
    2700:	0005303a 	rdctl	r2,status
    stw   r2, 96(sp)
    2704:	d8801815 	stw	r2,96(sp)
    # running->sp = sp
    ldw r2, %gprel(running)(gp)
    2708:	d0a6c317 	ldw	r2,-25844(gp)
    stw sp, (r2)
    270c:	16c00015 	stw	sp,0(r2)
    # running = nextP
	ldw r2, %gprel(nextP)(gp)
    2710:	d0a6c417 	ldw	r2,-25840(gp)
	stw r2, %gprel(running)(gp)
    2714:	d0a6c315 	stw	r2,-25844(gp)
	# set sp to the sp from the nextP
	ldw sp, (r2)
    2718:	16c00017 	ldw	sp,0(r2)
	# return using bret -> ba
	ldw ba,  0(sp)
    271c:	df800017 	ldw	r30,0(sp)
    ldw fp,  4(sp)
    2720:	df000117 	ldw	fp,4(sp)
    ldw r2,  8(sp)
    2724:	d8800217 	ldw	r2,8(sp)
    ldw r3,  12(sp)
    2728:	d8c00317 	ldw	r3,12(sp)
    ldw r4,  16(sp)
    272c:	d9000417 	ldw	r4,16(sp)
    ldw r5,  20(sp)
    2730:	d9400517 	ldw	r5,20(sp)
    ldw r6,  24(sp)
    2734:	d9800617 	ldw	r6,24(sp)
    ldw r7,  28(sp)
    2738:	d9c00717 	ldw	r7,28(sp)
    ldw r8,  32(sp)
    273c:	da000817 	ldw	r8,32(sp)
    ldw r9,  36(sp)
    2740:	da400917 	ldw	r9,36(sp)
    ldw r10, 40(sp)
    2744:	da800a17 	ldw	r10,40(sp)
    ldw r11, 44(sp)
    2748:	dac00b17 	ldw	r11,44(sp)
    ldw r12, 48(sp)
    274c:	db000c17 	ldw	r12,48(sp)
    ldw r13, 52(sp)
    2750:	db400d17 	ldw	r13,52(sp)
    ldw r14, 56(sp)
    2754:	db800e17 	ldw	r14,56(sp)
    ldw r15, 60(sp)
    2758:	dbc00f17 	ldw	r15,60(sp)
    ldw r16, 64(sp)
    275c:	dc001017 	ldw	r16,64(sp)
    ldw r17, 68(sp)
    2760:	dc401117 	ldw	r17,68(sp)
    ldw r18, 72(sp)
    2764:	dc801217 	ldw	r18,72(sp)
    ldw r19, 76(sp)
    2768:	dcc01317 	ldw	r19,76(sp)
    ldw r20, 80(sp)
    276c:	dd001417 	ldw	r20,80(sp)
    ldw r21, 84(sp)
    2770:	dd401517 	ldw	r21,84(sp)
    ldw r22, 88(sp)
    2774:	dd801617 	ldw	r22,88(sp)
	# restore interrupt switch status into bstatus
    ldw r23, 96(sp)
    2778:	ddc01817 	ldw	r23,96(sp)
    wrctl bstatus, r23
    277c:	b80170ba 	wrctl	bstatus,r23
    ldw r23, 92(sp)
    2780:	ddc01717 	ldw	r23,92(sp)

	addi sp, sp, 100
    2784:	dec01904 	addi	sp,sp,100
	# bret will copy back bstatus into status and go to ba
	bret
    2788:	f000483a 	bret

0000278c <maskInterrupts>:


.global maskInterrupts
.text
maskInterrupts:
	addi r9, r0, 0
    278c:	02400004 	movi	r9,0
	wrctl status, r9
    2790:	4801703a 	wrctl	status,r9
	ret
    2794:	f800283a 	ret

00002798 <allowInterrupts>:

.global allowInterrupts
.text
allowInterrupts:
	addi r9, r0, 1
    2798:	02400044 	movi	r9,1
	wrctl status, r9
    279c:	4801703a 	wrctl	status,r9
	ret
    27a0:	f800283a 	ret

000027a4 <udivmodsi4>:
    27a4:	29001b2e 	bgeu	r5,r4,2814 <udivmodsi4+0x70>
    27a8:	28001a16 	blt	r5,zero,2814 <udivmodsi4+0x70>
    27ac:	00800044 	movi	r2,1
    27b0:	0007883a 	mov	r3,zero
    27b4:	01c007c4 	movi	r7,31
    27b8:	00000306 	br	27c8 <udivmodsi4+0x24>
    27bc:	19c01326 	beq	r3,r7,280c <udivmodsi4+0x68>
    27c0:	18c00044 	addi	r3,r3,1
    27c4:	28000416 	blt	r5,zero,27d8 <udivmodsi4+0x34>
    27c8:	294b883a 	add	r5,r5,r5
    27cc:	1085883a 	add	r2,r2,r2
    27d0:	293ffa36 	bltu	r5,r4,27bc <udivmodsi4+0x18>
    27d4:	10000d26 	beq	r2,zero,280c <udivmodsi4+0x68>
    27d8:	0007883a 	mov	r3,zero
    27dc:	21400236 	bltu	r4,r5,27e8 <udivmodsi4+0x44>
    27e0:	2149c83a 	sub	r4,r4,r5
    27e4:	1886b03a 	or	r3,r3,r2
    27e8:	1004d07a 	srli	r2,r2,1
    27ec:	280ad07a 	srli	r5,r5,1
    27f0:	103ffa1e 	bne	r2,zero,27dc <udivmodsi4+0x38>
    27f4:	30000226 	beq	r6,zero,2800 <udivmodsi4+0x5c>
    27f8:	2005883a 	mov	r2,r4
    27fc:	f800283a 	ret
    2800:	1809883a 	mov	r4,r3
    2804:	2005883a 	mov	r2,r4
    2808:	f800283a 	ret
    280c:	0007883a 	mov	r3,zero
    2810:	003ff806 	br	27f4 <udivmodsi4+0x50>
    2814:	00800044 	movi	r2,1
    2818:	0007883a 	mov	r3,zero
    281c:	003fef06 	br	27dc <udivmodsi4+0x38>

00002820 <__divsi3>:
    2820:	defffe04 	addi	sp,sp,-8
    2824:	dc000015 	stw	r16,0(sp)
    2828:	dfc00115 	stw	ra,4(sp)
    282c:	0021883a 	mov	r16,zero
    2830:	20000c16 	blt	r4,zero,2864 <__divsi3+0x44>
    2834:	000d883a 	mov	r6,zero
    2838:	28000e16 	blt	r5,zero,2874 <__divsi3+0x54>
    283c:	00027a40 	call	27a4 <udivmodsi4>
    2840:	1007883a 	mov	r3,r2
    2844:	8005003a 	cmpeq	r2,r16,zero
    2848:	1000011e 	bne	r2,zero,2850 <__divsi3+0x30>
    284c:	00c7c83a 	sub	r3,zero,r3
    2850:	1805883a 	mov	r2,r3
    2854:	dfc00117 	ldw	ra,4(sp)
    2858:	dc000017 	ldw	r16,0(sp)
    285c:	dec00204 	addi	sp,sp,8
    2860:	f800283a 	ret
    2864:	0109c83a 	sub	r4,zero,r4
    2868:	04000044 	movi	r16,1
    286c:	000d883a 	mov	r6,zero
    2870:	283ff20e 	bge	r5,zero,283c <__divsi3+0x1c>
    2874:	014bc83a 	sub	r5,zero,r5
    2878:	8021003a 	cmpeq	r16,r16,zero
    287c:	003fef06 	br	283c <__divsi3+0x1c>

00002880 <__modsi3>:
    2880:	deffff04 	addi	sp,sp,-4
    2884:	dfc00015 	stw	ra,0(sp)
    2888:	01800044 	movi	r6,1
    288c:	2807883a 	mov	r3,r5
    2890:	20000416 	blt	r4,zero,28a4 <__modsi3+0x24>
    2894:	28000c16 	blt	r5,zero,28c8 <__modsi3+0x48>
    2898:	dfc00017 	ldw	ra,0(sp)
    289c:	dec00104 	addi	sp,sp,4
    28a0:	00027a41 	jmpi	27a4 <udivmodsi4>
    28a4:	0109c83a 	sub	r4,zero,r4
    28a8:	28000b16 	blt	r5,zero,28d8 <__modsi3+0x58>
    28ac:	180b883a 	mov	r5,r3
    28b0:	01800044 	movi	r6,1
    28b4:	00027a40 	call	27a4 <udivmodsi4>
    28b8:	0085c83a 	sub	r2,zero,r2
    28bc:	dfc00017 	ldw	ra,0(sp)
    28c0:	dec00104 	addi	sp,sp,4
    28c4:	f800283a 	ret
    28c8:	014bc83a 	sub	r5,zero,r5
    28cc:	dfc00017 	ldw	ra,0(sp)
    28d0:	dec00104 	addi	sp,sp,4
    28d4:	00027a41 	jmpi	27a4 <udivmodsi4>
    28d8:	0147c83a 	sub	r3,zero,r5
    28dc:	003ff306 	br	28ac <__modsi3+0x2c>

000028e0 <__udivsi3>:
    28e0:	000d883a 	mov	r6,zero
    28e4:	00027a41 	jmpi	27a4 <udivmodsi4>

000028e8 <__umodsi3>:
    28e8:	01800044 	movi	r6,1
    28ec:	00027a41 	jmpi	27a4 <udivmodsi4>

000028f0 <exit>:
    28f0:	defffe04 	addi	sp,sp,-8
    28f4:	000b883a 	mov	r5,zero
    28f8:	dc000015 	stw	r16,0(sp)
    28fc:	dfc00115 	stw	ra,4(sp)
    2900:	2021883a 	mov	r16,r4
    2904:	00053680 	call	5368 <__call_exitprocs>
    2908:	00800074 	movhi	r2,1
    290c:	10835d04 	addi	r2,r2,3444
    2910:	11000017 	ldw	r4,0(r2)
    2914:	20800f17 	ldw	r2,60(r4)
    2918:	10000126 	beq	r2,zero,2920 <exit+0x30>
    291c:	103ee83a 	callr	r2
    2920:	8009883a 	mov	r4,r16
    2924:	000c3240 	call	c324 <_exit>

00002928 <fprintf>:
    2928:	defffc04 	addi	sp,sp,-16
    292c:	dfc00115 	stw	ra,4(sp)
    2930:	d9800215 	stw	r6,8(sp)
    2934:	d9c00315 	stw	r7,12(sp)
    2938:	d8800204 	addi	r2,sp,8
    293c:	100d883a 	mov	r6,r2
    2940:	d8800015 	stw	r2,0(sp)
    2944:	00052040 	call	5204 <__vfprintf_internal>
    2948:	dfc00117 	ldw	ra,4(sp)
    294c:	dec00404 	addi	sp,sp,16
    2950:	f800283a 	ret

00002954 <_fprintf_r>:
    2954:	defffd04 	addi	sp,sp,-12
    2958:	2807883a 	mov	r3,r5
    295c:	dfc00115 	stw	ra,4(sp)
    2960:	d9c00215 	stw	r7,8(sp)
    2964:	d8800204 	addi	r2,sp,8
    2968:	300b883a 	mov	r5,r6
    296c:	1809883a 	mov	r4,r3
    2970:	100d883a 	mov	r6,r2
    2974:	d8800015 	stw	r2,0(sp)
    2978:	00052040 	call	5204 <__vfprintf_internal>
    297c:	dfc00117 	ldw	ra,4(sp)
    2980:	dec00304 	addi	sp,sp,12
    2984:	f800283a 	ret

00002988 <free>:
    2988:	00800074 	movhi	r2,1
    298c:	10835c04 	addi	r2,r2,3440
    2990:	200b883a 	mov	r5,r4
    2994:	11000017 	ldw	r4,0(r2)
    2998:	00073001 	jmpi	7300 <_free_r>

0000299c <malloc>:
    299c:	00800074 	movhi	r2,1
    29a0:	10835c04 	addi	r2,r2,3440
    29a4:	200b883a 	mov	r5,r4
    29a8:	11000017 	ldw	r4,0(r2)
    29ac:	00029b01 	jmpi	29b0 <_malloc_r>

000029b0 <_malloc_r>:
    29b0:	defff604 	addi	sp,sp,-40
    29b4:	28c002c4 	addi	r3,r5,11
    29b8:	00800584 	movi	r2,22
    29bc:	dc800215 	stw	r18,8(sp)
    29c0:	dfc00915 	stw	ra,36(sp)
    29c4:	df000815 	stw	fp,32(sp)
    29c8:	ddc00715 	stw	r23,28(sp)
    29cc:	dd800615 	stw	r22,24(sp)
    29d0:	dd400515 	stw	r21,20(sp)
    29d4:	dd000415 	stw	r20,16(sp)
    29d8:	dcc00315 	stw	r19,12(sp)
    29dc:	dc400115 	stw	r17,4(sp)
    29e0:	dc000015 	stw	r16,0(sp)
    29e4:	2025883a 	mov	r18,r4
    29e8:	10c01236 	bltu	r2,r3,2a34 <_malloc_r+0x84>
    29ec:	04400404 	movi	r17,16
    29f0:	8940142e 	bgeu	r17,r5,2a44 <_malloc_r+0x94>
    29f4:	00800304 	movi	r2,12
    29f8:	0007883a 	mov	r3,zero
    29fc:	90800015 	stw	r2,0(r18)
    2a00:	1805883a 	mov	r2,r3
    2a04:	dfc00917 	ldw	ra,36(sp)
    2a08:	df000817 	ldw	fp,32(sp)
    2a0c:	ddc00717 	ldw	r23,28(sp)
    2a10:	dd800617 	ldw	r22,24(sp)
    2a14:	dd400517 	ldw	r21,20(sp)
    2a18:	dd000417 	ldw	r20,16(sp)
    2a1c:	dcc00317 	ldw	r19,12(sp)
    2a20:	dc800217 	ldw	r18,8(sp)
    2a24:	dc400117 	ldw	r17,4(sp)
    2a28:	dc000017 	ldw	r16,0(sp)
    2a2c:	dec00a04 	addi	sp,sp,40
    2a30:	f800283a 	ret
    2a34:	00bffe04 	movi	r2,-8
    2a38:	18a2703a 	and	r17,r3,r2
    2a3c:	883fed16 	blt	r17,zero,29f4 <_malloc_r+0x44>
    2a40:	897fec36 	bltu	r17,r5,29f4 <_malloc_r+0x44>
    2a44:	9009883a 	mov	r4,r18
    2a48:	000ca000 	call	ca00 <__malloc_lock>
    2a4c:	00807dc4 	movi	r2,503
    2a50:	14402b2e 	bgeu	r2,r17,2b00 <_malloc_r+0x150>
    2a54:	8806d27a 	srli	r3,r17,9
    2a58:	18003f1e 	bne	r3,zero,2b58 <_malloc_r+0x1a8>
    2a5c:	880cd0fa 	srli	r6,r17,3
    2a60:	300490fa 	slli	r2,r6,3
    2a64:	02c00074 	movhi	r11,1
    2a68:	5afdd304 	addi	r11,r11,-2228
    2a6c:	12cb883a 	add	r5,r2,r11
    2a70:	2c000317 	ldw	r16,12(r5)
    2a74:	580f883a 	mov	r7,r11
    2a78:	2c00041e 	bne	r5,r16,2a8c <_malloc_r+0xdc>
    2a7c:	00000a06 	br	2aa8 <_malloc_r+0xf8>
    2a80:	1800860e 	bge	r3,zero,2c9c <_malloc_r+0x2ec>
    2a84:	84000317 	ldw	r16,12(r16)
    2a88:	2c000726 	beq	r5,r16,2aa8 <_malloc_r+0xf8>
    2a8c:	80800117 	ldw	r2,4(r16)
    2a90:	00ffff04 	movi	r3,-4
    2a94:	10c8703a 	and	r4,r2,r3
    2a98:	2447c83a 	sub	r3,r4,r17
    2a9c:	008003c4 	movi	r2,15
    2aa0:	10fff70e 	bge	r2,r3,2a80 <_malloc_r+0xd0>
    2aa4:	31bfffc4 	addi	r6,r6,-1
    2aa8:	32400044 	addi	r9,r6,1
    2aac:	02800074 	movhi	r10,1
    2ab0:	52bdd504 	addi	r10,r10,-2220
    2ab4:	54000217 	ldw	r16,8(r10)
    2ab8:	8280a026 	beq	r16,r10,2d3c <_malloc_r+0x38c>
    2abc:	80800117 	ldw	r2,4(r16)
    2ac0:	00ffff04 	movi	r3,-4
    2ac4:	10ca703a 	and	r5,r2,r3
    2ac8:	2c4dc83a 	sub	r6,r5,r17
    2acc:	008003c4 	movi	r2,15
    2ad0:	11808316 	blt	r2,r6,2ce0 <_malloc_r+0x330>
    2ad4:	52800315 	stw	r10,12(r10)
    2ad8:	52800215 	stw	r10,8(r10)
    2adc:	30002916 	blt	r6,zero,2b84 <_malloc_r+0x1d4>
    2ae0:	8147883a 	add	r3,r16,r5
    2ae4:	18800117 	ldw	r2,4(r3)
    2ae8:	9009883a 	mov	r4,r18
    2aec:	10800054 	ori	r2,r2,1
    2af0:	18800115 	stw	r2,4(r3)
    2af4:	000ca200 	call	ca20 <__malloc_unlock>
    2af8:	80c00204 	addi	r3,r16,8
    2afc:	003fc006 	br	2a00 <_malloc_r+0x50>
    2b00:	02c00074 	movhi	r11,1
    2b04:	5afdd304 	addi	r11,r11,-2228
    2b08:	8ac5883a 	add	r2,r17,r11
    2b0c:	14000317 	ldw	r16,12(r2)
    2b10:	580f883a 	mov	r7,r11
    2b14:	8806d0fa 	srli	r3,r17,3
    2b18:	14006c26 	beq	r2,r16,2ccc <_malloc_r+0x31c>
    2b1c:	80c00117 	ldw	r3,4(r16)
    2b20:	00bfff04 	movi	r2,-4
    2b24:	81800317 	ldw	r6,12(r16)
    2b28:	1886703a 	and	r3,r3,r2
    2b2c:	80c7883a 	add	r3,r16,r3
    2b30:	18800117 	ldw	r2,4(r3)
    2b34:	81400217 	ldw	r5,8(r16)
    2b38:	9009883a 	mov	r4,r18
    2b3c:	10800054 	ori	r2,r2,1
    2b40:	18800115 	stw	r2,4(r3)
    2b44:	31400215 	stw	r5,8(r6)
    2b48:	29800315 	stw	r6,12(r5)
    2b4c:	000ca200 	call	ca20 <__malloc_unlock>
    2b50:	80c00204 	addi	r3,r16,8
    2b54:	003faa06 	br	2a00 <_malloc_r+0x50>
    2b58:	00800104 	movi	r2,4
    2b5c:	10c0052e 	bgeu	r2,r3,2b74 <_malloc_r+0x1c4>
    2b60:	00800504 	movi	r2,20
    2b64:	10c07836 	bltu	r2,r3,2d48 <_malloc_r+0x398>
    2b68:	198016c4 	addi	r6,r3,91
    2b6c:	300490fa 	slli	r2,r6,3
    2b70:	003fbc06 	br	2a64 <_malloc_r+0xb4>
    2b74:	8804d1ba 	srli	r2,r17,6
    2b78:	11800e04 	addi	r6,r2,56
    2b7c:	300490fa 	slli	r2,r6,3
    2b80:	003fb806 	br	2a64 <_malloc_r+0xb4>
    2b84:	00807fc4 	movi	r2,511
    2b88:	1140bb36 	bltu	r2,r5,2e78 <_malloc_r+0x4c8>
    2b8c:	2806d0fa 	srli	r3,r5,3
    2b90:	573ffe04 	addi	fp,r10,-8
    2b94:	00800044 	movi	r2,1
    2b98:	180890fa 	slli	r4,r3,3
    2b9c:	1807d0ba 	srai	r3,r3,2
    2ba0:	e1c00117 	ldw	r7,4(fp)
    2ba4:	5909883a 	add	r4,r11,r4
    2ba8:	21400217 	ldw	r5,8(r4)
    2bac:	10c4983a 	sll	r2,r2,r3
    2bb0:	81000315 	stw	r4,12(r16)
    2bb4:	81400215 	stw	r5,8(r16)
    2bb8:	388eb03a 	or	r7,r7,r2
    2bbc:	2c000315 	stw	r16,12(r5)
    2bc0:	24000215 	stw	r16,8(r4)
    2bc4:	e1c00115 	stw	r7,4(fp)
    2bc8:	4807883a 	mov	r3,r9
    2bcc:	4800cd16 	blt	r9,zero,2f04 <_malloc_r+0x554>
    2bd0:	1807d0ba 	srai	r3,r3,2
    2bd4:	00800044 	movi	r2,1
    2bd8:	10c8983a 	sll	r4,r2,r3
    2bdc:	39004436 	bltu	r7,r4,2cf0 <_malloc_r+0x340>
    2be0:	21c4703a 	and	r2,r4,r7
    2be4:	10000a1e 	bne	r2,zero,2c10 <_malloc_r+0x260>
    2be8:	2109883a 	add	r4,r4,r4
    2bec:	00bfff04 	movi	r2,-4
    2bf0:	4884703a 	and	r2,r9,r2
    2bf4:	3906703a 	and	r3,r7,r4
    2bf8:	12400104 	addi	r9,r2,4
    2bfc:	1800041e 	bne	r3,zero,2c10 <_malloc_r+0x260>
    2c00:	2109883a 	add	r4,r4,r4
    2c04:	3904703a 	and	r2,r7,r4
    2c08:	4a400104 	addi	r9,r9,4
    2c0c:	103ffc26 	beq	r2,zero,2c00 <_malloc_r+0x250>
    2c10:	480490fa 	slli	r2,r9,3
    2c14:	4819883a 	mov	r12,r9
    2c18:	023fff04 	movi	r8,-4
    2c1c:	589b883a 	add	r13,r11,r2
    2c20:	6807883a 	mov	r3,r13
    2c24:	014003c4 	movi	r5,15
    2c28:	1c000317 	ldw	r16,12(r3)
    2c2c:	1c00041e 	bne	r3,r16,2c40 <_malloc_r+0x290>
    2c30:	0000a706 	br	2ed0 <_malloc_r+0x520>
    2c34:	3000ab0e 	bge	r6,zero,2ee4 <_malloc_r+0x534>
    2c38:	84000317 	ldw	r16,12(r16)
    2c3c:	1c00a426 	beq	r3,r16,2ed0 <_malloc_r+0x520>
    2c40:	80800117 	ldw	r2,4(r16)
    2c44:	1204703a 	and	r2,r2,r8
    2c48:	144dc83a 	sub	r6,r2,r17
    2c4c:	29bff90e 	bge	r5,r6,2c34 <_malloc_r+0x284>
    2c50:	81000317 	ldw	r4,12(r16)
    2c54:	80c00217 	ldw	r3,8(r16)
    2c58:	89400054 	ori	r5,r17,1
    2c5c:	8445883a 	add	r2,r16,r17
    2c60:	20c00215 	stw	r3,8(r4)
    2c64:	19000315 	stw	r4,12(r3)
    2c68:	81400115 	stw	r5,4(r16)
    2c6c:	1187883a 	add	r3,r2,r6
    2c70:	31000054 	ori	r4,r6,1
    2c74:	50800315 	stw	r2,12(r10)
    2c78:	50800215 	stw	r2,8(r10)
    2c7c:	19800015 	stw	r6,0(r3)
    2c80:	11000115 	stw	r4,4(r2)
    2c84:	12800215 	stw	r10,8(r2)
    2c88:	12800315 	stw	r10,12(r2)
    2c8c:	9009883a 	mov	r4,r18
    2c90:	000ca200 	call	ca20 <__malloc_unlock>
    2c94:	80c00204 	addi	r3,r16,8
    2c98:	003f5906 	br	2a00 <_malloc_r+0x50>
    2c9c:	8109883a 	add	r4,r16,r4
    2ca0:	20800117 	ldw	r2,4(r4)
    2ca4:	80c00217 	ldw	r3,8(r16)
    2ca8:	81400317 	ldw	r5,12(r16)
    2cac:	10800054 	ori	r2,r2,1
    2cb0:	20800115 	stw	r2,4(r4)
    2cb4:	28c00215 	stw	r3,8(r5)
    2cb8:	19400315 	stw	r5,12(r3)
    2cbc:	9009883a 	mov	r4,r18
    2cc0:	000ca200 	call	ca20 <__malloc_unlock>
    2cc4:	80c00204 	addi	r3,r16,8
    2cc8:	003f4d06 	br	2a00 <_malloc_r+0x50>
    2ccc:	80800204 	addi	r2,r16,8
    2cd0:	14000317 	ldw	r16,12(r2)
    2cd4:	143f911e 	bne	r2,r16,2b1c <_malloc_r+0x16c>
    2cd8:	1a400084 	addi	r9,r3,2
    2cdc:	003f7306 	br	2aac <_malloc_r+0xfc>
    2ce0:	88c00054 	ori	r3,r17,1
    2ce4:	8445883a 	add	r2,r16,r17
    2ce8:	80c00115 	stw	r3,4(r16)
    2cec:	003fdf06 	br	2c6c <_malloc_r+0x2bc>
    2cf0:	e4000217 	ldw	r16,8(fp)
    2cf4:	00bfff04 	movi	r2,-4
    2cf8:	80c00117 	ldw	r3,4(r16)
    2cfc:	802d883a 	mov	r22,r16
    2d00:	18aa703a 	and	r21,r3,r2
    2d04:	ac401636 	bltu	r21,r17,2d60 <_malloc_r+0x3b0>
    2d08:	ac49c83a 	sub	r4,r21,r17
    2d0c:	008003c4 	movi	r2,15
    2d10:	1100130e 	bge	r2,r4,2d60 <_malloc_r+0x3b0>
    2d14:	88800054 	ori	r2,r17,1
    2d18:	8447883a 	add	r3,r16,r17
    2d1c:	80800115 	stw	r2,4(r16)
    2d20:	20800054 	ori	r2,r4,1
    2d24:	18800115 	stw	r2,4(r3)
    2d28:	e0c00215 	stw	r3,8(fp)
    2d2c:	9009883a 	mov	r4,r18
    2d30:	000ca200 	call	ca20 <__malloc_unlock>
    2d34:	80c00204 	addi	r3,r16,8
    2d38:	003f3106 	br	2a00 <_malloc_r+0x50>
    2d3c:	39c00117 	ldw	r7,4(r7)
    2d40:	573ffe04 	addi	fp,r10,-8
    2d44:	003fa006 	br	2bc8 <_malloc_r+0x218>
    2d48:	00801504 	movi	r2,84
    2d4c:	10c06736 	bltu	r2,r3,2eec <_malloc_r+0x53c>
    2d50:	8804d33a 	srli	r2,r17,12
    2d54:	11801b84 	addi	r6,r2,110
    2d58:	300490fa 	slli	r2,r6,3
    2d5c:	003f4106 	br	2a64 <_malloc_r+0xb4>
    2d60:	d0a6c517 	ldw	r2,-25836(gp)
    2d64:	d0e00517 	ldw	r3,-32748(gp)
    2d68:	053fffc4 	movi	r20,-1
    2d6c:	10800404 	addi	r2,r2,16
    2d70:	88a7883a 	add	r19,r17,r2
    2d74:	1d000326 	beq	r3,r20,2d84 <_malloc_r+0x3d4>
    2d78:	98c3ffc4 	addi	r3,r19,4095
    2d7c:	00bc0004 	movi	r2,-4096
    2d80:	18a6703a 	and	r19,r3,r2
    2d84:	9009883a 	mov	r4,r18
    2d88:	980b883a 	mov	r5,r19
    2d8c:	000321c0 	call	321c <_sbrk_r>
    2d90:	1009883a 	mov	r4,r2
    2d94:	15000426 	beq	r2,r20,2da8 <_malloc_r+0x3f8>
    2d98:	854b883a 	add	r5,r16,r21
    2d9c:	1029883a 	mov	r20,r2
    2da0:	11405a2e 	bgeu	r2,r5,2f0c <_malloc_r+0x55c>
    2da4:	87000c26 	beq	r16,fp,2dd8 <_malloc_r+0x428>
    2da8:	e4000217 	ldw	r16,8(fp)
    2dac:	80c00117 	ldw	r3,4(r16)
    2db0:	00bfff04 	movi	r2,-4
    2db4:	1884703a 	and	r2,r3,r2
    2db8:	14400336 	bltu	r2,r17,2dc8 <_malloc_r+0x418>
    2dbc:	1449c83a 	sub	r4,r2,r17
    2dc0:	008003c4 	movi	r2,15
    2dc4:	113fd316 	blt	r2,r4,2d14 <_malloc_r+0x364>
    2dc8:	9009883a 	mov	r4,r18
    2dcc:	000ca200 	call	ca20 <__malloc_unlock>
    2dd0:	0007883a 	mov	r3,zero
    2dd4:	003f0a06 	br	2a00 <_malloc_r+0x50>
    2dd8:	05c00074 	movhi	r23,1
    2ddc:	bdca3604 	addi	r23,r23,10456
    2de0:	b8800017 	ldw	r2,0(r23)
    2de4:	988d883a 	add	r6,r19,r2
    2de8:	b9800015 	stw	r6,0(r23)
    2dec:	d0e00517 	ldw	r3,-32748(gp)
    2df0:	00bfffc4 	movi	r2,-1
    2df4:	18808e26 	beq	r3,r2,3030 <_malloc_r+0x680>
    2df8:	2145c83a 	sub	r2,r4,r5
    2dfc:	3085883a 	add	r2,r6,r2
    2e00:	b8800015 	stw	r2,0(r23)
    2e04:	20c001cc 	andi	r3,r4,7
    2e08:	18005f1e 	bne	r3,zero,2f88 <_malloc_r+0x5d8>
    2e0c:	000b883a 	mov	r5,zero
    2e10:	a4c5883a 	add	r2,r20,r19
    2e14:	1083ffcc 	andi	r2,r2,4095
    2e18:	00c40004 	movi	r3,4096
    2e1c:	1887c83a 	sub	r3,r3,r2
    2e20:	28e7883a 	add	r19,r5,r3
    2e24:	9009883a 	mov	r4,r18
    2e28:	980b883a 	mov	r5,r19
    2e2c:	000321c0 	call	321c <_sbrk_r>
    2e30:	1007883a 	mov	r3,r2
    2e34:	00bfffc4 	movi	r2,-1
    2e38:	18807a26 	beq	r3,r2,3024 <_malloc_r+0x674>
    2e3c:	1d05c83a 	sub	r2,r3,r20
    2e40:	9885883a 	add	r2,r19,r2
    2e44:	10c00054 	ori	r3,r2,1
    2e48:	b8800017 	ldw	r2,0(r23)
    2e4c:	a021883a 	mov	r16,r20
    2e50:	a0c00115 	stw	r3,4(r20)
    2e54:	9885883a 	add	r2,r19,r2
    2e58:	b8800015 	stw	r2,0(r23)
    2e5c:	e5000215 	stw	r20,8(fp)
    2e60:	b7003626 	beq	r22,fp,2f3c <_malloc_r+0x58c>
    2e64:	018003c4 	movi	r6,15
    2e68:	35404b36 	bltu	r6,r21,2f98 <_malloc_r+0x5e8>
    2e6c:	00800044 	movi	r2,1
    2e70:	a0800115 	stw	r2,4(r20)
    2e74:	003fcd06 	br	2dac <_malloc_r+0x3fc>
    2e78:	2808d27a 	srli	r4,r5,9
    2e7c:	2000371e 	bne	r4,zero,2f5c <_malloc_r+0x5ac>
    2e80:	2808d0fa 	srli	r4,r5,3
    2e84:	200690fa 	slli	r3,r4,3
    2e88:	1ad1883a 	add	r8,r3,r11
    2e8c:	41800217 	ldw	r6,8(r8)
    2e90:	41805b26 	beq	r8,r6,3000 <_malloc_r+0x650>
    2e94:	30800117 	ldw	r2,4(r6)
    2e98:	00ffff04 	movi	r3,-4
    2e9c:	10c4703a 	and	r2,r2,r3
    2ea0:	2880022e 	bgeu	r5,r2,2eac <_malloc_r+0x4fc>
    2ea4:	31800217 	ldw	r6,8(r6)
    2ea8:	41bffa1e 	bne	r8,r6,2e94 <_malloc_r+0x4e4>
    2eac:	32000317 	ldw	r8,12(r6)
    2eb0:	39c00117 	ldw	r7,4(r7)
    2eb4:	82000315 	stw	r8,12(r16)
    2eb8:	81800215 	stw	r6,8(r16)
    2ebc:	07000074 	movhi	fp,1
    2ec0:	e73dd304 	addi	fp,fp,-2228
    2ec4:	34000315 	stw	r16,12(r6)
    2ec8:	44000215 	stw	r16,8(r8)
    2ecc:	003f3e06 	br	2bc8 <_malloc_r+0x218>
    2ed0:	63000044 	addi	r12,r12,1
    2ed4:	608000cc 	andi	r2,r12,3
    2ed8:	10005d26 	beq	r2,zero,3050 <_malloc_r+0x6a0>
    2edc:	18c00204 	addi	r3,r3,8
    2ee0:	003f5106 	br	2c28 <_malloc_r+0x278>
    2ee4:	8089883a 	add	r4,r16,r2
    2ee8:	003f6d06 	br	2ca0 <_malloc_r+0x2f0>
    2eec:	00805504 	movi	r2,340
    2ef0:	10c02036 	bltu	r2,r3,2f74 <_malloc_r+0x5c4>
    2ef4:	8804d3fa 	srli	r2,r17,15
    2ef8:	11801dc4 	addi	r6,r2,119
    2efc:	300490fa 	slli	r2,r6,3
    2f00:	003ed806 	br	2a64 <_malloc_r+0xb4>
    2f04:	48c000c4 	addi	r3,r9,3
    2f08:	003f3106 	br	2bd0 <_malloc_r+0x220>
    2f0c:	05c00074 	movhi	r23,1
    2f10:	bdca3604 	addi	r23,r23,10456
    2f14:	b8800017 	ldw	r2,0(r23)
    2f18:	988d883a 	add	r6,r19,r2
    2f1c:	b9800015 	stw	r6,0(r23)
    2f20:	293fb21e 	bne	r5,r4,2dec <_malloc_r+0x43c>
    2f24:	2083ffcc 	andi	r2,r4,4095
    2f28:	103fb01e 	bne	r2,zero,2dec <_malloc_r+0x43c>
    2f2c:	e4000217 	ldw	r16,8(fp)
    2f30:	9d45883a 	add	r2,r19,r21
    2f34:	10800054 	ori	r2,r2,1
    2f38:	80800115 	stw	r2,4(r16)
    2f3c:	b8c00017 	ldw	r3,0(r23)
    2f40:	d0a6c617 	ldw	r2,-25832(gp)
    2f44:	10c0012e 	bgeu	r2,r3,2f4c <_malloc_r+0x59c>
    2f48:	d0e6c615 	stw	r3,-25832(gp)
    2f4c:	d0a6c717 	ldw	r2,-25828(gp)
    2f50:	10ff962e 	bgeu	r2,r3,2dac <_malloc_r+0x3fc>
    2f54:	d0e6c715 	stw	r3,-25828(gp)
    2f58:	003f9406 	br	2dac <_malloc_r+0x3fc>
    2f5c:	00800104 	movi	r2,4
    2f60:	11001e36 	bltu	r2,r4,2fdc <_malloc_r+0x62c>
    2f64:	2804d1ba 	srli	r2,r5,6
    2f68:	11000e04 	addi	r4,r2,56
    2f6c:	200690fa 	slli	r3,r4,3
    2f70:	003fc506 	br	2e88 <_malloc_r+0x4d8>
    2f74:	00815504 	movi	r2,1364
    2f78:	10c01d2e 	bgeu	r2,r3,2ff0 <_malloc_r+0x640>
    2f7c:	01801f84 	movi	r6,126
    2f80:	0080fc04 	movi	r2,1008
    2f84:	003eb706 	br	2a64 <_malloc_r+0xb4>
    2f88:	00800204 	movi	r2,8
    2f8c:	10cbc83a 	sub	r5,r2,r3
    2f90:	2169883a 	add	r20,r4,r5
    2f94:	003f9e06 	br	2e10 <_malloc_r+0x460>
    2f98:	00bffe04 	movi	r2,-8
    2f9c:	a93ffd04 	addi	r4,r21,-12
    2fa0:	2088703a 	and	r4,r4,r2
    2fa4:	b10b883a 	add	r5,r22,r4
    2fa8:	00c00144 	movi	r3,5
    2fac:	28c00215 	stw	r3,8(r5)
    2fb0:	28c00115 	stw	r3,4(r5)
    2fb4:	b0800117 	ldw	r2,4(r22)
    2fb8:	1080004c 	andi	r2,r2,1
    2fbc:	2084b03a 	or	r2,r4,r2
    2fc0:	b0800115 	stw	r2,4(r22)
    2fc4:	313fdd2e 	bgeu	r6,r4,2f3c <_malloc_r+0x58c>
    2fc8:	b1400204 	addi	r5,r22,8
    2fcc:	9009883a 	mov	r4,r18
    2fd0:	00073000 	call	7300 <_free_r>
    2fd4:	e4000217 	ldw	r16,8(fp)
    2fd8:	003fd806 	br	2f3c <_malloc_r+0x58c>
    2fdc:	00800504 	movi	r2,20
    2fe0:	11001536 	bltu	r2,r4,3038 <_malloc_r+0x688>
    2fe4:	210016c4 	addi	r4,r4,91
    2fe8:	200690fa 	slli	r3,r4,3
    2fec:	003fa606 	br	2e88 <_malloc_r+0x4d8>
    2ff0:	8804d4ba 	srli	r2,r17,18
    2ff4:	11801f04 	addi	r6,r2,124
    2ff8:	300490fa 	slli	r2,r6,3
    2ffc:	003e9906 	br	2a64 <_malloc_r+0xb4>
    3000:	2009d0ba 	srai	r4,r4,2
    3004:	01400074 	movhi	r5,1
    3008:	297dd304 	addi	r5,r5,-2228
    300c:	00c00044 	movi	r3,1
    3010:	28800117 	ldw	r2,4(r5)
    3014:	1906983a 	sll	r3,r3,r4
    3018:	10c4b03a 	or	r2,r2,r3
    301c:	28800115 	stw	r2,4(r5)
    3020:	003fa306 	br	2eb0 <_malloc_r+0x500>
    3024:	0027883a 	mov	r19,zero
    3028:	00c00044 	movi	r3,1
    302c:	003f8606 	br	2e48 <_malloc_r+0x498>
    3030:	d1200515 	stw	r4,-32748(gp)
    3034:	003f7306 	br	2e04 <_malloc_r+0x454>
    3038:	00801504 	movi	r2,84
    303c:	11001936 	bltu	r2,r4,30a4 <_malloc_r+0x6f4>
    3040:	2804d33a 	srli	r2,r5,12
    3044:	11001b84 	addi	r4,r2,110
    3048:	200690fa 	slli	r3,r4,3
    304c:	003f8e06 	br	2e88 <_malloc_r+0x4d8>
    3050:	480b883a 	mov	r5,r9
    3054:	6807883a 	mov	r3,r13
    3058:	288000cc 	andi	r2,r5,3
    305c:	18fffe04 	addi	r3,r3,-8
    3060:	297fffc4 	addi	r5,r5,-1
    3064:	10001526 	beq	r2,zero,30bc <_malloc_r+0x70c>
    3068:	18800217 	ldw	r2,8(r3)
    306c:	10fffa26 	beq	r2,r3,3058 <_malloc_r+0x6a8>
    3070:	2109883a 	add	r4,r4,r4
    3074:	393f1e36 	bltu	r7,r4,2cf0 <_malloc_r+0x340>
    3078:	203f1d26 	beq	r4,zero,2cf0 <_malloc_r+0x340>
    307c:	21c4703a 	and	r2,r4,r7
    3080:	10000226 	beq	r2,zero,308c <_malloc_r+0x6dc>
    3084:	6013883a 	mov	r9,r12
    3088:	003ee106 	br	2c10 <_malloc_r+0x260>
    308c:	2109883a 	add	r4,r4,r4
    3090:	3904703a 	and	r2,r7,r4
    3094:	63000104 	addi	r12,r12,4
    3098:	103ffc26 	beq	r2,zero,308c <_malloc_r+0x6dc>
    309c:	6013883a 	mov	r9,r12
    30a0:	003edb06 	br	2c10 <_malloc_r+0x260>
    30a4:	00805504 	movi	r2,340
    30a8:	11000836 	bltu	r2,r4,30cc <_malloc_r+0x71c>
    30ac:	2804d3fa 	srli	r2,r5,15
    30b0:	11001dc4 	addi	r4,r2,119
    30b4:	200690fa 	slli	r3,r4,3
    30b8:	003f7306 	br	2e88 <_malloc_r+0x4d8>
    30bc:	0104303a 	nor	r2,zero,r4
    30c0:	388e703a 	and	r7,r7,r2
    30c4:	e1c00115 	stw	r7,4(fp)
    30c8:	003fe906 	br	3070 <_malloc_r+0x6c0>
    30cc:	00815504 	movi	r2,1364
    30d0:	1100032e 	bgeu	r2,r4,30e0 <_malloc_r+0x730>
    30d4:	01001f84 	movi	r4,126
    30d8:	00c0fc04 	movi	r3,1008
    30dc:	003f6a06 	br	2e88 <_malloc_r+0x4d8>
    30e0:	2804d4ba 	srli	r2,r5,18
    30e4:	11001f04 	addi	r4,r2,124
    30e8:	200690fa 	slli	r3,r4,3
    30ec:	003f6606 	br	2e88 <_malloc_r+0x4d8>

000030f0 <printf>:
    30f0:	defffb04 	addi	sp,sp,-20
    30f4:	dfc00115 	stw	ra,4(sp)
    30f8:	d9400215 	stw	r5,8(sp)
    30fc:	d9800315 	stw	r6,12(sp)
    3100:	d9c00415 	stw	r7,16(sp)
    3104:	00800074 	movhi	r2,1
    3108:	10835c04 	addi	r2,r2,3440
    310c:	10c00017 	ldw	r3,0(r2)
    3110:	200b883a 	mov	r5,r4
    3114:	d8800204 	addi	r2,sp,8
    3118:	19000217 	ldw	r4,8(r3)
    311c:	100d883a 	mov	r6,r2
    3120:	d8800015 	stw	r2,0(sp)
    3124:	00052040 	call	5204 <__vfprintf_internal>
    3128:	dfc00117 	ldw	ra,4(sp)
    312c:	dec00504 	addi	sp,sp,20
    3130:	f800283a 	ret

00003134 <_printf_r>:
    3134:	defffc04 	addi	sp,sp,-16
    3138:	dfc00115 	stw	ra,4(sp)
    313c:	d9800215 	stw	r6,8(sp)
    3140:	d9c00315 	stw	r7,12(sp)
    3144:	280d883a 	mov	r6,r5
    3148:	21400217 	ldw	r5,8(r4)
    314c:	d8c00204 	addi	r3,sp,8
    3150:	180f883a 	mov	r7,r3
    3154:	d8c00015 	stw	r3,0(sp)
    3158:	00033580 	call	3358 <___vfprintf_internal_r>
    315c:	dfc00117 	ldw	ra,4(sp)
    3160:	dec00404 	addi	sp,sp,16
    3164:	f800283a 	ret

00003168 <_puts_r>:
    3168:	defff604 	addi	sp,sp,-40
    316c:	dc400715 	stw	r17,28(sp)
    3170:	2023883a 	mov	r17,r4
    3174:	2809883a 	mov	r4,r5
    3178:	dfc00915 	stw	ra,36(sp)
    317c:	dcc00815 	stw	r19,32(sp)
    3180:	2827883a 	mov	r19,r5
    3184:	000328c0 	call	328c <strlen>
    3188:	89400217 	ldw	r5,8(r17)
    318c:	00c00074 	movhi	r3,1
    3190:	18fbf504 	addi	r3,r3,-4140
    3194:	01c00044 	movi	r7,1
    3198:	12000044 	addi	r8,r2,1
    319c:	d8c00515 	stw	r3,20(sp)
    31a0:	d9c00615 	stw	r7,24(sp)
    31a4:	d8c00304 	addi	r3,sp,12
    31a8:	01c00084 	movi	r7,2
    31ac:	8809883a 	mov	r4,r17
    31b0:	d80d883a 	mov	r6,sp
    31b4:	d8c00015 	stw	r3,0(sp)
    31b8:	dcc00315 	stw	r19,12(sp)
    31bc:	da000215 	stw	r8,8(sp)
    31c0:	d9c00115 	stw	r7,4(sp)
    31c4:	d8800415 	stw	r2,16(sp)
    31c8:	00076140 	call	7614 <__sfvwrite_r>
    31cc:	00ffffc4 	movi	r3,-1
    31d0:	10000626 	beq	r2,zero,31ec <_puts_r+0x84>
    31d4:	1805883a 	mov	r2,r3
    31d8:	dfc00917 	ldw	ra,36(sp)
    31dc:	dcc00817 	ldw	r19,32(sp)
    31e0:	dc400717 	ldw	r17,28(sp)
    31e4:	dec00a04 	addi	sp,sp,40
    31e8:	f800283a 	ret
    31ec:	00c00284 	movi	r3,10
    31f0:	1805883a 	mov	r2,r3
    31f4:	dfc00917 	ldw	ra,36(sp)
    31f8:	dcc00817 	ldw	r19,32(sp)
    31fc:	dc400717 	ldw	r17,28(sp)
    3200:	dec00a04 	addi	sp,sp,40
    3204:	f800283a 	ret

00003208 <puts>:
    3208:	00800074 	movhi	r2,1
    320c:	10835c04 	addi	r2,r2,3440
    3210:	200b883a 	mov	r5,r4
    3214:	11000017 	ldw	r4,0(r2)
    3218:	00031681 	jmpi	3168 <_puts_r>

0000321c <_sbrk_r>:
    321c:	defffd04 	addi	sp,sp,-12
    3220:	dc000015 	stw	r16,0(sp)
    3224:	04000074 	movhi	r16,1
    3228:	840a2204 	addi	r16,r16,10376
    322c:	dc400115 	stw	r17,4(sp)
    3230:	80000015 	stw	zero,0(r16)
    3234:	2023883a 	mov	r17,r4
    3238:	2809883a 	mov	r4,r5
    323c:	dfc00215 	stw	ra,8(sp)
    3240:	000cc200 	call	cc20 <sbrk>
    3244:	1007883a 	mov	r3,r2
    3248:	00bfffc4 	movi	r2,-1
    324c:	18800626 	beq	r3,r2,3268 <_sbrk_r+0x4c>
    3250:	1805883a 	mov	r2,r3
    3254:	dfc00217 	ldw	ra,8(sp)
    3258:	dc400117 	ldw	r17,4(sp)
    325c:	dc000017 	ldw	r16,0(sp)
    3260:	dec00304 	addi	sp,sp,12
    3264:	f800283a 	ret
    3268:	80800017 	ldw	r2,0(r16)
    326c:	103ff826 	beq	r2,zero,3250 <_sbrk_r+0x34>
    3270:	88800015 	stw	r2,0(r17)
    3274:	1805883a 	mov	r2,r3
    3278:	dfc00217 	ldw	ra,8(sp)
    327c:	dc400117 	ldw	r17,4(sp)
    3280:	dc000017 	ldw	r16,0(sp)
    3284:	dec00304 	addi	sp,sp,12
    3288:	f800283a 	ret

0000328c <strlen>:
    328c:	208000cc 	andi	r2,r4,3
    3290:	2011883a 	mov	r8,r4
    3294:	1000161e 	bne	r2,zero,32f0 <strlen+0x64>
    3298:	20c00017 	ldw	r3,0(r4)
    329c:	017fbff4 	movhi	r5,65279
    32a0:	297fbfc4 	addi	r5,r5,-257
    32a4:	01e02074 	movhi	r7,32897
    32a8:	39e02004 	addi	r7,r7,-32640
    32ac:	1945883a 	add	r2,r3,r5
    32b0:	11c4703a 	and	r2,r2,r7
    32b4:	00c6303a 	nor	r3,zero,r3
    32b8:	1886703a 	and	r3,r3,r2
    32bc:	18000c1e 	bne	r3,zero,32f0 <strlen+0x64>
    32c0:	280d883a 	mov	r6,r5
    32c4:	380b883a 	mov	r5,r7
    32c8:	21000104 	addi	r4,r4,4
    32cc:	20800017 	ldw	r2,0(r4)
    32d0:	1187883a 	add	r3,r2,r6
    32d4:	1946703a 	and	r3,r3,r5
    32d8:	0084303a 	nor	r2,zero,r2
    32dc:	10c4703a 	and	r2,r2,r3
    32e0:	103ff926 	beq	r2,zero,32c8 <strlen+0x3c>
    32e4:	20800007 	ldb	r2,0(r4)
    32e8:	10000326 	beq	r2,zero,32f8 <strlen+0x6c>
    32ec:	21000044 	addi	r4,r4,1
    32f0:	20800007 	ldb	r2,0(r4)
    32f4:	103ffd1e 	bne	r2,zero,32ec <strlen+0x60>
    32f8:	2205c83a 	sub	r2,r4,r8
    32fc:	f800283a 	ret

00003300 <__sprint_r>:
    3300:	30800217 	ldw	r2,8(r6)
    3304:	defffe04 	addi	sp,sp,-8
    3308:	dc000015 	stw	r16,0(sp)
    330c:	dfc00115 	stw	ra,4(sp)
    3310:	3021883a 	mov	r16,r6
    3314:	0007883a 	mov	r3,zero
    3318:	1000061e 	bne	r2,zero,3334 <__sprint_r+0x34>
    331c:	1805883a 	mov	r2,r3
    3320:	30000115 	stw	zero,4(r6)
    3324:	dfc00117 	ldw	ra,4(sp)
    3328:	dc000017 	ldw	r16,0(sp)
    332c:	dec00204 	addi	sp,sp,8
    3330:	f800283a 	ret
    3334:	00076140 	call	7614 <__sfvwrite_r>
    3338:	1007883a 	mov	r3,r2
    333c:	1805883a 	mov	r2,r3
    3340:	80000115 	stw	zero,4(r16)
    3344:	80000215 	stw	zero,8(r16)
    3348:	dfc00117 	ldw	ra,4(sp)
    334c:	dc000017 	ldw	r16,0(sp)
    3350:	dec00204 	addi	sp,sp,8
    3354:	f800283a 	ret

00003358 <___vfprintf_internal_r>:
    3358:	defea404 	addi	sp,sp,-1392
    335c:	dd815815 	stw	r22,1376(sp)
    3360:	dc015215 	stw	r16,1352(sp)
    3364:	d9c15115 	stw	r7,1348(sp)
    3368:	dfc15b15 	stw	ra,1388(sp)
    336c:	df015a15 	stw	fp,1384(sp)
    3370:	ddc15915 	stw	r23,1380(sp)
    3374:	dd415715 	stw	r21,1372(sp)
    3378:	dd015615 	stw	r20,1368(sp)
    337c:	dcc15515 	stw	r19,1364(sp)
    3380:	dc815415 	stw	r18,1360(sp)
    3384:	dc415315 	stw	r17,1356(sp)
    3388:	282d883a 	mov	r22,r5
    338c:	3021883a 	mov	r16,r6
    3390:	d9014f15 	stw	r4,1340(sp)
    3394:	0007c380 	call	7c38 <_localeconv_r>
    3398:	10800017 	ldw	r2,0(r2)
    339c:	d9c15117 	ldw	r7,1348(sp)
    33a0:	d8814915 	stw	r2,1316(sp)
    33a4:	d8814f17 	ldw	r2,1340(sp)
    33a8:	10000226 	beq	r2,zero,33b4 <___vfprintf_internal_r+0x5c>
    33ac:	10800e17 	ldw	r2,56(r2)
    33b0:	10020d26 	beq	r2,zero,3be8 <___vfprintf_internal_r+0x890>
    33b4:	b080030b 	ldhu	r2,12(r22)
    33b8:	1080020c 	andi	r2,r2,8
    33bc:	10020e26 	beq	r2,zero,3bf8 <___vfprintf_internal_r+0x8a0>
    33c0:	b0800417 	ldw	r2,16(r22)
    33c4:	10020c26 	beq	r2,zero,3bf8 <___vfprintf_internal_r+0x8a0>
    33c8:	b200030b 	ldhu	r8,12(r22)
    33cc:	00800284 	movi	r2,10
    33d0:	40c0068c 	andi	r3,r8,26
    33d4:	18802f1e 	bne	r3,r2,3494 <___vfprintf_internal_r+0x13c>
    33d8:	b080038f 	ldh	r2,14(r22)
    33dc:	10002d16 	blt	r2,zero,3494 <___vfprintf_internal_r+0x13c>
    33e0:	b240038b 	ldhu	r9,14(r22)
    33e4:	b2800717 	ldw	r10,28(r22)
    33e8:	b2c00917 	ldw	r11,36(r22)
    33ec:	d9014f17 	ldw	r4,1340(sp)
    33f0:	dc402904 	addi	r17,sp,164
    33f4:	d8804004 	addi	r2,sp,256
    33f8:	00c10004 	movi	r3,1024
    33fc:	423fff4c 	andi	r8,r8,65533
    3400:	800d883a 	mov	r6,r16
    3404:	880b883a 	mov	r5,r17
    3408:	da002c0d 	sth	r8,176(sp)
    340c:	da402c8d 	sth	r9,178(sp)
    3410:	da803015 	stw	r10,192(sp)
    3414:	dac03215 	stw	r11,200(sp)
    3418:	d8802d15 	stw	r2,180(sp)
    341c:	d8c02e15 	stw	r3,184(sp)
    3420:	d8802915 	stw	r2,164(sp)
    3424:	d8c02b15 	stw	r3,172(sp)
    3428:	d8002f15 	stw	zero,188(sp)
    342c:	00033580 	call	3358 <___vfprintf_internal_r>
    3430:	d8814b15 	stw	r2,1324(sp)
    3434:	10000416 	blt	r2,zero,3448 <___vfprintf_internal_r+0xf0>
    3438:	d9014f17 	ldw	r4,1340(sp)
    343c:	880b883a 	mov	r5,r17
    3440:	0006ce40 	call	6ce4 <_fflush_r>
    3444:	1002321e 	bne	r2,zero,3d10 <___vfprintf_internal_r+0x9b8>
    3448:	d8802c0b 	ldhu	r2,176(sp)
    344c:	1080100c 	andi	r2,r2,64
    3450:	10000326 	beq	r2,zero,3460 <___vfprintf_internal_r+0x108>
    3454:	b080030b 	ldhu	r2,12(r22)
    3458:	10801014 	ori	r2,r2,64
    345c:	b080030d 	sth	r2,12(r22)
    3460:	d8814b17 	ldw	r2,1324(sp)
    3464:	dfc15b17 	ldw	ra,1388(sp)
    3468:	df015a17 	ldw	fp,1384(sp)
    346c:	ddc15917 	ldw	r23,1380(sp)
    3470:	dd815817 	ldw	r22,1376(sp)
    3474:	dd415717 	ldw	r21,1372(sp)
    3478:	dd015617 	ldw	r20,1368(sp)
    347c:	dcc15517 	ldw	r19,1364(sp)
    3480:	dc815417 	ldw	r18,1360(sp)
    3484:	dc415317 	ldw	r17,1356(sp)
    3488:	dc015217 	ldw	r16,1352(sp)
    348c:	dec15c04 	addi	sp,sp,1392
    3490:	f800283a 	ret
    3494:	0005883a 	mov	r2,zero
    3498:	0007883a 	mov	r3,zero
    349c:	dd401904 	addi	r21,sp,100
    34a0:	d8814215 	stw	r2,1288(sp)
    34a4:	802f883a 	mov	r23,r16
    34a8:	d8c14315 	stw	r3,1292(sp)
    34ac:	d8014b15 	stw	zero,1324(sp)
    34b0:	d8014815 	stw	zero,1312(sp)
    34b4:	d8014415 	stw	zero,1296(sp)
    34b8:	d8014715 	stw	zero,1308(sp)
    34bc:	dd400c15 	stw	r21,48(sp)
    34c0:	d8000e15 	stw	zero,56(sp)
    34c4:	d8000d15 	stw	zero,52(sp)
    34c8:	b8800007 	ldb	r2,0(r23)
    34cc:	10001926 	beq	r2,zero,3534 <___vfprintf_internal_r+0x1dc>
    34d0:	00c00944 	movi	r3,37
    34d4:	10c01726 	beq	r2,r3,3534 <___vfprintf_internal_r+0x1dc>
    34d8:	b821883a 	mov	r16,r23
    34dc:	00000106 	br	34e4 <___vfprintf_internal_r+0x18c>
    34e0:	10c00326 	beq	r2,r3,34f0 <___vfprintf_internal_r+0x198>
    34e4:	84000044 	addi	r16,r16,1
    34e8:	80800007 	ldb	r2,0(r16)
    34ec:	103ffc1e 	bne	r2,zero,34e0 <___vfprintf_internal_r+0x188>
    34f0:	85e7c83a 	sub	r19,r16,r23
    34f4:	98000e26 	beq	r19,zero,3530 <___vfprintf_internal_r+0x1d8>
    34f8:	dc800e17 	ldw	r18,56(sp)
    34fc:	dc400d17 	ldw	r17,52(sp)
    3500:	008001c4 	movi	r2,7
    3504:	94e5883a 	add	r18,r18,r19
    3508:	8c400044 	addi	r17,r17,1
    350c:	adc00015 	stw	r23,0(r21)
    3510:	dc800e15 	stw	r18,56(sp)
    3514:	acc00115 	stw	r19,4(r21)
    3518:	dc400d15 	stw	r17,52(sp)
    351c:	14428b16 	blt	r2,r17,3f4c <___vfprintf_internal_r+0xbf4>
    3520:	ad400204 	addi	r21,r21,8
    3524:	d9014b17 	ldw	r4,1324(sp)
    3528:	24c9883a 	add	r4,r4,r19
    352c:	d9014b15 	stw	r4,1324(sp)
    3530:	802f883a 	mov	r23,r16
    3534:	b8800007 	ldb	r2,0(r23)
    3538:	10013c26 	beq	r2,zero,3a2c <___vfprintf_internal_r+0x6d4>
    353c:	bdc00044 	addi	r23,r23,1
    3540:	d8000405 	stb	zero,16(sp)
    3544:	b8c00007 	ldb	r3,0(r23)
    3548:	04ffffc4 	movi	r19,-1
    354c:	d8014c15 	stw	zero,1328(sp)
    3550:	d8014a15 	stw	zero,1320(sp)
    3554:	d8c14d15 	stw	r3,1332(sp)
    3558:	bdc00044 	addi	r23,r23,1
    355c:	d9414d17 	ldw	r5,1332(sp)
    3560:	00801604 	movi	r2,88
    3564:	28fff804 	addi	r3,r5,-32
    3568:	10c06036 	bltu	r2,r3,36ec <___vfprintf_internal_r+0x394>
    356c:	18c5883a 	add	r2,r3,r3
    3570:	1085883a 	add	r2,r2,r2
    3574:	00c00034 	movhi	r3,0
    3578:	18cd6204 	addi	r3,r3,13704
    357c:	10c5883a 	add	r2,r2,r3
    3580:	11000017 	ldw	r4,0(r2)
    3584:	2000683a 	jmp	r4
    3588:	000044fc 	xorhi	zero,zero,275
    358c:	000036ec 	andhi	zero,zero,219
    3590:	000036ec 	andhi	zero,zero,219
    3594:	000044e8 	cmpgeui	zero,zero,275
    3598:	000036ec 	andhi	zero,zero,219
    359c:	000036ec 	andhi	zero,zero,219
    35a0:	000036ec 	andhi	zero,zero,219
    35a4:	000036ec 	andhi	zero,zero,219
    35a8:	000036ec 	andhi	zero,zero,219
    35ac:	000036ec 	andhi	zero,zero,219
    35b0:	000042c8 	cmpgei	zero,zero,267
    35b4:	000044d8 	cmpnei	zero,zero,275
    35b8:	000036ec 	andhi	zero,zero,219
    35bc:	000042e0 	cmpeqi	zero,zero,267
    35c0:	00004574 	movhi	zero,277
    35c4:	000036ec 	andhi	zero,zero,219
    35c8:	00004560 	cmpeqi	zero,zero,277
    35cc:	00004528 	cmpgeui	zero,zero,276
    35d0:	00004528 	cmpgeui	zero,zero,276
    35d4:	00004528 	cmpgeui	zero,zero,276
    35d8:	00004528 	cmpgeui	zero,zero,276
    35dc:	00004528 	cmpgeui	zero,zero,276
    35e0:	00004528 	cmpgeui	zero,zero,276
    35e4:	00004528 	cmpgeui	zero,zero,276
    35e8:	00004528 	cmpgeui	zero,zero,276
    35ec:	00004528 	cmpgeui	zero,zero,276
    35f0:	000036ec 	andhi	zero,zero,219
    35f4:	000036ec 	andhi	zero,zero,219
    35f8:	000036ec 	andhi	zero,zero,219
    35fc:	000036ec 	andhi	zero,zero,219
    3600:	000036ec 	andhi	zero,zero,219
    3604:	000036ec 	andhi	zero,zero,219
    3608:	000036ec 	andhi	zero,zero,219
    360c:	000036ec 	andhi	zero,zero,219
    3610:	000036ec 	andhi	zero,zero,219
    3614:	000036ec 	andhi	zero,zero,219
    3618:	00003d44 	movi	zero,245
    361c:	000043b0 	cmpltui	zero,zero,270
    3620:	000036ec 	andhi	zero,zero,219
    3624:	000043b0 	cmpltui	zero,zero,270
    3628:	000036ec 	andhi	zero,zero,219
    362c:	000036ec 	andhi	zero,zero,219
    3630:	000036ec 	andhi	zero,zero,219
    3634:	000036ec 	andhi	zero,zero,219
    3638:	00004514 	movui	zero,276
    363c:	000036ec 	andhi	zero,zero,219
    3640:	000036ec 	andhi	zero,zero,219
    3644:	00003df8 	rdprs	zero,zero,247
    3648:	000036ec 	andhi	zero,zero,219
    364c:	000036ec 	andhi	zero,zero,219
    3650:	000036ec 	andhi	zero,zero,219
    3654:	000036ec 	andhi	zero,zero,219
    3658:	000036ec 	andhi	zero,zero,219
    365c:	00003e44 	movi	zero,249
    3660:	000036ec 	andhi	zero,zero,219
    3664:	000036ec 	andhi	zero,zero,219
    3668:	00004464 	muli	zero,zero,273
    366c:	000036ec 	andhi	zero,zero,219
    3670:	000036ec 	andhi	zero,zero,219
    3674:	000036ec 	andhi	zero,zero,219
    3678:	000036ec 	andhi	zero,zero,219
    367c:	000036ec 	andhi	zero,zero,219
    3680:	000036ec 	andhi	zero,zero,219
    3684:	000036ec 	andhi	zero,zero,219
    3688:	000036ec 	andhi	zero,zero,219
    368c:	000036ec 	andhi	zero,zero,219
    3690:	000036ec 	andhi	zero,zero,219
    3694:	00004438 	rdprs	zero,zero,272
    3698:	00003d50 	cmplti	zero,zero,245
    369c:	000043b0 	cmpltui	zero,zero,270
    36a0:	000043b0 	cmpltui	zero,zero,270
    36a4:	000043b0 	cmpltui	zero,zero,270
    36a8:	0000439c 	xori	zero,zero,270
    36ac:	00003d50 	cmplti	zero,zero,245
    36b0:	000036ec 	andhi	zero,zero,219
    36b4:	000036ec 	andhi	zero,zero,219
    36b8:	00004324 	muli	zero,zero,268
    36bc:	000036ec 	andhi	zero,zero,219
    36c0:	000042f4 	movhi	zero,267
    36c4:	00003e04 	movi	zero,248
    36c8:	00004354 	movui	zero,269
    36cc:	00004340 	call	434 <init_button+0x34>
    36d0:	000036ec 	andhi	zero,zero,219
    36d4:	000045d0 	cmplti	zero,zero,279
    36d8:	000036ec 	andhi	zero,zero,219
    36dc:	00003e50 	cmplti	zero,zero,249
    36e0:	000036ec 	andhi	zero,zero,219
    36e4:	000036ec 	andhi	zero,zero,219
    36e8:	000044c8 	cmpgei	zero,zero,275
    36ec:	d9014d17 	ldw	r4,1332(sp)
    36f0:	2000ce26 	beq	r4,zero,3a2c <___vfprintf_internal_r+0x6d4>
    36f4:	01400044 	movi	r5,1
    36f8:	d9800f04 	addi	r6,sp,60
    36fc:	d9c14015 	stw	r7,1280(sp)
    3700:	d9414515 	stw	r5,1300(sp)
    3704:	d9814115 	stw	r6,1284(sp)
    3708:	280f883a 	mov	r7,r5
    370c:	d9000f05 	stb	r4,60(sp)
    3710:	d8000405 	stb	zero,16(sp)
    3714:	d8014615 	stw	zero,1304(sp)
    3718:	d8c14c17 	ldw	r3,1328(sp)
    371c:	1880008c 	andi	r2,r3,2
    3720:	1005003a 	cmpeq	r2,r2,zero
    3724:	d8815015 	stw	r2,1344(sp)
    3728:	1000031e 	bne	r2,zero,3738 <___vfprintf_internal_r+0x3e0>
    372c:	d9014517 	ldw	r4,1300(sp)
    3730:	21000084 	addi	r4,r4,2
    3734:	d9014515 	stw	r4,1300(sp)
    3738:	d9414c17 	ldw	r5,1328(sp)
    373c:	2940210c 	andi	r5,r5,132
    3740:	d9414e15 	stw	r5,1336(sp)
    3744:	28002d1e 	bne	r5,zero,37fc <___vfprintf_internal_r+0x4a4>
    3748:	d9814a17 	ldw	r6,1320(sp)
    374c:	d8814517 	ldw	r2,1300(sp)
    3750:	30a1c83a 	sub	r16,r6,r2
    3754:	0400290e 	bge	zero,r16,37fc <___vfprintf_internal_r+0x4a4>
    3758:	00800404 	movi	r2,16
    375c:	1404580e 	bge	r2,r16,48c0 <___vfprintf_internal_r+0x1568>
    3760:	dc800e17 	ldw	r18,56(sp)
    3764:	dc400d17 	ldw	r17,52(sp)
    3768:	1027883a 	mov	r19,r2
    376c:	07000074 	movhi	fp,1
    3770:	e73c1184 	addi	fp,fp,-4026
    3774:	050001c4 	movi	r20,7
    3778:	00000306 	br	3788 <___vfprintf_internal_r+0x430>
    377c:	843ffc04 	addi	r16,r16,-16
    3780:	ad400204 	addi	r21,r21,8
    3784:	9c00130e 	bge	r19,r16,37d4 <___vfprintf_internal_r+0x47c>
    3788:	94800404 	addi	r18,r18,16
    378c:	8c400044 	addi	r17,r17,1
    3790:	af000015 	stw	fp,0(r21)
    3794:	acc00115 	stw	r19,4(r21)
    3798:	dc800e15 	stw	r18,56(sp)
    379c:	dc400d15 	stw	r17,52(sp)
    37a0:	a47ff60e 	bge	r20,r17,377c <___vfprintf_internal_r+0x424>
    37a4:	d9014f17 	ldw	r4,1340(sp)
    37a8:	b00b883a 	mov	r5,r22
    37ac:	d9800c04 	addi	r6,sp,48
    37b0:	d9c15115 	stw	r7,1348(sp)
    37b4:	00033000 	call	3300 <__sprint_r>
    37b8:	d9c15117 	ldw	r7,1348(sp)
    37bc:	10009e1e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    37c0:	843ffc04 	addi	r16,r16,-16
    37c4:	dc800e17 	ldw	r18,56(sp)
    37c8:	dc400d17 	ldw	r17,52(sp)
    37cc:	dd401904 	addi	r21,sp,100
    37d0:	9c3fed16 	blt	r19,r16,3788 <___vfprintf_internal_r+0x430>
    37d4:	9425883a 	add	r18,r18,r16
    37d8:	8c400044 	addi	r17,r17,1
    37dc:	008001c4 	movi	r2,7
    37e0:	af000015 	stw	fp,0(r21)
    37e4:	ac000115 	stw	r16,4(r21)
    37e8:	dc800e15 	stw	r18,56(sp)
    37ec:	dc400d15 	stw	r17,52(sp)
    37f0:	1441f516 	blt	r2,r17,3fc8 <___vfprintf_internal_r+0xc70>
    37f4:	ad400204 	addi	r21,r21,8
    37f8:	00000206 	br	3804 <___vfprintf_internal_r+0x4ac>
    37fc:	dc800e17 	ldw	r18,56(sp)
    3800:	dc400d17 	ldw	r17,52(sp)
    3804:	d8800407 	ldb	r2,16(sp)
    3808:	10000b26 	beq	r2,zero,3838 <___vfprintf_internal_r+0x4e0>
    380c:	00800044 	movi	r2,1
    3810:	94800044 	addi	r18,r18,1
    3814:	8c400044 	addi	r17,r17,1
    3818:	a8800115 	stw	r2,4(r21)
    381c:	d8c00404 	addi	r3,sp,16
    3820:	008001c4 	movi	r2,7
    3824:	a8c00015 	stw	r3,0(r21)
    3828:	dc800e15 	stw	r18,56(sp)
    382c:	dc400d15 	stw	r17,52(sp)
    3830:	1441da16 	blt	r2,r17,3f9c <___vfprintf_internal_r+0xc44>
    3834:	ad400204 	addi	r21,r21,8
    3838:	d9015017 	ldw	r4,1344(sp)
    383c:	20000b1e 	bne	r4,zero,386c <___vfprintf_internal_r+0x514>
    3840:	d8800444 	addi	r2,sp,17
    3844:	94800084 	addi	r18,r18,2
    3848:	8c400044 	addi	r17,r17,1
    384c:	a8800015 	stw	r2,0(r21)
    3850:	00c00084 	movi	r3,2
    3854:	008001c4 	movi	r2,7
    3858:	a8c00115 	stw	r3,4(r21)
    385c:	dc800e15 	stw	r18,56(sp)
    3860:	dc400d15 	stw	r17,52(sp)
    3864:	1441c216 	blt	r2,r17,3f70 <___vfprintf_internal_r+0xc18>
    3868:	ad400204 	addi	r21,r21,8
    386c:	d9414e17 	ldw	r5,1336(sp)
    3870:	00802004 	movi	r2,128
    3874:	2880b126 	beq	r5,r2,3b3c <___vfprintf_internal_r+0x7e4>
    3878:	d8c14617 	ldw	r3,1304(sp)
    387c:	19e1c83a 	sub	r16,r3,r7
    3880:	0400260e 	bge	zero,r16,391c <___vfprintf_internal_r+0x5c4>
    3884:	00800404 	movi	r2,16
    3888:	1403c90e 	bge	r2,r16,47b0 <___vfprintf_internal_r+0x1458>
    388c:	1027883a 	mov	r19,r2
    3890:	07000074 	movhi	fp,1
    3894:	e73c0d84 	addi	fp,fp,-4042
    3898:	050001c4 	movi	r20,7
    389c:	00000306 	br	38ac <___vfprintf_internal_r+0x554>
    38a0:	843ffc04 	addi	r16,r16,-16
    38a4:	ad400204 	addi	r21,r21,8
    38a8:	9c00130e 	bge	r19,r16,38f8 <___vfprintf_internal_r+0x5a0>
    38ac:	94800404 	addi	r18,r18,16
    38b0:	8c400044 	addi	r17,r17,1
    38b4:	af000015 	stw	fp,0(r21)
    38b8:	acc00115 	stw	r19,4(r21)
    38bc:	dc800e15 	stw	r18,56(sp)
    38c0:	dc400d15 	stw	r17,52(sp)
    38c4:	a47ff60e 	bge	r20,r17,38a0 <___vfprintf_internal_r+0x548>
    38c8:	d9014f17 	ldw	r4,1340(sp)
    38cc:	b00b883a 	mov	r5,r22
    38d0:	d9800c04 	addi	r6,sp,48
    38d4:	d9c15115 	stw	r7,1348(sp)
    38d8:	00033000 	call	3300 <__sprint_r>
    38dc:	d9c15117 	ldw	r7,1348(sp)
    38e0:	1000551e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    38e4:	843ffc04 	addi	r16,r16,-16
    38e8:	dc800e17 	ldw	r18,56(sp)
    38ec:	dc400d17 	ldw	r17,52(sp)
    38f0:	dd401904 	addi	r21,sp,100
    38f4:	9c3fed16 	blt	r19,r16,38ac <___vfprintf_internal_r+0x554>
    38f8:	9425883a 	add	r18,r18,r16
    38fc:	8c400044 	addi	r17,r17,1
    3900:	008001c4 	movi	r2,7
    3904:	af000015 	stw	fp,0(r21)
    3908:	ac000115 	stw	r16,4(r21)
    390c:	dc800e15 	stw	r18,56(sp)
    3910:	dc400d15 	stw	r17,52(sp)
    3914:	14418216 	blt	r2,r17,3f20 <___vfprintf_internal_r+0xbc8>
    3918:	ad400204 	addi	r21,r21,8
    391c:	d9014c17 	ldw	r4,1328(sp)
    3920:	2080400c 	andi	r2,r4,256
    3924:	10004a1e 	bne	r2,zero,3a50 <___vfprintf_internal_r+0x6f8>
    3928:	d9414117 	ldw	r5,1284(sp)
    392c:	91e5883a 	add	r18,r18,r7
    3930:	8c400044 	addi	r17,r17,1
    3934:	008001c4 	movi	r2,7
    3938:	a9400015 	stw	r5,0(r21)
    393c:	a9c00115 	stw	r7,4(r21)
    3940:	dc800e15 	stw	r18,56(sp)
    3944:	dc400d15 	stw	r17,52(sp)
    3948:	14416716 	blt	r2,r17,3ee8 <___vfprintf_internal_r+0xb90>
    394c:	a8c00204 	addi	r3,r21,8
    3950:	d9814c17 	ldw	r6,1328(sp)
    3954:	3080010c 	andi	r2,r6,4
    3958:	10002826 	beq	r2,zero,39fc <___vfprintf_internal_r+0x6a4>
    395c:	d8814a17 	ldw	r2,1320(sp)
    3960:	d9014517 	ldw	r4,1300(sp)
    3964:	1121c83a 	sub	r16,r2,r4
    3968:	0400240e 	bge	zero,r16,39fc <___vfprintf_internal_r+0x6a4>
    396c:	00800404 	movi	r2,16
    3970:	14044f0e 	bge	r2,r16,4ab0 <___vfprintf_internal_r+0x1758>
    3974:	dc400d17 	ldw	r17,52(sp)
    3978:	1027883a 	mov	r19,r2
    397c:	07000074 	movhi	fp,1
    3980:	e73c1184 	addi	fp,fp,-4026
    3984:	050001c4 	movi	r20,7
    3988:	00000306 	br	3998 <___vfprintf_internal_r+0x640>
    398c:	843ffc04 	addi	r16,r16,-16
    3990:	18c00204 	addi	r3,r3,8
    3994:	9c00110e 	bge	r19,r16,39dc <___vfprintf_internal_r+0x684>
    3998:	94800404 	addi	r18,r18,16
    399c:	8c400044 	addi	r17,r17,1
    39a0:	1f000015 	stw	fp,0(r3)
    39a4:	1cc00115 	stw	r19,4(r3)
    39a8:	dc800e15 	stw	r18,56(sp)
    39ac:	dc400d15 	stw	r17,52(sp)
    39b0:	a47ff60e 	bge	r20,r17,398c <___vfprintf_internal_r+0x634>
    39b4:	d9014f17 	ldw	r4,1340(sp)
    39b8:	b00b883a 	mov	r5,r22
    39bc:	d9800c04 	addi	r6,sp,48
    39c0:	00033000 	call	3300 <__sprint_r>
    39c4:	10001c1e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    39c8:	843ffc04 	addi	r16,r16,-16
    39cc:	dc800e17 	ldw	r18,56(sp)
    39d0:	dc400d17 	ldw	r17,52(sp)
    39d4:	d8c01904 	addi	r3,sp,100
    39d8:	9c3fef16 	blt	r19,r16,3998 <___vfprintf_internal_r+0x640>
    39dc:	9425883a 	add	r18,r18,r16
    39e0:	8c400044 	addi	r17,r17,1
    39e4:	008001c4 	movi	r2,7
    39e8:	1f000015 	stw	fp,0(r3)
    39ec:	1c000115 	stw	r16,4(r3)
    39f0:	dc800e15 	stw	r18,56(sp)
    39f4:	dc400d15 	stw	r17,52(sp)
    39f8:	1440cb16 	blt	r2,r17,3d28 <___vfprintf_internal_r+0x9d0>
    39fc:	d8814a17 	ldw	r2,1320(sp)
    3a00:	d9414517 	ldw	r5,1300(sp)
    3a04:	1140010e 	bge	r2,r5,3a0c <___vfprintf_internal_r+0x6b4>
    3a08:	2805883a 	mov	r2,r5
    3a0c:	d9814b17 	ldw	r6,1324(sp)
    3a10:	308d883a 	add	r6,r6,r2
    3a14:	d9814b15 	stw	r6,1324(sp)
    3a18:	90013b1e 	bne	r18,zero,3f08 <___vfprintf_internal_r+0xbb0>
    3a1c:	d9c14017 	ldw	r7,1280(sp)
    3a20:	dd401904 	addi	r21,sp,100
    3a24:	d8000d15 	stw	zero,52(sp)
    3a28:	003ea706 	br	34c8 <___vfprintf_internal_r+0x170>
    3a2c:	d8800e17 	ldw	r2,56(sp)
    3a30:	10053f1e 	bne	r2,zero,4f30 <___vfprintf_internal_r+0x1bd8>
    3a34:	d8000d15 	stw	zero,52(sp)
    3a38:	b080030b 	ldhu	r2,12(r22)
    3a3c:	1080100c 	andi	r2,r2,64
    3a40:	103e8726 	beq	r2,zero,3460 <___vfprintf_internal_r+0x108>
    3a44:	00bfffc4 	movi	r2,-1
    3a48:	d8814b15 	stw	r2,1324(sp)
    3a4c:	003e8406 	br	3460 <___vfprintf_internal_r+0x108>
    3a50:	d9814d17 	ldw	r6,1332(sp)
    3a54:	00801944 	movi	r2,101
    3a58:	11806e16 	blt	r2,r6,3c14 <___vfprintf_internal_r+0x8bc>
    3a5c:	d9414717 	ldw	r5,1308(sp)
    3a60:	00c00044 	movi	r3,1
    3a64:	1943430e 	bge	r3,r5,4774 <___vfprintf_internal_r+0x141c>
    3a68:	d8814117 	ldw	r2,1284(sp)
    3a6c:	94800044 	addi	r18,r18,1
    3a70:	8c400044 	addi	r17,r17,1
    3a74:	a8800015 	stw	r2,0(r21)
    3a78:	008001c4 	movi	r2,7
    3a7c:	a8c00115 	stw	r3,4(r21)
    3a80:	dc800e15 	stw	r18,56(sp)
    3a84:	dc400d15 	stw	r17,52(sp)
    3a88:	1441ca16 	blt	r2,r17,41b4 <___vfprintf_internal_r+0xe5c>
    3a8c:	a8c00204 	addi	r3,r21,8
    3a90:	d9014917 	ldw	r4,1316(sp)
    3a94:	00800044 	movi	r2,1
    3a98:	94800044 	addi	r18,r18,1
    3a9c:	8c400044 	addi	r17,r17,1
    3aa0:	18800115 	stw	r2,4(r3)
    3aa4:	008001c4 	movi	r2,7
    3aa8:	19000015 	stw	r4,0(r3)
    3aac:	dc800e15 	stw	r18,56(sp)
    3ab0:	dc400d15 	stw	r17,52(sp)
    3ab4:	1441b616 	blt	r2,r17,4190 <___vfprintf_internal_r+0xe38>
    3ab8:	1cc00204 	addi	r19,r3,8
    3abc:	d9014217 	ldw	r4,1288(sp)
    3ac0:	d9414317 	ldw	r5,1292(sp)
    3ac4:	000d883a 	mov	r6,zero
    3ac8:	000f883a 	mov	r7,zero
    3acc:	000b5ac0 	call	b5ac <__nedf2>
    3ad0:	10017426 	beq	r2,zero,40a4 <___vfprintf_internal_r+0xd4c>
    3ad4:	d9414717 	ldw	r5,1308(sp)
    3ad8:	d9814117 	ldw	r6,1284(sp)
    3adc:	8c400044 	addi	r17,r17,1
    3ae0:	2c85883a 	add	r2,r5,r18
    3ae4:	14bfffc4 	addi	r18,r2,-1
    3ae8:	28bfffc4 	addi	r2,r5,-1
    3aec:	30c00044 	addi	r3,r6,1
    3af0:	98800115 	stw	r2,4(r19)
    3af4:	008001c4 	movi	r2,7
    3af8:	98c00015 	stw	r3,0(r19)
    3afc:	dc800e15 	stw	r18,56(sp)
    3b00:	dc400d15 	stw	r17,52(sp)
    3b04:	14418e16 	blt	r2,r17,4140 <___vfprintf_internal_r+0xde8>
    3b08:	9cc00204 	addi	r19,r19,8
    3b0c:	d9414817 	ldw	r5,1312(sp)
    3b10:	d8800804 	addi	r2,sp,32
    3b14:	8c400044 	addi	r17,r17,1
    3b18:	9165883a 	add	r18,r18,r5
    3b1c:	98800015 	stw	r2,0(r19)
    3b20:	008001c4 	movi	r2,7
    3b24:	99400115 	stw	r5,4(r19)
    3b28:	dc800e15 	stw	r18,56(sp)
    3b2c:	dc400d15 	stw	r17,52(sp)
    3b30:	1440ed16 	blt	r2,r17,3ee8 <___vfprintf_internal_r+0xb90>
    3b34:	98c00204 	addi	r3,r19,8
    3b38:	003f8506 	br	3950 <___vfprintf_internal_r+0x5f8>
    3b3c:	d9814a17 	ldw	r6,1320(sp)
    3b40:	d8814517 	ldw	r2,1300(sp)
    3b44:	30a1c83a 	sub	r16,r6,r2
    3b48:	043f4b0e 	bge	zero,r16,3878 <___vfprintf_internal_r+0x520>
    3b4c:	00800404 	movi	r2,16
    3b50:	1404340e 	bge	r2,r16,4c24 <___vfprintf_internal_r+0x18cc>
    3b54:	1027883a 	mov	r19,r2
    3b58:	07000074 	movhi	fp,1
    3b5c:	e73c0d84 	addi	fp,fp,-4042
    3b60:	050001c4 	movi	r20,7
    3b64:	00000306 	br	3b74 <___vfprintf_internal_r+0x81c>
    3b68:	843ffc04 	addi	r16,r16,-16
    3b6c:	ad400204 	addi	r21,r21,8
    3b70:	9c00130e 	bge	r19,r16,3bc0 <___vfprintf_internal_r+0x868>
    3b74:	94800404 	addi	r18,r18,16
    3b78:	8c400044 	addi	r17,r17,1
    3b7c:	af000015 	stw	fp,0(r21)
    3b80:	acc00115 	stw	r19,4(r21)
    3b84:	dc800e15 	stw	r18,56(sp)
    3b88:	dc400d15 	stw	r17,52(sp)
    3b8c:	a47ff60e 	bge	r20,r17,3b68 <___vfprintf_internal_r+0x810>
    3b90:	d9014f17 	ldw	r4,1340(sp)
    3b94:	b00b883a 	mov	r5,r22
    3b98:	d9800c04 	addi	r6,sp,48
    3b9c:	d9c15115 	stw	r7,1348(sp)
    3ba0:	00033000 	call	3300 <__sprint_r>
    3ba4:	d9c15117 	ldw	r7,1348(sp)
    3ba8:	103fa31e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    3bac:	843ffc04 	addi	r16,r16,-16
    3bb0:	dc800e17 	ldw	r18,56(sp)
    3bb4:	dc400d17 	ldw	r17,52(sp)
    3bb8:	dd401904 	addi	r21,sp,100
    3bbc:	9c3fed16 	blt	r19,r16,3b74 <___vfprintf_internal_r+0x81c>
    3bc0:	9425883a 	add	r18,r18,r16
    3bc4:	8c400044 	addi	r17,r17,1
    3bc8:	008001c4 	movi	r2,7
    3bcc:	af000015 	stw	fp,0(r21)
    3bd0:	ac000115 	stw	r16,4(r21)
    3bd4:	dc800e15 	stw	r18,56(sp)
    3bd8:	dc400d15 	stw	r17,52(sp)
    3bdc:	14416116 	blt	r2,r17,4164 <___vfprintf_internal_r+0xe0c>
    3be0:	ad400204 	addi	r21,r21,8
    3be4:	003f2406 	br	3878 <___vfprintf_internal_r+0x520>
    3be8:	d9014f17 	ldw	r4,1340(sp)
    3bec:	0006f7c0 	call	6f7c <__sinit>
    3bf0:	d9c15117 	ldw	r7,1348(sp)
    3bf4:	003def06 	br	33b4 <___vfprintf_internal_r+0x5c>
    3bf8:	d9014f17 	ldw	r4,1340(sp)
    3bfc:	b00b883a 	mov	r5,r22
    3c00:	d9c15115 	stw	r7,1348(sp)
    3c04:	00052280 	call	5228 <__swsetup_r>
    3c08:	d9c15117 	ldw	r7,1348(sp)
    3c0c:	103dee26 	beq	r2,zero,33c8 <___vfprintf_internal_r+0x70>
    3c10:	003f8c06 	br	3a44 <___vfprintf_internal_r+0x6ec>
    3c14:	d9014217 	ldw	r4,1288(sp)
    3c18:	d9414317 	ldw	r5,1292(sp)
    3c1c:	000d883a 	mov	r6,zero
    3c20:	000f883a 	mov	r7,zero
    3c24:	000b5240 	call	b524 <__eqdf2>
    3c28:	1000f21e 	bne	r2,zero,3ff4 <___vfprintf_internal_r+0xc9c>
    3c2c:	00800074 	movhi	r2,1
    3c30:	10bc0d04 	addi	r2,r2,-4044
    3c34:	94800044 	addi	r18,r18,1
    3c38:	8c400044 	addi	r17,r17,1
    3c3c:	a8800015 	stw	r2,0(r21)
    3c40:	00c00044 	movi	r3,1
    3c44:	008001c4 	movi	r2,7
    3c48:	a8c00115 	stw	r3,4(r21)
    3c4c:	dc800e15 	stw	r18,56(sp)
    3c50:	dc400d15 	stw	r17,52(sp)
    3c54:	1442fa16 	blt	r2,r17,4840 <___vfprintf_internal_r+0x14e8>
    3c58:	a8c00204 	addi	r3,r21,8
    3c5c:	d8800517 	ldw	r2,20(sp)
    3c60:	d9014717 	ldw	r4,1308(sp)
    3c64:	11015c0e 	bge	r2,r4,41d8 <___vfprintf_internal_r+0xe80>
    3c68:	dc400d17 	ldw	r17,52(sp)
    3c6c:	d9814917 	ldw	r6,1316(sp)
    3c70:	00800044 	movi	r2,1
    3c74:	94800044 	addi	r18,r18,1
    3c78:	8c400044 	addi	r17,r17,1
    3c7c:	18800115 	stw	r2,4(r3)
    3c80:	008001c4 	movi	r2,7
    3c84:	19800015 	stw	r6,0(r3)
    3c88:	dc800e15 	stw	r18,56(sp)
    3c8c:	dc400d15 	stw	r17,52(sp)
    3c90:	14431016 	blt	r2,r17,48d4 <___vfprintf_internal_r+0x157c>
    3c94:	18c00204 	addi	r3,r3,8
    3c98:	d8814717 	ldw	r2,1308(sp)
    3c9c:	143fffc4 	addi	r16,r2,-1
    3ca0:	043f2b0e 	bge	zero,r16,3950 <___vfprintf_internal_r+0x5f8>
    3ca4:	00800404 	movi	r2,16
    3ca8:	1402a20e 	bge	r2,r16,4734 <___vfprintf_internal_r+0x13dc>
    3cac:	dc400d17 	ldw	r17,52(sp)
    3cb0:	1027883a 	mov	r19,r2
    3cb4:	07000074 	movhi	fp,1
    3cb8:	e73c0d84 	addi	fp,fp,-4042
    3cbc:	050001c4 	movi	r20,7
    3cc0:	00000306 	br	3cd0 <___vfprintf_internal_r+0x978>
    3cc4:	18c00204 	addi	r3,r3,8
    3cc8:	843ffc04 	addi	r16,r16,-16
    3ccc:	9c029c0e 	bge	r19,r16,4740 <___vfprintf_internal_r+0x13e8>
    3cd0:	94800404 	addi	r18,r18,16
    3cd4:	8c400044 	addi	r17,r17,1
    3cd8:	1f000015 	stw	fp,0(r3)
    3cdc:	1cc00115 	stw	r19,4(r3)
    3ce0:	dc800e15 	stw	r18,56(sp)
    3ce4:	dc400d15 	stw	r17,52(sp)
    3ce8:	a47ff60e 	bge	r20,r17,3cc4 <___vfprintf_internal_r+0x96c>
    3cec:	d9014f17 	ldw	r4,1340(sp)
    3cf0:	b00b883a 	mov	r5,r22
    3cf4:	d9800c04 	addi	r6,sp,48
    3cf8:	00033000 	call	3300 <__sprint_r>
    3cfc:	103f4e1e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    3d00:	dc800e17 	ldw	r18,56(sp)
    3d04:	dc400d17 	ldw	r17,52(sp)
    3d08:	d8c01904 	addi	r3,sp,100
    3d0c:	003fee06 	br	3cc8 <___vfprintf_internal_r+0x970>
    3d10:	d8802c0b 	ldhu	r2,176(sp)
    3d14:	00ffffc4 	movi	r3,-1
    3d18:	d8c14b15 	stw	r3,1324(sp)
    3d1c:	1080100c 	andi	r2,r2,64
    3d20:	103dcc1e 	bne	r2,zero,3454 <___vfprintf_internal_r+0xfc>
    3d24:	003dce06 	br	3460 <___vfprintf_internal_r+0x108>
    3d28:	d9014f17 	ldw	r4,1340(sp)
    3d2c:	b00b883a 	mov	r5,r22
    3d30:	d9800c04 	addi	r6,sp,48
    3d34:	00033000 	call	3300 <__sprint_r>
    3d38:	103f3f1e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    3d3c:	dc800e17 	ldw	r18,56(sp)
    3d40:	003f2e06 	br	39fc <___vfprintf_internal_r+0x6a4>
    3d44:	d9414c17 	ldw	r5,1328(sp)
    3d48:	29400414 	ori	r5,r5,16
    3d4c:	d9414c15 	stw	r5,1328(sp)
    3d50:	d9814c17 	ldw	r6,1328(sp)
    3d54:	3080080c 	andi	r2,r6,32
    3d58:	10014f1e 	bne	r2,zero,4298 <___vfprintf_internal_r+0xf40>
    3d5c:	d8c14c17 	ldw	r3,1328(sp)
    3d60:	1880040c 	andi	r2,r3,16
    3d64:	1002ea1e 	bne	r2,zero,4910 <___vfprintf_internal_r+0x15b8>
    3d68:	d9014c17 	ldw	r4,1328(sp)
    3d6c:	2080100c 	andi	r2,r4,64
    3d70:	1002e726 	beq	r2,zero,4910 <___vfprintf_internal_r+0x15b8>
    3d74:	3880000f 	ldh	r2,0(r7)
    3d78:	39c00104 	addi	r7,r7,4
    3d7c:	d9c14015 	stw	r7,1280(sp)
    3d80:	1023d7fa 	srai	r17,r2,31
    3d84:	1021883a 	mov	r16,r2
    3d88:	88037216 	blt	r17,zero,4b54 <___vfprintf_internal_r+0x17fc>
    3d8c:	01000044 	movi	r4,1
    3d90:	98000416 	blt	r19,zero,3da4 <___vfprintf_internal_r+0xa4c>
    3d94:	d8c14c17 	ldw	r3,1328(sp)
    3d98:	00bfdfc4 	movi	r2,-129
    3d9c:	1886703a 	and	r3,r3,r2
    3da0:	d8c14c15 	stw	r3,1328(sp)
    3da4:	8444b03a 	or	r2,r16,r17
    3da8:	1002261e 	bne	r2,zero,4644 <___vfprintf_internal_r+0x12ec>
    3dac:	9802251e 	bne	r19,zero,4644 <___vfprintf_internal_r+0x12ec>
    3db0:	20803fcc 	andi	r2,r4,255
    3db4:	10029b26 	beq	r2,zero,4824 <___vfprintf_internal_r+0x14cc>
    3db8:	d8c01904 	addi	r3,sp,100
    3dbc:	dd000f04 	addi	r20,sp,60
    3dc0:	d8c14115 	stw	r3,1284(sp)
    3dc4:	d8c14117 	ldw	r3,1284(sp)
    3dc8:	dcc14515 	stw	r19,1300(sp)
    3dcc:	a0c5c83a 	sub	r2,r20,r3
    3dd0:	11c00a04 	addi	r7,r2,40
    3dd4:	99c0010e 	bge	r19,r7,3ddc <___vfprintf_internal_r+0xa84>
    3dd8:	d9c14515 	stw	r7,1300(sp)
    3ddc:	dcc14615 	stw	r19,1304(sp)
    3de0:	d8800407 	ldb	r2,16(sp)
    3de4:	103e4c26 	beq	r2,zero,3718 <___vfprintf_internal_r+0x3c0>
    3de8:	d8814517 	ldw	r2,1300(sp)
    3dec:	10800044 	addi	r2,r2,1
    3df0:	d8814515 	stw	r2,1300(sp)
    3df4:	003e4806 	br	3718 <___vfprintf_internal_r+0x3c0>
    3df8:	d9814c17 	ldw	r6,1328(sp)
    3dfc:	31800414 	ori	r6,r6,16
    3e00:	d9814c15 	stw	r6,1328(sp)
    3e04:	d8c14c17 	ldw	r3,1328(sp)
    3e08:	1880080c 	andi	r2,r3,32
    3e0c:	1001271e 	bne	r2,zero,42ac <___vfprintf_internal_r+0xf54>
    3e10:	d9414c17 	ldw	r5,1328(sp)
    3e14:	2880040c 	andi	r2,r5,16
    3e18:	1002b61e 	bne	r2,zero,48f4 <___vfprintf_internal_r+0x159c>
    3e1c:	d9814c17 	ldw	r6,1328(sp)
    3e20:	3080100c 	andi	r2,r6,64
    3e24:	1002b326 	beq	r2,zero,48f4 <___vfprintf_internal_r+0x159c>
    3e28:	3c00000b 	ldhu	r16,0(r7)
    3e2c:	0009883a 	mov	r4,zero
    3e30:	39c00104 	addi	r7,r7,4
    3e34:	0023883a 	mov	r17,zero
    3e38:	d9c14015 	stw	r7,1280(sp)
    3e3c:	d8000405 	stb	zero,16(sp)
    3e40:	003fd306 	br	3d90 <___vfprintf_internal_r+0xa38>
    3e44:	d9014c17 	ldw	r4,1328(sp)
    3e48:	21000414 	ori	r4,r4,16
    3e4c:	d9014c15 	stw	r4,1328(sp)
    3e50:	d9414c17 	ldw	r5,1328(sp)
    3e54:	2880080c 	andi	r2,r5,32
    3e58:	1001081e 	bne	r2,zero,427c <___vfprintf_internal_r+0xf24>
    3e5c:	d8c14c17 	ldw	r3,1328(sp)
    3e60:	1880040c 	andi	r2,r3,16
    3e64:	1002b01e 	bne	r2,zero,4928 <___vfprintf_internal_r+0x15d0>
    3e68:	d9014c17 	ldw	r4,1328(sp)
    3e6c:	2080100c 	andi	r2,r4,64
    3e70:	1002ad26 	beq	r2,zero,4928 <___vfprintf_internal_r+0x15d0>
    3e74:	3c00000b 	ldhu	r16,0(r7)
    3e78:	01000044 	movi	r4,1
    3e7c:	39c00104 	addi	r7,r7,4
    3e80:	0023883a 	mov	r17,zero
    3e84:	d9c14015 	stw	r7,1280(sp)
    3e88:	d8000405 	stb	zero,16(sp)
    3e8c:	003fc006 	br	3d90 <___vfprintf_internal_r+0xa38>
    3e90:	d9014f17 	ldw	r4,1340(sp)
    3e94:	b00b883a 	mov	r5,r22
    3e98:	d9800c04 	addi	r6,sp,48
    3e9c:	00033000 	call	3300 <__sprint_r>
    3ea0:	103ee51e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    3ea4:	dc800e17 	ldw	r18,56(sp)
    3ea8:	d8c01904 	addi	r3,sp,100
    3eac:	d9814c17 	ldw	r6,1328(sp)
    3eb0:	3080004c 	andi	r2,r6,1
    3eb4:	1005003a 	cmpeq	r2,r2,zero
    3eb8:	103ea51e 	bne	r2,zero,3950 <___vfprintf_internal_r+0x5f8>
    3ebc:	00800044 	movi	r2,1
    3ec0:	dc400d17 	ldw	r17,52(sp)
    3ec4:	18800115 	stw	r2,4(r3)
    3ec8:	d8814917 	ldw	r2,1316(sp)
    3ecc:	94800044 	addi	r18,r18,1
    3ed0:	8c400044 	addi	r17,r17,1
    3ed4:	18800015 	stw	r2,0(r3)
    3ed8:	008001c4 	movi	r2,7
    3edc:	dc800e15 	stw	r18,56(sp)
    3ee0:	dc400d15 	stw	r17,52(sp)
    3ee4:	14421e0e 	bge	r2,r17,4760 <___vfprintf_internal_r+0x1408>
    3ee8:	d9014f17 	ldw	r4,1340(sp)
    3eec:	b00b883a 	mov	r5,r22
    3ef0:	d9800c04 	addi	r6,sp,48
    3ef4:	00033000 	call	3300 <__sprint_r>
    3ef8:	103ecf1e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    3efc:	dc800e17 	ldw	r18,56(sp)
    3f00:	d8c01904 	addi	r3,sp,100
    3f04:	003e9206 	br	3950 <___vfprintf_internal_r+0x5f8>
    3f08:	d9014f17 	ldw	r4,1340(sp)
    3f0c:	b00b883a 	mov	r5,r22
    3f10:	d9800c04 	addi	r6,sp,48
    3f14:	00033000 	call	3300 <__sprint_r>
    3f18:	103ec026 	beq	r2,zero,3a1c <___vfprintf_internal_r+0x6c4>
    3f1c:	003ec606 	br	3a38 <___vfprintf_internal_r+0x6e0>
    3f20:	d9014f17 	ldw	r4,1340(sp)
    3f24:	b00b883a 	mov	r5,r22
    3f28:	d9800c04 	addi	r6,sp,48
    3f2c:	d9c15115 	stw	r7,1348(sp)
    3f30:	00033000 	call	3300 <__sprint_r>
    3f34:	d9c15117 	ldw	r7,1348(sp)
    3f38:	103ebf1e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    3f3c:	dc800e17 	ldw	r18,56(sp)
    3f40:	dc400d17 	ldw	r17,52(sp)
    3f44:	dd401904 	addi	r21,sp,100
    3f48:	003e7406 	br	391c <___vfprintf_internal_r+0x5c4>
    3f4c:	d9014f17 	ldw	r4,1340(sp)
    3f50:	b00b883a 	mov	r5,r22
    3f54:	d9800c04 	addi	r6,sp,48
    3f58:	d9c15115 	stw	r7,1348(sp)
    3f5c:	00033000 	call	3300 <__sprint_r>
    3f60:	d9c15117 	ldw	r7,1348(sp)
    3f64:	103eb41e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    3f68:	dd401904 	addi	r21,sp,100
    3f6c:	003d6d06 	br	3524 <___vfprintf_internal_r+0x1cc>
    3f70:	d9014f17 	ldw	r4,1340(sp)
    3f74:	b00b883a 	mov	r5,r22
    3f78:	d9800c04 	addi	r6,sp,48
    3f7c:	d9c15115 	stw	r7,1348(sp)
    3f80:	00033000 	call	3300 <__sprint_r>
    3f84:	d9c15117 	ldw	r7,1348(sp)
    3f88:	103eab1e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    3f8c:	dc800e17 	ldw	r18,56(sp)
    3f90:	dc400d17 	ldw	r17,52(sp)
    3f94:	dd401904 	addi	r21,sp,100
    3f98:	003e3406 	br	386c <___vfprintf_internal_r+0x514>
    3f9c:	d9014f17 	ldw	r4,1340(sp)
    3fa0:	b00b883a 	mov	r5,r22
    3fa4:	d9800c04 	addi	r6,sp,48
    3fa8:	d9c15115 	stw	r7,1348(sp)
    3fac:	00033000 	call	3300 <__sprint_r>
    3fb0:	d9c15117 	ldw	r7,1348(sp)
    3fb4:	103ea01e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    3fb8:	dc800e17 	ldw	r18,56(sp)
    3fbc:	dc400d17 	ldw	r17,52(sp)
    3fc0:	dd401904 	addi	r21,sp,100
    3fc4:	003e1c06 	br	3838 <___vfprintf_internal_r+0x4e0>
    3fc8:	d9014f17 	ldw	r4,1340(sp)
    3fcc:	b00b883a 	mov	r5,r22
    3fd0:	d9800c04 	addi	r6,sp,48
    3fd4:	d9c15115 	stw	r7,1348(sp)
    3fd8:	00033000 	call	3300 <__sprint_r>
    3fdc:	d9c15117 	ldw	r7,1348(sp)
    3fe0:	103e951e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    3fe4:	dc800e17 	ldw	r18,56(sp)
    3fe8:	dc400d17 	ldw	r17,52(sp)
    3fec:	dd401904 	addi	r21,sp,100
    3ff0:	003e0406 	br	3804 <___vfprintf_internal_r+0x4ac>
    3ff4:	d9000517 	ldw	r4,20(sp)
    3ff8:	0102520e 	bge	zero,r4,4944 <___vfprintf_internal_r+0x15ec>
    3ffc:	d9814717 	ldw	r6,1308(sp)
    4000:	21807a16 	blt	r4,r6,41ec <___vfprintf_internal_r+0xe94>
    4004:	d8814117 	ldw	r2,1284(sp)
    4008:	91a5883a 	add	r18,r18,r6
    400c:	8c400044 	addi	r17,r17,1
    4010:	a8800015 	stw	r2,0(r21)
    4014:	008001c4 	movi	r2,7
    4018:	a9800115 	stw	r6,4(r21)
    401c:	dc800e15 	stw	r18,56(sp)
    4020:	dc400d15 	stw	r17,52(sp)
    4024:	1442f616 	blt	r2,r17,4c00 <___vfprintf_internal_r+0x18a8>
    4028:	a8c00204 	addi	r3,r21,8
    402c:	d9414717 	ldw	r5,1308(sp)
    4030:	2161c83a 	sub	r16,r4,r5
    4034:	043f9d0e 	bge	zero,r16,3eac <___vfprintf_internal_r+0xb54>
    4038:	00800404 	movi	r2,16
    403c:	1402130e 	bge	r2,r16,488c <___vfprintf_internal_r+0x1534>
    4040:	dc400d17 	ldw	r17,52(sp)
    4044:	1027883a 	mov	r19,r2
    4048:	07000074 	movhi	fp,1
    404c:	e73c0d84 	addi	fp,fp,-4042
    4050:	050001c4 	movi	r20,7
    4054:	00000306 	br	4064 <___vfprintf_internal_r+0xd0c>
    4058:	18c00204 	addi	r3,r3,8
    405c:	843ffc04 	addi	r16,r16,-16
    4060:	9c020d0e 	bge	r19,r16,4898 <___vfprintf_internal_r+0x1540>
    4064:	94800404 	addi	r18,r18,16
    4068:	8c400044 	addi	r17,r17,1
    406c:	1f000015 	stw	fp,0(r3)
    4070:	1cc00115 	stw	r19,4(r3)
    4074:	dc800e15 	stw	r18,56(sp)
    4078:	dc400d15 	stw	r17,52(sp)
    407c:	a47ff60e 	bge	r20,r17,4058 <___vfprintf_internal_r+0xd00>
    4080:	d9014f17 	ldw	r4,1340(sp)
    4084:	b00b883a 	mov	r5,r22
    4088:	d9800c04 	addi	r6,sp,48
    408c:	00033000 	call	3300 <__sprint_r>
    4090:	103e691e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    4094:	dc800e17 	ldw	r18,56(sp)
    4098:	dc400d17 	ldw	r17,52(sp)
    409c:	d8c01904 	addi	r3,sp,100
    40a0:	003fee06 	br	405c <___vfprintf_internal_r+0xd04>
    40a4:	d8814717 	ldw	r2,1308(sp)
    40a8:	143fffc4 	addi	r16,r2,-1
    40ac:	043e970e 	bge	zero,r16,3b0c <___vfprintf_internal_r+0x7b4>
    40b0:	00800404 	movi	r2,16
    40b4:	1400180e 	bge	r2,r16,4118 <___vfprintf_internal_r+0xdc0>
    40b8:	1029883a 	mov	r20,r2
    40bc:	07000074 	movhi	fp,1
    40c0:	e73c0d84 	addi	fp,fp,-4042
    40c4:	054001c4 	movi	r21,7
    40c8:	00000306 	br	40d8 <___vfprintf_internal_r+0xd80>
    40cc:	9cc00204 	addi	r19,r19,8
    40d0:	843ffc04 	addi	r16,r16,-16
    40d4:	a400120e 	bge	r20,r16,4120 <___vfprintf_internal_r+0xdc8>
    40d8:	94800404 	addi	r18,r18,16
    40dc:	8c400044 	addi	r17,r17,1
    40e0:	9f000015 	stw	fp,0(r19)
    40e4:	9d000115 	stw	r20,4(r19)
    40e8:	dc800e15 	stw	r18,56(sp)
    40ec:	dc400d15 	stw	r17,52(sp)
    40f0:	ac7ff60e 	bge	r21,r17,40cc <___vfprintf_internal_r+0xd74>
    40f4:	d9014f17 	ldw	r4,1340(sp)
    40f8:	b00b883a 	mov	r5,r22
    40fc:	d9800c04 	addi	r6,sp,48
    4100:	00033000 	call	3300 <__sprint_r>
    4104:	103e4c1e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    4108:	dc800e17 	ldw	r18,56(sp)
    410c:	dc400d17 	ldw	r17,52(sp)
    4110:	dcc01904 	addi	r19,sp,100
    4114:	003fee06 	br	40d0 <___vfprintf_internal_r+0xd78>
    4118:	07000074 	movhi	fp,1
    411c:	e73c0d84 	addi	fp,fp,-4042
    4120:	9425883a 	add	r18,r18,r16
    4124:	8c400044 	addi	r17,r17,1
    4128:	008001c4 	movi	r2,7
    412c:	9f000015 	stw	fp,0(r19)
    4130:	9c000115 	stw	r16,4(r19)
    4134:	dc800e15 	stw	r18,56(sp)
    4138:	dc400d15 	stw	r17,52(sp)
    413c:	147e720e 	bge	r2,r17,3b08 <___vfprintf_internal_r+0x7b0>
    4140:	d9014f17 	ldw	r4,1340(sp)
    4144:	b00b883a 	mov	r5,r22
    4148:	d9800c04 	addi	r6,sp,48
    414c:	00033000 	call	3300 <__sprint_r>
    4150:	103e391e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    4154:	dc800e17 	ldw	r18,56(sp)
    4158:	dc400d17 	ldw	r17,52(sp)
    415c:	dcc01904 	addi	r19,sp,100
    4160:	003e6a06 	br	3b0c <___vfprintf_internal_r+0x7b4>
    4164:	d9014f17 	ldw	r4,1340(sp)
    4168:	b00b883a 	mov	r5,r22
    416c:	d9800c04 	addi	r6,sp,48
    4170:	d9c15115 	stw	r7,1348(sp)
    4174:	00033000 	call	3300 <__sprint_r>
    4178:	d9c15117 	ldw	r7,1348(sp)
    417c:	103e2e1e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    4180:	dc800e17 	ldw	r18,56(sp)
    4184:	dc400d17 	ldw	r17,52(sp)
    4188:	dd401904 	addi	r21,sp,100
    418c:	003dba06 	br	3878 <___vfprintf_internal_r+0x520>
    4190:	d9014f17 	ldw	r4,1340(sp)
    4194:	b00b883a 	mov	r5,r22
    4198:	d9800c04 	addi	r6,sp,48
    419c:	00033000 	call	3300 <__sprint_r>
    41a0:	103e251e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    41a4:	dc800e17 	ldw	r18,56(sp)
    41a8:	dc400d17 	ldw	r17,52(sp)
    41ac:	dcc01904 	addi	r19,sp,100
    41b0:	003e4206 	br	3abc <___vfprintf_internal_r+0x764>
    41b4:	d9014f17 	ldw	r4,1340(sp)
    41b8:	b00b883a 	mov	r5,r22
    41bc:	d9800c04 	addi	r6,sp,48
    41c0:	00033000 	call	3300 <__sprint_r>
    41c4:	103e1c1e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    41c8:	dc800e17 	ldw	r18,56(sp)
    41cc:	dc400d17 	ldw	r17,52(sp)
    41d0:	d8c01904 	addi	r3,sp,100
    41d4:	003e2e06 	br	3a90 <___vfprintf_internal_r+0x738>
    41d8:	d9414c17 	ldw	r5,1328(sp)
    41dc:	2880004c 	andi	r2,r5,1
    41e0:	1005003a 	cmpeq	r2,r2,zero
    41e4:	103dda1e 	bne	r2,zero,3950 <___vfprintf_internal_r+0x5f8>
    41e8:	003e9f06 	br	3c68 <___vfprintf_internal_r+0x910>
    41ec:	d8c14117 	ldw	r3,1284(sp)
    41f0:	9125883a 	add	r18,r18,r4
    41f4:	8c400044 	addi	r17,r17,1
    41f8:	008001c4 	movi	r2,7
    41fc:	a8c00015 	stw	r3,0(r21)
    4200:	a9000115 	stw	r4,4(r21)
    4204:	dc800e15 	stw	r18,56(sp)
    4208:	dc400d15 	stw	r17,52(sp)
    420c:	14426616 	blt	r2,r17,4ba8 <___vfprintf_internal_r+0x1850>
    4210:	a8c00204 	addi	r3,r21,8
    4214:	d9414917 	ldw	r5,1316(sp)
    4218:	00800044 	movi	r2,1
    421c:	94800044 	addi	r18,r18,1
    4220:	8c400044 	addi	r17,r17,1
    4224:	18800115 	stw	r2,4(r3)
    4228:	008001c4 	movi	r2,7
    422c:	19400015 	stw	r5,0(r3)
    4230:	dc800e15 	stw	r18,56(sp)
    4234:	dc400d15 	stw	r17,52(sp)
    4238:	2021883a 	mov	r16,r4
    423c:	14425016 	blt	r2,r17,4b80 <___vfprintf_internal_r+0x1828>
    4240:	19400204 	addi	r5,r3,8
    4244:	d9814717 	ldw	r6,1308(sp)
    4248:	8c400044 	addi	r17,r17,1
    424c:	dc400d15 	stw	r17,52(sp)
    4250:	3107c83a 	sub	r3,r6,r4
    4254:	d9014117 	ldw	r4,1284(sp)
    4258:	90e5883a 	add	r18,r18,r3
    425c:	28c00115 	stw	r3,4(r5)
    4260:	8105883a 	add	r2,r16,r4
    4264:	28800015 	stw	r2,0(r5)
    4268:	008001c4 	movi	r2,7
    426c:	dc800e15 	stw	r18,56(sp)
    4270:	147f1d16 	blt	r2,r17,3ee8 <___vfprintf_internal_r+0xb90>
    4274:	28c00204 	addi	r3,r5,8
    4278:	003db506 	br	3950 <___vfprintf_internal_r+0x5f8>
    427c:	3c000017 	ldw	r16,0(r7)
    4280:	3c400117 	ldw	r17,4(r7)
    4284:	39800204 	addi	r6,r7,8
    4288:	01000044 	movi	r4,1
    428c:	d9814015 	stw	r6,1280(sp)
    4290:	d8000405 	stb	zero,16(sp)
    4294:	003ebe06 	br	3d90 <___vfprintf_internal_r+0xa38>
    4298:	3c000017 	ldw	r16,0(r7)
    429c:	3c400117 	ldw	r17,4(r7)
    42a0:	38800204 	addi	r2,r7,8
    42a4:	d8814015 	stw	r2,1280(sp)
    42a8:	003eb706 	br	3d88 <___vfprintf_internal_r+0xa30>
    42ac:	3c000017 	ldw	r16,0(r7)
    42b0:	3c400117 	ldw	r17,4(r7)
    42b4:	39000204 	addi	r4,r7,8
    42b8:	d9014015 	stw	r4,1280(sp)
    42bc:	0009883a 	mov	r4,zero
    42c0:	d8000405 	stb	zero,16(sp)
    42c4:	003eb206 	br	3d90 <___vfprintf_internal_r+0xa38>
    42c8:	38c00017 	ldw	r3,0(r7)
    42cc:	39c00104 	addi	r7,r7,4
    42d0:	d8c14a15 	stw	r3,1320(sp)
    42d4:	1800d10e 	bge	r3,zero,461c <___vfprintf_internal_r+0x12c4>
    42d8:	00c7c83a 	sub	r3,zero,r3
    42dc:	d8c14a15 	stw	r3,1320(sp)
    42e0:	d9014c17 	ldw	r4,1328(sp)
    42e4:	b8c00007 	ldb	r3,0(r23)
    42e8:	21000114 	ori	r4,r4,4
    42ec:	d9014c15 	stw	r4,1328(sp)
    42f0:	003c9806 	br	3554 <___vfprintf_internal_r+0x1fc>
    42f4:	d9814c17 	ldw	r6,1328(sp)
    42f8:	3080080c 	andi	r2,r6,32
    42fc:	1001f026 	beq	r2,zero,4ac0 <___vfprintf_internal_r+0x1768>
    4300:	d9014b17 	ldw	r4,1324(sp)
    4304:	38800017 	ldw	r2,0(r7)
    4308:	39c00104 	addi	r7,r7,4
    430c:	d9c14015 	stw	r7,1280(sp)
    4310:	2007d7fa 	srai	r3,r4,31
    4314:	d9c14017 	ldw	r7,1280(sp)
    4318:	11000015 	stw	r4,0(r2)
    431c:	10c00115 	stw	r3,4(r2)
    4320:	003c6906 	br	34c8 <___vfprintf_internal_r+0x170>
    4324:	b8c00007 	ldb	r3,0(r23)
    4328:	00801b04 	movi	r2,108
    432c:	18824f26 	beq	r3,r2,4c6c <___vfprintf_internal_r+0x1914>
    4330:	d9414c17 	ldw	r5,1328(sp)
    4334:	29400414 	ori	r5,r5,16
    4338:	d9414c15 	stw	r5,1328(sp)
    433c:	003c8506 	br	3554 <___vfprintf_internal_r+0x1fc>
    4340:	d9814c17 	ldw	r6,1328(sp)
    4344:	b8c00007 	ldb	r3,0(r23)
    4348:	31800814 	ori	r6,r6,32
    434c:	d9814c15 	stw	r6,1328(sp)
    4350:	003c8006 	br	3554 <___vfprintf_internal_r+0x1fc>
    4354:	d8814c17 	ldw	r2,1328(sp)
    4358:	3c000017 	ldw	r16,0(r7)
    435c:	00c01e04 	movi	r3,120
    4360:	10800094 	ori	r2,r2,2
    4364:	d8814c15 	stw	r2,1328(sp)
    4368:	39c00104 	addi	r7,r7,4
    436c:	01400074 	movhi	r5,1
    4370:	297bf604 	addi	r5,r5,-4136
    4374:	00800c04 	movi	r2,48
    4378:	0023883a 	mov	r17,zero
    437c:	01000084 	movi	r4,2
    4380:	d9c14015 	stw	r7,1280(sp)
    4384:	d8c14d15 	stw	r3,1332(sp)
    4388:	d9414415 	stw	r5,1296(sp)
    438c:	d8800445 	stb	r2,17(sp)
    4390:	d8c00485 	stb	r3,18(sp)
    4394:	d8000405 	stb	zero,16(sp)
    4398:	003e7d06 	br	3d90 <___vfprintf_internal_r+0xa38>
    439c:	d8814c17 	ldw	r2,1328(sp)
    43a0:	b8c00007 	ldb	r3,0(r23)
    43a4:	10801014 	ori	r2,r2,64
    43a8:	d8814c15 	stw	r2,1328(sp)
    43ac:	003c6906 	br	3554 <___vfprintf_internal_r+0x1fc>
    43b0:	d9414c17 	ldw	r5,1328(sp)
    43b4:	2880020c 	andi	r2,r5,8
    43b8:	1001df26 	beq	r2,zero,4b38 <___vfprintf_internal_r+0x17e0>
    43bc:	39800017 	ldw	r6,0(r7)
    43c0:	38800204 	addi	r2,r7,8
    43c4:	d8814015 	stw	r2,1280(sp)
    43c8:	d9814215 	stw	r6,1288(sp)
    43cc:	39c00117 	ldw	r7,4(r7)
    43d0:	d9c14315 	stw	r7,1292(sp)
    43d4:	d9014217 	ldw	r4,1288(sp)
    43d8:	d9414317 	ldw	r5,1292(sp)
    43dc:	000976c0 	call	976c <__isinfd>
    43e0:	10021726 	beq	r2,zero,4c40 <___vfprintf_internal_r+0x18e8>
    43e4:	d9014217 	ldw	r4,1288(sp)
    43e8:	d9414317 	ldw	r5,1292(sp)
    43ec:	000d883a 	mov	r6,zero
    43f0:	000f883a 	mov	r7,zero
    43f4:	000b7440 	call	b744 <__ltdf2>
    43f8:	1002ca16 	blt	r2,zero,4f24 <___vfprintf_internal_r+0x1bcc>
    43fc:	d9414d17 	ldw	r5,1332(sp)
    4400:	008011c4 	movi	r2,71
    4404:	11420a16 	blt	r2,r5,4c30 <___vfprintf_internal_r+0x18d8>
    4408:	01800074 	movhi	r6,1
    440c:	31bbfb04 	addi	r6,r6,-4116
    4410:	d9814115 	stw	r6,1284(sp)
    4414:	d9014c17 	ldw	r4,1328(sp)
    4418:	00c000c4 	movi	r3,3
    441c:	00bfdfc4 	movi	r2,-129
    4420:	2088703a 	and	r4,r4,r2
    4424:	180f883a 	mov	r7,r3
    4428:	d8c14515 	stw	r3,1300(sp)
    442c:	d9014c15 	stw	r4,1328(sp)
    4430:	d8014615 	stw	zero,1304(sp)
    4434:	003e6a06 	br	3de0 <___vfprintf_internal_r+0xa88>
    4438:	38800017 	ldw	r2,0(r7)
    443c:	00c00044 	movi	r3,1
    4440:	39c00104 	addi	r7,r7,4
    4444:	d9c14015 	stw	r7,1280(sp)
    4448:	d9000f04 	addi	r4,sp,60
    444c:	180f883a 	mov	r7,r3
    4450:	d8c14515 	stw	r3,1300(sp)
    4454:	d9014115 	stw	r4,1284(sp)
    4458:	d8800f05 	stb	r2,60(sp)
    445c:	d8000405 	stb	zero,16(sp)
    4460:	003cac06 	br	3714 <___vfprintf_internal_r+0x3bc>
    4464:	01400074 	movhi	r5,1
    4468:	297c0104 	addi	r5,r5,-4092
    446c:	d9414415 	stw	r5,1296(sp)
    4470:	d9814c17 	ldw	r6,1328(sp)
    4474:	3080080c 	andi	r2,r6,32
    4478:	1000f926 	beq	r2,zero,4860 <___vfprintf_internal_r+0x1508>
    447c:	3c000017 	ldw	r16,0(r7)
    4480:	3c400117 	ldw	r17,4(r7)
    4484:	38800204 	addi	r2,r7,8
    4488:	d8814015 	stw	r2,1280(sp)
    448c:	d9414c17 	ldw	r5,1328(sp)
    4490:	2880004c 	andi	r2,r5,1
    4494:	1005003a 	cmpeq	r2,r2,zero
    4498:	1000b31e 	bne	r2,zero,4768 <___vfprintf_internal_r+0x1410>
    449c:	8444b03a 	or	r2,r16,r17
    44a0:	1000b126 	beq	r2,zero,4768 <___vfprintf_internal_r+0x1410>
    44a4:	d9814d17 	ldw	r6,1332(sp)
    44a8:	29400094 	ori	r5,r5,2
    44ac:	00800c04 	movi	r2,48
    44b0:	01000084 	movi	r4,2
    44b4:	d9414c15 	stw	r5,1328(sp)
    44b8:	d8800445 	stb	r2,17(sp)
    44bc:	d9800485 	stb	r6,18(sp)
    44c0:	d8000405 	stb	zero,16(sp)
    44c4:	003e3206 	br	3d90 <___vfprintf_internal_r+0xa38>
    44c8:	01800074 	movhi	r6,1
    44cc:	31bbf604 	addi	r6,r6,-4136
    44d0:	d9814415 	stw	r6,1296(sp)
    44d4:	003fe606 	br	4470 <___vfprintf_internal_r+0x1118>
    44d8:	00800ac4 	movi	r2,43
    44dc:	d8800405 	stb	r2,16(sp)
    44e0:	b8c00007 	ldb	r3,0(r23)
    44e4:	003c1b06 	br	3554 <___vfprintf_internal_r+0x1fc>
    44e8:	d8814c17 	ldw	r2,1328(sp)
    44ec:	b8c00007 	ldb	r3,0(r23)
    44f0:	10800054 	ori	r2,r2,1
    44f4:	d8814c15 	stw	r2,1328(sp)
    44f8:	003c1606 	br	3554 <___vfprintf_internal_r+0x1fc>
    44fc:	d8800407 	ldb	r2,16(sp)
    4500:	1000461e 	bne	r2,zero,461c <___vfprintf_internal_r+0x12c4>
    4504:	00800804 	movi	r2,32
    4508:	d8800405 	stb	r2,16(sp)
    450c:	b8c00007 	ldb	r3,0(r23)
    4510:	003c1006 	br	3554 <___vfprintf_internal_r+0x1fc>
    4514:	d9814c17 	ldw	r6,1328(sp)
    4518:	b8c00007 	ldb	r3,0(r23)
    451c:	31800214 	ori	r6,r6,8
    4520:	d9814c15 	stw	r6,1328(sp)
    4524:	003c0b06 	br	3554 <___vfprintf_internal_r+0x1fc>
    4528:	0007883a 	mov	r3,zero
    452c:	01000244 	movi	r4,9
    4530:	188002a4 	muli	r2,r3,10
    4534:	b8c00007 	ldb	r3,0(r23)
    4538:	d9814d17 	ldw	r6,1332(sp)
    453c:	bdc00044 	addi	r23,r23,1
    4540:	d8c14d15 	stw	r3,1332(sp)
    4544:	d9414d17 	ldw	r5,1332(sp)
    4548:	3085883a 	add	r2,r6,r2
    454c:	10fff404 	addi	r3,r2,-48
    4550:	28bff404 	addi	r2,r5,-48
    4554:	20bff62e 	bgeu	r4,r2,4530 <___vfprintf_internal_r+0x11d8>
    4558:	d8c14a15 	stw	r3,1320(sp)
    455c:	003bff06 	br	355c <___vfprintf_internal_r+0x204>
    4560:	d9414c17 	ldw	r5,1328(sp)
    4564:	b8c00007 	ldb	r3,0(r23)
    4568:	29402014 	ori	r5,r5,128
    456c:	d9414c15 	stw	r5,1328(sp)
    4570:	003bf806 	br	3554 <___vfprintf_internal_r+0x1fc>
    4574:	b8c00007 	ldb	r3,0(r23)
    4578:	00800a84 	movi	r2,42
    457c:	bdc00044 	addi	r23,r23,1
    4580:	18831526 	beq	r3,r2,51d8 <___vfprintf_internal_r+0x1e80>
    4584:	d8c14d15 	stw	r3,1332(sp)
    4588:	18bff404 	addi	r2,r3,-48
    458c:	00c00244 	movi	r3,9
    4590:	18827836 	bltu	r3,r2,4f74 <___vfprintf_internal_r+0x1c1c>
    4594:	000d883a 	mov	r6,zero
    4598:	308002a4 	muli	r2,r6,10
    459c:	b9800007 	ldb	r6,0(r23)
    45a0:	d9414d17 	ldw	r5,1332(sp)
    45a4:	bdc00044 	addi	r23,r23,1
    45a8:	d9814d15 	stw	r6,1332(sp)
    45ac:	d9014d17 	ldw	r4,1332(sp)
    45b0:	1145883a 	add	r2,r2,r5
    45b4:	11bff404 	addi	r6,r2,-48
    45b8:	20bff404 	addi	r2,r4,-48
    45bc:	18bff62e 	bgeu	r3,r2,4598 <___vfprintf_internal_r+0x1240>
    45c0:	3027883a 	mov	r19,r6
    45c4:	303be50e 	bge	r6,zero,355c <___vfprintf_internal_r+0x204>
    45c8:	04ffffc4 	movi	r19,-1
    45cc:	003be306 	br	355c <___vfprintf_internal_r+0x204>
    45d0:	d8000405 	stb	zero,16(sp)
    45d4:	39800017 	ldw	r6,0(r7)
    45d8:	39c00104 	addi	r7,r7,4
    45dc:	d9c14015 	stw	r7,1280(sp)
    45e0:	d9814115 	stw	r6,1284(sp)
    45e4:	3001c926 	beq	r6,zero,4d0c <___vfprintf_internal_r+0x19b4>
    45e8:	98000e16 	blt	r19,zero,4624 <___vfprintf_internal_r+0x12cc>
    45ec:	d9014117 	ldw	r4,1284(sp)
    45f0:	000b883a 	mov	r5,zero
    45f4:	980d883a 	mov	r6,r19
    45f8:	0007e880 	call	7e88 <memchr>
    45fc:	10025926 	beq	r2,zero,4f64 <___vfprintf_internal_r+0x1c0c>
    4600:	d8c14117 	ldw	r3,1284(sp)
    4604:	10cfc83a 	sub	r7,r2,r3
    4608:	99c19e16 	blt	r19,r7,4c84 <___vfprintf_internal_r+0x192c>
    460c:	d9c14515 	stw	r7,1300(sp)
    4610:	38000916 	blt	r7,zero,4638 <___vfprintf_internal_r+0x12e0>
    4614:	d8014615 	stw	zero,1304(sp)
    4618:	003df106 	br	3de0 <___vfprintf_internal_r+0xa88>
    461c:	b8c00007 	ldb	r3,0(r23)
    4620:	003bcc06 	br	3554 <___vfprintf_internal_r+0x1fc>
    4624:	d9014117 	ldw	r4,1284(sp)
    4628:	000328c0 	call	328c <strlen>
    462c:	d8814515 	stw	r2,1300(sp)
    4630:	100f883a 	mov	r7,r2
    4634:	103ff70e 	bge	r2,zero,4614 <___vfprintf_internal_r+0x12bc>
    4638:	d8014515 	stw	zero,1300(sp)
    463c:	d8014615 	stw	zero,1304(sp)
    4640:	003de706 	br	3de0 <___vfprintf_internal_r+0xa88>
    4644:	20c03fcc 	andi	r3,r4,255
    4648:	00800044 	movi	r2,1
    464c:	18802d26 	beq	r3,r2,4704 <___vfprintf_internal_r+0x13ac>
    4650:	18800e36 	bltu	r3,r2,468c <___vfprintf_internal_r+0x1334>
    4654:	00800084 	movi	r2,2
    4658:	1880fa26 	beq	r3,r2,4a44 <___vfprintf_internal_r+0x16ec>
    465c:	01000074 	movhi	r4,1
    4660:	213c0604 	addi	r4,r4,-4072
    4664:	000328c0 	call	328c <strlen>
    4668:	100f883a 	mov	r7,r2
    466c:	dcc14515 	stw	r19,1300(sp)
    4670:	9880010e 	bge	r19,r2,4678 <___vfprintf_internal_r+0x1320>
    4674:	d8814515 	stw	r2,1300(sp)
    4678:	00800074 	movhi	r2,1
    467c:	10bc0604 	addi	r2,r2,-4072
    4680:	dcc14615 	stw	r19,1304(sp)
    4684:	d8814115 	stw	r2,1284(sp)
    4688:	003dd506 	br	3de0 <___vfprintf_internal_r+0xa88>
    468c:	d9401904 	addi	r5,sp,100
    4690:	dd000f04 	addi	r20,sp,60
    4694:	d9414115 	stw	r5,1284(sp)
    4698:	880a977a 	slli	r5,r17,29
    469c:	d9814117 	ldw	r6,1284(sp)
    46a0:	8004d0fa 	srli	r2,r16,3
    46a4:	8806d0fa 	srli	r3,r17,3
    46a8:	810001cc 	andi	r4,r16,7
    46ac:	2884b03a 	or	r2,r5,r2
    46b0:	31bfffc4 	addi	r6,r6,-1
    46b4:	21000c04 	addi	r4,r4,48
    46b8:	d9814115 	stw	r6,1284(sp)
    46bc:	10cab03a 	or	r5,r2,r3
    46c0:	31000005 	stb	r4,0(r6)
    46c4:	1021883a 	mov	r16,r2
    46c8:	1823883a 	mov	r17,r3
    46cc:	283ff21e 	bne	r5,zero,4698 <___vfprintf_internal_r+0x1340>
    46d0:	d8c14c17 	ldw	r3,1328(sp)
    46d4:	1880004c 	andi	r2,r3,1
    46d8:	1005003a 	cmpeq	r2,r2,zero
    46dc:	103db91e 	bne	r2,zero,3dc4 <___vfprintf_internal_r+0xa6c>
    46e0:	20803fcc 	andi	r2,r4,255
    46e4:	1080201c 	xori	r2,r2,128
    46e8:	10bfe004 	addi	r2,r2,-128
    46ec:	00c00c04 	movi	r3,48
    46f0:	10fdb426 	beq	r2,r3,3dc4 <___vfprintf_internal_r+0xa6c>
    46f4:	31bfffc4 	addi	r6,r6,-1
    46f8:	d9814115 	stw	r6,1284(sp)
    46fc:	30c00005 	stb	r3,0(r6)
    4700:	003db006 	br	3dc4 <___vfprintf_internal_r+0xa6c>
    4704:	88800068 	cmpgeui	r2,r17,1
    4708:	10002c1e 	bne	r2,zero,47bc <___vfprintf_internal_r+0x1464>
    470c:	8800021e 	bne	r17,zero,4718 <___vfprintf_internal_r+0x13c0>
    4710:	00800244 	movi	r2,9
    4714:	14002936 	bltu	r2,r16,47bc <___vfprintf_internal_r+0x1464>
    4718:	d90018c4 	addi	r4,sp,99
    471c:	dd000f04 	addi	r20,sp,60
    4720:	d9014115 	stw	r4,1284(sp)
    4724:	d9014117 	ldw	r4,1284(sp)
    4728:	80800c04 	addi	r2,r16,48
    472c:	20800005 	stb	r2,0(r4)
    4730:	003da406 	br	3dc4 <___vfprintf_internal_r+0xa6c>
    4734:	dc400d17 	ldw	r17,52(sp)
    4738:	07000074 	movhi	fp,1
    473c:	e73c0d84 	addi	fp,fp,-4042
    4740:	9425883a 	add	r18,r18,r16
    4744:	8c400044 	addi	r17,r17,1
    4748:	008001c4 	movi	r2,7
    474c:	1f000015 	stw	fp,0(r3)
    4750:	1c000115 	stw	r16,4(r3)
    4754:	dc800e15 	stw	r18,56(sp)
    4758:	dc400d15 	stw	r17,52(sp)
    475c:	147de216 	blt	r2,r17,3ee8 <___vfprintf_internal_r+0xb90>
    4760:	18c00204 	addi	r3,r3,8
    4764:	003c7a06 	br	3950 <___vfprintf_internal_r+0x5f8>
    4768:	01000084 	movi	r4,2
    476c:	d8000405 	stb	zero,16(sp)
    4770:	003d8706 	br	3d90 <___vfprintf_internal_r+0xa38>
    4774:	d9814c17 	ldw	r6,1328(sp)
    4778:	30c4703a 	and	r2,r6,r3
    477c:	1005003a 	cmpeq	r2,r2,zero
    4780:	103cb926 	beq	r2,zero,3a68 <___vfprintf_internal_r+0x710>
    4784:	d9014117 	ldw	r4,1284(sp)
    4788:	94800044 	addi	r18,r18,1
    478c:	8c400044 	addi	r17,r17,1
    4790:	008001c4 	movi	r2,7
    4794:	a9000015 	stw	r4,0(r21)
    4798:	a8c00115 	stw	r3,4(r21)
    479c:	dc800e15 	stw	r18,56(sp)
    47a0:	dc400d15 	stw	r17,52(sp)
    47a4:	147e6616 	blt	r2,r17,4140 <___vfprintf_internal_r+0xde8>
    47a8:	acc00204 	addi	r19,r21,8
    47ac:	003cd706 	br	3b0c <___vfprintf_internal_r+0x7b4>
    47b0:	07000074 	movhi	fp,1
    47b4:	e73c0d84 	addi	fp,fp,-4042
    47b8:	003c4f06 	br	38f8 <___vfprintf_internal_r+0x5a0>
    47bc:	dd000f04 	addi	r20,sp,60
    47c0:	dc801904 	addi	r18,sp,100
    47c4:	8009883a 	mov	r4,r16
    47c8:	880b883a 	mov	r5,r17
    47cc:	01800284 	movi	r6,10
    47d0:	000f883a 	mov	r7,zero
    47d4:	000a4540 	call	a454 <__umoddi3>
    47d8:	12000c04 	addi	r8,r2,48
    47dc:	94bfffc4 	addi	r18,r18,-1
    47e0:	8009883a 	mov	r4,r16
    47e4:	880b883a 	mov	r5,r17
    47e8:	01800284 	movi	r6,10
    47ec:	000f883a 	mov	r7,zero
    47f0:	92000005 	stb	r8,0(r18)
    47f4:	0009e780 	call	9e78 <__udivdi3>
    47f8:	1009883a 	mov	r4,r2
    47fc:	1021883a 	mov	r16,r2
    4800:	18800068 	cmpgeui	r2,r3,1
    4804:	1823883a 	mov	r17,r3
    4808:	103fee1e 	bne	r2,zero,47c4 <___vfprintf_internal_r+0x146c>
    480c:	1800021e 	bne	r3,zero,4818 <___vfprintf_internal_r+0x14c0>
    4810:	00800244 	movi	r2,9
    4814:	113feb36 	bltu	r2,r4,47c4 <___vfprintf_internal_r+0x146c>
    4818:	94bfffc4 	addi	r18,r18,-1
    481c:	dc814115 	stw	r18,1284(sp)
    4820:	003fc006 	br	4724 <___vfprintf_internal_r+0x13cc>
    4824:	d9014c17 	ldw	r4,1328(sp)
    4828:	2080004c 	andi	r2,r4,1
    482c:	10009a1e 	bne	r2,zero,4a98 <___vfprintf_internal_r+0x1740>
    4830:	d9401904 	addi	r5,sp,100
    4834:	dd000f04 	addi	r20,sp,60
    4838:	d9414115 	stw	r5,1284(sp)
    483c:	003d6106 	br	3dc4 <___vfprintf_internal_r+0xa6c>
    4840:	d9014f17 	ldw	r4,1340(sp)
    4844:	b00b883a 	mov	r5,r22
    4848:	d9800c04 	addi	r6,sp,48
    484c:	00033000 	call	3300 <__sprint_r>
    4850:	103c791e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    4854:	dc800e17 	ldw	r18,56(sp)
    4858:	d8c01904 	addi	r3,sp,100
    485c:	003cff06 	br	3c5c <___vfprintf_internal_r+0x904>
    4860:	d8c14c17 	ldw	r3,1328(sp)
    4864:	1880040c 	andi	r2,r3,16
    4868:	1000711e 	bne	r2,zero,4a30 <___vfprintf_internal_r+0x16d8>
    486c:	d9014c17 	ldw	r4,1328(sp)
    4870:	2080100c 	andi	r2,r4,64
    4874:	10006e26 	beq	r2,zero,4a30 <___vfprintf_internal_r+0x16d8>
    4878:	3c00000b 	ldhu	r16,0(r7)
    487c:	0023883a 	mov	r17,zero
    4880:	39c00104 	addi	r7,r7,4
    4884:	d9c14015 	stw	r7,1280(sp)
    4888:	003f0006 	br	448c <___vfprintf_internal_r+0x1134>
    488c:	dc400d17 	ldw	r17,52(sp)
    4890:	07000074 	movhi	fp,1
    4894:	e73c0d84 	addi	fp,fp,-4042
    4898:	9425883a 	add	r18,r18,r16
    489c:	8c400044 	addi	r17,r17,1
    48a0:	008001c4 	movi	r2,7
    48a4:	1f000015 	stw	fp,0(r3)
    48a8:	1c000115 	stw	r16,4(r3)
    48ac:	dc800e15 	stw	r18,56(sp)
    48b0:	dc400d15 	stw	r17,52(sp)
    48b4:	147d7616 	blt	r2,r17,3e90 <___vfprintf_internal_r+0xb38>
    48b8:	18c00204 	addi	r3,r3,8
    48bc:	003d7b06 	br	3eac <___vfprintf_internal_r+0xb54>
    48c0:	dc800e17 	ldw	r18,56(sp)
    48c4:	dc400d17 	ldw	r17,52(sp)
    48c8:	07000074 	movhi	fp,1
    48cc:	e73c1184 	addi	fp,fp,-4026
    48d0:	003bc006 	br	37d4 <___vfprintf_internal_r+0x47c>
    48d4:	d9014f17 	ldw	r4,1340(sp)
    48d8:	b00b883a 	mov	r5,r22
    48dc:	d9800c04 	addi	r6,sp,48
    48e0:	00033000 	call	3300 <__sprint_r>
    48e4:	103c541e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    48e8:	dc800e17 	ldw	r18,56(sp)
    48ec:	d8c01904 	addi	r3,sp,100
    48f0:	003ce906 	br	3c98 <___vfprintf_internal_r+0x940>
    48f4:	3c000017 	ldw	r16,0(r7)
    48f8:	0009883a 	mov	r4,zero
    48fc:	39c00104 	addi	r7,r7,4
    4900:	0023883a 	mov	r17,zero
    4904:	d9c14015 	stw	r7,1280(sp)
    4908:	d8000405 	stb	zero,16(sp)
    490c:	003d2006 	br	3d90 <___vfprintf_internal_r+0xa38>
    4910:	38800017 	ldw	r2,0(r7)
    4914:	39c00104 	addi	r7,r7,4
    4918:	d9c14015 	stw	r7,1280(sp)
    491c:	1023d7fa 	srai	r17,r2,31
    4920:	1021883a 	mov	r16,r2
    4924:	003d1806 	br	3d88 <___vfprintf_internal_r+0xa30>
    4928:	3c000017 	ldw	r16,0(r7)
    492c:	01000044 	movi	r4,1
    4930:	39c00104 	addi	r7,r7,4
    4934:	0023883a 	mov	r17,zero
    4938:	d9c14015 	stw	r7,1280(sp)
    493c:	d8000405 	stb	zero,16(sp)
    4940:	003d1306 	br	3d90 <___vfprintf_internal_r+0xa38>
    4944:	00800074 	movhi	r2,1
    4948:	10bc0d04 	addi	r2,r2,-4044
    494c:	94800044 	addi	r18,r18,1
    4950:	8c400044 	addi	r17,r17,1
    4954:	a8800015 	stw	r2,0(r21)
    4958:	00c00044 	movi	r3,1
    495c:	008001c4 	movi	r2,7
    4960:	a8c00115 	stw	r3,4(r21)
    4964:	dc800e15 	stw	r18,56(sp)
    4968:	dc400d15 	stw	r17,52(sp)
    496c:	1440ca16 	blt	r2,r17,4c98 <___vfprintf_internal_r+0x1940>
    4970:	a8c00204 	addi	r3,r21,8
    4974:	2000061e 	bne	r4,zero,4990 <___vfprintf_internal_r+0x1638>
    4978:	d9414717 	ldw	r5,1308(sp)
    497c:	2800041e 	bne	r5,zero,4990 <___vfprintf_internal_r+0x1638>
    4980:	d9814c17 	ldw	r6,1328(sp)
    4984:	3080004c 	andi	r2,r6,1
    4988:	1005003a 	cmpeq	r2,r2,zero
    498c:	103bf01e 	bne	r2,zero,3950 <___vfprintf_internal_r+0x5f8>
    4990:	00800044 	movi	r2,1
    4994:	dc400d17 	ldw	r17,52(sp)
    4998:	18800115 	stw	r2,4(r3)
    499c:	d8814917 	ldw	r2,1316(sp)
    49a0:	94800044 	addi	r18,r18,1
    49a4:	8c400044 	addi	r17,r17,1
    49a8:	18800015 	stw	r2,0(r3)
    49ac:	008001c4 	movi	r2,7
    49b0:	dc800e15 	stw	r18,56(sp)
    49b4:	dc400d15 	stw	r17,52(sp)
    49b8:	1440ca16 	blt	r2,r17,4ce4 <___vfprintf_internal_r+0x198c>
    49bc:	18c00204 	addi	r3,r3,8
    49c0:	0121c83a 	sub	r16,zero,r4
    49c4:	0400500e 	bge	zero,r16,4b08 <___vfprintf_internal_r+0x17b0>
    49c8:	00800404 	movi	r2,16
    49cc:	1400800e 	bge	r2,r16,4bd0 <___vfprintf_internal_r+0x1878>
    49d0:	1027883a 	mov	r19,r2
    49d4:	07000074 	movhi	fp,1
    49d8:	e73c0d84 	addi	fp,fp,-4042
    49dc:	050001c4 	movi	r20,7
    49e0:	00000306 	br	49f0 <___vfprintf_internal_r+0x1698>
    49e4:	18c00204 	addi	r3,r3,8
    49e8:	843ffc04 	addi	r16,r16,-16
    49ec:	9c007a0e 	bge	r19,r16,4bd8 <___vfprintf_internal_r+0x1880>
    49f0:	94800404 	addi	r18,r18,16
    49f4:	8c400044 	addi	r17,r17,1
    49f8:	1f000015 	stw	fp,0(r3)
    49fc:	1cc00115 	stw	r19,4(r3)
    4a00:	dc800e15 	stw	r18,56(sp)
    4a04:	dc400d15 	stw	r17,52(sp)
    4a08:	a47ff60e 	bge	r20,r17,49e4 <___vfprintf_internal_r+0x168c>
    4a0c:	d9014f17 	ldw	r4,1340(sp)
    4a10:	b00b883a 	mov	r5,r22
    4a14:	d9800c04 	addi	r6,sp,48
    4a18:	00033000 	call	3300 <__sprint_r>
    4a1c:	103c061e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    4a20:	dc800e17 	ldw	r18,56(sp)
    4a24:	dc400d17 	ldw	r17,52(sp)
    4a28:	d8c01904 	addi	r3,sp,100
    4a2c:	003fee06 	br	49e8 <___vfprintf_internal_r+0x1690>
    4a30:	3c000017 	ldw	r16,0(r7)
    4a34:	0023883a 	mov	r17,zero
    4a38:	39c00104 	addi	r7,r7,4
    4a3c:	d9c14015 	stw	r7,1280(sp)
    4a40:	003e9206 	br	448c <___vfprintf_internal_r+0x1134>
    4a44:	d9401904 	addi	r5,sp,100
    4a48:	dd000f04 	addi	r20,sp,60
    4a4c:	d9414115 	stw	r5,1284(sp)
    4a50:	d9814417 	ldw	r6,1296(sp)
    4a54:	880a973a 	slli	r5,r17,28
    4a58:	8004d13a 	srli	r2,r16,4
    4a5c:	810003cc 	andi	r4,r16,15
    4a60:	3109883a 	add	r4,r6,r4
    4a64:	2884b03a 	or	r2,r5,r2
    4a68:	21400003 	ldbu	r5,0(r4)
    4a6c:	d9014117 	ldw	r4,1284(sp)
    4a70:	8806d13a 	srli	r3,r17,4
    4a74:	1021883a 	mov	r16,r2
    4a78:	213fffc4 	addi	r4,r4,-1
    4a7c:	d9014115 	stw	r4,1284(sp)
    4a80:	d9814117 	ldw	r6,1284(sp)
    4a84:	10c8b03a 	or	r4,r2,r3
    4a88:	1823883a 	mov	r17,r3
    4a8c:	31400005 	stb	r5,0(r6)
    4a90:	203fef1e 	bne	r4,zero,4a50 <___vfprintf_internal_r+0x16f8>
    4a94:	003ccb06 	br	3dc4 <___vfprintf_internal_r+0xa6c>
    4a98:	00800c04 	movi	r2,48
    4a9c:	d98018c4 	addi	r6,sp,99
    4aa0:	dd000f04 	addi	r20,sp,60
    4aa4:	d88018c5 	stb	r2,99(sp)
    4aa8:	d9814115 	stw	r6,1284(sp)
    4aac:	003cc506 	br	3dc4 <___vfprintf_internal_r+0xa6c>
    4ab0:	dc400d17 	ldw	r17,52(sp)
    4ab4:	07000074 	movhi	fp,1
    4ab8:	e73c1184 	addi	fp,fp,-4026
    4abc:	003bc706 	br	39dc <___vfprintf_internal_r+0x684>
    4ac0:	d9414c17 	ldw	r5,1328(sp)
    4ac4:	2880040c 	andi	r2,r5,16
    4ac8:	10007c26 	beq	r2,zero,4cbc <___vfprintf_internal_r+0x1964>
    4acc:	38800017 	ldw	r2,0(r7)
    4ad0:	39c00104 	addi	r7,r7,4
    4ad4:	d9c14015 	stw	r7,1280(sp)
    4ad8:	d9814b17 	ldw	r6,1324(sp)
    4adc:	d9c14017 	ldw	r7,1280(sp)
    4ae0:	11800015 	stw	r6,0(r2)
    4ae4:	003a7806 	br	34c8 <___vfprintf_internal_r+0x170>
    4ae8:	d9014f17 	ldw	r4,1340(sp)
    4aec:	b00b883a 	mov	r5,r22
    4af0:	d9800c04 	addi	r6,sp,48
    4af4:	00033000 	call	3300 <__sprint_r>
    4af8:	103bcf1e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    4afc:	dc800e17 	ldw	r18,56(sp)
    4b00:	dc400d17 	ldw	r17,52(sp)
    4b04:	d8c01904 	addi	r3,sp,100
    4b08:	d9014717 	ldw	r4,1308(sp)
    4b0c:	d9414117 	ldw	r5,1284(sp)
    4b10:	8c400044 	addi	r17,r17,1
    4b14:	9125883a 	add	r18,r18,r4
    4b18:	008001c4 	movi	r2,7
    4b1c:	19400015 	stw	r5,0(r3)
    4b20:	19000115 	stw	r4,4(r3)
    4b24:	dc800e15 	stw	r18,56(sp)
    4b28:	dc400d15 	stw	r17,52(sp)
    4b2c:	147cee16 	blt	r2,r17,3ee8 <___vfprintf_internal_r+0xb90>
    4b30:	18c00204 	addi	r3,r3,8
    4b34:	003b8606 	br	3950 <___vfprintf_internal_r+0x5f8>
    4b38:	38c00017 	ldw	r3,0(r7)
    4b3c:	39000204 	addi	r4,r7,8
    4b40:	d9014015 	stw	r4,1280(sp)
    4b44:	d8c14215 	stw	r3,1288(sp)
    4b48:	39c00117 	ldw	r7,4(r7)
    4b4c:	d9c14315 	stw	r7,1292(sp)
    4b50:	003e2006 	br	43d4 <___vfprintf_internal_r+0x107c>
    4b54:	0005883a 	mov	r2,zero
    4b58:	1409c83a 	sub	r4,r2,r16
    4b5c:	1105803a 	cmpltu	r2,r2,r4
    4b60:	044bc83a 	sub	r5,zero,r17
    4b64:	2885c83a 	sub	r2,r5,r2
    4b68:	2021883a 	mov	r16,r4
    4b6c:	1023883a 	mov	r17,r2
    4b70:	01000044 	movi	r4,1
    4b74:	00800b44 	movi	r2,45
    4b78:	d8800405 	stb	r2,16(sp)
    4b7c:	003c8406 	br	3d90 <___vfprintf_internal_r+0xa38>
    4b80:	d9014f17 	ldw	r4,1340(sp)
    4b84:	b00b883a 	mov	r5,r22
    4b88:	d9800c04 	addi	r6,sp,48
    4b8c:	00033000 	call	3300 <__sprint_r>
    4b90:	103ba91e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    4b94:	dc800e17 	ldw	r18,56(sp)
    4b98:	dc400d17 	ldw	r17,52(sp)
    4b9c:	d9000517 	ldw	r4,20(sp)
    4ba0:	d9401904 	addi	r5,sp,100
    4ba4:	003da706 	br	4244 <___vfprintf_internal_r+0xeec>
    4ba8:	d9014f17 	ldw	r4,1340(sp)
    4bac:	b00b883a 	mov	r5,r22
    4bb0:	d9800c04 	addi	r6,sp,48
    4bb4:	00033000 	call	3300 <__sprint_r>
    4bb8:	103b9f1e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    4bbc:	dc800e17 	ldw	r18,56(sp)
    4bc0:	dc400d17 	ldw	r17,52(sp)
    4bc4:	d9000517 	ldw	r4,20(sp)
    4bc8:	d8c01904 	addi	r3,sp,100
    4bcc:	003d9106 	br	4214 <___vfprintf_internal_r+0xebc>
    4bd0:	07000074 	movhi	fp,1
    4bd4:	e73c0d84 	addi	fp,fp,-4042
    4bd8:	9425883a 	add	r18,r18,r16
    4bdc:	8c400044 	addi	r17,r17,1
    4be0:	008001c4 	movi	r2,7
    4be4:	1f000015 	stw	fp,0(r3)
    4be8:	1c000115 	stw	r16,4(r3)
    4bec:	dc800e15 	stw	r18,56(sp)
    4bf0:	dc400d15 	stw	r17,52(sp)
    4bf4:	147fbc16 	blt	r2,r17,4ae8 <___vfprintf_internal_r+0x1790>
    4bf8:	18c00204 	addi	r3,r3,8
    4bfc:	003fc206 	br	4b08 <___vfprintf_internal_r+0x17b0>
    4c00:	d9014f17 	ldw	r4,1340(sp)
    4c04:	b00b883a 	mov	r5,r22
    4c08:	d9800c04 	addi	r6,sp,48
    4c0c:	00033000 	call	3300 <__sprint_r>
    4c10:	103b891e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    4c14:	dc800e17 	ldw	r18,56(sp)
    4c18:	d9000517 	ldw	r4,20(sp)
    4c1c:	d8c01904 	addi	r3,sp,100
    4c20:	003d0206 	br	402c <___vfprintf_internal_r+0xcd4>
    4c24:	07000074 	movhi	fp,1
    4c28:	e73c0d84 	addi	fp,fp,-4042
    4c2c:	003be406 	br	3bc0 <___vfprintf_internal_r+0x868>
    4c30:	00800074 	movhi	r2,1
    4c34:	10bbfc04 	addi	r2,r2,-4112
    4c38:	d8814115 	stw	r2,1284(sp)
    4c3c:	003df506 	br	4414 <___vfprintf_internal_r+0x10bc>
    4c40:	d9014217 	ldw	r4,1288(sp)
    4c44:	d9414317 	ldw	r5,1292(sp)
    4c48:	00097ac0 	call	97ac <__isnand>
    4c4c:	10003926 	beq	r2,zero,4d34 <___vfprintf_internal_r+0x19dc>
    4c50:	d9414d17 	ldw	r5,1332(sp)
    4c54:	008011c4 	movi	r2,71
    4c58:	1140ce16 	blt	r2,r5,4f94 <___vfprintf_internal_r+0x1c3c>
    4c5c:	01800074 	movhi	r6,1
    4c60:	31bbfd04 	addi	r6,r6,-4108
    4c64:	d9814115 	stw	r6,1284(sp)
    4c68:	003dea06 	br	4414 <___vfprintf_internal_r+0x10bc>
    4c6c:	d9014c17 	ldw	r4,1328(sp)
    4c70:	bdc00044 	addi	r23,r23,1
    4c74:	b8c00007 	ldb	r3,0(r23)
    4c78:	21000814 	ori	r4,r4,32
    4c7c:	d9014c15 	stw	r4,1328(sp)
    4c80:	003a3406 	br	3554 <___vfprintf_internal_r+0x1fc>
    4c84:	dcc14515 	stw	r19,1300(sp)
    4c88:	98011016 	blt	r19,zero,50cc <___vfprintf_internal_r+0x1d74>
    4c8c:	980f883a 	mov	r7,r19
    4c90:	d8014615 	stw	zero,1304(sp)
    4c94:	003c5206 	br	3de0 <___vfprintf_internal_r+0xa88>
    4c98:	d9014f17 	ldw	r4,1340(sp)
    4c9c:	b00b883a 	mov	r5,r22
    4ca0:	d9800c04 	addi	r6,sp,48
    4ca4:	00033000 	call	3300 <__sprint_r>
    4ca8:	103b631e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    4cac:	dc800e17 	ldw	r18,56(sp)
    4cb0:	d9000517 	ldw	r4,20(sp)
    4cb4:	d8c01904 	addi	r3,sp,100
    4cb8:	003f2e06 	br	4974 <___vfprintf_internal_r+0x161c>
    4cbc:	d8c14c17 	ldw	r3,1328(sp)
    4cc0:	1880100c 	andi	r2,r3,64
    4cc4:	1000a026 	beq	r2,zero,4f48 <___vfprintf_internal_r+0x1bf0>
    4cc8:	38800017 	ldw	r2,0(r7)
    4ccc:	39c00104 	addi	r7,r7,4
    4cd0:	d9c14015 	stw	r7,1280(sp)
    4cd4:	d9014b17 	ldw	r4,1324(sp)
    4cd8:	d9c14017 	ldw	r7,1280(sp)
    4cdc:	1100000d 	sth	r4,0(r2)
    4ce0:	0039f906 	br	34c8 <___vfprintf_internal_r+0x170>
    4ce4:	d9014f17 	ldw	r4,1340(sp)
    4ce8:	b00b883a 	mov	r5,r22
    4cec:	d9800c04 	addi	r6,sp,48
    4cf0:	00033000 	call	3300 <__sprint_r>
    4cf4:	103b501e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    4cf8:	dc800e17 	ldw	r18,56(sp)
    4cfc:	dc400d17 	ldw	r17,52(sp)
    4d00:	d9000517 	ldw	r4,20(sp)
    4d04:	d8c01904 	addi	r3,sp,100
    4d08:	003f2d06 	br	49c0 <___vfprintf_internal_r+0x1668>
    4d0c:	00800184 	movi	r2,6
    4d10:	14c09a36 	bltu	r2,r19,4f7c <___vfprintf_internal_r+0x1c24>
    4d14:	dcc14515 	stw	r19,1300(sp)
    4d18:	9800010e 	bge	r19,zero,4d20 <___vfprintf_internal_r+0x19c8>
    4d1c:	d8014515 	stw	zero,1300(sp)
    4d20:	00800074 	movhi	r2,1
    4d24:	10bbff04 	addi	r2,r2,-4100
    4d28:	980f883a 	mov	r7,r19
    4d2c:	d8814115 	stw	r2,1284(sp)
    4d30:	003a7806 	br	3714 <___vfprintf_internal_r+0x3bc>
    4d34:	00bfffc4 	movi	r2,-1
    4d38:	9880e226 	beq	r19,r2,50c4 <___vfprintf_internal_r+0x1d6c>
    4d3c:	d9414d17 	ldw	r5,1332(sp)
    4d40:	008019c4 	movi	r2,103
    4d44:	2880dc26 	beq	r5,r2,50b8 <___vfprintf_internal_r+0x1d60>
    4d48:	008011c4 	movi	r2,71
    4d4c:	2880da26 	beq	r5,r2,50b8 <___vfprintf_internal_r+0x1d60>
    4d50:	d9414c17 	ldw	r5,1328(sp)
    4d54:	d9014317 	ldw	r4,1292(sp)
    4d58:	d9814217 	ldw	r6,1288(sp)
    4d5c:	29404014 	ori	r5,r5,256
    4d60:	d9414c15 	stw	r5,1328(sp)
    4d64:	2000cc16 	blt	r4,zero,5098 <___vfprintf_internal_r+0x1d40>
    4d68:	3021883a 	mov	r16,r6
    4d6c:	2023883a 	mov	r17,r4
    4d70:	0039883a 	mov	fp,zero
    4d74:	d9414d17 	ldw	r5,1332(sp)
    4d78:	00801984 	movi	r2,102
    4d7c:	2880b726 	beq	r5,r2,505c <___vfprintf_internal_r+0x1d04>
    4d80:	00801184 	movi	r2,70
    4d84:	2880b526 	beq	r5,r2,505c <___vfprintf_internal_r+0x1d04>
    4d88:	00801944 	movi	r2,101
    4d8c:	2880c826 	beq	r5,r2,50b0 <___vfprintf_internal_r+0x1d58>
    4d90:	00801144 	movi	r2,69
    4d94:	2880c626 	beq	r5,r2,50b0 <___vfprintf_internal_r+0x1d58>
    4d98:	9829883a 	mov	r20,r19
    4d9c:	d9014f17 	ldw	r4,1340(sp)
    4da0:	d8800504 	addi	r2,sp,20
    4da4:	880d883a 	mov	r6,r17
    4da8:	d8800115 	stw	r2,4(sp)
    4dac:	d8c00604 	addi	r3,sp,24
    4db0:	d8800704 	addi	r2,sp,28
    4db4:	800b883a 	mov	r5,r16
    4db8:	01c00084 	movi	r7,2
    4dbc:	d8c00215 	stw	r3,8(sp)
    4dc0:	d8800315 	stw	r2,12(sp)
    4dc4:	dd000015 	stw	r20,0(sp)
    4dc8:	00057300 	call	5730 <_dtoa_r>
    4dcc:	d9814d17 	ldw	r6,1332(sp)
    4dd0:	d8814115 	stw	r2,1284(sp)
    4dd4:	008019c4 	movi	r2,103
    4dd8:	30809526 	beq	r6,r2,5030 <___vfprintf_internal_r+0x1cd8>
    4ddc:	d8c14d17 	ldw	r3,1332(sp)
    4de0:	008011c4 	movi	r2,71
    4de4:	18809226 	beq	r3,r2,5030 <___vfprintf_internal_r+0x1cd8>
    4de8:	d9414117 	ldw	r5,1284(sp)
    4dec:	d9814d17 	ldw	r6,1332(sp)
    4df0:	00801984 	movi	r2,102
    4df4:	2d25883a 	add	r18,r5,r20
    4df8:	30808626 	beq	r6,r2,5014 <___vfprintf_internal_r+0x1cbc>
    4dfc:	00801184 	movi	r2,70
    4e00:	30808426 	beq	r6,r2,5014 <___vfprintf_internal_r+0x1cbc>
    4e04:	000d883a 	mov	r6,zero
    4e08:	000f883a 	mov	r7,zero
    4e0c:	880b883a 	mov	r5,r17
    4e10:	8009883a 	mov	r4,r16
    4e14:	000b5240 	call	b524 <__eqdf2>
    4e18:	1000751e 	bne	r2,zero,4ff0 <___vfprintf_internal_r+0x1c98>
    4e1c:	9005883a 	mov	r2,r18
    4e20:	dc800715 	stw	r18,28(sp)
    4e24:	d9014117 	ldw	r4,1284(sp)
    4e28:	d9414d17 	ldw	r5,1332(sp)
    4e2c:	00c019c4 	movi	r3,103
    4e30:	1125c83a 	sub	r18,r2,r4
    4e34:	28c06826 	beq	r5,r3,4fd8 <___vfprintf_internal_r+0x1c80>
    4e38:	008011c4 	movi	r2,71
    4e3c:	28806626 	beq	r5,r2,4fd8 <___vfprintf_internal_r+0x1c80>
    4e40:	d9000517 	ldw	r4,20(sp)
    4e44:	d8c14d17 	ldw	r3,1332(sp)
    4e48:	00801944 	movi	r2,101
    4e4c:	10c05516 	blt	r2,r3,4fa4 <___vfprintf_internal_r+0x1c4c>
    4e50:	213fffc4 	addi	r4,r4,-1
    4e54:	d9000515 	stw	r4,20(sp)
    4e58:	d8c00805 	stb	r3,32(sp)
    4e5c:	2021883a 	mov	r16,r4
    4e60:	2000c116 	blt	r4,zero,5168 <___vfprintf_internal_r+0x1e10>
    4e64:	00800ac4 	movi	r2,43
    4e68:	d8800845 	stb	r2,33(sp)
    4e6c:	00800244 	movi	r2,9
    4e70:	1400af0e 	bge	r2,r16,5130 <___vfprintf_internal_r+0x1dd8>
    4e74:	1027883a 	mov	r19,r2
    4e78:	dc400b84 	addi	r17,sp,46
    4e7c:	8009883a 	mov	r4,r16
    4e80:	01400284 	movi	r5,10
    4e84:	00028800 	call	2880 <__modsi3>
    4e88:	10800c04 	addi	r2,r2,48
    4e8c:	8c7fffc4 	addi	r17,r17,-1
    4e90:	8009883a 	mov	r4,r16
    4e94:	01400284 	movi	r5,10
    4e98:	88800005 	stb	r2,0(r17)
    4e9c:	00028200 	call	2820 <__divsi3>
    4ea0:	1021883a 	mov	r16,r2
    4ea4:	98bff516 	blt	r19,r2,4e7c <___vfprintf_internal_r+0x1b24>
    4ea8:	10c00c04 	addi	r3,r2,48
    4eac:	d88009c4 	addi	r2,sp,39
    4eb0:	108001c4 	addi	r2,r2,7
    4eb4:	897fffc4 	addi	r5,r17,-1
    4eb8:	88ffffc5 	stb	r3,-1(r17)
    4ebc:	2880a72e 	bgeu	r5,r2,515c <___vfprintf_internal_r+0x1e04>
    4ec0:	1009883a 	mov	r4,r2
    4ec4:	d9800804 	addi	r6,sp,32
    4ec8:	d8c00884 	addi	r3,sp,34
    4ecc:	28800003 	ldbu	r2,0(r5)
    4ed0:	29400044 	addi	r5,r5,1
    4ed4:	18800005 	stb	r2,0(r3)
    4ed8:	18c00044 	addi	r3,r3,1
    4edc:	293ffb36 	bltu	r5,r4,4ecc <___vfprintf_internal_r+0x1b74>
    4ee0:	1987c83a 	sub	r3,r3,r6
    4ee4:	00800044 	movi	r2,1
    4ee8:	d8c14815 	stw	r3,1312(sp)
    4eec:	90cf883a 	add	r7,r18,r3
    4ef0:	1480960e 	bge	r2,r18,514c <___vfprintf_internal_r+0x1df4>
    4ef4:	39c00044 	addi	r7,r7,1
    4ef8:	d9c14515 	stw	r7,1300(sp)
    4efc:	38003416 	blt	r7,zero,4fd0 <___vfprintf_internal_r+0x1c78>
    4f00:	e0803fcc 	andi	r2,fp,255
    4f04:	1080201c 	xori	r2,r2,128
    4f08:	10bfe004 	addi	r2,r2,-128
    4f0c:	10004e26 	beq	r2,zero,5048 <___vfprintf_internal_r+0x1cf0>
    4f10:	00800b44 	movi	r2,45
    4f14:	dc814715 	stw	r18,1308(sp)
    4f18:	d8014615 	stw	zero,1304(sp)
    4f1c:	d8800405 	stb	r2,16(sp)
    4f20:	003bb106 	br	3de8 <___vfprintf_internal_r+0xa90>
    4f24:	00800b44 	movi	r2,45
    4f28:	d8800405 	stb	r2,16(sp)
    4f2c:	003d3306 	br	43fc <___vfprintf_internal_r+0x10a4>
    4f30:	d9014f17 	ldw	r4,1340(sp)
    4f34:	b00b883a 	mov	r5,r22
    4f38:	d9800c04 	addi	r6,sp,48
    4f3c:	00033000 	call	3300 <__sprint_r>
    4f40:	103abd1e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x6e0>
    4f44:	003abb06 	br	3a34 <___vfprintf_internal_r+0x6dc>
    4f48:	38800017 	ldw	r2,0(r7)
    4f4c:	39c00104 	addi	r7,r7,4
    4f50:	d9c14015 	stw	r7,1280(sp)
    4f54:	d9414b17 	ldw	r5,1324(sp)
    4f58:	d9c14017 	ldw	r7,1280(sp)
    4f5c:	11400015 	stw	r5,0(r2)
    4f60:	00395906 	br	34c8 <___vfprintf_internal_r+0x170>
    4f64:	980f883a 	mov	r7,r19
    4f68:	dcc14515 	stw	r19,1300(sp)
    4f6c:	d8014615 	stw	zero,1304(sp)
    4f70:	003b9b06 	br	3de0 <___vfprintf_internal_r+0xa88>
    4f74:	0027883a 	mov	r19,zero
    4f78:	00397806 	br	355c <___vfprintf_internal_r+0x204>
    4f7c:	00c00074 	movhi	r3,1
    4f80:	18fbff04 	addi	r3,r3,-4100
    4f84:	100f883a 	mov	r7,r2
    4f88:	d8814515 	stw	r2,1300(sp)
    4f8c:	d8c14115 	stw	r3,1284(sp)
    4f90:	0039e006 	br	3714 <___vfprintf_internal_r+0x3bc>
    4f94:	00800074 	movhi	r2,1
    4f98:	10bbfe04 	addi	r2,r2,-4104
    4f9c:	d8814115 	stw	r2,1284(sp)
    4fa0:	003d1c06 	br	4414 <___vfprintf_internal_r+0x10bc>
    4fa4:	d9414d17 	ldw	r5,1332(sp)
    4fa8:	00801984 	movi	r2,102
    4fac:	28804926 	beq	r5,r2,50d4 <___vfprintf_internal_r+0x1d7c>
    4fb0:	200f883a 	mov	r7,r4
    4fb4:	24805716 	blt	r4,r18,5114 <___vfprintf_internal_r+0x1dbc>
    4fb8:	d9414c17 	ldw	r5,1328(sp)
    4fbc:	2880004c 	andi	r2,r5,1
    4fc0:	10000126 	beq	r2,zero,4fc8 <___vfprintf_internal_r+0x1c70>
    4fc4:	21c00044 	addi	r7,r4,1
    4fc8:	d9c14515 	stw	r7,1300(sp)
    4fcc:	383fcc0e 	bge	r7,zero,4f00 <___vfprintf_internal_r+0x1ba8>
    4fd0:	d8014515 	stw	zero,1300(sp)
    4fd4:	003fca06 	br	4f00 <___vfprintf_internal_r+0x1ba8>
    4fd8:	d9000517 	ldw	r4,20(sp)
    4fdc:	00bfff04 	movi	r2,-4
    4fe0:	1100480e 	bge	r2,r4,5104 <___vfprintf_internal_r+0x1dac>
    4fe4:	99004716 	blt	r19,r4,5104 <___vfprintf_internal_r+0x1dac>
    4fe8:	d8c14d15 	stw	r3,1332(sp)
    4fec:	003ff006 	br	4fb0 <___vfprintf_internal_r+0x1c58>
    4ff0:	d8800717 	ldw	r2,28(sp)
    4ff4:	14bf8b2e 	bgeu	r2,r18,4e24 <___vfprintf_internal_r+0x1acc>
    4ff8:	9007883a 	mov	r3,r18
    4ffc:	01000c04 	movi	r4,48
    5000:	11000005 	stb	r4,0(r2)
    5004:	10800044 	addi	r2,r2,1
    5008:	d8800715 	stw	r2,28(sp)
    500c:	18bffc1e 	bne	r3,r2,5000 <___vfprintf_internal_r+0x1ca8>
    5010:	003f8406 	br	4e24 <___vfprintf_internal_r+0x1acc>
    5014:	d8814117 	ldw	r2,1284(sp)
    5018:	10c00007 	ldb	r3,0(r2)
    501c:	00800c04 	movi	r2,48
    5020:	18805b26 	beq	r3,r2,5190 <___vfprintf_internal_r+0x1e38>
    5024:	d9000517 	ldw	r4,20(sp)
    5028:	9125883a 	add	r18,r18,r4
    502c:	003f7506 	br	4e04 <___vfprintf_internal_r+0x1aac>
    5030:	d9014c17 	ldw	r4,1328(sp)
    5034:	2080004c 	andi	r2,r4,1
    5038:	1005003a 	cmpeq	r2,r2,zero
    503c:	103f6a26 	beq	r2,zero,4de8 <___vfprintf_internal_r+0x1a90>
    5040:	d8800717 	ldw	r2,28(sp)
    5044:	003f7706 	br	4e24 <___vfprintf_internal_r+0x1acc>
    5048:	d9c14515 	stw	r7,1300(sp)
    504c:	38004d16 	blt	r7,zero,5184 <___vfprintf_internal_r+0x1e2c>
    5050:	dc814715 	stw	r18,1308(sp)
    5054:	d8014615 	stw	zero,1304(sp)
    5058:	003b6106 	br	3de0 <___vfprintf_internal_r+0xa88>
    505c:	d9014f17 	ldw	r4,1340(sp)
    5060:	d8800504 	addi	r2,sp,20
    5064:	d8800115 	stw	r2,4(sp)
    5068:	d8c00604 	addi	r3,sp,24
    506c:	d8800704 	addi	r2,sp,28
    5070:	800b883a 	mov	r5,r16
    5074:	880d883a 	mov	r6,r17
    5078:	01c000c4 	movi	r7,3
    507c:	d8c00215 	stw	r3,8(sp)
    5080:	d8800315 	stw	r2,12(sp)
    5084:	dcc00015 	stw	r19,0(sp)
    5088:	9829883a 	mov	r20,r19
    508c:	00057300 	call	5730 <_dtoa_r>
    5090:	d8814115 	stw	r2,1284(sp)
    5094:	003f5106 	br	4ddc <___vfprintf_internal_r+0x1a84>
    5098:	d8c14217 	ldw	r3,1288(sp)
    509c:	d9014317 	ldw	r4,1292(sp)
    50a0:	07000b44 	movi	fp,45
    50a4:	1821883a 	mov	r16,r3
    50a8:	2460003c 	xorhi	r17,r4,32768
    50ac:	003f3106 	br	4d74 <___vfprintf_internal_r+0x1a1c>
    50b0:	9d000044 	addi	r20,r19,1
    50b4:	003f3906 	br	4d9c <___vfprintf_internal_r+0x1a44>
    50b8:	983f251e 	bne	r19,zero,4d50 <___vfprintf_internal_r+0x19f8>
    50bc:	04c00044 	movi	r19,1
    50c0:	003f2306 	br	4d50 <___vfprintf_internal_r+0x19f8>
    50c4:	04c00184 	movi	r19,6
    50c8:	003f2106 	br	4d50 <___vfprintf_internal_r+0x19f8>
    50cc:	d8014515 	stw	zero,1300(sp)
    50d0:	003eee06 	br	4c8c <___vfprintf_internal_r+0x1934>
    50d4:	200f883a 	mov	r7,r4
    50d8:	0100370e 	bge	zero,r4,51b8 <___vfprintf_internal_r+0x1e60>
    50dc:	9800031e 	bne	r19,zero,50ec <___vfprintf_internal_r+0x1d94>
    50e0:	d9814c17 	ldw	r6,1328(sp)
    50e4:	3080004c 	andi	r2,r6,1
    50e8:	103fb726 	beq	r2,zero,4fc8 <___vfprintf_internal_r+0x1c70>
    50ec:	20800044 	addi	r2,r4,1
    50f0:	98a7883a 	add	r19,r19,r2
    50f4:	dcc14515 	stw	r19,1300(sp)
    50f8:	980f883a 	mov	r7,r19
    50fc:	983f800e 	bge	r19,zero,4f00 <___vfprintf_internal_r+0x1ba8>
    5100:	003fb306 	br	4fd0 <___vfprintf_internal_r+0x1c78>
    5104:	d9814d17 	ldw	r6,1332(sp)
    5108:	31bfff84 	addi	r6,r6,-2
    510c:	d9814d15 	stw	r6,1332(sp)
    5110:	003f4c06 	br	4e44 <___vfprintf_internal_r+0x1aec>
    5114:	0100180e 	bge	zero,r4,5178 <___vfprintf_internal_r+0x1e20>
    5118:	00800044 	movi	r2,1
    511c:	1485883a 	add	r2,r2,r18
    5120:	d8814515 	stw	r2,1300(sp)
    5124:	100f883a 	mov	r7,r2
    5128:	103f750e 	bge	r2,zero,4f00 <___vfprintf_internal_r+0x1ba8>
    512c:	003fa806 	br	4fd0 <___vfprintf_internal_r+0x1c78>
    5130:	80c00c04 	addi	r3,r16,48
    5134:	00800c04 	movi	r2,48
    5138:	d8c008c5 	stb	r3,35(sp)
    513c:	d9800804 	addi	r6,sp,32
    5140:	d8c00904 	addi	r3,sp,36
    5144:	d8800885 	stb	r2,34(sp)
    5148:	003f6506 	br	4ee0 <___vfprintf_internal_r+0x1b88>
    514c:	d9014c17 	ldw	r4,1328(sp)
    5150:	2084703a 	and	r2,r4,r2
    5154:	103f9c26 	beq	r2,zero,4fc8 <___vfprintf_internal_r+0x1c70>
    5158:	003f6606 	br	4ef4 <___vfprintf_internal_r+0x1b9c>
    515c:	d9800804 	addi	r6,sp,32
    5160:	d8c00884 	addi	r3,sp,34
    5164:	003f5e06 	br	4ee0 <___vfprintf_internal_r+0x1b88>
    5168:	00800b44 	movi	r2,45
    516c:	0121c83a 	sub	r16,zero,r4
    5170:	d8800845 	stb	r2,33(sp)
    5174:	003f3d06 	br	4e6c <___vfprintf_internal_r+0x1b14>
    5178:	00800084 	movi	r2,2
    517c:	1105c83a 	sub	r2,r2,r4
    5180:	003fe606 	br	511c <___vfprintf_internal_r+0x1dc4>
    5184:	d8014515 	stw	zero,1300(sp)
    5188:	dc814715 	stw	r18,1308(sp)
    518c:	003fb106 	br	5054 <___vfprintf_internal_r+0x1cfc>
    5190:	000d883a 	mov	r6,zero
    5194:	000f883a 	mov	r7,zero
    5198:	8009883a 	mov	r4,r16
    519c:	880b883a 	mov	r5,r17
    51a0:	000b5ac0 	call	b5ac <__nedf2>
    51a4:	103f9f26 	beq	r2,zero,5024 <___vfprintf_internal_r+0x1ccc>
    51a8:	00800044 	movi	r2,1
    51ac:	1509c83a 	sub	r4,r2,r20
    51b0:	d9000515 	stw	r4,20(sp)
    51b4:	003f9b06 	br	5024 <___vfprintf_internal_r+0x1ccc>
    51b8:	98000d1e 	bne	r19,zero,51f0 <___vfprintf_internal_r+0x1e98>
    51bc:	d8c14c17 	ldw	r3,1328(sp)
    51c0:	1880004c 	andi	r2,r3,1
    51c4:	10000a1e 	bne	r2,zero,51f0 <___vfprintf_internal_r+0x1e98>
    51c8:	01000044 	movi	r4,1
    51cc:	200f883a 	mov	r7,r4
    51d0:	d9014515 	stw	r4,1300(sp)
    51d4:	003f4a06 	br	4f00 <___vfprintf_internal_r+0x1ba8>
    51d8:	3cc00017 	ldw	r19,0(r7)
    51dc:	39c00104 	addi	r7,r7,4
    51e0:	983d0e0e 	bge	r19,zero,461c <___vfprintf_internal_r+0x12c4>
    51e4:	b8c00007 	ldb	r3,0(r23)
    51e8:	04ffffc4 	movi	r19,-1
    51ec:	0038d906 	br	3554 <___vfprintf_internal_r+0x1fc>
    51f0:	9cc00084 	addi	r19,r19,2
    51f4:	dcc14515 	stw	r19,1300(sp)
    51f8:	980f883a 	mov	r7,r19
    51fc:	983f400e 	bge	r19,zero,4f00 <___vfprintf_internal_r+0x1ba8>
    5200:	003f7306 	br	4fd0 <___vfprintf_internal_r+0x1c78>

00005204 <__vfprintf_internal>:
    5204:	00800074 	movhi	r2,1
    5208:	10835c04 	addi	r2,r2,3440
    520c:	2013883a 	mov	r9,r4
    5210:	11000017 	ldw	r4,0(r2)
    5214:	2805883a 	mov	r2,r5
    5218:	300f883a 	mov	r7,r6
    521c:	480b883a 	mov	r5,r9
    5220:	100d883a 	mov	r6,r2
    5224:	00033581 	jmpi	3358 <___vfprintf_internal_r>

00005228 <__swsetup_r>:
    5228:	00800074 	movhi	r2,1
    522c:	10835c04 	addi	r2,r2,3440
    5230:	10c00017 	ldw	r3,0(r2)
    5234:	defffd04 	addi	sp,sp,-12
    5238:	dc400115 	stw	r17,4(sp)
    523c:	dc000015 	stw	r16,0(sp)
    5240:	dfc00215 	stw	ra,8(sp)
    5244:	2023883a 	mov	r17,r4
    5248:	2821883a 	mov	r16,r5
    524c:	18000226 	beq	r3,zero,5258 <__swsetup_r+0x30>
    5250:	18800e17 	ldw	r2,56(r3)
    5254:	10001f26 	beq	r2,zero,52d4 <__swsetup_r+0xac>
    5258:	8100030b 	ldhu	r4,12(r16)
    525c:	2080020c 	andi	r2,r4,8
    5260:	10002826 	beq	r2,zero,5304 <__swsetup_r+0xdc>
    5264:	81400417 	ldw	r5,16(r16)
    5268:	28001d26 	beq	r5,zero,52e0 <__swsetup_r+0xb8>
    526c:	2080004c 	andi	r2,r4,1
    5270:	1005003a 	cmpeq	r2,r2,zero
    5274:	10000b26 	beq	r2,zero,52a4 <__swsetup_r+0x7c>
    5278:	2080008c 	andi	r2,r4,2
    527c:	10001226 	beq	r2,zero,52c8 <__swsetup_r+0xa0>
    5280:	0005883a 	mov	r2,zero
    5284:	80800215 	stw	r2,8(r16)
    5288:	28000b26 	beq	r5,zero,52b8 <__swsetup_r+0x90>
    528c:	0005883a 	mov	r2,zero
    5290:	dfc00217 	ldw	ra,8(sp)
    5294:	dc400117 	ldw	r17,4(sp)
    5298:	dc000017 	ldw	r16,0(sp)
    529c:	dec00304 	addi	sp,sp,12
    52a0:	f800283a 	ret
    52a4:	80800517 	ldw	r2,20(r16)
    52a8:	80000215 	stw	zero,8(r16)
    52ac:	0085c83a 	sub	r2,zero,r2
    52b0:	80800615 	stw	r2,24(r16)
    52b4:	283ff51e 	bne	r5,zero,528c <__swsetup_r+0x64>
    52b8:	2080200c 	andi	r2,r4,128
    52bc:	103ff326 	beq	r2,zero,528c <__swsetup_r+0x64>
    52c0:	00bfffc4 	movi	r2,-1
    52c4:	003ff206 	br	5290 <__swsetup_r+0x68>
    52c8:	80800517 	ldw	r2,20(r16)
    52cc:	80800215 	stw	r2,8(r16)
    52d0:	003fed06 	br	5288 <__swsetup_r+0x60>
    52d4:	1809883a 	mov	r4,r3
    52d8:	0006f7c0 	call	6f7c <__sinit>
    52dc:	003fde06 	br	5258 <__swsetup_r+0x30>
    52e0:	20c0a00c 	andi	r3,r4,640
    52e4:	00808004 	movi	r2,512
    52e8:	18bfe026 	beq	r3,r2,526c <__swsetup_r+0x44>
    52ec:	8809883a 	mov	r4,r17
    52f0:	800b883a 	mov	r5,r16
    52f4:	0007cf40 	call	7cf4 <__smakebuf_r>
    52f8:	8100030b 	ldhu	r4,12(r16)
    52fc:	81400417 	ldw	r5,16(r16)
    5300:	003fda06 	br	526c <__swsetup_r+0x44>
    5304:	2080040c 	andi	r2,r4,16
    5308:	103fed26 	beq	r2,zero,52c0 <__swsetup_r+0x98>
    530c:	2080010c 	andi	r2,r4,4
    5310:	10001226 	beq	r2,zero,535c <__swsetup_r+0x134>
    5314:	81400c17 	ldw	r5,48(r16)
    5318:	28000526 	beq	r5,zero,5330 <__swsetup_r+0x108>
    531c:	80801004 	addi	r2,r16,64
    5320:	28800226 	beq	r5,r2,532c <__swsetup_r+0x104>
    5324:	8809883a 	mov	r4,r17
    5328:	00073000 	call	7300 <_free_r>
    532c:	80000c15 	stw	zero,48(r16)
    5330:	8080030b 	ldhu	r2,12(r16)
    5334:	81400417 	ldw	r5,16(r16)
    5338:	80000115 	stw	zero,4(r16)
    533c:	10bff6cc 	andi	r2,r2,65499
    5340:	8080030d 	sth	r2,12(r16)
    5344:	81400015 	stw	r5,0(r16)
    5348:	8080030b 	ldhu	r2,12(r16)
    534c:	10800214 	ori	r2,r2,8
    5350:	113fffcc 	andi	r4,r2,65535
    5354:	8080030d 	sth	r2,12(r16)
    5358:	003fc306 	br	5268 <__swsetup_r+0x40>
    535c:	81400417 	ldw	r5,16(r16)
    5360:	003ff906 	br	5348 <__swsetup_r+0x120>

00005364 <register_fini>:
    5364:	f800283a 	ret

00005368 <__call_exitprocs>:
    5368:	00800074 	movhi	r2,1
    536c:	10835d04 	addi	r2,r2,3444
    5370:	10800017 	ldw	r2,0(r2)
    5374:	defff304 	addi	sp,sp,-52
    5378:	df000b15 	stw	fp,44(sp)
    537c:	d8800115 	stw	r2,4(sp)
    5380:	00800034 	movhi	r2,0
    5384:	108a6204 	addi	r2,r2,10632
    5388:	1005003a 	cmpeq	r2,r2,zero
    538c:	d8800215 	stw	r2,8(sp)
    5390:	d8800117 	ldw	r2,4(sp)
    5394:	dd400815 	stw	r21,32(sp)
    5398:	dd000715 	stw	r20,28(sp)
    539c:	10805204 	addi	r2,r2,328
    53a0:	dfc00c15 	stw	ra,48(sp)
    53a4:	ddc00a15 	stw	r23,40(sp)
    53a8:	dd800915 	stw	r22,36(sp)
    53ac:	dcc00615 	stw	r19,24(sp)
    53b0:	dc800515 	stw	r18,20(sp)
    53b4:	dc400415 	stw	r17,16(sp)
    53b8:	dc000315 	stw	r16,12(sp)
    53bc:	282b883a 	mov	r21,r5
    53c0:	2039883a 	mov	fp,r4
    53c4:	d8800015 	stw	r2,0(sp)
    53c8:	2829003a 	cmpeq	r20,r5,zero
    53cc:	d8800117 	ldw	r2,4(sp)
    53d0:	14405217 	ldw	r17,328(r2)
    53d4:	88001026 	beq	r17,zero,5418 <__call_exitprocs+0xb0>
    53d8:	ddc00017 	ldw	r23,0(sp)
    53dc:	88800117 	ldw	r2,4(r17)
    53e0:	8c802204 	addi	r18,r17,136
    53e4:	143fffc4 	addi	r16,r2,-1
    53e8:	80000916 	blt	r16,zero,5410 <__call_exitprocs+0xa8>
    53ec:	05bfffc4 	movi	r22,-1
    53f0:	a000151e 	bne	r20,zero,5448 <__call_exitprocs+0xe0>
    53f4:	8409883a 	add	r4,r16,r16
    53f8:	2105883a 	add	r2,r4,r4
    53fc:	1485883a 	add	r2,r2,r18
    5400:	10c02017 	ldw	r3,128(r2)
    5404:	a8c01126 	beq	r21,r3,544c <__call_exitprocs+0xe4>
    5408:	843fffc4 	addi	r16,r16,-1
    540c:	85bff81e 	bne	r16,r22,53f0 <__call_exitprocs+0x88>
    5410:	d8800217 	ldw	r2,8(sp)
    5414:	10003126 	beq	r2,zero,54dc <__call_exitprocs+0x174>
    5418:	dfc00c17 	ldw	ra,48(sp)
    541c:	df000b17 	ldw	fp,44(sp)
    5420:	ddc00a17 	ldw	r23,40(sp)
    5424:	dd800917 	ldw	r22,36(sp)
    5428:	dd400817 	ldw	r21,32(sp)
    542c:	dd000717 	ldw	r20,28(sp)
    5430:	dcc00617 	ldw	r19,24(sp)
    5434:	dc800517 	ldw	r18,20(sp)
    5438:	dc400417 	ldw	r17,16(sp)
    543c:	dc000317 	ldw	r16,12(sp)
    5440:	dec00d04 	addi	sp,sp,52
    5444:	f800283a 	ret
    5448:	8409883a 	add	r4,r16,r16
    544c:	88c00117 	ldw	r3,4(r17)
    5450:	2105883a 	add	r2,r4,r4
    5454:	1445883a 	add	r2,r2,r17
    5458:	18ffffc4 	addi	r3,r3,-1
    545c:	11800217 	ldw	r6,8(r2)
    5460:	1c001526 	beq	r3,r16,54b8 <__call_exitprocs+0x150>
    5464:	10000215 	stw	zero,8(r2)
    5468:	303fe726 	beq	r6,zero,5408 <__call_exitprocs+0xa0>
    546c:	00c00044 	movi	r3,1
    5470:	1c06983a 	sll	r3,r3,r16
    5474:	90804017 	ldw	r2,256(r18)
    5478:	8cc00117 	ldw	r19,4(r17)
    547c:	1884703a 	and	r2,r3,r2
    5480:	10001426 	beq	r2,zero,54d4 <__call_exitprocs+0x16c>
    5484:	90804117 	ldw	r2,260(r18)
    5488:	1884703a 	and	r2,r3,r2
    548c:	10000c1e 	bne	r2,zero,54c0 <__call_exitprocs+0x158>
    5490:	2105883a 	add	r2,r4,r4
    5494:	1485883a 	add	r2,r2,r18
    5498:	11400017 	ldw	r5,0(r2)
    549c:	e009883a 	mov	r4,fp
    54a0:	303ee83a 	callr	r6
    54a4:	88800117 	ldw	r2,4(r17)
    54a8:	98bfc81e 	bne	r19,r2,53cc <__call_exitprocs+0x64>
    54ac:	b8800017 	ldw	r2,0(r23)
    54b0:	147fd526 	beq	r2,r17,5408 <__call_exitprocs+0xa0>
    54b4:	003fc506 	br	53cc <__call_exitprocs+0x64>
    54b8:	8c000115 	stw	r16,4(r17)
    54bc:	003fea06 	br	5468 <__call_exitprocs+0x100>
    54c0:	2105883a 	add	r2,r4,r4
    54c4:	1485883a 	add	r2,r2,r18
    54c8:	11000017 	ldw	r4,0(r2)
    54cc:	303ee83a 	callr	r6
    54d0:	003ff406 	br	54a4 <__call_exitprocs+0x13c>
    54d4:	303ee83a 	callr	r6
    54d8:	003ff206 	br	54a4 <__call_exitprocs+0x13c>
    54dc:	88800117 	ldw	r2,4(r17)
    54e0:	1000081e 	bne	r2,zero,5504 <__call_exitprocs+0x19c>
    54e4:	89000017 	ldw	r4,0(r17)
    54e8:	20000726 	beq	r4,zero,5508 <__call_exitprocs+0x1a0>
    54ec:	b9000015 	stw	r4,0(r23)
    54f0:	8809883a 	mov	r4,r17
    54f4:	00029880 	call	2988 <free>
    54f8:	bc400017 	ldw	r17,0(r23)
    54fc:	883fb71e 	bne	r17,zero,53dc <__call_exitprocs+0x74>
    5500:	003fc506 	br	5418 <__call_exitprocs+0xb0>
    5504:	89000017 	ldw	r4,0(r17)
    5508:	882f883a 	mov	r23,r17
    550c:	2023883a 	mov	r17,r4
    5510:	883fb21e 	bne	r17,zero,53dc <__call_exitprocs+0x74>
    5514:	003fc006 	br	5418 <__call_exitprocs+0xb0>

00005518 <quorem>:
    5518:	28c00417 	ldw	r3,16(r5)
    551c:	20800417 	ldw	r2,16(r4)
    5520:	defff604 	addi	sp,sp,-40
    5524:	ddc00715 	stw	r23,28(sp)
    5528:	dd400515 	stw	r21,20(sp)
    552c:	dfc00915 	stw	ra,36(sp)
    5530:	df000815 	stw	fp,32(sp)
    5534:	dd800615 	stw	r22,24(sp)
    5538:	dd000415 	stw	r20,16(sp)
    553c:	dcc00315 	stw	r19,12(sp)
    5540:	dc800215 	stw	r18,8(sp)
    5544:	dc400115 	stw	r17,4(sp)
    5548:	dc000015 	stw	r16,0(sp)
    554c:	202f883a 	mov	r23,r4
    5550:	282b883a 	mov	r21,r5
    5554:	10c07416 	blt	r2,r3,5728 <quorem+0x210>
    5558:	1c7fffc4 	addi	r17,r3,-1
    555c:	8c45883a 	add	r2,r17,r17
    5560:	1085883a 	add	r2,r2,r2
    5564:	2c000504 	addi	r16,r5,20
    5568:	24c00504 	addi	r19,r4,20
    556c:	14ed883a 	add	r22,r2,r19
    5570:	80a5883a 	add	r18,r16,r2
    5574:	b7000017 	ldw	fp,0(r22)
    5578:	91400017 	ldw	r5,0(r18)
    557c:	e009883a 	mov	r4,fp
    5580:	29400044 	addi	r5,r5,1
    5584:	00028e00 	call	28e0 <__udivsi3>
    5588:	1029883a 	mov	r20,r2
    558c:	10003c1e 	bne	r2,zero,5680 <quorem+0x168>
    5590:	a80b883a 	mov	r5,r21
    5594:	b809883a 	mov	r4,r23
    5598:	00082e00 	call	82e0 <__mcmp>
    559c:	10002b16 	blt	r2,zero,564c <quorem+0x134>
    55a0:	a5000044 	addi	r20,r20,1
    55a4:	980f883a 	mov	r7,r19
    55a8:	0011883a 	mov	r8,zero
    55ac:	0009883a 	mov	r4,zero
    55b0:	81400017 	ldw	r5,0(r16)
    55b4:	38c00017 	ldw	r3,0(r7)
    55b8:	84000104 	addi	r16,r16,4
    55bc:	28bfffcc 	andi	r2,r5,65535
    55c0:	2085883a 	add	r2,r4,r2
    55c4:	11bfffcc 	andi	r6,r2,65535
    55c8:	193fffcc 	andi	r4,r3,65535
    55cc:	1004d43a 	srli	r2,r2,16
    55d0:	280ad43a 	srli	r5,r5,16
    55d4:	2189c83a 	sub	r4,r4,r6
    55d8:	2209883a 	add	r4,r4,r8
    55dc:	1806d43a 	srli	r3,r3,16
    55e0:	288b883a 	add	r5,r5,r2
    55e4:	200dd43a 	srai	r6,r4,16
    55e8:	28bfffcc 	andi	r2,r5,65535
    55ec:	1887c83a 	sub	r3,r3,r2
    55f0:	1987883a 	add	r3,r3,r6
    55f4:	3900000d 	sth	r4,0(r7)
    55f8:	38c0008d 	sth	r3,2(r7)
    55fc:	2808d43a 	srli	r4,r5,16
    5600:	39c00104 	addi	r7,r7,4
    5604:	1811d43a 	srai	r8,r3,16
    5608:	943fe92e 	bgeu	r18,r16,55b0 <quorem+0x98>
    560c:	8c45883a 	add	r2,r17,r17
    5610:	1085883a 	add	r2,r2,r2
    5614:	9885883a 	add	r2,r19,r2
    5618:	10c00017 	ldw	r3,0(r2)
    561c:	18000b1e 	bne	r3,zero,564c <quorem+0x134>
    5620:	113fff04 	addi	r4,r2,-4
    5624:	9900082e 	bgeu	r19,r4,5648 <quorem+0x130>
    5628:	10bfff17 	ldw	r2,-4(r2)
    562c:	10000326 	beq	r2,zero,563c <quorem+0x124>
    5630:	00000506 	br	5648 <quorem+0x130>
    5634:	20800017 	ldw	r2,0(r4)
    5638:	1000031e 	bne	r2,zero,5648 <quorem+0x130>
    563c:	213fff04 	addi	r4,r4,-4
    5640:	8c7fffc4 	addi	r17,r17,-1
    5644:	993ffb36 	bltu	r19,r4,5634 <quorem+0x11c>
    5648:	bc400415 	stw	r17,16(r23)
    564c:	a005883a 	mov	r2,r20
    5650:	dfc00917 	ldw	ra,36(sp)
    5654:	df000817 	ldw	fp,32(sp)
    5658:	ddc00717 	ldw	r23,28(sp)
    565c:	dd800617 	ldw	r22,24(sp)
    5660:	dd400517 	ldw	r21,20(sp)
    5664:	dd000417 	ldw	r20,16(sp)
    5668:	dcc00317 	ldw	r19,12(sp)
    566c:	dc800217 	ldw	r18,8(sp)
    5670:	dc400117 	ldw	r17,4(sp)
    5674:	dc000017 	ldw	r16,0(sp)
    5678:	dec00a04 	addi	sp,sp,40
    567c:	f800283a 	ret
    5680:	980f883a 	mov	r7,r19
    5684:	8011883a 	mov	r8,r16
    5688:	0013883a 	mov	r9,zero
    568c:	000d883a 	mov	r6,zero
    5690:	40c00017 	ldw	r3,0(r8)
    5694:	39000017 	ldw	r4,0(r7)
    5698:	42000104 	addi	r8,r8,4
    569c:	18bfffcc 	andi	r2,r3,65535
    56a0:	a085383a 	mul	r2,r20,r2
    56a4:	1806d43a 	srli	r3,r3,16
    56a8:	217fffcc 	andi	r5,r4,65535
    56ac:	3085883a 	add	r2,r6,r2
    56b0:	11bfffcc 	andi	r6,r2,65535
    56b4:	a0c7383a 	mul	r3,r20,r3
    56b8:	1004d43a 	srli	r2,r2,16
    56bc:	298bc83a 	sub	r5,r5,r6
    56c0:	2a4b883a 	add	r5,r5,r9
    56c4:	2008d43a 	srli	r4,r4,16
    56c8:	1887883a 	add	r3,r3,r2
    56cc:	280dd43a 	srai	r6,r5,16
    56d0:	18bfffcc 	andi	r2,r3,65535
    56d4:	2089c83a 	sub	r4,r4,r2
    56d8:	2189883a 	add	r4,r4,r6
    56dc:	3900008d 	sth	r4,2(r7)
    56e0:	3940000d 	sth	r5,0(r7)
    56e4:	180cd43a 	srli	r6,r3,16
    56e8:	39c00104 	addi	r7,r7,4
    56ec:	2013d43a 	srai	r9,r4,16
    56f0:	923fe72e 	bgeu	r18,r8,5690 <quorem+0x178>
    56f4:	e03fa61e 	bne	fp,zero,5590 <quorem+0x78>
    56f8:	b0ffff04 	addi	r3,r22,-4
    56fc:	98c0082e 	bgeu	r19,r3,5720 <quorem+0x208>
    5700:	b0bfff17 	ldw	r2,-4(r22)
    5704:	10000326 	beq	r2,zero,5714 <quorem+0x1fc>
    5708:	00000506 	br	5720 <quorem+0x208>
    570c:	18800017 	ldw	r2,0(r3)
    5710:	1000031e 	bne	r2,zero,5720 <quorem+0x208>
    5714:	18ffff04 	addi	r3,r3,-4
    5718:	8c7fffc4 	addi	r17,r17,-1
    571c:	98fffb36 	bltu	r19,r3,570c <quorem+0x1f4>
    5720:	bc400415 	stw	r17,16(r23)
    5724:	003f9a06 	br	5590 <quorem+0x78>
    5728:	0005883a 	mov	r2,zero
    572c:	003fc806 	br	5650 <quorem+0x138>

00005730 <_dtoa_r>:
    5730:	22001017 	ldw	r8,64(r4)
    5734:	deffda04 	addi	sp,sp,-152
    5738:	dd402115 	stw	r21,132(sp)
    573c:	dd002015 	stw	r20,128(sp)
    5740:	dc801e15 	stw	r18,120(sp)
    5744:	dc401d15 	stw	r17,116(sp)
    5748:	dfc02515 	stw	ra,148(sp)
    574c:	df002415 	stw	fp,144(sp)
    5750:	ddc02315 	stw	r23,140(sp)
    5754:	dd802215 	stw	r22,136(sp)
    5758:	dcc01f15 	stw	r19,124(sp)
    575c:	dc001c15 	stw	r16,112(sp)
    5760:	d9001615 	stw	r4,88(sp)
    5764:	3023883a 	mov	r17,r6
    5768:	2829883a 	mov	r20,r5
    576c:	d9c01715 	stw	r7,92(sp)
    5770:	dc802817 	ldw	r18,160(sp)
    5774:	302b883a 	mov	r21,r6
    5778:	40000a26 	beq	r8,zero,57a4 <_dtoa_r+0x74>
    577c:	20801117 	ldw	r2,68(r4)
    5780:	400b883a 	mov	r5,r8
    5784:	40800115 	stw	r2,4(r8)
    5788:	20c01117 	ldw	r3,68(r4)
    578c:	00800044 	movi	r2,1
    5790:	10c4983a 	sll	r2,r2,r3
    5794:	40800215 	stw	r2,8(r8)
    5798:	00081840 	call	8184 <_Bfree>
    579c:	d8c01617 	ldw	r3,88(sp)
    57a0:	18001015 	stw	zero,64(r3)
    57a4:	8800a316 	blt	r17,zero,5a34 <_dtoa_r+0x304>
    57a8:	90000015 	stw	zero,0(r18)
    57ac:	a8dffc2c 	andhi	r3,r21,32752
    57b0:	009ffc34 	movhi	r2,32752
    57b4:	18809126 	beq	r3,r2,59fc <_dtoa_r+0x2cc>
    57b8:	000d883a 	mov	r6,zero
    57bc:	000f883a 	mov	r7,zero
    57c0:	a009883a 	mov	r4,r20
    57c4:	a80b883a 	mov	r5,r21
    57c8:	dd001215 	stw	r20,72(sp)
    57cc:	dd401315 	stw	r21,76(sp)
    57d0:	000b5ac0 	call	b5ac <__nedf2>
    57d4:	1000171e 	bne	r2,zero,5834 <_dtoa_r+0x104>
    57d8:	d9802717 	ldw	r6,156(sp)
    57dc:	00800044 	movi	r2,1
    57e0:	30800015 	stw	r2,0(r6)
    57e4:	d8802917 	ldw	r2,164(sp)
    57e8:	10029b26 	beq	r2,zero,6258 <_dtoa_r+0xb28>
    57ec:	d9002917 	ldw	r4,164(sp)
    57f0:	00800074 	movhi	r2,1
    57f4:	10bc0d44 	addi	r2,r2,-4043
    57f8:	10ffffc4 	addi	r3,r2,-1
    57fc:	20800015 	stw	r2,0(r4)
    5800:	1805883a 	mov	r2,r3
    5804:	dfc02517 	ldw	ra,148(sp)
    5808:	df002417 	ldw	fp,144(sp)
    580c:	ddc02317 	ldw	r23,140(sp)
    5810:	dd802217 	ldw	r22,136(sp)
    5814:	dd402117 	ldw	r21,132(sp)
    5818:	dd002017 	ldw	r20,128(sp)
    581c:	dcc01f17 	ldw	r19,124(sp)
    5820:	dc801e17 	ldw	r18,120(sp)
    5824:	dc401d17 	ldw	r17,116(sp)
    5828:	dc001c17 	ldw	r16,112(sp)
    582c:	dec02604 	addi	sp,sp,152
    5830:	f800283a 	ret
    5834:	d9001617 	ldw	r4,88(sp)
    5838:	d9401217 	ldw	r5,72(sp)
    583c:	d8800104 	addi	r2,sp,4
    5840:	a80d883a 	mov	r6,r21
    5844:	d9c00204 	addi	r7,sp,8
    5848:	d8800015 	stw	r2,0(sp)
    584c:	00087c00 	call	87c0 <__d2b>
    5850:	d8800715 	stw	r2,28(sp)
    5854:	a804d53a 	srli	r2,r21,20
    5858:	1101ffcc 	andi	r4,r2,2047
    585c:	20008626 	beq	r4,zero,5a78 <_dtoa_r+0x348>
    5860:	d8c01217 	ldw	r3,72(sp)
    5864:	00800434 	movhi	r2,16
    5868:	10bfffc4 	addi	r2,r2,-1
    586c:	ddc00117 	ldw	r23,4(sp)
    5870:	a884703a 	and	r2,r21,r2
    5874:	1811883a 	mov	r8,r3
    5878:	124ffc34 	orhi	r9,r2,16368
    587c:	25bf0044 	addi	r22,r4,-1023
    5880:	d8000815 	stw	zero,32(sp)
    5884:	0005883a 	mov	r2,zero
    5888:	00cffe34 	movhi	r3,16376
    588c:	480b883a 	mov	r5,r9
    5890:	4009883a 	mov	r4,r8
    5894:	180f883a 	mov	r7,r3
    5898:	100d883a 	mov	r6,r2
    589c:	000ae140 	call	ae14 <__subdf3>
    58a0:	0218dbf4 	movhi	r8,25455
    58a4:	4210d844 	addi	r8,r8,17249
    58a8:	024ff4f4 	movhi	r9,16339
    58ac:	4a61e9c4 	addi	r9,r9,-30809
    58b0:	480f883a 	mov	r7,r9
    58b4:	400d883a 	mov	r6,r8
    58b8:	180b883a 	mov	r5,r3
    58bc:	1009883a 	mov	r4,r2
    58c0:	000af080 	call	af08 <__muldf3>
    58c4:	0222d874 	movhi	r8,35681
    58c8:	42322cc4 	addi	r8,r8,-14157
    58cc:	024ff1f4 	movhi	r9,16327
    58d0:	4a628a04 	addi	r9,r9,-30168
    58d4:	480f883a 	mov	r7,r9
    58d8:	400d883a 	mov	r6,r8
    58dc:	180b883a 	mov	r5,r3
    58e0:	1009883a 	mov	r4,r2
    58e4:	000ae940 	call	ae94 <__adddf3>
    58e8:	b009883a 	mov	r4,r22
    58ec:	1021883a 	mov	r16,r2
    58f0:	1823883a 	mov	r17,r3
    58f4:	000b7cc0 	call	b7cc <__floatsidf>
    58f8:	021427f4 	movhi	r8,20639
    58fc:	421e7ec4 	addi	r8,r8,31227
    5900:	024ff4f4 	movhi	r9,16339
    5904:	4a5104c4 	addi	r9,r9,17427
    5908:	480f883a 	mov	r7,r9
    590c:	400d883a 	mov	r6,r8
    5910:	180b883a 	mov	r5,r3
    5914:	1009883a 	mov	r4,r2
    5918:	000af080 	call	af08 <__muldf3>
    591c:	180f883a 	mov	r7,r3
    5920:	880b883a 	mov	r5,r17
    5924:	100d883a 	mov	r6,r2
    5928:	8009883a 	mov	r4,r16
    592c:	000ae940 	call	ae94 <__adddf3>
    5930:	1009883a 	mov	r4,r2
    5934:	180b883a 	mov	r5,r3
    5938:	1021883a 	mov	r16,r2
    593c:	1823883a 	mov	r17,r3
    5940:	000b8c40 	call	b8c4 <__fixdfsi>
    5944:	000d883a 	mov	r6,zero
    5948:	000f883a 	mov	r7,zero
    594c:	8009883a 	mov	r4,r16
    5950:	880b883a 	mov	r5,r17
    5954:	d8800d15 	stw	r2,52(sp)
    5958:	000b7440 	call	b744 <__ltdf2>
    595c:	10031716 	blt	r2,zero,65bc <_dtoa_r+0xe8c>
    5960:	d8c00d17 	ldw	r3,52(sp)
    5964:	00800584 	movi	r2,22
    5968:	10c1482e 	bgeu	r2,r3,5e8c <_dtoa_r+0x75c>
    596c:	01000044 	movi	r4,1
    5970:	d9000c15 	stw	r4,48(sp)
    5974:	bd85c83a 	sub	r2,r23,r22
    5978:	11bfffc4 	addi	r6,r2,-1
    597c:	30030b16 	blt	r6,zero,65ac <_dtoa_r+0xe7c>
    5980:	d9800a15 	stw	r6,40(sp)
    5984:	d8001115 	stw	zero,68(sp)
    5988:	d8c00d17 	ldw	r3,52(sp)
    598c:	1802ff16 	blt	r3,zero,658c <_dtoa_r+0xe5c>
    5990:	d9000a17 	ldw	r4,40(sp)
    5994:	d8c00915 	stw	r3,36(sp)
    5998:	d8001015 	stw	zero,64(sp)
    599c:	20c9883a 	add	r4,r4,r3
    59a0:	d9000a15 	stw	r4,40(sp)
    59a4:	d9001717 	ldw	r4,92(sp)
    59a8:	00800244 	movi	r2,9
    59ac:	11004636 	bltu	r2,r4,5ac8 <_dtoa_r+0x398>
    59b0:	00800144 	movi	r2,5
    59b4:	11020416 	blt	r2,r4,61c8 <_dtoa_r+0xa98>
    59b8:	04400044 	movi	r17,1
    59bc:	d8c01717 	ldw	r3,92(sp)
    59c0:	00800144 	movi	r2,5
    59c4:	10c1ed36 	bltu	r2,r3,617c <_dtoa_r+0xa4c>
    59c8:	18c5883a 	add	r2,r3,r3
    59cc:	1085883a 	add	r2,r2,r2
    59d0:	00c00034 	movhi	r3,0
    59d4:	18d67904 	addi	r3,r3,23012
    59d8:	10c5883a 	add	r2,r2,r3
    59dc:	11000017 	ldw	r4,0(r2)
    59e0:	2000683a 	jmp	r4
    59e4:	00005ad0 	cmplti	zero,zero,363
    59e8:	00005ad0 	cmplti	zero,zero,363
    59ec:	000064d0 	cmplti	zero,zero,403
    59f0:	000064a8 	cmpgeui	zero,zero,402
    59f4:	000064ec 	andhi	zero,zero,403
    59f8:	000064f8 	rdprs	zero,zero,403
    59fc:	d9002717 	ldw	r4,156(sp)
    5a00:	0089c3c4 	movi	r2,9999
    5a04:	20800015 	stw	r2,0(r4)
    5a08:	a0001026 	beq	r20,zero,5a4c <_dtoa_r+0x31c>
    5a0c:	00c00074 	movhi	r3,1
    5a10:	18fc1904 	addi	r3,r3,-3996
    5a14:	d9802917 	ldw	r6,164(sp)
    5a18:	303f7926 	beq	r6,zero,5800 <_dtoa_r+0xd0>
    5a1c:	188000c7 	ldb	r2,3(r3)
    5a20:	190000c4 	addi	r4,r3,3
    5a24:	1000101e 	bne	r2,zero,5a68 <_dtoa_r+0x338>
    5a28:	d8802917 	ldw	r2,164(sp)
    5a2c:	11000015 	stw	r4,0(r2)
    5a30:	003f7306 	br	5800 <_dtoa_r+0xd0>
    5a34:	00a00034 	movhi	r2,32768
    5a38:	10bfffc4 	addi	r2,r2,-1
    5a3c:	00c00044 	movi	r3,1
    5a40:	88aa703a 	and	r21,r17,r2
    5a44:	90c00015 	stw	r3,0(r18)
    5a48:	003f5806 	br	57ac <_dtoa_r+0x7c>
    5a4c:	00800434 	movhi	r2,16
    5a50:	10bfffc4 	addi	r2,r2,-1
    5a54:	a884703a 	and	r2,r21,r2
    5a58:	103fec1e 	bne	r2,zero,5a0c <_dtoa_r+0x2dc>
    5a5c:	00c00074 	movhi	r3,1
    5a60:	18fc1604 	addi	r3,r3,-4008
    5a64:	003feb06 	br	5a14 <_dtoa_r+0x2e4>
    5a68:	d8802917 	ldw	r2,164(sp)
    5a6c:	19000204 	addi	r4,r3,8
    5a70:	11000015 	stw	r4,0(r2)
    5a74:	003f6206 	br	5800 <_dtoa_r+0xd0>
    5a78:	ddc00117 	ldw	r23,4(sp)
    5a7c:	d8800217 	ldw	r2,8(sp)
    5a80:	01000804 	movi	r4,32
    5a84:	b8c10c84 	addi	r3,r23,1074
    5a88:	18a3883a 	add	r17,r3,r2
    5a8c:	2441b80e 	bge	r4,r17,6170 <_dtoa_r+0xa40>
    5a90:	00c01004 	movi	r3,64
    5a94:	1c47c83a 	sub	r3,r3,r17
    5a98:	88bff804 	addi	r2,r17,-32
    5a9c:	a8c6983a 	sll	r3,r21,r3
    5aa0:	a084d83a 	srl	r2,r20,r2
    5aa4:	1888b03a 	or	r4,r3,r2
    5aa8:	000b99c0 	call	b99c <__floatunsidf>
    5aac:	1011883a 	mov	r8,r2
    5ab0:	00bf8434 	movhi	r2,65040
    5ab4:	01000044 	movi	r4,1
    5ab8:	10d3883a 	add	r9,r2,r3
    5abc:	8dbef344 	addi	r22,r17,-1075
    5ac0:	d9000815 	stw	r4,32(sp)
    5ac4:	003f6f06 	br	5884 <_dtoa_r+0x154>
    5ac8:	d8001715 	stw	zero,92(sp)
    5acc:	04400044 	movi	r17,1
    5ad0:	00bfffc4 	movi	r2,-1
    5ad4:	00c00044 	movi	r3,1
    5ad8:	d8800e15 	stw	r2,56(sp)
    5adc:	d8002615 	stw	zero,152(sp)
    5ae0:	d8800f15 	stw	r2,60(sp)
    5ae4:	d8c00b15 	stw	r3,44(sp)
    5ae8:	1021883a 	mov	r16,r2
    5aec:	d8801617 	ldw	r2,88(sp)
    5af0:	10001115 	stw	zero,68(r2)
    5af4:	d8801617 	ldw	r2,88(sp)
    5af8:	11401117 	ldw	r5,68(r2)
    5afc:	1009883a 	mov	r4,r2
    5b00:	00087040 	call	8704 <_Balloc>
    5b04:	d8c01617 	ldw	r3,88(sp)
    5b08:	d8800515 	stw	r2,20(sp)
    5b0c:	18801015 	stw	r2,64(r3)
    5b10:	00800384 	movi	r2,14
    5b14:	14006836 	bltu	r2,r16,5cb8 <_dtoa_r+0x588>
    5b18:	8805003a 	cmpeq	r2,r17,zero
    5b1c:	1000661e 	bne	r2,zero,5cb8 <_dtoa_r+0x588>
    5b20:	d9000d17 	ldw	r4,52(sp)
    5b24:	0102300e 	bge	zero,r4,63e8 <_dtoa_r+0xcb8>
    5b28:	208003cc 	andi	r2,r4,15
    5b2c:	100490fa 	slli	r2,r2,3
    5b30:	2025d13a 	srai	r18,r4,4
    5b34:	00c00074 	movhi	r3,1
    5b38:	18fc2a04 	addi	r3,r3,-3928
    5b3c:	10c5883a 	add	r2,r2,r3
    5b40:	90c0040c 	andi	r3,r18,16
    5b44:	14000017 	ldw	r16,0(r2)
    5b48:	14400117 	ldw	r17,4(r2)
    5b4c:	18036a1e 	bne	r3,zero,68f8 <_dtoa_r+0x11c8>
    5b50:	05800084 	movi	r22,2
    5b54:	90001026 	beq	r18,zero,5b98 <_dtoa_r+0x468>
    5b58:	04c00074 	movhi	r19,1
    5b5c:	9cfc5c04 	addi	r19,r19,-3728
    5b60:	9080004c 	andi	r2,r18,1
    5b64:	1005003a 	cmpeq	r2,r2,zero
    5b68:	1000081e 	bne	r2,zero,5b8c <_dtoa_r+0x45c>
    5b6c:	99800017 	ldw	r6,0(r19)
    5b70:	99c00117 	ldw	r7,4(r19)
    5b74:	880b883a 	mov	r5,r17
    5b78:	8009883a 	mov	r4,r16
    5b7c:	000af080 	call	af08 <__muldf3>
    5b80:	1021883a 	mov	r16,r2
    5b84:	b5800044 	addi	r22,r22,1
    5b88:	1823883a 	mov	r17,r3
    5b8c:	9025d07a 	srai	r18,r18,1
    5b90:	9cc00204 	addi	r19,r19,8
    5b94:	903ff21e 	bne	r18,zero,5b60 <_dtoa_r+0x430>
    5b98:	a80b883a 	mov	r5,r21
    5b9c:	a009883a 	mov	r4,r20
    5ba0:	880f883a 	mov	r7,r17
    5ba4:	800d883a 	mov	r6,r16
    5ba8:	000b2cc0 	call	b2cc <__divdf3>
    5bac:	1029883a 	mov	r20,r2
    5bb0:	182b883a 	mov	r21,r3
    5bb4:	d8c00c17 	ldw	r3,48(sp)
    5bb8:	1805003a 	cmpeq	r2,r3,zero
    5bbc:	1000081e 	bne	r2,zero,5be0 <_dtoa_r+0x4b0>
    5bc0:	0005883a 	mov	r2,zero
    5bc4:	00cffc34 	movhi	r3,16368
    5bc8:	180f883a 	mov	r7,r3
    5bcc:	a009883a 	mov	r4,r20
    5bd0:	a80b883a 	mov	r5,r21
    5bd4:	100d883a 	mov	r6,r2
    5bd8:	000b7440 	call	b744 <__ltdf2>
    5bdc:	1003fe16 	blt	r2,zero,6bd8 <_dtoa_r+0x14a8>
    5be0:	b009883a 	mov	r4,r22
    5be4:	000b7cc0 	call	b7cc <__floatsidf>
    5be8:	180b883a 	mov	r5,r3
    5bec:	1009883a 	mov	r4,r2
    5bf0:	a00d883a 	mov	r6,r20
    5bf4:	a80f883a 	mov	r7,r21
    5bf8:	000af080 	call	af08 <__muldf3>
    5bfc:	0011883a 	mov	r8,zero
    5c00:	02500734 	movhi	r9,16412
    5c04:	1009883a 	mov	r4,r2
    5c08:	180b883a 	mov	r5,r3
    5c0c:	480f883a 	mov	r7,r9
    5c10:	400d883a 	mov	r6,r8
    5c14:	000ae940 	call	ae94 <__adddf3>
    5c18:	d9000f17 	ldw	r4,60(sp)
    5c1c:	102d883a 	mov	r22,r2
    5c20:	00bf3034 	movhi	r2,64704
    5c24:	18b9883a 	add	fp,r3,r2
    5c28:	e02f883a 	mov	r23,fp
    5c2c:	20028f1e 	bne	r4,zero,666c <_dtoa_r+0xf3c>
    5c30:	0005883a 	mov	r2,zero
    5c34:	00d00534 	movhi	r3,16404
    5c38:	a009883a 	mov	r4,r20
    5c3c:	a80b883a 	mov	r5,r21
    5c40:	180f883a 	mov	r7,r3
    5c44:	100d883a 	mov	r6,r2
    5c48:	000ae140 	call	ae14 <__subdf3>
    5c4c:	1009883a 	mov	r4,r2
    5c50:	e00f883a 	mov	r7,fp
    5c54:	180b883a 	mov	r5,r3
    5c58:	b00d883a 	mov	r6,r22
    5c5c:	1025883a 	mov	r18,r2
    5c60:	1827883a 	mov	r19,r3
    5c64:	000b6340 	call	b634 <__gtdf2>
    5c68:	00834f16 	blt	zero,r2,69a8 <_dtoa_r+0x1278>
    5c6c:	e0e0003c 	xorhi	r3,fp,32768
    5c70:	9009883a 	mov	r4,r18
    5c74:	980b883a 	mov	r5,r19
    5c78:	180f883a 	mov	r7,r3
    5c7c:	b00d883a 	mov	r6,r22
    5c80:	000b7440 	call	b744 <__ltdf2>
    5c84:	1000080e 	bge	r2,zero,5ca8 <_dtoa_r+0x578>
    5c88:	0027883a 	mov	r19,zero
    5c8c:	0025883a 	mov	r18,zero
    5c90:	d8802617 	ldw	r2,152(sp)
    5c94:	df000517 	ldw	fp,20(sp)
    5c98:	d8000615 	stw	zero,24(sp)
    5c9c:	0084303a 	nor	r2,zero,r2
    5ca0:	d8800d15 	stw	r2,52(sp)
    5ca4:	00019b06 	br	6314 <_dtoa_r+0xbe4>
    5ca8:	d9801217 	ldw	r6,72(sp)
    5cac:	d8801317 	ldw	r2,76(sp)
    5cb0:	3029883a 	mov	r20,r6
    5cb4:	102b883a 	mov	r21,r2
    5cb8:	d8c00217 	ldw	r3,8(sp)
    5cbc:	18008516 	blt	r3,zero,5ed4 <_dtoa_r+0x7a4>
    5cc0:	d9000d17 	ldw	r4,52(sp)
    5cc4:	00800384 	movi	r2,14
    5cc8:	11008216 	blt	r2,r4,5ed4 <_dtoa_r+0x7a4>
    5ccc:	200490fa 	slli	r2,r4,3
    5cd0:	d9802617 	ldw	r6,152(sp)
    5cd4:	00c00074 	movhi	r3,1
    5cd8:	18fc2a04 	addi	r3,r3,-3928
    5cdc:	10c5883a 	add	r2,r2,r3
    5ce0:	14800017 	ldw	r18,0(r2)
    5ce4:	14c00117 	ldw	r19,4(r2)
    5ce8:	30031e16 	blt	r6,zero,6964 <_dtoa_r+0x1234>
    5cec:	d9000517 	ldw	r4,20(sp)
    5cf0:	d8c00f17 	ldw	r3,60(sp)
    5cf4:	a823883a 	mov	r17,r21
    5cf8:	a021883a 	mov	r16,r20
    5cfc:	192b883a 	add	r21,r3,r4
    5d00:	2039883a 	mov	fp,r4
    5d04:	00000f06 	br	5d44 <_dtoa_r+0x614>
    5d08:	0005883a 	mov	r2,zero
    5d0c:	00d00934 	movhi	r3,16420
    5d10:	5009883a 	mov	r4,r10
    5d14:	580b883a 	mov	r5,r11
    5d18:	180f883a 	mov	r7,r3
    5d1c:	100d883a 	mov	r6,r2
    5d20:	000af080 	call	af08 <__muldf3>
    5d24:	180b883a 	mov	r5,r3
    5d28:	000d883a 	mov	r6,zero
    5d2c:	000f883a 	mov	r7,zero
    5d30:	1009883a 	mov	r4,r2
    5d34:	1021883a 	mov	r16,r2
    5d38:	1823883a 	mov	r17,r3
    5d3c:	000b5ac0 	call	b5ac <__nedf2>
    5d40:	10004526 	beq	r2,zero,5e58 <_dtoa_r+0x728>
    5d44:	900d883a 	mov	r6,r18
    5d48:	980f883a 	mov	r7,r19
    5d4c:	8009883a 	mov	r4,r16
    5d50:	880b883a 	mov	r5,r17
    5d54:	000b2cc0 	call	b2cc <__divdf3>
    5d58:	180b883a 	mov	r5,r3
    5d5c:	1009883a 	mov	r4,r2
    5d60:	000b8c40 	call	b8c4 <__fixdfsi>
    5d64:	1009883a 	mov	r4,r2
    5d68:	1029883a 	mov	r20,r2
    5d6c:	000b7cc0 	call	b7cc <__floatsidf>
    5d70:	180f883a 	mov	r7,r3
    5d74:	9009883a 	mov	r4,r18
    5d78:	980b883a 	mov	r5,r19
    5d7c:	100d883a 	mov	r6,r2
    5d80:	000af080 	call	af08 <__muldf3>
    5d84:	180f883a 	mov	r7,r3
    5d88:	880b883a 	mov	r5,r17
    5d8c:	8009883a 	mov	r4,r16
    5d90:	100d883a 	mov	r6,r2
    5d94:	000ae140 	call	ae14 <__subdf3>
    5d98:	1015883a 	mov	r10,r2
    5d9c:	a0800c04 	addi	r2,r20,48
    5da0:	e0800005 	stb	r2,0(fp)
    5da4:	e7000044 	addi	fp,fp,1
    5da8:	1817883a 	mov	r11,r3
    5dac:	e57fd61e 	bne	fp,r21,5d08 <_dtoa_r+0x5d8>
    5db0:	500d883a 	mov	r6,r10
    5db4:	180f883a 	mov	r7,r3
    5db8:	5009883a 	mov	r4,r10
    5dbc:	180b883a 	mov	r5,r3
    5dc0:	000ae940 	call	ae94 <__adddf3>
    5dc4:	100d883a 	mov	r6,r2
    5dc8:	9009883a 	mov	r4,r18
    5dcc:	980b883a 	mov	r5,r19
    5dd0:	180f883a 	mov	r7,r3
    5dd4:	1021883a 	mov	r16,r2
    5dd8:	1823883a 	mov	r17,r3
    5ddc:	000b7440 	call	b744 <__ltdf2>
    5de0:	10000816 	blt	r2,zero,5e04 <_dtoa_r+0x6d4>
    5de4:	980b883a 	mov	r5,r19
    5de8:	800d883a 	mov	r6,r16
    5dec:	880f883a 	mov	r7,r17
    5df0:	9009883a 	mov	r4,r18
    5df4:	000b5240 	call	b524 <__eqdf2>
    5df8:	1000171e 	bne	r2,zero,5e58 <_dtoa_r+0x728>
    5dfc:	a080004c 	andi	r2,r20,1
    5e00:	10001526 	beq	r2,zero,5e58 <_dtoa_r+0x728>
    5e04:	d8800d17 	ldw	r2,52(sp)
    5e08:	d8800415 	stw	r2,16(sp)
    5e0c:	e009883a 	mov	r4,fp
    5e10:	213fffc4 	addi	r4,r4,-1
    5e14:	20c00007 	ldb	r3,0(r4)
    5e18:	00800e44 	movi	r2,57
    5e1c:	1880081e 	bne	r3,r2,5e40 <_dtoa_r+0x710>
    5e20:	d8800517 	ldw	r2,20(sp)
    5e24:	113ffa1e 	bne	r2,r4,5e10 <_dtoa_r+0x6e0>
    5e28:	d8c00417 	ldw	r3,16(sp)
    5e2c:	d9800517 	ldw	r6,20(sp)
    5e30:	00800c04 	movi	r2,48
    5e34:	18c00044 	addi	r3,r3,1
    5e38:	d8c00415 	stw	r3,16(sp)
    5e3c:	30800005 	stb	r2,0(r6)
    5e40:	20800003 	ldbu	r2,0(r4)
    5e44:	d8c00417 	ldw	r3,16(sp)
    5e48:	27000044 	addi	fp,r4,1
    5e4c:	10800044 	addi	r2,r2,1
    5e50:	d8c00d15 	stw	r3,52(sp)
    5e54:	20800005 	stb	r2,0(r4)
    5e58:	d9001617 	ldw	r4,88(sp)
    5e5c:	d9400717 	ldw	r5,28(sp)
    5e60:	00081840 	call	8184 <_Bfree>
    5e64:	e0000005 	stb	zero,0(fp)
    5e68:	d9800d17 	ldw	r6,52(sp)
    5e6c:	d8c02717 	ldw	r3,156(sp)
    5e70:	d9002917 	ldw	r4,164(sp)
    5e74:	30800044 	addi	r2,r6,1
    5e78:	18800015 	stw	r2,0(r3)
    5e7c:	20029c26 	beq	r4,zero,68f0 <_dtoa_r+0x11c0>
    5e80:	d8c00517 	ldw	r3,20(sp)
    5e84:	27000015 	stw	fp,0(r4)
    5e88:	003e5d06 	br	5800 <_dtoa_r+0xd0>
    5e8c:	d9800d17 	ldw	r6,52(sp)
    5e90:	00c00074 	movhi	r3,1
    5e94:	18fc2a04 	addi	r3,r3,-3928
    5e98:	d9001217 	ldw	r4,72(sp)
    5e9c:	300490fa 	slli	r2,r6,3
    5ea0:	d9401317 	ldw	r5,76(sp)
    5ea4:	10c5883a 	add	r2,r2,r3
    5ea8:	12000017 	ldw	r8,0(r2)
    5eac:	12400117 	ldw	r9,4(r2)
    5eb0:	400d883a 	mov	r6,r8
    5eb4:	480f883a 	mov	r7,r9
    5eb8:	000b7440 	call	b744 <__ltdf2>
    5ebc:	1000030e 	bge	r2,zero,5ecc <_dtoa_r+0x79c>
    5ec0:	d8800d17 	ldw	r2,52(sp)
    5ec4:	10bfffc4 	addi	r2,r2,-1
    5ec8:	d8800d15 	stw	r2,52(sp)
    5ecc:	d8000c15 	stw	zero,48(sp)
    5ed0:	003ea806 	br	5974 <_dtoa_r+0x244>
    5ed4:	d9000b17 	ldw	r4,44(sp)
    5ed8:	202cc03a 	cmpne	r22,r4,zero
    5edc:	b000c71e 	bne	r22,zero,61fc <_dtoa_r+0xacc>
    5ee0:	dc001117 	ldw	r16,68(sp)
    5ee4:	dc801017 	ldw	r18,64(sp)
    5ee8:	0027883a 	mov	r19,zero
    5eec:	04000b0e 	bge	zero,r16,5f1c <_dtoa_r+0x7ec>
    5ef0:	d8c00a17 	ldw	r3,40(sp)
    5ef4:	00c0090e 	bge	zero,r3,5f1c <_dtoa_r+0x7ec>
    5ef8:	8005883a 	mov	r2,r16
    5efc:	1c011316 	blt	r3,r16,634c <_dtoa_r+0xc1c>
    5f00:	d9000a17 	ldw	r4,40(sp)
    5f04:	d9801117 	ldw	r6,68(sp)
    5f08:	80a1c83a 	sub	r16,r16,r2
    5f0c:	2089c83a 	sub	r4,r4,r2
    5f10:	308dc83a 	sub	r6,r6,r2
    5f14:	d9000a15 	stw	r4,40(sp)
    5f18:	d9801115 	stw	r6,68(sp)
    5f1c:	d8801017 	ldw	r2,64(sp)
    5f20:	0080150e 	bge	zero,r2,5f78 <_dtoa_r+0x848>
    5f24:	d8c00b17 	ldw	r3,44(sp)
    5f28:	1805003a 	cmpeq	r2,r3,zero
    5f2c:	1001c91e 	bne	r2,zero,6654 <_dtoa_r+0xf24>
    5f30:	04800e0e 	bge	zero,r18,5f6c <_dtoa_r+0x83c>
    5f34:	d9001617 	ldw	r4,88(sp)
    5f38:	980b883a 	mov	r5,r19
    5f3c:	900d883a 	mov	r6,r18
    5f40:	0008f380 	call	8f38 <__pow5mult>
    5f44:	d9001617 	ldw	r4,88(sp)
    5f48:	d9800717 	ldw	r6,28(sp)
    5f4c:	100b883a 	mov	r5,r2
    5f50:	1027883a 	mov	r19,r2
    5f54:	0008c140 	call	8c14 <__multiply>
    5f58:	d9001617 	ldw	r4,88(sp)
    5f5c:	d9400717 	ldw	r5,28(sp)
    5f60:	1023883a 	mov	r17,r2
    5f64:	00081840 	call	8184 <_Bfree>
    5f68:	dc400715 	stw	r17,28(sp)
    5f6c:	d9001017 	ldw	r4,64(sp)
    5f70:	248dc83a 	sub	r6,r4,r18
    5f74:	30010e1e 	bne	r6,zero,63b0 <_dtoa_r+0xc80>
    5f78:	d9001617 	ldw	r4,88(sp)
    5f7c:	04400044 	movi	r17,1
    5f80:	880b883a 	mov	r5,r17
    5f84:	0008dfc0 	call	8dfc <__i2b>
    5f88:	d9800917 	ldw	r6,36(sp)
    5f8c:	1025883a 	mov	r18,r2
    5f90:	0180040e 	bge	zero,r6,5fa4 <_dtoa_r+0x874>
    5f94:	d9001617 	ldw	r4,88(sp)
    5f98:	100b883a 	mov	r5,r2
    5f9c:	0008f380 	call	8f38 <__pow5mult>
    5fa0:	1025883a 	mov	r18,r2
    5fa4:	d8801717 	ldw	r2,92(sp)
    5fa8:	8880f30e 	bge	r17,r2,6378 <_dtoa_r+0xc48>
    5fac:	0023883a 	mov	r17,zero
    5fb0:	d9800917 	ldw	r6,36(sp)
    5fb4:	30019e1e 	bne	r6,zero,6630 <_dtoa_r+0xf00>
    5fb8:	00c00044 	movi	r3,1
    5fbc:	d9000a17 	ldw	r4,40(sp)
    5fc0:	20c5883a 	add	r2,r4,r3
    5fc4:	10c007cc 	andi	r3,r2,31
    5fc8:	1800841e 	bne	r3,zero,61dc <_dtoa_r+0xaac>
    5fcc:	00800704 	movi	r2,28
    5fd0:	d9000a17 	ldw	r4,40(sp)
    5fd4:	d9801117 	ldw	r6,68(sp)
    5fd8:	80a1883a 	add	r16,r16,r2
    5fdc:	2089883a 	add	r4,r4,r2
    5fe0:	308d883a 	add	r6,r6,r2
    5fe4:	d9000a15 	stw	r4,40(sp)
    5fe8:	d9801115 	stw	r6,68(sp)
    5fec:	d8801117 	ldw	r2,68(sp)
    5ff0:	0080050e 	bge	zero,r2,6008 <_dtoa_r+0x8d8>
    5ff4:	d9400717 	ldw	r5,28(sp)
    5ff8:	d9001617 	ldw	r4,88(sp)
    5ffc:	100d883a 	mov	r6,r2
    6000:	0008ac80 	call	8ac8 <__lshift>
    6004:	d8800715 	stw	r2,28(sp)
    6008:	d8c00a17 	ldw	r3,40(sp)
    600c:	00c0050e 	bge	zero,r3,6024 <_dtoa_r+0x8f4>
    6010:	d9001617 	ldw	r4,88(sp)
    6014:	900b883a 	mov	r5,r18
    6018:	180d883a 	mov	r6,r3
    601c:	0008ac80 	call	8ac8 <__lshift>
    6020:	1025883a 	mov	r18,r2
    6024:	d9000c17 	ldw	r4,48(sp)
    6028:	2005003a 	cmpeq	r2,r4,zero
    602c:	10016f26 	beq	r2,zero,65ec <_dtoa_r+0xebc>
    6030:	d9000f17 	ldw	r4,60(sp)
    6034:	0102170e 	bge	zero,r4,6894 <_dtoa_r+0x1164>
    6038:	d9800b17 	ldw	r6,44(sp)
    603c:	3005003a 	cmpeq	r2,r6,zero
    6040:	1000881e 	bne	r2,zero,6264 <_dtoa_r+0xb34>
    6044:	0400050e 	bge	zero,r16,605c <_dtoa_r+0x92c>
    6048:	d9001617 	ldw	r4,88(sp)
    604c:	980b883a 	mov	r5,r19
    6050:	800d883a 	mov	r6,r16
    6054:	0008ac80 	call	8ac8 <__lshift>
    6058:	1027883a 	mov	r19,r2
    605c:	8804c03a 	cmpne	r2,r17,zero
    6060:	1002541e 	bne	r2,zero,69b4 <_dtoa_r+0x1284>
    6064:	980b883a 	mov	r5,r19
    6068:	dd800517 	ldw	r22,20(sp)
    606c:	dcc00615 	stw	r19,24(sp)
    6070:	a700004c 	andi	fp,r20,1
    6074:	2827883a 	mov	r19,r5
    6078:	d9000717 	ldw	r4,28(sp)
    607c:	900b883a 	mov	r5,r18
    6080:	00055180 	call	5518 <quorem>
    6084:	d9000717 	ldw	r4,28(sp)
    6088:	d9400617 	ldw	r5,24(sp)
    608c:	1023883a 	mov	r17,r2
    6090:	8dc00c04 	addi	r23,r17,48
    6094:	00082e00 	call	82e0 <__mcmp>
    6098:	d9001617 	ldw	r4,88(sp)
    609c:	900b883a 	mov	r5,r18
    60a0:	980d883a 	mov	r6,r19
    60a4:	1029883a 	mov	r20,r2
    60a8:	000893c0 	call	893c <__mdiff>
    60ac:	102b883a 	mov	r21,r2
    60b0:	10800317 	ldw	r2,12(r2)
    60b4:	1001281e 	bne	r2,zero,6558 <_dtoa_r+0xe28>
    60b8:	d9000717 	ldw	r4,28(sp)
    60bc:	a80b883a 	mov	r5,r21
    60c0:	00082e00 	call	82e0 <__mcmp>
    60c4:	d9001617 	ldw	r4,88(sp)
    60c8:	1021883a 	mov	r16,r2
    60cc:	a80b883a 	mov	r5,r21
    60d0:	00081840 	call	8184 <_Bfree>
    60d4:	8000041e 	bne	r16,zero,60e8 <_dtoa_r+0x9b8>
    60d8:	d8801717 	ldw	r2,92(sp)
    60dc:	1000021e 	bne	r2,zero,60e8 <_dtoa_r+0x9b8>
    60e0:	e004c03a 	cmpne	r2,fp,zero
    60e4:	10011726 	beq	r2,zero,6544 <_dtoa_r+0xe14>
    60e8:	a0010616 	blt	r20,zero,6504 <_dtoa_r+0xdd4>
    60ec:	a000041e 	bne	r20,zero,6100 <_dtoa_r+0x9d0>
    60f0:	d8c01717 	ldw	r3,92(sp)
    60f4:	1800021e 	bne	r3,zero,6100 <_dtoa_r+0x9d0>
    60f8:	e004c03a 	cmpne	r2,fp,zero
    60fc:	10010126 	beq	r2,zero,6504 <_dtoa_r+0xdd4>
    6100:	04023d16 	blt	zero,r16,69f8 <_dtoa_r+0x12c8>
    6104:	b5c00005 	stb	r23,0(r22)
    6108:	d9800517 	ldw	r6,20(sp)
    610c:	d9000f17 	ldw	r4,60(sp)
    6110:	b5800044 	addi	r22,r22,1
    6114:	3105883a 	add	r2,r6,r4
    6118:	b0806526 	beq	r22,r2,62b0 <_dtoa_r+0xb80>
    611c:	d9400717 	ldw	r5,28(sp)
    6120:	d9001617 	ldw	r4,88(sp)
    6124:	01800284 	movi	r6,10
    6128:	000f883a 	mov	r7,zero
    612c:	0008e380 	call	8e38 <__multadd>
    6130:	d8800715 	stw	r2,28(sp)
    6134:	d8800617 	ldw	r2,24(sp)
    6138:	14c10c26 	beq	r2,r19,656c <_dtoa_r+0xe3c>
    613c:	d9400617 	ldw	r5,24(sp)
    6140:	d9001617 	ldw	r4,88(sp)
    6144:	01800284 	movi	r6,10
    6148:	000f883a 	mov	r7,zero
    614c:	0008e380 	call	8e38 <__multadd>
    6150:	d9001617 	ldw	r4,88(sp)
    6154:	980b883a 	mov	r5,r19
    6158:	01800284 	movi	r6,10
    615c:	000f883a 	mov	r7,zero
    6160:	d8800615 	stw	r2,24(sp)
    6164:	0008e380 	call	8e38 <__multadd>
    6168:	1027883a 	mov	r19,r2
    616c:	003fc206 	br	6078 <_dtoa_r+0x948>
    6170:	2445c83a 	sub	r2,r4,r17
    6174:	a088983a 	sll	r4,r20,r2
    6178:	003e4b06 	br	5aa8 <_dtoa_r+0x378>
    617c:	01bfffc4 	movi	r6,-1
    6180:	00800044 	movi	r2,1
    6184:	d9800e15 	stw	r6,56(sp)
    6188:	d9800f15 	stw	r6,60(sp)
    618c:	d8800b15 	stw	r2,44(sp)
    6190:	d8c01617 	ldw	r3,88(sp)
    6194:	008005c4 	movi	r2,23
    6198:	18001115 	stw	zero,68(r3)
    619c:	1580082e 	bgeu	r2,r22,61c0 <_dtoa_r+0xa90>
    61a0:	00c00104 	movi	r3,4
    61a4:	0009883a 	mov	r4,zero
    61a8:	18c7883a 	add	r3,r3,r3
    61ac:	18800504 	addi	r2,r3,20
    61b0:	21000044 	addi	r4,r4,1
    61b4:	b0bffc2e 	bgeu	r22,r2,61a8 <_dtoa_r+0xa78>
    61b8:	d9801617 	ldw	r6,88(sp)
    61bc:	31001115 	stw	r4,68(r6)
    61c0:	dc000f17 	ldw	r16,60(sp)
    61c4:	003e4b06 	br	5af4 <_dtoa_r+0x3c4>
    61c8:	d9801717 	ldw	r6,92(sp)
    61cc:	0023883a 	mov	r17,zero
    61d0:	31bfff04 	addi	r6,r6,-4
    61d4:	d9801715 	stw	r6,92(sp)
    61d8:	003df806 	br	59bc <_dtoa_r+0x28c>
    61dc:	00800804 	movi	r2,32
    61e0:	10c9c83a 	sub	r4,r2,r3
    61e4:	00c00104 	movi	r3,4
    61e8:	19005a16 	blt	r3,r4,6354 <_dtoa_r+0xc24>
    61ec:	008000c4 	movi	r2,3
    61f0:	113f7e16 	blt	r2,r4,5fec <_dtoa_r+0x8bc>
    61f4:	20800704 	addi	r2,r4,28
    61f8:	003f7506 	br	5fd0 <_dtoa_r+0x8a0>
    61fc:	d9801717 	ldw	r6,92(sp)
    6200:	00800044 	movi	r2,1
    6204:	1180a10e 	bge	r2,r6,648c <_dtoa_r+0xd5c>
    6208:	d9800f17 	ldw	r6,60(sp)
    620c:	d8c01017 	ldw	r3,64(sp)
    6210:	30bfffc4 	addi	r2,r6,-1
    6214:	1881c616 	blt	r3,r2,6930 <_dtoa_r+0x1200>
    6218:	18a5c83a 	sub	r18,r3,r2
    621c:	d8800f17 	ldw	r2,60(sp)
    6220:	10026216 	blt	r2,zero,6bac <_dtoa_r+0x147c>
    6224:	dc001117 	ldw	r16,68(sp)
    6228:	1007883a 	mov	r3,r2
    622c:	d9800a17 	ldw	r6,40(sp)
    6230:	d8801117 	ldw	r2,68(sp)
    6234:	d9001617 	ldw	r4,88(sp)
    6238:	30cd883a 	add	r6,r6,r3
    623c:	10c5883a 	add	r2,r2,r3
    6240:	01400044 	movi	r5,1
    6244:	d9800a15 	stw	r6,40(sp)
    6248:	d8801115 	stw	r2,68(sp)
    624c:	0008dfc0 	call	8dfc <__i2b>
    6250:	1027883a 	mov	r19,r2
    6254:	003f2506 	br	5eec <_dtoa_r+0x7bc>
    6258:	00c00074 	movhi	r3,1
    625c:	18fc0d04 	addi	r3,r3,-4044
    6260:	003d6706 	br	5800 <_dtoa_r+0xd0>
    6264:	dd800517 	ldw	r22,20(sp)
    6268:	04000044 	movi	r16,1
    626c:	00000706 	br	628c <_dtoa_r+0xb5c>
    6270:	d9400717 	ldw	r5,28(sp)
    6274:	d9001617 	ldw	r4,88(sp)
    6278:	01800284 	movi	r6,10
    627c:	000f883a 	mov	r7,zero
    6280:	0008e380 	call	8e38 <__multadd>
    6284:	d8800715 	stw	r2,28(sp)
    6288:	84000044 	addi	r16,r16,1
    628c:	d9000717 	ldw	r4,28(sp)
    6290:	900b883a 	mov	r5,r18
    6294:	00055180 	call	5518 <quorem>
    6298:	15c00c04 	addi	r23,r2,48
    629c:	b5c00005 	stb	r23,0(r22)
    62a0:	d8c00f17 	ldw	r3,60(sp)
    62a4:	b5800044 	addi	r22,r22,1
    62a8:	80fff116 	blt	r16,r3,6270 <_dtoa_r+0xb40>
    62ac:	d8000615 	stw	zero,24(sp)
    62b0:	d9400717 	ldw	r5,28(sp)
    62b4:	d9001617 	ldw	r4,88(sp)
    62b8:	01800044 	movi	r6,1
    62bc:	0008ac80 	call	8ac8 <__lshift>
    62c0:	1009883a 	mov	r4,r2
    62c4:	900b883a 	mov	r5,r18
    62c8:	d8800715 	stw	r2,28(sp)
    62cc:	00082e00 	call	82e0 <__mcmp>
    62d0:	00803c0e 	bge	zero,r2,63c4 <_dtoa_r+0xc94>
    62d4:	b009883a 	mov	r4,r22
    62d8:	213fffc4 	addi	r4,r4,-1
    62dc:	21400003 	ldbu	r5,0(r4)
    62e0:	00800e44 	movi	r2,57
    62e4:	28c03fcc 	andi	r3,r5,255
    62e8:	18c0201c 	xori	r3,r3,128
    62ec:	18ffe004 	addi	r3,r3,-128
    62f0:	1881981e 	bne	r3,r2,6954 <_dtoa_r+0x1224>
    62f4:	d9800517 	ldw	r6,20(sp)
    62f8:	21bff71e 	bne	r4,r6,62d8 <_dtoa_r+0xba8>
    62fc:	d8800d17 	ldw	r2,52(sp)
    6300:	37000044 	addi	fp,r6,1
    6304:	10800044 	addi	r2,r2,1
    6308:	d8800d15 	stw	r2,52(sp)
    630c:	00800c44 	movi	r2,49
    6310:	30800005 	stb	r2,0(r6)
    6314:	d9001617 	ldw	r4,88(sp)
    6318:	900b883a 	mov	r5,r18
    631c:	00081840 	call	8184 <_Bfree>
    6320:	983ecd26 	beq	r19,zero,5e58 <_dtoa_r+0x728>
    6324:	d8c00617 	ldw	r3,24(sp)
    6328:	18000426 	beq	r3,zero,633c <_dtoa_r+0xc0c>
    632c:	1cc00326 	beq	r3,r19,633c <_dtoa_r+0xc0c>
    6330:	d9001617 	ldw	r4,88(sp)
    6334:	180b883a 	mov	r5,r3
    6338:	00081840 	call	8184 <_Bfree>
    633c:	d9001617 	ldw	r4,88(sp)
    6340:	980b883a 	mov	r5,r19
    6344:	00081840 	call	8184 <_Bfree>
    6348:	003ec306 	br	5e58 <_dtoa_r+0x728>
    634c:	1805883a 	mov	r2,r3
    6350:	003eeb06 	br	5f00 <_dtoa_r+0x7d0>
    6354:	d9800a17 	ldw	r6,40(sp)
    6358:	d8c01117 	ldw	r3,68(sp)
    635c:	20bfff04 	addi	r2,r4,-4
    6360:	308d883a 	add	r6,r6,r2
    6364:	1887883a 	add	r3,r3,r2
    6368:	80a1883a 	add	r16,r16,r2
    636c:	d9800a15 	stw	r6,40(sp)
    6370:	d8c01115 	stw	r3,68(sp)
    6374:	003f1d06 	br	5fec <_dtoa_r+0x8bc>
    6378:	a03f0c1e 	bne	r20,zero,5fac <_dtoa_r+0x87c>
    637c:	00800434 	movhi	r2,16
    6380:	10bfffc4 	addi	r2,r2,-1
    6384:	a884703a 	and	r2,r21,r2
    6388:	103f081e 	bne	r2,zero,5fac <_dtoa_r+0x87c>
    638c:	a89ffc2c 	andhi	r2,r21,32752
    6390:	103f0626 	beq	r2,zero,5fac <_dtoa_r+0x87c>
    6394:	d8c01117 	ldw	r3,68(sp)
    6398:	d9000a17 	ldw	r4,40(sp)
    639c:	18c00044 	addi	r3,r3,1
    63a0:	21000044 	addi	r4,r4,1
    63a4:	d8c01115 	stw	r3,68(sp)
    63a8:	d9000a15 	stw	r4,40(sp)
    63ac:	003f0006 	br	5fb0 <_dtoa_r+0x880>
    63b0:	d9400717 	ldw	r5,28(sp)
    63b4:	d9001617 	ldw	r4,88(sp)
    63b8:	0008f380 	call	8f38 <__pow5mult>
    63bc:	d8800715 	stw	r2,28(sp)
    63c0:	003eed06 	br	5f78 <_dtoa_r+0x848>
    63c4:	1000021e 	bne	r2,zero,63d0 <_dtoa_r+0xca0>
    63c8:	b880004c 	andi	r2,r23,1
    63cc:	103fc11e 	bne	r2,zero,62d4 <_dtoa_r+0xba4>
    63d0:	b5bfffc4 	addi	r22,r22,-1
    63d4:	b0c00007 	ldb	r3,0(r22)
    63d8:	00800c04 	movi	r2,48
    63dc:	18bffc26 	beq	r3,r2,63d0 <_dtoa_r+0xca0>
    63e0:	b7000044 	addi	fp,r22,1
    63e4:	003fcb06 	br	6314 <_dtoa_r+0xbe4>
    63e8:	d9800d17 	ldw	r6,52(sp)
    63ec:	018fc83a 	sub	r7,zero,r6
    63f0:	3801f726 	beq	r7,zero,6bd0 <_dtoa_r+0x14a0>
    63f4:	398003cc 	andi	r6,r7,15
    63f8:	300c90fa 	slli	r6,r6,3
    63fc:	01400074 	movhi	r5,1
    6400:	297c2a04 	addi	r5,r5,-3928
    6404:	d9001217 	ldw	r4,72(sp)
    6408:	314d883a 	add	r6,r6,r5
    640c:	30c00117 	ldw	r3,4(r6)
    6410:	30800017 	ldw	r2,0(r6)
    6414:	d9401317 	ldw	r5,76(sp)
    6418:	3821d13a 	srai	r16,r7,4
    641c:	100d883a 	mov	r6,r2
    6420:	180f883a 	mov	r7,r3
    6424:	000af080 	call	af08 <__muldf3>
    6428:	1011883a 	mov	r8,r2
    642c:	1813883a 	mov	r9,r3
    6430:	1029883a 	mov	r20,r2
    6434:	182b883a 	mov	r21,r3
    6438:	8001e526 	beq	r16,zero,6bd0 <_dtoa_r+0x14a0>
    643c:	05800084 	movi	r22,2
    6440:	04400074 	movhi	r17,1
    6444:	8c7c5c04 	addi	r17,r17,-3728
    6448:	8080004c 	andi	r2,r16,1
    644c:	1005003a 	cmpeq	r2,r2,zero
    6450:	1000081e 	bne	r2,zero,6474 <_dtoa_r+0xd44>
    6454:	89800017 	ldw	r6,0(r17)
    6458:	89c00117 	ldw	r7,4(r17)
    645c:	480b883a 	mov	r5,r9
    6460:	4009883a 	mov	r4,r8
    6464:	000af080 	call	af08 <__muldf3>
    6468:	1011883a 	mov	r8,r2
    646c:	b5800044 	addi	r22,r22,1
    6470:	1813883a 	mov	r9,r3
    6474:	8021d07a 	srai	r16,r16,1
    6478:	8c400204 	addi	r17,r17,8
    647c:	803ff21e 	bne	r16,zero,6448 <_dtoa_r+0xd18>
    6480:	4029883a 	mov	r20,r8
    6484:	482b883a 	mov	r21,r9
    6488:	003dca06 	br	5bb4 <_dtoa_r+0x484>
    648c:	d9000817 	ldw	r4,32(sp)
    6490:	2005003a 	cmpeq	r2,r4,zero
    6494:	1001f61e 	bne	r2,zero,6c70 <_dtoa_r+0x1540>
    6498:	dc001117 	ldw	r16,68(sp)
    649c:	dc801017 	ldw	r18,64(sp)
    64a0:	18c10cc4 	addi	r3,r3,1075
    64a4:	003f6106 	br	622c <_dtoa_r+0xafc>
    64a8:	d8000b15 	stw	zero,44(sp)
    64ac:	d9802617 	ldw	r6,152(sp)
    64b0:	d8c00d17 	ldw	r3,52(sp)
    64b4:	30800044 	addi	r2,r6,1
    64b8:	18ad883a 	add	r22,r3,r2
    64bc:	b13fffc4 	addi	r4,r22,-1
    64c0:	d9000e15 	stw	r4,56(sp)
    64c4:	0581f60e 	bge	zero,r22,6ca0 <_dtoa_r+0x1570>
    64c8:	dd800f15 	stw	r22,60(sp)
    64cc:	003f3006 	br	6190 <_dtoa_r+0xa60>
    64d0:	d8000b15 	stw	zero,44(sp)
    64d4:	d9002617 	ldw	r4,152(sp)
    64d8:	0101eb0e 	bge	zero,r4,6c88 <_dtoa_r+0x1558>
    64dc:	202d883a 	mov	r22,r4
    64e0:	d9000e15 	stw	r4,56(sp)
    64e4:	d9000f15 	stw	r4,60(sp)
    64e8:	003f2906 	br	6190 <_dtoa_r+0xa60>
    64ec:	01800044 	movi	r6,1
    64f0:	d9800b15 	stw	r6,44(sp)
    64f4:	003ff706 	br	64d4 <_dtoa_r+0xda4>
    64f8:	01000044 	movi	r4,1
    64fc:	d9000b15 	stw	r4,44(sp)
    6500:	003fea06 	br	64ac <_dtoa_r+0xd7c>
    6504:	04000c0e 	bge	zero,r16,6538 <_dtoa_r+0xe08>
    6508:	d9400717 	ldw	r5,28(sp)
    650c:	d9001617 	ldw	r4,88(sp)
    6510:	01800044 	movi	r6,1
    6514:	0008ac80 	call	8ac8 <__lshift>
    6518:	1009883a 	mov	r4,r2
    651c:	900b883a 	mov	r5,r18
    6520:	d8800715 	stw	r2,28(sp)
    6524:	00082e00 	call	82e0 <__mcmp>
    6528:	0081e00e 	bge	zero,r2,6cac <_dtoa_r+0x157c>
    652c:	bdc00044 	addi	r23,r23,1
    6530:	00800e84 	movi	r2,58
    6534:	b881a226 	beq	r23,r2,6bc0 <_dtoa_r+0x1490>
    6538:	b7000044 	addi	fp,r22,1
    653c:	b5c00005 	stb	r23,0(r22)
    6540:	003f7406 	br	6314 <_dtoa_r+0xbe4>
    6544:	00800e44 	movi	r2,57
    6548:	b8819d26 	beq	r23,r2,6bc0 <_dtoa_r+0x1490>
    654c:	053ffa0e 	bge	zero,r20,6538 <_dtoa_r+0xe08>
    6550:	8dc00c44 	addi	r23,r17,49
    6554:	003ff806 	br	6538 <_dtoa_r+0xe08>
    6558:	d9001617 	ldw	r4,88(sp)
    655c:	a80b883a 	mov	r5,r21
    6560:	04000044 	movi	r16,1
    6564:	00081840 	call	8184 <_Bfree>
    6568:	003edf06 	br	60e8 <_dtoa_r+0x9b8>
    656c:	d9001617 	ldw	r4,88(sp)
    6570:	980b883a 	mov	r5,r19
    6574:	01800284 	movi	r6,10
    6578:	000f883a 	mov	r7,zero
    657c:	0008e380 	call	8e38 <__multadd>
    6580:	1027883a 	mov	r19,r2
    6584:	d8800615 	stw	r2,24(sp)
    6588:	003ebb06 	br	6078 <_dtoa_r+0x948>
    658c:	d9801117 	ldw	r6,68(sp)
    6590:	d8800d17 	ldw	r2,52(sp)
    6594:	d8000915 	stw	zero,36(sp)
    6598:	308dc83a 	sub	r6,r6,r2
    659c:	0087c83a 	sub	r3,zero,r2
    65a0:	d9801115 	stw	r6,68(sp)
    65a4:	d8c01015 	stw	r3,64(sp)
    65a8:	003cfe06 	br	59a4 <_dtoa_r+0x274>
    65ac:	018dc83a 	sub	r6,zero,r6
    65b0:	d9801115 	stw	r6,68(sp)
    65b4:	d8000a15 	stw	zero,40(sp)
    65b8:	003cf306 	br	5988 <_dtoa_r+0x258>
    65bc:	d9000d17 	ldw	r4,52(sp)
    65c0:	000b7cc0 	call	b7cc <__floatsidf>
    65c4:	880b883a 	mov	r5,r17
    65c8:	8009883a 	mov	r4,r16
    65cc:	180f883a 	mov	r7,r3
    65d0:	100d883a 	mov	r6,r2
    65d4:	000b5ac0 	call	b5ac <__nedf2>
    65d8:	103ce126 	beq	r2,zero,5960 <_dtoa_r+0x230>
    65dc:	d9800d17 	ldw	r6,52(sp)
    65e0:	31bfffc4 	addi	r6,r6,-1
    65e4:	d9800d15 	stw	r6,52(sp)
    65e8:	003cdd06 	br	5960 <_dtoa_r+0x230>
    65ec:	d9000717 	ldw	r4,28(sp)
    65f0:	900b883a 	mov	r5,r18
    65f4:	00082e00 	call	82e0 <__mcmp>
    65f8:	103e8d0e 	bge	r2,zero,6030 <_dtoa_r+0x900>
    65fc:	d9400717 	ldw	r5,28(sp)
    6600:	d9001617 	ldw	r4,88(sp)
    6604:	01800284 	movi	r6,10
    6608:	000f883a 	mov	r7,zero
    660c:	0008e380 	call	8e38 <__multadd>
    6610:	d9800d17 	ldw	r6,52(sp)
    6614:	d8800715 	stw	r2,28(sp)
    6618:	31bfffc4 	addi	r6,r6,-1
    661c:	d9800d15 	stw	r6,52(sp)
    6620:	b001a71e 	bne	r22,zero,6cc0 <_dtoa_r+0x1590>
    6624:	d8800e17 	ldw	r2,56(sp)
    6628:	d8800f15 	stw	r2,60(sp)
    662c:	003e8006 	br	6030 <_dtoa_r+0x900>
    6630:	90800417 	ldw	r2,16(r18)
    6634:	1085883a 	add	r2,r2,r2
    6638:	1085883a 	add	r2,r2,r2
    663c:	1485883a 	add	r2,r2,r18
    6640:	11000417 	ldw	r4,16(r2)
    6644:	00081ac0 	call	81ac <__hi0bits>
    6648:	00c00804 	movi	r3,32
    664c:	1887c83a 	sub	r3,r3,r2
    6650:	003e5a06 	br	5fbc <_dtoa_r+0x88c>
    6654:	d9400717 	ldw	r5,28(sp)
    6658:	d9801017 	ldw	r6,64(sp)
    665c:	d9001617 	ldw	r4,88(sp)
    6660:	0008f380 	call	8f38 <__pow5mult>
    6664:	d8800715 	stw	r2,28(sp)
    6668:	003e4306 	br	5f78 <_dtoa_r+0x848>
    666c:	d9800f17 	ldw	r6,60(sp)
    6670:	d8800d17 	ldw	r2,52(sp)
    6674:	d9800315 	stw	r6,12(sp)
    6678:	d8800415 	stw	r2,16(sp)
    667c:	d8c00b17 	ldw	r3,44(sp)
    6680:	1805003a 	cmpeq	r2,r3,zero
    6684:	1000e21e 	bne	r2,zero,6a10 <_dtoa_r+0x12e0>
    6688:	d9000317 	ldw	r4,12(sp)
    668c:	0005883a 	mov	r2,zero
    6690:	00cff834 	movhi	r3,16352
    6694:	200c90fa 	slli	r6,r4,3
    6698:	01000074 	movhi	r4,1
    669c:	213c2a04 	addi	r4,r4,-3928
    66a0:	180b883a 	mov	r5,r3
    66a4:	310d883a 	add	r6,r6,r4
    66a8:	327fff17 	ldw	r9,-4(r6)
    66ac:	323ffe17 	ldw	r8,-8(r6)
    66b0:	1009883a 	mov	r4,r2
    66b4:	480f883a 	mov	r7,r9
    66b8:	400d883a 	mov	r6,r8
    66bc:	000b2cc0 	call	b2cc <__divdf3>
    66c0:	180b883a 	mov	r5,r3
    66c4:	b00d883a 	mov	r6,r22
    66c8:	b80f883a 	mov	r7,r23
    66cc:	1009883a 	mov	r4,r2
    66d0:	000ae140 	call	ae14 <__subdf3>
    66d4:	a80b883a 	mov	r5,r21
    66d8:	a009883a 	mov	r4,r20
    66dc:	d8c01915 	stw	r3,100(sp)
    66e0:	d8801815 	stw	r2,96(sp)
    66e4:	000b8c40 	call	b8c4 <__fixdfsi>
    66e8:	1009883a 	mov	r4,r2
    66ec:	1027883a 	mov	r19,r2
    66f0:	000b7cc0 	call	b7cc <__floatsidf>
    66f4:	a80b883a 	mov	r5,r21
    66f8:	a009883a 	mov	r4,r20
    66fc:	180f883a 	mov	r7,r3
    6700:	100d883a 	mov	r6,r2
    6704:	000ae140 	call	ae14 <__subdf3>
    6708:	d9801817 	ldw	r6,96(sp)
    670c:	1823883a 	mov	r17,r3
    6710:	d8801415 	stw	r2,80(sp)
    6714:	302d883a 	mov	r22,r6
    6718:	d9800517 	ldw	r6,20(sp)
    671c:	9cc00c04 	addi	r19,r19,48
    6720:	dc401515 	stw	r17,84(sp)
    6724:	d8c01917 	ldw	r3,100(sp)
    6728:	34c00005 	stb	r19,0(r6)
    672c:	d8800517 	ldw	r2,20(sp)
    6730:	d9401917 	ldw	r5,100(sp)
    6734:	d9801417 	ldw	r6,80(sp)
    6738:	b009883a 	mov	r4,r22
    673c:	880f883a 	mov	r7,r17
    6740:	182f883a 	mov	r23,r3
    6744:	17000044 	addi	fp,r2,1
    6748:	000b6340 	call	b634 <__gtdf2>
    674c:	00804e16 	blt	zero,r2,6888 <_dtoa_r+0x1158>
    6750:	d9801417 	ldw	r6,80(sp)
    6754:	0005883a 	mov	r2,zero
    6758:	00cffc34 	movhi	r3,16368
    675c:	180b883a 	mov	r5,r3
    6760:	880f883a 	mov	r7,r17
    6764:	1009883a 	mov	r4,r2
    6768:	000ae140 	call	ae14 <__subdf3>
    676c:	d9401917 	ldw	r5,100(sp)
    6770:	180f883a 	mov	r7,r3
    6774:	b009883a 	mov	r4,r22
    6778:	100d883a 	mov	r6,r2
    677c:	000b6340 	call	b634 <__gtdf2>
    6780:	00bda216 	blt	zero,r2,5e0c <_dtoa_r+0x6dc>
    6784:	d8c00317 	ldw	r3,12(sp)
    6788:	00800044 	movi	r2,1
    678c:	10c01216 	blt	r2,r3,67d8 <_dtoa_r+0x10a8>
    6790:	003d4506 	br	5ca8 <_dtoa_r+0x578>
    6794:	d9801417 	ldw	r6,80(sp)
    6798:	0005883a 	mov	r2,zero
    679c:	00cffc34 	movhi	r3,16368
    67a0:	180b883a 	mov	r5,r3
    67a4:	880f883a 	mov	r7,r17
    67a8:	1009883a 	mov	r4,r2
    67ac:	000ae140 	call	ae14 <__subdf3>
    67b0:	d9c01b17 	ldw	r7,108(sp)
    67b4:	180b883a 	mov	r5,r3
    67b8:	1009883a 	mov	r4,r2
    67bc:	b00d883a 	mov	r6,r22
    67c0:	000b7440 	call	b744 <__ltdf2>
    67c4:	103d9116 	blt	r2,zero,5e0c <_dtoa_r+0x6dc>
    67c8:	d9800517 	ldw	r6,20(sp)
    67cc:	d9000317 	ldw	r4,12(sp)
    67d0:	3105883a 	add	r2,r6,r4
    67d4:	e0bd3426 	beq	fp,r2,5ca8 <_dtoa_r+0x578>
    67d8:	04500934 	movhi	r17,16420
    67dc:	0021883a 	mov	r16,zero
    67e0:	b80b883a 	mov	r5,r23
    67e4:	b009883a 	mov	r4,r22
    67e8:	800d883a 	mov	r6,r16
    67ec:	880f883a 	mov	r7,r17
    67f0:	000af080 	call	af08 <__muldf3>
    67f4:	d9401517 	ldw	r5,84(sp)
    67f8:	d9001417 	ldw	r4,80(sp)
    67fc:	880f883a 	mov	r7,r17
    6800:	000d883a 	mov	r6,zero
    6804:	d8801a15 	stw	r2,104(sp)
    6808:	d8c01b15 	stw	r3,108(sp)
    680c:	000af080 	call	af08 <__muldf3>
    6810:	180b883a 	mov	r5,r3
    6814:	1009883a 	mov	r4,r2
    6818:	1823883a 	mov	r17,r3
    681c:	1021883a 	mov	r16,r2
    6820:	000b8c40 	call	b8c4 <__fixdfsi>
    6824:	1009883a 	mov	r4,r2
    6828:	102b883a 	mov	r21,r2
    682c:	000b7cc0 	call	b7cc <__floatsidf>
    6830:	880b883a 	mov	r5,r17
    6834:	8009883a 	mov	r4,r16
    6838:	180f883a 	mov	r7,r3
    683c:	100d883a 	mov	r6,r2
    6840:	000ae140 	call	ae14 <__subdf3>
    6844:	1021883a 	mov	r16,r2
    6848:	d9001b17 	ldw	r4,108(sp)
    684c:	1823883a 	mov	r17,r3
    6850:	dc001415 	stw	r16,80(sp)
    6854:	ad400c04 	addi	r21,r21,48
    6858:	dc401515 	stw	r17,84(sp)
    685c:	d8801a17 	ldw	r2,104(sp)
    6860:	e5400005 	stb	r21,0(fp)
    6864:	202f883a 	mov	r23,r4
    6868:	d9c01b17 	ldw	r7,108(sp)
    686c:	d9001417 	ldw	r4,80(sp)
    6870:	880b883a 	mov	r5,r17
    6874:	100d883a 	mov	r6,r2
    6878:	102d883a 	mov	r22,r2
    687c:	e7000044 	addi	fp,fp,1
    6880:	000b7440 	call	b744 <__ltdf2>
    6884:	103fc30e 	bge	r2,zero,6794 <_dtoa_r+0x1064>
    6888:	d9000417 	ldw	r4,16(sp)
    688c:	d9000d15 	stw	r4,52(sp)
    6890:	003d7106 	br	5e58 <_dtoa_r+0x728>
    6894:	d9801717 	ldw	r6,92(sp)
    6898:	00800084 	movi	r2,2
    689c:	11bde60e 	bge	r2,r6,6038 <_dtoa_r+0x908>
    68a0:	203cfb1e 	bne	r4,zero,5c90 <_dtoa_r+0x560>
    68a4:	d9001617 	ldw	r4,88(sp)
    68a8:	900b883a 	mov	r5,r18
    68ac:	01800144 	movi	r6,5
    68b0:	000f883a 	mov	r7,zero
    68b4:	0008e380 	call	8e38 <__multadd>
    68b8:	d9000717 	ldw	r4,28(sp)
    68bc:	100b883a 	mov	r5,r2
    68c0:	1025883a 	mov	r18,r2
    68c4:	00082e00 	call	82e0 <__mcmp>
    68c8:	00bcf10e 	bge	zero,r2,5c90 <_dtoa_r+0x560>
    68cc:	d8c00d17 	ldw	r3,52(sp)
    68d0:	d9000517 	ldw	r4,20(sp)
    68d4:	d8000615 	stw	zero,24(sp)
    68d8:	18c00044 	addi	r3,r3,1
    68dc:	d8c00d15 	stw	r3,52(sp)
    68e0:	00800c44 	movi	r2,49
    68e4:	27000044 	addi	fp,r4,1
    68e8:	20800005 	stb	r2,0(r4)
    68ec:	003e8906 	br	6314 <_dtoa_r+0xbe4>
    68f0:	d8c00517 	ldw	r3,20(sp)
    68f4:	003bc206 	br	5800 <_dtoa_r+0xd0>
    68f8:	01800074 	movhi	r6,1
    68fc:	31bc5c04 	addi	r6,r6,-3728
    6900:	30c00917 	ldw	r3,36(r6)
    6904:	30800817 	ldw	r2,32(r6)
    6908:	d9001217 	ldw	r4,72(sp)
    690c:	d9401317 	ldw	r5,76(sp)
    6910:	180f883a 	mov	r7,r3
    6914:	100d883a 	mov	r6,r2
    6918:	000b2cc0 	call	b2cc <__divdf3>
    691c:	948003cc 	andi	r18,r18,15
    6920:	058000c4 	movi	r22,3
    6924:	1029883a 	mov	r20,r2
    6928:	182b883a 	mov	r21,r3
    692c:	003c8906 	br	5b54 <_dtoa_r+0x424>
    6930:	d9001017 	ldw	r4,64(sp)
    6934:	d9800917 	ldw	r6,36(sp)
    6938:	0025883a 	mov	r18,zero
    693c:	1105c83a 	sub	r2,r2,r4
    6940:	2089883a 	add	r4,r4,r2
    6944:	308d883a 	add	r6,r6,r2
    6948:	d9001015 	stw	r4,64(sp)
    694c:	d9800915 	stw	r6,36(sp)
    6950:	003e3206 	br	621c <_dtoa_r+0xaec>
    6954:	28800044 	addi	r2,r5,1
    6958:	27000044 	addi	fp,r4,1
    695c:	20800005 	stb	r2,0(r4)
    6960:	003e6c06 	br	6314 <_dtoa_r+0xbe4>
    6964:	d8800f17 	ldw	r2,60(sp)
    6968:	00bce016 	blt	zero,r2,5cec <_dtoa_r+0x5bc>
    696c:	d9800f17 	ldw	r6,60(sp)
    6970:	303cc51e 	bne	r6,zero,5c88 <_dtoa_r+0x558>
    6974:	0005883a 	mov	r2,zero
    6978:	00d00534 	movhi	r3,16404
    697c:	980b883a 	mov	r5,r19
    6980:	180f883a 	mov	r7,r3
    6984:	9009883a 	mov	r4,r18
    6988:	100d883a 	mov	r6,r2
    698c:	000af080 	call	af08 <__muldf3>
    6990:	180b883a 	mov	r5,r3
    6994:	a80f883a 	mov	r7,r21
    6998:	1009883a 	mov	r4,r2
    699c:	a00d883a 	mov	r6,r20
    69a0:	000b6bc0 	call	b6bc <__gedf2>
    69a4:	103cb80e 	bge	r2,zero,5c88 <_dtoa_r+0x558>
    69a8:	0027883a 	mov	r19,zero
    69ac:	0025883a 	mov	r18,zero
    69b0:	003fc606 	br	68cc <_dtoa_r+0x119c>
    69b4:	99400117 	ldw	r5,4(r19)
    69b8:	d9001617 	ldw	r4,88(sp)
    69bc:	00087040 	call	8704 <_Balloc>
    69c0:	99800417 	ldw	r6,16(r19)
    69c4:	11000304 	addi	r4,r2,12
    69c8:	99400304 	addi	r5,r19,12
    69cc:	318d883a 	add	r6,r6,r6
    69d0:	318d883a 	add	r6,r6,r6
    69d4:	31800204 	addi	r6,r6,8
    69d8:	1023883a 	mov	r17,r2
    69dc:	0007f6c0 	call	7f6c <memcpy>
    69e0:	d9001617 	ldw	r4,88(sp)
    69e4:	880b883a 	mov	r5,r17
    69e8:	01800044 	movi	r6,1
    69ec:	0008ac80 	call	8ac8 <__lshift>
    69f0:	100b883a 	mov	r5,r2
    69f4:	003d9c06 	br	6068 <_dtoa_r+0x938>
    69f8:	00800e44 	movi	r2,57
    69fc:	b8807026 	beq	r23,r2,6bc0 <_dtoa_r+0x1490>
    6a00:	b8800044 	addi	r2,r23,1
    6a04:	b7000044 	addi	fp,r22,1
    6a08:	b0800005 	stb	r2,0(r22)
    6a0c:	003e4106 	br	6314 <_dtoa_r+0xbe4>
    6a10:	d8800317 	ldw	r2,12(sp)
    6a14:	01800074 	movhi	r6,1
    6a18:	31bc2a04 	addi	r6,r6,-3928
    6a1c:	b009883a 	mov	r4,r22
    6a20:	100e90fa 	slli	r7,r2,3
    6a24:	b80b883a 	mov	r5,r23
    6a28:	398f883a 	add	r7,r7,r6
    6a2c:	38bffe17 	ldw	r2,-8(r7)
    6a30:	d9800517 	ldw	r6,20(sp)
    6a34:	38ffff17 	ldw	r3,-4(r7)
    6a38:	37000044 	addi	fp,r6,1
    6a3c:	180f883a 	mov	r7,r3
    6a40:	100d883a 	mov	r6,r2
    6a44:	000af080 	call	af08 <__muldf3>
    6a48:	a80b883a 	mov	r5,r21
    6a4c:	a009883a 	mov	r4,r20
    6a50:	182f883a 	mov	r23,r3
    6a54:	102d883a 	mov	r22,r2
    6a58:	000b8c40 	call	b8c4 <__fixdfsi>
    6a5c:	1009883a 	mov	r4,r2
    6a60:	1027883a 	mov	r19,r2
    6a64:	000b7cc0 	call	b7cc <__floatsidf>
    6a68:	a80b883a 	mov	r5,r21
    6a6c:	a009883a 	mov	r4,r20
    6a70:	180f883a 	mov	r7,r3
    6a74:	100d883a 	mov	r6,r2
    6a78:	000ae140 	call	ae14 <__subdf3>
    6a7c:	180b883a 	mov	r5,r3
    6a80:	d8c00517 	ldw	r3,20(sp)
    6a84:	9cc00c04 	addi	r19,r19,48
    6a88:	1009883a 	mov	r4,r2
    6a8c:	1cc00005 	stb	r19,0(r3)
    6a90:	2021883a 	mov	r16,r4
    6a94:	d9000317 	ldw	r4,12(sp)
    6a98:	00800044 	movi	r2,1
    6a9c:	2823883a 	mov	r17,r5
    6aa0:	20802226 	beq	r4,r2,6b2c <_dtoa_r+0x13fc>
    6aa4:	1029883a 	mov	r20,r2
    6aa8:	0005883a 	mov	r2,zero
    6aac:	00d00934 	movhi	r3,16420
    6ab0:	180f883a 	mov	r7,r3
    6ab4:	100d883a 	mov	r6,r2
    6ab8:	880b883a 	mov	r5,r17
    6abc:	8009883a 	mov	r4,r16
    6ac0:	000af080 	call	af08 <__muldf3>
    6ac4:	180b883a 	mov	r5,r3
    6ac8:	1009883a 	mov	r4,r2
    6acc:	1823883a 	mov	r17,r3
    6ad0:	1021883a 	mov	r16,r2
    6ad4:	000b8c40 	call	b8c4 <__fixdfsi>
    6ad8:	1009883a 	mov	r4,r2
    6adc:	102b883a 	mov	r21,r2
    6ae0:	000b7cc0 	call	b7cc <__floatsidf>
    6ae4:	880b883a 	mov	r5,r17
    6ae8:	8009883a 	mov	r4,r16
    6aec:	180f883a 	mov	r7,r3
    6af0:	100d883a 	mov	r6,r2
    6af4:	000ae140 	call	ae14 <__subdf3>
    6af8:	180b883a 	mov	r5,r3
    6afc:	d8c00517 	ldw	r3,20(sp)
    6b00:	1009883a 	mov	r4,r2
    6b04:	ad400c04 	addi	r21,r21,48
    6b08:	1d05883a 	add	r2,r3,r20
    6b0c:	15400005 	stb	r21,0(r2)
    6b10:	2021883a 	mov	r16,r4
    6b14:	d9000317 	ldw	r4,12(sp)
    6b18:	a5000044 	addi	r20,r20,1
    6b1c:	2823883a 	mov	r17,r5
    6b20:	a13fe11e 	bne	r20,r4,6aa8 <_dtoa_r+0x1378>
    6b24:	e505883a 	add	r2,fp,r20
    6b28:	173fffc4 	addi	fp,r2,-1
    6b2c:	0025883a 	mov	r18,zero
    6b30:	04cff834 	movhi	r19,16352
    6b34:	b009883a 	mov	r4,r22
    6b38:	b80b883a 	mov	r5,r23
    6b3c:	900d883a 	mov	r6,r18
    6b40:	980f883a 	mov	r7,r19
    6b44:	000ae940 	call	ae94 <__adddf3>
    6b48:	180b883a 	mov	r5,r3
    6b4c:	1009883a 	mov	r4,r2
    6b50:	800d883a 	mov	r6,r16
    6b54:	880f883a 	mov	r7,r17
    6b58:	000b7440 	call	b744 <__ltdf2>
    6b5c:	103cab16 	blt	r2,zero,5e0c <_dtoa_r+0x6dc>
    6b60:	0009883a 	mov	r4,zero
    6b64:	980b883a 	mov	r5,r19
    6b68:	b80f883a 	mov	r7,r23
    6b6c:	b00d883a 	mov	r6,r22
    6b70:	000ae140 	call	ae14 <__subdf3>
    6b74:	180b883a 	mov	r5,r3
    6b78:	880f883a 	mov	r7,r17
    6b7c:	1009883a 	mov	r4,r2
    6b80:	800d883a 	mov	r6,r16
    6b84:	000b6340 	call	b634 <__gtdf2>
    6b88:	00bc470e 	bge	zero,r2,5ca8 <_dtoa_r+0x578>
    6b8c:	00c00c04 	movi	r3,48
    6b90:	e73fffc4 	addi	fp,fp,-1
    6b94:	e0800007 	ldb	r2,0(fp)
    6b98:	10fffd26 	beq	r2,r3,6b90 <_dtoa_r+0x1460>
    6b9c:	d9800417 	ldw	r6,16(sp)
    6ba0:	e7000044 	addi	fp,fp,1
    6ba4:	d9800d15 	stw	r6,52(sp)
    6ba8:	003cab06 	br	5e58 <_dtoa_r+0x728>
    6bac:	d8c00f17 	ldw	r3,60(sp)
    6bb0:	d9001117 	ldw	r4,68(sp)
    6bb4:	20e1c83a 	sub	r16,r4,r3
    6bb8:	0007883a 	mov	r3,zero
    6bbc:	003d9b06 	br	622c <_dtoa_r+0xafc>
    6bc0:	00800e44 	movi	r2,57
    6bc4:	b0800005 	stb	r2,0(r22)
    6bc8:	b5800044 	addi	r22,r22,1
    6bcc:	003dc106 	br	62d4 <_dtoa_r+0xba4>
    6bd0:	05800084 	movi	r22,2
    6bd4:	003bf706 	br	5bb4 <_dtoa_r+0x484>
    6bd8:	d9000f17 	ldw	r4,60(sp)
    6bdc:	013c000e 	bge	zero,r4,5be0 <_dtoa_r+0x4b0>
    6be0:	d9800e17 	ldw	r6,56(sp)
    6be4:	01bc300e 	bge	zero,r6,5ca8 <_dtoa_r+0x578>
    6be8:	0005883a 	mov	r2,zero
    6bec:	00d00934 	movhi	r3,16420
    6bf0:	a80b883a 	mov	r5,r21
    6bf4:	180f883a 	mov	r7,r3
    6bf8:	a009883a 	mov	r4,r20
    6bfc:	100d883a 	mov	r6,r2
    6c00:	000af080 	call	af08 <__muldf3>
    6c04:	b1000044 	addi	r4,r22,1
    6c08:	1021883a 	mov	r16,r2
    6c0c:	1823883a 	mov	r17,r3
    6c10:	000b7cc0 	call	b7cc <__floatsidf>
    6c14:	880b883a 	mov	r5,r17
    6c18:	8009883a 	mov	r4,r16
    6c1c:	180f883a 	mov	r7,r3
    6c20:	100d883a 	mov	r6,r2
    6c24:	000af080 	call	af08 <__muldf3>
    6c28:	0011883a 	mov	r8,zero
    6c2c:	02500734 	movhi	r9,16412
    6c30:	180b883a 	mov	r5,r3
    6c34:	480f883a 	mov	r7,r9
    6c38:	1009883a 	mov	r4,r2
    6c3c:	400d883a 	mov	r6,r8
    6c40:	000ae940 	call	ae94 <__adddf3>
    6c44:	102d883a 	mov	r22,r2
    6c48:	00bf3034 	movhi	r2,64704
    6c4c:	10ef883a 	add	r23,r2,r3
    6c50:	d8800d17 	ldw	r2,52(sp)
    6c54:	d8c00e17 	ldw	r3,56(sp)
    6c58:	8029883a 	mov	r20,r16
    6c5c:	10bfffc4 	addi	r2,r2,-1
    6c60:	882b883a 	mov	r21,r17
    6c64:	d8800415 	stw	r2,16(sp)
    6c68:	d8c00315 	stw	r3,12(sp)
    6c6c:	003e8306 	br	667c <_dtoa_r+0xf4c>
    6c70:	d8800117 	ldw	r2,4(sp)
    6c74:	dc001117 	ldw	r16,68(sp)
    6c78:	dc801017 	ldw	r18,64(sp)
    6c7c:	00c00d84 	movi	r3,54
    6c80:	1887c83a 	sub	r3,r3,r2
    6c84:	003d6906 	br	622c <_dtoa_r+0xafc>
    6c88:	01800044 	movi	r6,1
    6c8c:	3021883a 	mov	r16,r6
    6c90:	d9800f15 	stw	r6,60(sp)
    6c94:	d9802615 	stw	r6,152(sp)
    6c98:	d9800e15 	stw	r6,56(sp)
    6c9c:	003b9306 	br	5aec <_dtoa_r+0x3bc>
    6ca0:	b021883a 	mov	r16,r22
    6ca4:	dd800f15 	stw	r22,60(sp)
    6ca8:	003b9006 	br	5aec <_dtoa_r+0x3bc>
    6cac:	103e221e 	bne	r2,zero,6538 <_dtoa_r+0xe08>
    6cb0:	b880004c 	andi	r2,r23,1
    6cb4:	1005003a 	cmpeq	r2,r2,zero
    6cb8:	103e1f1e 	bne	r2,zero,6538 <_dtoa_r+0xe08>
    6cbc:	003e1b06 	br	652c <_dtoa_r+0xdfc>
    6cc0:	d9001617 	ldw	r4,88(sp)
    6cc4:	980b883a 	mov	r5,r19
    6cc8:	01800284 	movi	r6,10
    6ccc:	000f883a 	mov	r7,zero
    6cd0:	0008e380 	call	8e38 <__multadd>
    6cd4:	d8c00e17 	ldw	r3,56(sp)
    6cd8:	1027883a 	mov	r19,r2
    6cdc:	d8c00f15 	stw	r3,60(sp)
    6ce0:	003cd306 	br	6030 <_dtoa_r+0x900>

00006ce4 <_fflush_r>:
    6ce4:	defffb04 	addi	sp,sp,-20
    6ce8:	dcc00315 	stw	r19,12(sp)
    6cec:	dc800215 	stw	r18,8(sp)
    6cf0:	dfc00415 	stw	ra,16(sp)
    6cf4:	dc400115 	stw	r17,4(sp)
    6cf8:	dc000015 	stw	r16,0(sp)
    6cfc:	2027883a 	mov	r19,r4
    6d00:	2825883a 	mov	r18,r5
    6d04:	20000226 	beq	r4,zero,6d10 <_fflush_r+0x2c>
    6d08:	20800e17 	ldw	r2,56(r4)
    6d0c:	10005626 	beq	r2,zero,6e68 <_fflush_r+0x184>
    6d10:	9100030b 	ldhu	r4,12(r18)
    6d14:	20ffffcc 	andi	r3,r4,65535
    6d18:	18e0001c 	xori	r3,r3,32768
    6d1c:	18e00004 	addi	r3,r3,-32768
    6d20:	1880020c 	andi	r2,r3,8
    6d24:	1000261e 	bne	r2,zero,6dc0 <_fflush_r+0xdc>
    6d28:	90c00117 	ldw	r3,4(r18)
    6d2c:	20820014 	ori	r2,r4,2048
    6d30:	9080030d 	sth	r2,12(r18)
    6d34:	1009883a 	mov	r4,r2
    6d38:	00c0400e 	bge	zero,r3,6e3c <_fflush_r+0x158>
    6d3c:	92000a17 	ldw	r8,40(r18)
    6d40:	40004026 	beq	r8,zero,6e44 <_fflush_r+0x160>
    6d44:	2084000c 	andi	r2,r4,4096
    6d48:	10005326 	beq	r2,zero,6e98 <_fflush_r+0x1b4>
    6d4c:	94001417 	ldw	r16,80(r18)
    6d50:	9080030b 	ldhu	r2,12(r18)
    6d54:	1080010c 	andi	r2,r2,4
    6d58:	1000481e 	bne	r2,zero,6e7c <_fflush_r+0x198>
    6d5c:	91400717 	ldw	r5,28(r18)
    6d60:	9809883a 	mov	r4,r19
    6d64:	800d883a 	mov	r6,r16
    6d68:	000f883a 	mov	r7,zero
    6d6c:	403ee83a 	callr	r8
    6d70:	8080261e 	bne	r16,r2,6e0c <_fflush_r+0x128>
    6d74:	9080030b 	ldhu	r2,12(r18)
    6d78:	91000417 	ldw	r4,16(r18)
    6d7c:	90000115 	stw	zero,4(r18)
    6d80:	10bdffcc 	andi	r2,r2,63487
    6d84:	10ffffcc 	andi	r3,r2,65535
    6d88:	18c4000c 	andi	r3,r3,4096
    6d8c:	9080030d 	sth	r2,12(r18)
    6d90:	91000015 	stw	r4,0(r18)
    6d94:	18002b26 	beq	r3,zero,6e44 <_fflush_r+0x160>
    6d98:	0007883a 	mov	r3,zero
    6d9c:	1805883a 	mov	r2,r3
    6da0:	94001415 	stw	r16,80(r18)
    6da4:	dfc00417 	ldw	ra,16(sp)
    6da8:	dcc00317 	ldw	r19,12(sp)
    6dac:	dc800217 	ldw	r18,8(sp)
    6db0:	dc400117 	ldw	r17,4(sp)
    6db4:	dc000017 	ldw	r16,0(sp)
    6db8:	dec00504 	addi	sp,sp,20
    6dbc:	f800283a 	ret
    6dc0:	94400417 	ldw	r17,16(r18)
    6dc4:	88001f26 	beq	r17,zero,6e44 <_fflush_r+0x160>
    6dc8:	90800017 	ldw	r2,0(r18)
    6dcc:	18c000cc 	andi	r3,r3,3
    6dd0:	94400015 	stw	r17,0(r18)
    6dd4:	1461c83a 	sub	r16,r2,r17
    6dd8:	18002526 	beq	r3,zero,6e70 <_fflush_r+0x18c>
    6ddc:	0005883a 	mov	r2,zero
    6de0:	90800215 	stw	r2,8(r18)
    6de4:	0400170e 	bge	zero,r16,6e44 <_fflush_r+0x160>
    6de8:	90c00917 	ldw	r3,36(r18)
    6dec:	91400717 	ldw	r5,28(r18)
    6df0:	880d883a 	mov	r6,r17
    6df4:	800f883a 	mov	r7,r16
    6df8:	9809883a 	mov	r4,r19
    6dfc:	183ee83a 	callr	r3
    6e00:	88a3883a 	add	r17,r17,r2
    6e04:	80a1c83a 	sub	r16,r16,r2
    6e08:	00bff616 	blt	zero,r2,6de4 <_fflush_r+0x100>
    6e0c:	9080030b 	ldhu	r2,12(r18)
    6e10:	00ffffc4 	movi	r3,-1
    6e14:	10801014 	ori	r2,r2,64
    6e18:	9080030d 	sth	r2,12(r18)
    6e1c:	1805883a 	mov	r2,r3
    6e20:	dfc00417 	ldw	ra,16(sp)
    6e24:	dcc00317 	ldw	r19,12(sp)
    6e28:	dc800217 	ldw	r18,8(sp)
    6e2c:	dc400117 	ldw	r17,4(sp)
    6e30:	dc000017 	ldw	r16,0(sp)
    6e34:	dec00504 	addi	sp,sp,20
    6e38:	f800283a 	ret
    6e3c:	90800f17 	ldw	r2,60(r18)
    6e40:	00bfbe16 	blt	zero,r2,6d3c <_fflush_r+0x58>
    6e44:	0007883a 	mov	r3,zero
    6e48:	1805883a 	mov	r2,r3
    6e4c:	dfc00417 	ldw	ra,16(sp)
    6e50:	dcc00317 	ldw	r19,12(sp)
    6e54:	dc800217 	ldw	r18,8(sp)
    6e58:	dc400117 	ldw	r17,4(sp)
    6e5c:	dc000017 	ldw	r16,0(sp)
    6e60:	dec00504 	addi	sp,sp,20
    6e64:	f800283a 	ret
    6e68:	0006f7c0 	call	6f7c <__sinit>
    6e6c:	003fa806 	br	6d10 <_fflush_r+0x2c>
    6e70:	90800517 	ldw	r2,20(r18)
    6e74:	90800215 	stw	r2,8(r18)
    6e78:	003fda06 	br	6de4 <_fflush_r+0x100>
    6e7c:	90800117 	ldw	r2,4(r18)
    6e80:	90c00c17 	ldw	r3,48(r18)
    6e84:	80a1c83a 	sub	r16,r16,r2
    6e88:	183fb426 	beq	r3,zero,6d5c <_fflush_r+0x78>
    6e8c:	90800f17 	ldw	r2,60(r18)
    6e90:	80a1c83a 	sub	r16,r16,r2
    6e94:	003fb106 	br	6d5c <_fflush_r+0x78>
    6e98:	91400717 	ldw	r5,28(r18)
    6e9c:	9809883a 	mov	r4,r19
    6ea0:	000d883a 	mov	r6,zero
    6ea4:	01c00044 	movi	r7,1
    6ea8:	403ee83a 	callr	r8
    6eac:	1021883a 	mov	r16,r2
    6eb0:	00bfffc4 	movi	r2,-1
    6eb4:	80800226 	beq	r16,r2,6ec0 <_fflush_r+0x1dc>
    6eb8:	92000a17 	ldw	r8,40(r18)
    6ebc:	003fa406 	br	6d50 <_fflush_r+0x6c>
    6ec0:	98c00017 	ldw	r3,0(r19)
    6ec4:	00800744 	movi	r2,29
    6ec8:	18bfde26 	beq	r3,r2,6e44 <_fflush_r+0x160>
    6ecc:	9080030b 	ldhu	r2,12(r18)
    6ed0:	8007883a 	mov	r3,r16
    6ed4:	10801014 	ori	r2,r2,64
    6ed8:	9080030d 	sth	r2,12(r18)
    6edc:	003fcf06 	br	6e1c <_fflush_r+0x138>

00006ee0 <fflush>:
    6ee0:	01400034 	movhi	r5,0
    6ee4:	295b3904 	addi	r5,r5,27876
    6ee8:	2007883a 	mov	r3,r4
    6eec:	20000526 	beq	r4,zero,6f04 <fflush+0x24>
    6ef0:	00800074 	movhi	r2,1
    6ef4:	10835c04 	addi	r2,r2,3440
    6ef8:	11000017 	ldw	r4,0(r2)
    6efc:	180b883a 	mov	r5,r3
    6f00:	0006ce41 	jmpi	6ce4 <_fflush_r>
    6f04:	00800074 	movhi	r2,1
    6f08:	10835d04 	addi	r2,r2,3444
    6f0c:	11000017 	ldw	r4,0(r2)
    6f10:	0007ab01 	jmpi	7ab0 <_fwalk_reent>

00006f14 <std>:
    6f14:	00800074 	movhi	r2,1
    6f18:	10a5f704 	addi	r2,r2,-26660
    6f1c:	20800b15 	stw	r2,44(r4)
    6f20:	00800074 	movhi	r2,1
    6f24:	10a63204 	addi	r2,r2,-26424
    6f28:	20800815 	stw	r2,32(r4)
    6f2c:	00c00074 	movhi	r3,1
    6f30:	18e61304 	addi	r3,r3,-26548
    6f34:	00800074 	movhi	r2,1
    6f38:	10a5f904 	addi	r2,r2,-26652
    6f3c:	2140030d 	sth	r5,12(r4)
    6f40:	2180038d 	sth	r6,14(r4)
    6f44:	20c00915 	stw	r3,36(r4)
    6f48:	20800a15 	stw	r2,40(r4)
    6f4c:	20000015 	stw	zero,0(r4)
    6f50:	20000115 	stw	zero,4(r4)
    6f54:	20000215 	stw	zero,8(r4)
    6f58:	20000415 	stw	zero,16(r4)
    6f5c:	20000515 	stw	zero,20(r4)
    6f60:	20000615 	stw	zero,24(r4)
    6f64:	21000715 	stw	r4,28(r4)
    6f68:	f800283a 	ret

00006f6c <__sfp_lock_acquire>:
    6f6c:	f800283a 	ret

00006f70 <__sfp_lock_release>:
    6f70:	f800283a 	ret

00006f74 <__sinit_lock_acquire>:
    6f74:	f800283a 	ret

00006f78 <__sinit_lock_release>:
    6f78:	f800283a 	ret

00006f7c <__sinit>:
    6f7c:	20800e17 	ldw	r2,56(r4)
    6f80:	defffd04 	addi	sp,sp,-12
    6f84:	dc400115 	stw	r17,4(sp)
    6f88:	dc000015 	stw	r16,0(sp)
    6f8c:	dfc00215 	stw	ra,8(sp)
    6f90:	04400044 	movi	r17,1
    6f94:	01400104 	movi	r5,4
    6f98:	000d883a 	mov	r6,zero
    6f9c:	2021883a 	mov	r16,r4
    6fa0:	2200bb04 	addi	r8,r4,748
    6fa4:	200f883a 	mov	r7,r4
    6fa8:	10000526 	beq	r2,zero,6fc0 <__sinit+0x44>
    6fac:	dfc00217 	ldw	ra,8(sp)
    6fb0:	dc400117 	ldw	r17,4(sp)
    6fb4:	dc000017 	ldw	r16,0(sp)
    6fb8:	dec00304 	addi	sp,sp,12
    6fbc:	f800283a 	ret
    6fc0:	21000117 	ldw	r4,4(r4)
    6fc4:	00800034 	movhi	r2,0
    6fc8:	109c1804 	addi	r2,r2,28768
    6fcc:	00c000c4 	movi	r3,3
    6fd0:	80800f15 	stw	r2,60(r16)
    6fd4:	80c0b915 	stw	r3,740(r16)
    6fd8:	8200ba15 	stw	r8,744(r16)
    6fdc:	84400e15 	stw	r17,56(r16)
    6fe0:	8000b815 	stw	zero,736(r16)
    6fe4:	0006f140 	call	6f14 <std>
    6fe8:	81000217 	ldw	r4,8(r16)
    6fec:	880d883a 	mov	r6,r17
    6ff0:	800f883a 	mov	r7,r16
    6ff4:	01400284 	movi	r5,10
    6ff8:	0006f140 	call	6f14 <std>
    6ffc:	81000317 	ldw	r4,12(r16)
    7000:	800f883a 	mov	r7,r16
    7004:	01400484 	movi	r5,18
    7008:	01800084 	movi	r6,2
    700c:	dfc00217 	ldw	ra,8(sp)
    7010:	dc400117 	ldw	r17,4(sp)
    7014:	dc000017 	ldw	r16,0(sp)
    7018:	dec00304 	addi	sp,sp,12
    701c:	0006f141 	jmpi	6f14 <std>

00007020 <__fp_lock>:
    7020:	0005883a 	mov	r2,zero
    7024:	f800283a 	ret

00007028 <__fp_unlock>:
    7028:	0005883a 	mov	r2,zero
    702c:	f800283a 	ret

00007030 <__fp_unlock_all>:
    7030:	00800074 	movhi	r2,1
    7034:	10835c04 	addi	r2,r2,3440
    7038:	11000017 	ldw	r4,0(r2)
    703c:	01400034 	movhi	r5,0
    7040:	295c0a04 	addi	r5,r5,28712
    7044:	0007b781 	jmpi	7b78 <_fwalk>

00007048 <__fp_lock_all>:
    7048:	00800074 	movhi	r2,1
    704c:	10835c04 	addi	r2,r2,3440
    7050:	11000017 	ldw	r4,0(r2)
    7054:	01400034 	movhi	r5,0
    7058:	295c0804 	addi	r5,r5,28704
    705c:	0007b781 	jmpi	7b78 <_fwalk>

00007060 <_cleanup_r>:
    7060:	01400074 	movhi	r5,1
    7064:	29672404 	addi	r5,r5,-25456
    7068:	0007b781 	jmpi	7b78 <_fwalk>

0000706c <_cleanup>:
    706c:	00800074 	movhi	r2,1
    7070:	10835d04 	addi	r2,r2,3444
    7074:	11000017 	ldw	r4,0(r2)
    7078:	00070601 	jmpi	7060 <_cleanup_r>

0000707c <__sfmoreglue>:
    707c:	defffc04 	addi	sp,sp,-16
    7080:	dc400115 	stw	r17,4(sp)
    7084:	2c401724 	muli	r17,r5,92
    7088:	dc800215 	stw	r18,8(sp)
    708c:	2825883a 	mov	r18,r5
    7090:	89400304 	addi	r5,r17,12
    7094:	dc000015 	stw	r16,0(sp)
    7098:	dfc00315 	stw	ra,12(sp)
    709c:	00029b00 	call	29b0 <_malloc_r>
    70a0:	0021883a 	mov	r16,zero
    70a4:	880d883a 	mov	r6,r17
    70a8:	000b883a 	mov	r5,zero
    70ac:	10000626 	beq	r2,zero,70c8 <__sfmoreglue+0x4c>
    70b0:	11000304 	addi	r4,r2,12
    70b4:	14800115 	stw	r18,4(r2)
    70b8:	10000015 	stw	zero,0(r2)
    70bc:	11000215 	stw	r4,8(r2)
    70c0:	1021883a 	mov	r16,r2
    70c4:	00080ec0 	call	80ec <memset>
    70c8:	8005883a 	mov	r2,r16
    70cc:	dfc00317 	ldw	ra,12(sp)
    70d0:	dc800217 	ldw	r18,8(sp)
    70d4:	dc400117 	ldw	r17,4(sp)
    70d8:	dc000017 	ldw	r16,0(sp)
    70dc:	dec00404 	addi	sp,sp,16
    70e0:	f800283a 	ret

000070e4 <__sfp>:
    70e4:	defffd04 	addi	sp,sp,-12
    70e8:	00800074 	movhi	r2,1
    70ec:	10835d04 	addi	r2,r2,3444
    70f0:	dc000015 	stw	r16,0(sp)
    70f4:	14000017 	ldw	r16,0(r2)
    70f8:	dc400115 	stw	r17,4(sp)
    70fc:	dfc00215 	stw	ra,8(sp)
    7100:	80800e17 	ldw	r2,56(r16)
    7104:	2023883a 	mov	r17,r4
    7108:	10002626 	beq	r2,zero,71a4 <__sfp+0xc0>
    710c:	8400b804 	addi	r16,r16,736
    7110:	80800117 	ldw	r2,4(r16)
    7114:	81000217 	ldw	r4,8(r16)
    7118:	10ffffc4 	addi	r3,r2,-1
    711c:	18000916 	blt	r3,zero,7144 <__sfp+0x60>
    7120:	2080030f 	ldh	r2,12(r4)
    7124:	10000b26 	beq	r2,zero,7154 <__sfp+0x70>
    7128:	017fffc4 	movi	r5,-1
    712c:	00000206 	br	7138 <__sfp+0x54>
    7130:	2080030f 	ldh	r2,12(r4)
    7134:	10000726 	beq	r2,zero,7154 <__sfp+0x70>
    7138:	18ffffc4 	addi	r3,r3,-1
    713c:	21001704 	addi	r4,r4,92
    7140:	197ffb1e 	bne	r3,r5,7130 <__sfp+0x4c>
    7144:	80800017 	ldw	r2,0(r16)
    7148:	10001926 	beq	r2,zero,71b0 <__sfp+0xcc>
    714c:	1021883a 	mov	r16,r2
    7150:	003fef06 	br	7110 <__sfp+0x2c>
    7154:	00bfffc4 	movi	r2,-1
    7158:	00c00044 	movi	r3,1
    715c:	2080038d 	sth	r2,14(r4)
    7160:	20c0030d 	sth	r3,12(r4)
    7164:	20000015 	stw	zero,0(r4)
    7168:	20000215 	stw	zero,8(r4)
    716c:	20000115 	stw	zero,4(r4)
    7170:	20000415 	stw	zero,16(r4)
    7174:	20000515 	stw	zero,20(r4)
    7178:	20000615 	stw	zero,24(r4)
    717c:	20000c15 	stw	zero,48(r4)
    7180:	20000d15 	stw	zero,52(r4)
    7184:	20001115 	stw	zero,68(r4)
    7188:	20001215 	stw	zero,72(r4)
    718c:	2005883a 	mov	r2,r4
    7190:	dfc00217 	ldw	ra,8(sp)
    7194:	dc400117 	ldw	r17,4(sp)
    7198:	dc000017 	ldw	r16,0(sp)
    719c:	dec00304 	addi	sp,sp,12
    71a0:	f800283a 	ret
    71a4:	8009883a 	mov	r4,r16
    71a8:	0006f7c0 	call	6f7c <__sinit>
    71ac:	003fd706 	br	710c <__sfp+0x28>
    71b0:	8809883a 	mov	r4,r17
    71b4:	01400104 	movi	r5,4
    71b8:	000707c0 	call	707c <__sfmoreglue>
    71bc:	80800015 	stw	r2,0(r16)
    71c0:	103fe21e 	bne	r2,zero,714c <__sfp+0x68>
    71c4:	00800304 	movi	r2,12
    71c8:	0009883a 	mov	r4,zero
    71cc:	88800015 	stw	r2,0(r17)
    71d0:	003fee06 	br	718c <__sfp+0xa8>

000071d4 <_malloc_trim_r>:
    71d4:	defffb04 	addi	sp,sp,-20
    71d8:	dcc00315 	stw	r19,12(sp)
    71dc:	04c00074 	movhi	r19,1
    71e0:	9cfdd304 	addi	r19,r19,-2228
    71e4:	dc800215 	stw	r18,8(sp)
    71e8:	dc400115 	stw	r17,4(sp)
    71ec:	dc000015 	stw	r16,0(sp)
    71f0:	2823883a 	mov	r17,r5
    71f4:	2025883a 	mov	r18,r4
    71f8:	dfc00415 	stw	ra,16(sp)
    71fc:	000ca000 	call	ca00 <__malloc_lock>
    7200:	98800217 	ldw	r2,8(r19)
    7204:	9009883a 	mov	r4,r18
    7208:	000b883a 	mov	r5,zero
    720c:	10c00117 	ldw	r3,4(r2)
    7210:	00bfff04 	movi	r2,-4
    7214:	18a0703a 	and	r16,r3,r2
    7218:	8463c83a 	sub	r17,r16,r17
    721c:	8c43fbc4 	addi	r17,r17,4079
    7220:	8822d33a 	srli	r17,r17,12
    7224:	0083ffc4 	movi	r2,4095
    7228:	8c7fffc4 	addi	r17,r17,-1
    722c:	8822933a 	slli	r17,r17,12
    7230:	1440060e 	bge	r2,r17,724c <_malloc_trim_r+0x78>
    7234:	000321c0 	call	321c <_sbrk_r>
    7238:	98c00217 	ldw	r3,8(r19)
    723c:	9009883a 	mov	r4,r18
    7240:	044bc83a 	sub	r5,zero,r17
    7244:	80c7883a 	add	r3,r16,r3
    7248:	10c00926 	beq	r2,r3,7270 <_malloc_trim_r+0x9c>
    724c:	000ca200 	call	ca20 <__malloc_unlock>
    7250:	0005883a 	mov	r2,zero
    7254:	dfc00417 	ldw	ra,16(sp)
    7258:	dcc00317 	ldw	r19,12(sp)
    725c:	dc800217 	ldw	r18,8(sp)
    7260:	dc400117 	ldw	r17,4(sp)
    7264:	dc000017 	ldw	r16,0(sp)
    7268:	dec00504 	addi	sp,sp,20
    726c:	f800283a 	ret
    7270:	9009883a 	mov	r4,r18
    7274:	000321c0 	call	321c <_sbrk_r>
    7278:	844dc83a 	sub	r6,r16,r17
    727c:	00ffffc4 	movi	r3,-1
    7280:	9009883a 	mov	r4,r18
    7284:	000b883a 	mov	r5,zero
    7288:	01c00074 	movhi	r7,1
    728c:	39ca3604 	addi	r7,r7,10456
    7290:	31800054 	ori	r6,r6,1
    7294:	10c00926 	beq	r2,r3,72bc <_malloc_trim_r+0xe8>
    7298:	38800017 	ldw	r2,0(r7)
    729c:	98c00217 	ldw	r3,8(r19)
    72a0:	9009883a 	mov	r4,r18
    72a4:	1445c83a 	sub	r2,r2,r17
    72a8:	38800015 	stw	r2,0(r7)
    72ac:	19800115 	stw	r6,4(r3)
    72b0:	000ca200 	call	ca20 <__malloc_unlock>
    72b4:	00800044 	movi	r2,1
    72b8:	003fe606 	br	7254 <_malloc_trim_r+0x80>
    72bc:	000321c0 	call	321c <_sbrk_r>
    72c0:	99800217 	ldw	r6,8(r19)
    72c4:	100f883a 	mov	r7,r2
    72c8:	9009883a 	mov	r4,r18
    72cc:	1187c83a 	sub	r3,r2,r6
    72d0:	008003c4 	movi	r2,15
    72d4:	19400054 	ori	r5,r3,1
    72d8:	10ffdc0e 	bge	r2,r3,724c <_malloc_trim_r+0x78>
    72dc:	00800074 	movhi	r2,1
    72e0:	10835f04 	addi	r2,r2,3452
    72e4:	10c00017 	ldw	r3,0(r2)
    72e8:	00800074 	movhi	r2,1
    72ec:	108a3604 	addi	r2,r2,10456
    72f0:	31400115 	stw	r5,4(r6)
    72f4:	38c7c83a 	sub	r3,r7,r3
    72f8:	10c00015 	stw	r3,0(r2)
    72fc:	003fd306 	br	724c <_malloc_trim_r+0x78>

00007300 <_free_r>:
    7300:	defffd04 	addi	sp,sp,-12
    7304:	dc400115 	stw	r17,4(sp)
    7308:	dc000015 	stw	r16,0(sp)
    730c:	dfc00215 	stw	ra,8(sp)
    7310:	2821883a 	mov	r16,r5
    7314:	2023883a 	mov	r17,r4
    7318:	28005a26 	beq	r5,zero,7484 <_free_r+0x184>
    731c:	000ca000 	call	ca00 <__malloc_lock>
    7320:	823ffe04 	addi	r8,r16,-8
    7324:	41400117 	ldw	r5,4(r8)
    7328:	00bfff84 	movi	r2,-2
    732c:	02800074 	movhi	r10,1
    7330:	52bdd304 	addi	r10,r10,-2228
    7334:	288e703a 	and	r7,r5,r2
    7338:	41cd883a 	add	r6,r8,r7
    733c:	30c00117 	ldw	r3,4(r6)
    7340:	51000217 	ldw	r4,8(r10)
    7344:	00bfff04 	movi	r2,-4
    7348:	1892703a 	and	r9,r3,r2
    734c:	5017883a 	mov	r11,r10
    7350:	31006726 	beq	r6,r4,74f0 <_free_r+0x1f0>
    7354:	2880004c 	andi	r2,r5,1
    7358:	1005003a 	cmpeq	r2,r2,zero
    735c:	32400115 	stw	r9,4(r6)
    7360:	10001a1e 	bne	r2,zero,73cc <_free_r+0xcc>
    7364:	000b883a 	mov	r5,zero
    7368:	3247883a 	add	r3,r6,r9
    736c:	18800117 	ldw	r2,4(r3)
    7370:	1080004c 	andi	r2,r2,1
    7374:	1000231e 	bne	r2,zero,7404 <_free_r+0x104>
    7378:	280ac03a 	cmpne	r5,r5,zero
    737c:	3a4f883a 	add	r7,r7,r9
    7380:	2800451e 	bne	r5,zero,7498 <_free_r+0x198>
    7384:	31000217 	ldw	r4,8(r6)
    7388:	00800074 	movhi	r2,1
    738c:	10bdd504 	addi	r2,r2,-2220
    7390:	20807b26 	beq	r4,r2,7580 <_free_r+0x280>
    7394:	30800317 	ldw	r2,12(r6)
    7398:	3a07883a 	add	r3,r7,r8
    739c:	19c00015 	stw	r7,0(r3)
    73a0:	11000215 	stw	r4,8(r2)
    73a4:	20800315 	stw	r2,12(r4)
    73a8:	38800054 	ori	r2,r7,1
    73ac:	40800115 	stw	r2,4(r8)
    73b0:	28001a26 	beq	r5,zero,741c <_free_r+0x11c>
    73b4:	8809883a 	mov	r4,r17
    73b8:	dfc00217 	ldw	ra,8(sp)
    73bc:	dc400117 	ldw	r17,4(sp)
    73c0:	dc000017 	ldw	r16,0(sp)
    73c4:	dec00304 	addi	sp,sp,12
    73c8:	000ca201 	jmpi	ca20 <__malloc_unlock>
    73cc:	80bffe17 	ldw	r2,-8(r16)
    73d0:	50c00204 	addi	r3,r10,8
    73d4:	4091c83a 	sub	r8,r8,r2
    73d8:	41000217 	ldw	r4,8(r8)
    73dc:	388f883a 	add	r7,r7,r2
    73e0:	20c06126 	beq	r4,r3,7568 <_free_r+0x268>
    73e4:	40800317 	ldw	r2,12(r8)
    73e8:	3247883a 	add	r3,r6,r9
    73ec:	000b883a 	mov	r5,zero
    73f0:	11000215 	stw	r4,8(r2)
    73f4:	20800315 	stw	r2,12(r4)
    73f8:	18800117 	ldw	r2,4(r3)
    73fc:	1080004c 	andi	r2,r2,1
    7400:	103fdd26 	beq	r2,zero,7378 <_free_r+0x78>
    7404:	38800054 	ori	r2,r7,1
    7408:	3a07883a 	add	r3,r7,r8
    740c:	280ac03a 	cmpne	r5,r5,zero
    7410:	40800115 	stw	r2,4(r8)
    7414:	19c00015 	stw	r7,0(r3)
    7418:	283fe61e 	bne	r5,zero,73b4 <_free_r+0xb4>
    741c:	00807fc4 	movi	r2,511
    7420:	11c01f2e 	bgeu	r2,r7,74a0 <_free_r+0x1a0>
    7424:	3806d27a 	srli	r3,r7,9
    7428:	1800481e 	bne	r3,zero,754c <_free_r+0x24c>
    742c:	3804d0fa 	srli	r2,r7,3
    7430:	100690fa 	slli	r3,r2,3
    7434:	1acd883a 	add	r6,r3,r11
    7438:	31400217 	ldw	r5,8(r6)
    743c:	31405926 	beq	r6,r5,75a4 <_free_r+0x2a4>
    7440:	28800117 	ldw	r2,4(r5)
    7444:	00ffff04 	movi	r3,-4
    7448:	10c4703a 	and	r2,r2,r3
    744c:	3880022e 	bgeu	r7,r2,7458 <_free_r+0x158>
    7450:	29400217 	ldw	r5,8(r5)
    7454:	317ffa1e 	bne	r6,r5,7440 <_free_r+0x140>
    7458:	29800317 	ldw	r6,12(r5)
    745c:	41800315 	stw	r6,12(r8)
    7460:	41400215 	stw	r5,8(r8)
    7464:	8809883a 	mov	r4,r17
    7468:	2a000315 	stw	r8,12(r5)
    746c:	32000215 	stw	r8,8(r6)
    7470:	dfc00217 	ldw	ra,8(sp)
    7474:	dc400117 	ldw	r17,4(sp)
    7478:	dc000017 	ldw	r16,0(sp)
    747c:	dec00304 	addi	sp,sp,12
    7480:	000ca201 	jmpi	ca20 <__malloc_unlock>
    7484:	dfc00217 	ldw	ra,8(sp)
    7488:	dc400117 	ldw	r17,4(sp)
    748c:	dc000017 	ldw	r16,0(sp)
    7490:	dec00304 	addi	sp,sp,12
    7494:	f800283a 	ret
    7498:	31000217 	ldw	r4,8(r6)
    749c:	003fbd06 	br	7394 <_free_r+0x94>
    74a0:	3806d0fa 	srli	r3,r7,3
    74a4:	00800044 	movi	r2,1
    74a8:	51400117 	ldw	r5,4(r10)
    74ac:	180890fa 	slli	r4,r3,3
    74b0:	1807d0ba 	srai	r3,r3,2
    74b4:	22c9883a 	add	r4,r4,r11
    74b8:	21800217 	ldw	r6,8(r4)
    74bc:	10c4983a 	sll	r2,r2,r3
    74c0:	41000315 	stw	r4,12(r8)
    74c4:	41800215 	stw	r6,8(r8)
    74c8:	288ab03a 	or	r5,r5,r2
    74cc:	22000215 	stw	r8,8(r4)
    74d0:	8809883a 	mov	r4,r17
    74d4:	51400115 	stw	r5,4(r10)
    74d8:	32000315 	stw	r8,12(r6)
    74dc:	dfc00217 	ldw	ra,8(sp)
    74e0:	dc400117 	ldw	r17,4(sp)
    74e4:	dc000017 	ldw	r16,0(sp)
    74e8:	dec00304 	addi	sp,sp,12
    74ec:	000ca201 	jmpi	ca20 <__malloc_unlock>
    74f0:	2880004c 	andi	r2,r5,1
    74f4:	3a4d883a 	add	r6,r7,r9
    74f8:	1000071e 	bne	r2,zero,7518 <_free_r+0x218>
    74fc:	80bffe17 	ldw	r2,-8(r16)
    7500:	4091c83a 	sub	r8,r8,r2
    7504:	41000317 	ldw	r4,12(r8)
    7508:	40c00217 	ldw	r3,8(r8)
    750c:	308d883a 	add	r6,r6,r2
    7510:	20c00215 	stw	r3,8(r4)
    7514:	19000315 	stw	r4,12(r3)
    7518:	00800074 	movhi	r2,1
    751c:	10835e04 	addi	r2,r2,3448
    7520:	11000017 	ldw	r4,0(r2)
    7524:	30c00054 	ori	r3,r6,1
    7528:	52000215 	stw	r8,8(r10)
    752c:	40c00115 	stw	r3,4(r8)
    7530:	313fa036 	bltu	r6,r4,73b4 <_free_r+0xb4>
    7534:	00800074 	movhi	r2,1
    7538:	108a1f04 	addi	r2,r2,10364
    753c:	11400017 	ldw	r5,0(r2)
    7540:	8809883a 	mov	r4,r17
    7544:	00071d40 	call	71d4 <_malloc_trim_r>
    7548:	003f9a06 	br	73b4 <_free_r+0xb4>
    754c:	00800104 	movi	r2,4
    7550:	10c0072e 	bgeu	r2,r3,7570 <_free_r+0x270>
    7554:	00800504 	movi	r2,20
    7558:	10c01936 	bltu	r2,r3,75c0 <_free_r+0x2c0>
    755c:	188016c4 	addi	r2,r3,91
    7560:	100690fa 	slli	r3,r2,3
    7564:	003fb306 	br	7434 <_free_r+0x134>
    7568:	01400044 	movi	r5,1
    756c:	003f7e06 	br	7368 <_free_r+0x68>
    7570:	3804d1ba 	srli	r2,r7,6
    7574:	10800e04 	addi	r2,r2,56
    7578:	100690fa 	slli	r3,r2,3
    757c:	003fad06 	br	7434 <_free_r+0x134>
    7580:	22000315 	stw	r8,12(r4)
    7584:	22000215 	stw	r8,8(r4)
    7588:	3a05883a 	add	r2,r7,r8
    758c:	38c00054 	ori	r3,r7,1
    7590:	11c00015 	stw	r7,0(r2)
    7594:	41000215 	stw	r4,8(r8)
    7598:	40c00115 	stw	r3,4(r8)
    759c:	41000315 	stw	r4,12(r8)
    75a0:	003f8406 	br	73b4 <_free_r+0xb4>
    75a4:	1005d0ba 	srai	r2,r2,2
    75a8:	00c00044 	movi	r3,1
    75ac:	51000117 	ldw	r4,4(r10)
    75b0:	1886983a 	sll	r3,r3,r2
    75b4:	20c8b03a 	or	r4,r4,r3
    75b8:	51000115 	stw	r4,4(r10)
    75bc:	003fa706 	br	745c <_free_r+0x15c>
    75c0:	00801504 	movi	r2,84
    75c4:	10c00436 	bltu	r2,r3,75d8 <_free_r+0x2d8>
    75c8:	3804d33a 	srli	r2,r7,12
    75cc:	10801b84 	addi	r2,r2,110
    75d0:	100690fa 	slli	r3,r2,3
    75d4:	003f9706 	br	7434 <_free_r+0x134>
    75d8:	00805504 	movi	r2,340
    75dc:	10c00436 	bltu	r2,r3,75f0 <_free_r+0x2f0>
    75e0:	3804d3fa 	srli	r2,r7,15
    75e4:	10801dc4 	addi	r2,r2,119
    75e8:	100690fa 	slli	r3,r2,3
    75ec:	003f9106 	br	7434 <_free_r+0x134>
    75f0:	00815504 	movi	r2,1364
    75f4:	10c0032e 	bgeu	r2,r3,7604 <_free_r+0x304>
    75f8:	00801f84 	movi	r2,126
    75fc:	00c0fc04 	movi	r3,1008
    7600:	003f8c06 	br	7434 <_free_r+0x134>
    7604:	3804d4ba 	srli	r2,r7,18
    7608:	10801f04 	addi	r2,r2,124
    760c:	100690fa 	slli	r3,r2,3
    7610:	003f8806 	br	7434 <_free_r+0x134>

00007614 <__sfvwrite_r>:
    7614:	30800217 	ldw	r2,8(r6)
    7618:	defff504 	addi	sp,sp,-44
    761c:	df000915 	stw	fp,36(sp)
    7620:	dd800715 	stw	r22,28(sp)
    7624:	dc800315 	stw	r18,12(sp)
    7628:	dfc00a15 	stw	ra,40(sp)
    762c:	ddc00815 	stw	r23,32(sp)
    7630:	dd400615 	stw	r21,24(sp)
    7634:	dd000515 	stw	r20,20(sp)
    7638:	dcc00415 	stw	r19,16(sp)
    763c:	dc400215 	stw	r17,8(sp)
    7640:	dc000115 	stw	r16,4(sp)
    7644:	302d883a 	mov	r22,r6
    7648:	2039883a 	mov	fp,r4
    764c:	2825883a 	mov	r18,r5
    7650:	10001c26 	beq	r2,zero,76c4 <__sfvwrite_r+0xb0>
    7654:	29c0030b 	ldhu	r7,12(r5)
    7658:	3880020c 	andi	r2,r7,8
    765c:	10002726 	beq	r2,zero,76fc <__sfvwrite_r+0xe8>
    7660:	28800417 	ldw	r2,16(r5)
    7664:	10002526 	beq	r2,zero,76fc <__sfvwrite_r+0xe8>
    7668:	3880008c 	andi	r2,r7,2
    766c:	b5400017 	ldw	r21,0(r22)
    7670:	10002826 	beq	r2,zero,7714 <__sfvwrite_r+0x100>
    7674:	0021883a 	mov	r16,zero
    7678:	0023883a 	mov	r17,zero
    767c:	880d883a 	mov	r6,r17
    7680:	e009883a 	mov	r4,fp
    7684:	00810004 	movi	r2,1024
    7688:	80006e26 	beq	r16,zero,7844 <__sfvwrite_r+0x230>
    768c:	800f883a 	mov	r7,r16
    7690:	91400717 	ldw	r5,28(r18)
    7694:	1400012e 	bgeu	r2,r16,769c <__sfvwrite_r+0x88>
    7698:	100f883a 	mov	r7,r2
    769c:	90c00917 	ldw	r3,36(r18)
    76a0:	183ee83a 	callr	r3
    76a4:	1007883a 	mov	r3,r2
    76a8:	80a1c83a 	sub	r16,r16,r2
    76ac:	88a3883a 	add	r17,r17,r2
    76b0:	00806d0e 	bge	zero,r2,7868 <__sfvwrite_r+0x254>
    76b4:	b0800217 	ldw	r2,8(r22)
    76b8:	10c5c83a 	sub	r2,r2,r3
    76bc:	b0800215 	stw	r2,8(r22)
    76c0:	103fee1e 	bne	r2,zero,767c <__sfvwrite_r+0x68>
    76c4:	0009883a 	mov	r4,zero
    76c8:	2005883a 	mov	r2,r4
    76cc:	dfc00a17 	ldw	ra,40(sp)
    76d0:	df000917 	ldw	fp,36(sp)
    76d4:	ddc00817 	ldw	r23,32(sp)
    76d8:	dd800717 	ldw	r22,28(sp)
    76dc:	dd400617 	ldw	r21,24(sp)
    76e0:	dd000517 	ldw	r20,20(sp)
    76e4:	dcc00417 	ldw	r19,16(sp)
    76e8:	dc800317 	ldw	r18,12(sp)
    76ec:	dc400217 	ldw	r17,8(sp)
    76f0:	dc000117 	ldw	r16,4(sp)
    76f4:	dec00b04 	addi	sp,sp,44
    76f8:	f800283a 	ret
    76fc:	00052280 	call	5228 <__swsetup_r>
    7700:	1000e41e 	bne	r2,zero,7a94 <__sfvwrite_r+0x480>
    7704:	91c0030b 	ldhu	r7,12(r18)
    7708:	b5400017 	ldw	r21,0(r22)
    770c:	3880008c 	andi	r2,r7,2
    7710:	103fd81e 	bne	r2,zero,7674 <__sfvwrite_r+0x60>
    7714:	3880004c 	andi	r2,r7,1
    7718:	1005003a 	cmpeq	r2,r2,zero
    771c:	10005726 	beq	r2,zero,787c <__sfvwrite_r+0x268>
    7720:	0029883a 	mov	r20,zero
    7724:	002f883a 	mov	r23,zero
    7728:	a0004226 	beq	r20,zero,7834 <__sfvwrite_r+0x220>
    772c:	3880800c 	andi	r2,r7,512
    7730:	94000217 	ldw	r16,8(r18)
    7734:	10008b26 	beq	r2,zero,7964 <__sfvwrite_r+0x350>
    7738:	800d883a 	mov	r6,r16
    773c:	a400a536 	bltu	r20,r16,79d4 <__sfvwrite_r+0x3c0>
    7740:	3881200c 	andi	r2,r7,1152
    7744:	10002726 	beq	r2,zero,77e4 <__sfvwrite_r+0x1d0>
    7748:	90800517 	ldw	r2,20(r18)
    774c:	92000417 	ldw	r8,16(r18)
    7750:	91400017 	ldw	r5,0(r18)
    7754:	1087883a 	add	r3,r2,r2
    7758:	1887883a 	add	r3,r3,r2
    775c:	1808d7fa 	srli	r4,r3,31
    7760:	2a21c83a 	sub	r16,r5,r8
    7764:	80800044 	addi	r2,r16,1
    7768:	20c9883a 	add	r4,r4,r3
    776c:	2027d07a 	srai	r19,r4,1
    7770:	a085883a 	add	r2,r20,r2
    7774:	980d883a 	mov	r6,r19
    7778:	9880022e 	bgeu	r19,r2,7784 <__sfvwrite_r+0x170>
    777c:	1027883a 	mov	r19,r2
    7780:	100d883a 	mov	r6,r2
    7784:	3881000c 	andi	r2,r7,1024
    7788:	1000b826 	beq	r2,zero,7a6c <__sfvwrite_r+0x458>
    778c:	300b883a 	mov	r5,r6
    7790:	e009883a 	mov	r4,fp
    7794:	00029b00 	call	29b0 <_malloc_r>
    7798:	10003126 	beq	r2,zero,7860 <__sfvwrite_r+0x24c>
    779c:	91400417 	ldw	r5,16(r18)
    77a0:	1009883a 	mov	r4,r2
    77a4:	800d883a 	mov	r6,r16
    77a8:	1023883a 	mov	r17,r2
    77ac:	0007f6c0 	call	7f6c <memcpy>
    77b0:	90c0030b 	ldhu	r3,12(r18)
    77b4:	00beffc4 	movi	r2,-1025
    77b8:	1886703a 	and	r3,r3,r2
    77bc:	18c02014 	ori	r3,r3,128
    77c0:	90c0030d 	sth	r3,12(r18)
    77c4:	9c07c83a 	sub	r3,r19,r16
    77c8:	8c05883a 	add	r2,r17,r16
    77cc:	a00d883a 	mov	r6,r20
    77d0:	a021883a 	mov	r16,r20
    77d4:	90800015 	stw	r2,0(r18)
    77d8:	90c00215 	stw	r3,8(r18)
    77dc:	94400415 	stw	r17,16(r18)
    77e0:	94c00515 	stw	r19,20(r18)
    77e4:	91000017 	ldw	r4,0(r18)
    77e8:	b80b883a 	mov	r5,r23
    77ec:	a023883a 	mov	r17,r20
    77f0:	000800c0 	call	800c <memmove>
    77f4:	90c00217 	ldw	r3,8(r18)
    77f8:	90800017 	ldw	r2,0(r18)
    77fc:	a027883a 	mov	r19,r20
    7800:	1c07c83a 	sub	r3,r3,r16
    7804:	1405883a 	add	r2,r2,r16
    7808:	90c00215 	stw	r3,8(r18)
    780c:	a021883a 	mov	r16,r20
    7810:	90800015 	stw	r2,0(r18)
    7814:	b0800217 	ldw	r2,8(r22)
    7818:	1405c83a 	sub	r2,r2,r16
    781c:	b0800215 	stw	r2,8(r22)
    7820:	103fa826 	beq	r2,zero,76c4 <__sfvwrite_r+0xb0>
    7824:	a469c83a 	sub	r20,r20,r17
    7828:	91c0030b 	ldhu	r7,12(r18)
    782c:	bcef883a 	add	r23,r23,r19
    7830:	a03fbe1e 	bne	r20,zero,772c <__sfvwrite_r+0x118>
    7834:	adc00017 	ldw	r23,0(r21)
    7838:	ad000117 	ldw	r20,4(r21)
    783c:	ad400204 	addi	r21,r21,8
    7840:	003fb906 	br	7728 <__sfvwrite_r+0x114>
    7844:	ac400017 	ldw	r17,0(r21)
    7848:	ac000117 	ldw	r16,4(r21)
    784c:	ad400204 	addi	r21,r21,8
    7850:	003f8a06 	br	767c <__sfvwrite_r+0x68>
    7854:	91400417 	ldw	r5,16(r18)
    7858:	e009883a 	mov	r4,fp
    785c:	00073000 	call	7300 <_free_r>
    7860:	00800304 	movi	r2,12
    7864:	e0800015 	stw	r2,0(fp)
    7868:	9080030b 	ldhu	r2,12(r18)
    786c:	013fffc4 	movi	r4,-1
    7870:	10801014 	ori	r2,r2,64
    7874:	9080030d 	sth	r2,12(r18)
    7878:	003f9306 	br	76c8 <__sfvwrite_r+0xb4>
    787c:	0027883a 	mov	r19,zero
    7880:	002f883a 	mov	r23,zero
    7884:	d8000015 	stw	zero,0(sp)
    7888:	0029883a 	mov	r20,zero
    788c:	98001e26 	beq	r19,zero,7908 <__sfvwrite_r+0x2f4>
    7890:	d8c00017 	ldw	r3,0(sp)
    7894:	1804c03a 	cmpne	r2,r3,zero
    7898:	10005e26 	beq	r2,zero,7a14 <__sfvwrite_r+0x400>
    789c:	9821883a 	mov	r16,r19
    78a0:	a4c0012e 	bgeu	r20,r19,78a8 <__sfvwrite_r+0x294>
    78a4:	a021883a 	mov	r16,r20
    78a8:	91000017 	ldw	r4,0(r18)
    78ac:	90800417 	ldw	r2,16(r18)
    78b0:	91800217 	ldw	r6,8(r18)
    78b4:	91c00517 	ldw	r7,20(r18)
    78b8:	1100022e 	bgeu	r2,r4,78c4 <__sfvwrite_r+0x2b0>
    78bc:	31e3883a 	add	r17,r6,r7
    78c0:	8c001616 	blt	r17,r16,791c <__sfvwrite_r+0x308>
    78c4:	81c03816 	blt	r16,r7,79a8 <__sfvwrite_r+0x394>
    78c8:	90c00917 	ldw	r3,36(r18)
    78cc:	91400717 	ldw	r5,28(r18)
    78d0:	e009883a 	mov	r4,fp
    78d4:	b80d883a 	mov	r6,r23
    78d8:	183ee83a 	callr	r3
    78dc:	1023883a 	mov	r17,r2
    78e0:	00bfe10e 	bge	zero,r2,7868 <__sfvwrite_r+0x254>
    78e4:	a469c83a 	sub	r20,r20,r17
    78e8:	a0001826 	beq	r20,zero,794c <__sfvwrite_r+0x338>
    78ec:	b0800217 	ldw	r2,8(r22)
    78f0:	1445c83a 	sub	r2,r2,r17
    78f4:	b0800215 	stw	r2,8(r22)
    78f8:	103f7226 	beq	r2,zero,76c4 <__sfvwrite_r+0xb0>
    78fc:	9c67c83a 	sub	r19,r19,r17
    7900:	bc6f883a 	add	r23,r23,r17
    7904:	983fe21e 	bne	r19,zero,7890 <__sfvwrite_r+0x27c>
    7908:	adc00017 	ldw	r23,0(r21)
    790c:	acc00117 	ldw	r19,4(r21)
    7910:	ad400204 	addi	r21,r21,8
    7914:	d8000015 	stw	zero,0(sp)
    7918:	003fdc06 	br	788c <__sfvwrite_r+0x278>
    791c:	b80b883a 	mov	r5,r23
    7920:	880d883a 	mov	r6,r17
    7924:	000800c0 	call	800c <memmove>
    7928:	90c00017 	ldw	r3,0(r18)
    792c:	e009883a 	mov	r4,fp
    7930:	900b883a 	mov	r5,r18
    7934:	1c47883a 	add	r3,r3,r17
    7938:	90c00015 	stw	r3,0(r18)
    793c:	0006ce40 	call	6ce4 <_fflush_r>
    7940:	103fc91e 	bne	r2,zero,7868 <__sfvwrite_r+0x254>
    7944:	a469c83a 	sub	r20,r20,r17
    7948:	a03fe81e 	bne	r20,zero,78ec <__sfvwrite_r+0x2d8>
    794c:	e009883a 	mov	r4,fp
    7950:	900b883a 	mov	r5,r18
    7954:	0006ce40 	call	6ce4 <_fflush_r>
    7958:	103fc31e 	bne	r2,zero,7868 <__sfvwrite_r+0x254>
    795c:	d8000015 	stw	zero,0(sp)
    7960:	003fe206 	br	78ec <__sfvwrite_r+0x2d8>
    7964:	91000017 	ldw	r4,0(r18)
    7968:	90800417 	ldw	r2,16(r18)
    796c:	1100022e 	bgeu	r2,r4,7978 <__sfvwrite_r+0x364>
    7970:	8023883a 	mov	r17,r16
    7974:	85003136 	bltu	r16,r20,7a3c <__sfvwrite_r+0x428>
    7978:	91c00517 	ldw	r7,20(r18)
    797c:	a1c01836 	bltu	r20,r7,79e0 <__sfvwrite_r+0x3cc>
    7980:	90c00917 	ldw	r3,36(r18)
    7984:	91400717 	ldw	r5,28(r18)
    7988:	e009883a 	mov	r4,fp
    798c:	b80d883a 	mov	r6,r23
    7990:	183ee83a 	callr	r3
    7994:	1021883a 	mov	r16,r2
    7998:	00bfb30e 	bge	zero,r2,7868 <__sfvwrite_r+0x254>
    799c:	1023883a 	mov	r17,r2
    79a0:	1027883a 	mov	r19,r2
    79a4:	003f9b06 	br	7814 <__sfvwrite_r+0x200>
    79a8:	b80b883a 	mov	r5,r23
    79ac:	800d883a 	mov	r6,r16
    79b0:	000800c0 	call	800c <memmove>
    79b4:	90c00217 	ldw	r3,8(r18)
    79b8:	90800017 	ldw	r2,0(r18)
    79bc:	8023883a 	mov	r17,r16
    79c0:	1c07c83a 	sub	r3,r3,r16
    79c4:	1405883a 	add	r2,r2,r16
    79c8:	90c00215 	stw	r3,8(r18)
    79cc:	90800015 	stw	r2,0(r18)
    79d0:	003fc406 	br	78e4 <__sfvwrite_r+0x2d0>
    79d4:	a00d883a 	mov	r6,r20
    79d8:	a021883a 	mov	r16,r20
    79dc:	003f8106 	br	77e4 <__sfvwrite_r+0x1d0>
    79e0:	b80b883a 	mov	r5,r23
    79e4:	a00d883a 	mov	r6,r20
    79e8:	000800c0 	call	800c <memmove>
    79ec:	90c00217 	ldw	r3,8(r18)
    79f0:	90800017 	ldw	r2,0(r18)
    79f4:	a021883a 	mov	r16,r20
    79f8:	1d07c83a 	sub	r3,r3,r20
    79fc:	1505883a 	add	r2,r2,r20
    7a00:	a023883a 	mov	r17,r20
    7a04:	a027883a 	mov	r19,r20
    7a08:	90c00215 	stw	r3,8(r18)
    7a0c:	90800015 	stw	r2,0(r18)
    7a10:	003f8006 	br	7814 <__sfvwrite_r+0x200>
    7a14:	b809883a 	mov	r4,r23
    7a18:	01400284 	movi	r5,10
    7a1c:	980d883a 	mov	r6,r19
    7a20:	0007e880 	call	7e88 <memchr>
    7a24:	10001726 	beq	r2,zero,7a84 <__sfvwrite_r+0x470>
    7a28:	15c5c83a 	sub	r2,r2,r23
    7a2c:	15000044 	addi	r20,r2,1
    7a30:	00800044 	movi	r2,1
    7a34:	d8800015 	stw	r2,0(sp)
    7a38:	003f9806 	br	789c <__sfvwrite_r+0x288>
    7a3c:	b80b883a 	mov	r5,r23
    7a40:	800d883a 	mov	r6,r16
    7a44:	000800c0 	call	800c <memmove>
    7a48:	90c00017 	ldw	r3,0(r18)
    7a4c:	e009883a 	mov	r4,fp
    7a50:	900b883a 	mov	r5,r18
    7a54:	1c07883a 	add	r3,r3,r16
    7a58:	90c00015 	stw	r3,0(r18)
    7a5c:	8027883a 	mov	r19,r16
    7a60:	0006ce40 	call	6ce4 <_fflush_r>
    7a64:	103f6b26 	beq	r2,zero,7814 <__sfvwrite_r+0x200>
    7a68:	003f7f06 	br	7868 <__sfvwrite_r+0x254>
    7a6c:	400b883a 	mov	r5,r8
    7a70:	e009883a 	mov	r4,fp
    7a74:	00091780 	call	9178 <_realloc_r>
    7a78:	103f7626 	beq	r2,zero,7854 <__sfvwrite_r+0x240>
    7a7c:	1023883a 	mov	r17,r2
    7a80:	003f5006 	br	77c4 <__sfvwrite_r+0x1b0>
    7a84:	00c00044 	movi	r3,1
    7a88:	9d000044 	addi	r20,r19,1
    7a8c:	d8c00015 	stw	r3,0(sp)
    7a90:	003f8206 	br	789c <__sfvwrite_r+0x288>
    7a94:	9080030b 	ldhu	r2,12(r18)
    7a98:	00c00244 	movi	r3,9
    7a9c:	013fffc4 	movi	r4,-1
    7aa0:	10801014 	ori	r2,r2,64
    7aa4:	9080030d 	sth	r2,12(r18)
    7aa8:	e0c00015 	stw	r3,0(fp)
    7aac:	003f0606 	br	76c8 <__sfvwrite_r+0xb4>

00007ab0 <_fwalk_reent>:
    7ab0:	defff704 	addi	sp,sp,-36
    7ab4:	dcc00315 	stw	r19,12(sp)
    7ab8:	24c0b804 	addi	r19,r4,736
    7abc:	dd800615 	stw	r22,24(sp)
    7ac0:	dd400515 	stw	r21,20(sp)
    7ac4:	dfc00815 	stw	ra,32(sp)
    7ac8:	ddc00715 	stw	r23,28(sp)
    7acc:	dd000415 	stw	r20,16(sp)
    7ad0:	dc800215 	stw	r18,8(sp)
    7ad4:	dc400115 	stw	r17,4(sp)
    7ad8:	dc000015 	stw	r16,0(sp)
    7adc:	202b883a 	mov	r21,r4
    7ae0:	282d883a 	mov	r22,r5
    7ae4:	0006f6c0 	call	6f6c <__sfp_lock_acquire>
    7ae8:	98002126 	beq	r19,zero,7b70 <_fwalk_reent+0xc0>
    7aec:	002f883a 	mov	r23,zero
    7af0:	9c800117 	ldw	r18,4(r19)
    7af4:	9c000217 	ldw	r16,8(r19)
    7af8:	90bfffc4 	addi	r2,r18,-1
    7afc:	10000d16 	blt	r2,zero,7b34 <_fwalk_reent+0x84>
    7b00:	0023883a 	mov	r17,zero
    7b04:	053fffc4 	movi	r20,-1
    7b08:	8080030f 	ldh	r2,12(r16)
    7b0c:	8c400044 	addi	r17,r17,1
    7b10:	10000626 	beq	r2,zero,7b2c <_fwalk_reent+0x7c>
    7b14:	8080038f 	ldh	r2,14(r16)
    7b18:	800b883a 	mov	r5,r16
    7b1c:	a809883a 	mov	r4,r21
    7b20:	15000226 	beq	r2,r20,7b2c <_fwalk_reent+0x7c>
    7b24:	b03ee83a 	callr	r22
    7b28:	b8aeb03a 	or	r23,r23,r2
    7b2c:	84001704 	addi	r16,r16,92
    7b30:	947ff51e 	bne	r18,r17,7b08 <_fwalk_reent+0x58>
    7b34:	9cc00017 	ldw	r19,0(r19)
    7b38:	983fed1e 	bne	r19,zero,7af0 <_fwalk_reent+0x40>
    7b3c:	0006f700 	call	6f70 <__sfp_lock_release>
    7b40:	b805883a 	mov	r2,r23
    7b44:	dfc00817 	ldw	ra,32(sp)
    7b48:	ddc00717 	ldw	r23,28(sp)
    7b4c:	dd800617 	ldw	r22,24(sp)
    7b50:	dd400517 	ldw	r21,20(sp)
    7b54:	dd000417 	ldw	r20,16(sp)
    7b58:	dcc00317 	ldw	r19,12(sp)
    7b5c:	dc800217 	ldw	r18,8(sp)
    7b60:	dc400117 	ldw	r17,4(sp)
    7b64:	dc000017 	ldw	r16,0(sp)
    7b68:	dec00904 	addi	sp,sp,36
    7b6c:	f800283a 	ret
    7b70:	002f883a 	mov	r23,zero
    7b74:	003ff106 	br	7b3c <_fwalk_reent+0x8c>

00007b78 <_fwalk>:
    7b78:	defff804 	addi	sp,sp,-32
    7b7c:	dcc00315 	stw	r19,12(sp)
    7b80:	24c0b804 	addi	r19,r4,736
    7b84:	dd400515 	stw	r21,20(sp)
    7b88:	dfc00715 	stw	ra,28(sp)
    7b8c:	dd800615 	stw	r22,24(sp)
    7b90:	dd000415 	stw	r20,16(sp)
    7b94:	dc800215 	stw	r18,8(sp)
    7b98:	dc400115 	stw	r17,4(sp)
    7b9c:	dc000015 	stw	r16,0(sp)
    7ba0:	282b883a 	mov	r21,r5
    7ba4:	0006f6c0 	call	6f6c <__sfp_lock_acquire>
    7ba8:	98001f26 	beq	r19,zero,7c28 <_fwalk+0xb0>
    7bac:	002d883a 	mov	r22,zero
    7bb0:	9c800117 	ldw	r18,4(r19)
    7bb4:	9c000217 	ldw	r16,8(r19)
    7bb8:	90bfffc4 	addi	r2,r18,-1
    7bbc:	10000c16 	blt	r2,zero,7bf0 <_fwalk+0x78>
    7bc0:	0023883a 	mov	r17,zero
    7bc4:	053fffc4 	movi	r20,-1
    7bc8:	8080030f 	ldh	r2,12(r16)
    7bcc:	8c400044 	addi	r17,r17,1
    7bd0:	10000526 	beq	r2,zero,7be8 <_fwalk+0x70>
    7bd4:	8080038f 	ldh	r2,14(r16)
    7bd8:	8009883a 	mov	r4,r16
    7bdc:	15000226 	beq	r2,r20,7be8 <_fwalk+0x70>
    7be0:	a83ee83a 	callr	r21
    7be4:	b0acb03a 	or	r22,r22,r2
    7be8:	84001704 	addi	r16,r16,92
    7bec:	947ff61e 	bne	r18,r17,7bc8 <_fwalk+0x50>
    7bf0:	9cc00017 	ldw	r19,0(r19)
    7bf4:	983fee1e 	bne	r19,zero,7bb0 <_fwalk+0x38>
    7bf8:	0006f700 	call	6f70 <__sfp_lock_release>
    7bfc:	b005883a 	mov	r2,r22
    7c00:	dfc00717 	ldw	ra,28(sp)
    7c04:	dd800617 	ldw	r22,24(sp)
    7c08:	dd400517 	ldw	r21,20(sp)
    7c0c:	dd000417 	ldw	r20,16(sp)
    7c10:	dcc00317 	ldw	r19,12(sp)
    7c14:	dc800217 	ldw	r18,8(sp)
    7c18:	dc400117 	ldw	r17,4(sp)
    7c1c:	dc000017 	ldw	r16,0(sp)
    7c20:	dec00804 	addi	sp,sp,32
    7c24:	f800283a 	ret
    7c28:	002d883a 	mov	r22,zero
    7c2c:	003ff206 	br	7bf8 <_fwalk+0x80>

00007c30 <__locale_charset>:
    7c30:	d0a00717 	ldw	r2,-32740(gp)
    7c34:	f800283a 	ret

00007c38 <_localeconv_r>:
    7c38:	00800074 	movhi	r2,1
    7c3c:	10bc1e04 	addi	r2,r2,-3976
    7c40:	f800283a 	ret

00007c44 <localeconv>:
    7c44:	00800074 	movhi	r2,1
    7c48:	10835c04 	addi	r2,r2,3440
    7c4c:	11000017 	ldw	r4,0(r2)
    7c50:	0007c381 	jmpi	7c38 <_localeconv_r>

00007c54 <_setlocale_r>:
    7c54:	defffc04 	addi	sp,sp,-16
    7c58:	00c00074 	movhi	r3,1
    7c5c:	18fbf404 	addi	r3,r3,-4144
    7c60:	dc800215 	stw	r18,8(sp)
    7c64:	dc400115 	stw	r17,4(sp)
    7c68:	dc000015 	stw	r16,0(sp)
    7c6c:	2023883a 	mov	r17,r4
    7c70:	2825883a 	mov	r18,r5
    7c74:	dfc00315 	stw	ra,12(sp)
    7c78:	3021883a 	mov	r16,r6
    7c7c:	3009883a 	mov	r4,r6
    7c80:	180b883a 	mov	r5,r3
    7c84:	30000926 	beq	r6,zero,7cac <_setlocale_r+0x58>
    7c88:	00099280 	call	9928 <strcmp>
    7c8c:	8009883a 	mov	r4,r16
    7c90:	01400074 	movhi	r5,1
    7c94:	297c0504 	addi	r5,r5,-4076
    7c98:	10000b1e 	bne	r2,zero,7cc8 <_setlocale_r+0x74>
    7c9c:	8c000d15 	stw	r16,52(r17)
    7ca0:	8c800c15 	stw	r18,48(r17)
    7ca4:	00c00074 	movhi	r3,1
    7ca8:	18fbf404 	addi	r3,r3,-4144
    7cac:	1805883a 	mov	r2,r3
    7cb0:	dfc00317 	ldw	ra,12(sp)
    7cb4:	dc800217 	ldw	r18,8(sp)
    7cb8:	dc400117 	ldw	r17,4(sp)
    7cbc:	dc000017 	ldw	r16,0(sp)
    7cc0:	dec00404 	addi	sp,sp,16
    7cc4:	f800283a 	ret
    7cc8:	00099280 	call	9928 <strcmp>
    7ccc:	0007883a 	mov	r3,zero
    7cd0:	103ff226 	beq	r2,zero,7c9c <_setlocale_r+0x48>
    7cd4:	003ff506 	br	7cac <_setlocale_r+0x58>

00007cd8 <setlocale>:
    7cd8:	01800074 	movhi	r6,1
    7cdc:	31835c04 	addi	r6,r6,3440
    7ce0:	2007883a 	mov	r3,r4
    7ce4:	31000017 	ldw	r4,0(r6)
    7ce8:	280d883a 	mov	r6,r5
    7cec:	180b883a 	mov	r5,r3
    7cf0:	0007c541 	jmpi	7c54 <_setlocale_r>

00007cf4 <__smakebuf_r>:
    7cf4:	2880030b 	ldhu	r2,12(r5)
    7cf8:	deffed04 	addi	sp,sp,-76
    7cfc:	dc401015 	stw	r17,64(sp)
    7d00:	1080008c 	andi	r2,r2,2
    7d04:	dc000f15 	stw	r16,60(sp)
    7d08:	dfc01215 	stw	ra,72(sp)
    7d0c:	dc801115 	stw	r18,68(sp)
    7d10:	2821883a 	mov	r16,r5
    7d14:	2023883a 	mov	r17,r4
    7d18:	10000b26 	beq	r2,zero,7d48 <__smakebuf_r+0x54>
    7d1c:	28c010c4 	addi	r3,r5,67
    7d20:	00800044 	movi	r2,1
    7d24:	28800515 	stw	r2,20(r5)
    7d28:	28c00415 	stw	r3,16(r5)
    7d2c:	28c00015 	stw	r3,0(r5)
    7d30:	dfc01217 	ldw	ra,72(sp)
    7d34:	dc801117 	ldw	r18,68(sp)
    7d38:	dc401017 	ldw	r17,64(sp)
    7d3c:	dc000f17 	ldw	r16,60(sp)
    7d40:	dec01304 	addi	sp,sp,76
    7d44:	f800283a 	ret
    7d48:	2940038f 	ldh	r5,14(r5)
    7d4c:	28002116 	blt	r5,zero,7dd4 <__smakebuf_r+0xe0>
    7d50:	d80d883a 	mov	r6,sp
    7d54:	0009ca40 	call	9ca4 <_fstat_r>
    7d58:	10001e16 	blt	r2,zero,7dd4 <__smakebuf_r+0xe0>
    7d5c:	d8800117 	ldw	r2,4(sp)
    7d60:	00e00014 	movui	r3,32768
    7d64:	113c000c 	andi	r4,r2,61440
    7d68:	20c03126 	beq	r4,r3,7e30 <__smakebuf_r+0x13c>
    7d6c:	8080030b 	ldhu	r2,12(r16)
    7d70:	00c80004 	movi	r3,8192
    7d74:	10820014 	ori	r2,r2,2048
    7d78:	8080030d 	sth	r2,12(r16)
    7d7c:	20c01e26 	beq	r4,r3,7df8 <__smakebuf_r+0x104>
    7d80:	04810004 	movi	r18,1024
    7d84:	8809883a 	mov	r4,r17
    7d88:	900b883a 	mov	r5,r18
    7d8c:	00029b00 	call	29b0 <_malloc_r>
    7d90:	1009883a 	mov	r4,r2
    7d94:	10003126 	beq	r2,zero,7e5c <__smakebuf_r+0x168>
    7d98:	80c0030b 	ldhu	r3,12(r16)
    7d9c:	00800034 	movhi	r2,0
    7da0:	109c1804 	addi	r2,r2,28768
    7da4:	88800f15 	stw	r2,60(r17)
    7da8:	18c02014 	ori	r3,r3,128
    7dac:	84800515 	stw	r18,20(r16)
    7db0:	80c0030d 	sth	r3,12(r16)
    7db4:	81000415 	stw	r4,16(r16)
    7db8:	81000015 	stw	r4,0(r16)
    7dbc:	dfc01217 	ldw	ra,72(sp)
    7dc0:	dc801117 	ldw	r18,68(sp)
    7dc4:	dc401017 	ldw	r17,64(sp)
    7dc8:	dc000f17 	ldw	r16,60(sp)
    7dcc:	dec01304 	addi	sp,sp,76
    7dd0:	f800283a 	ret
    7dd4:	80c0030b 	ldhu	r3,12(r16)
    7dd8:	1880200c 	andi	r2,r3,128
    7ddc:	10000426 	beq	r2,zero,7df0 <__smakebuf_r+0xfc>
    7de0:	04801004 	movi	r18,64
    7de4:	18820014 	ori	r2,r3,2048
    7de8:	8080030d 	sth	r2,12(r16)
    7dec:	003fe506 	br	7d84 <__smakebuf_r+0x90>
    7df0:	04810004 	movi	r18,1024
    7df4:	003ffb06 	br	7de4 <__smakebuf_r+0xf0>
    7df8:	8140038f 	ldh	r5,14(r16)
    7dfc:	8809883a 	mov	r4,r17
    7e00:	0009d180 	call	9d18 <_isatty_r>
    7e04:	103fde26 	beq	r2,zero,7d80 <__smakebuf_r+0x8c>
    7e08:	8080030b 	ldhu	r2,12(r16)
    7e0c:	80c010c4 	addi	r3,r16,67
    7e10:	04810004 	movi	r18,1024
    7e14:	10800054 	ori	r2,r2,1
    7e18:	8080030d 	sth	r2,12(r16)
    7e1c:	00800044 	movi	r2,1
    7e20:	80c00415 	stw	r3,16(r16)
    7e24:	80800515 	stw	r2,20(r16)
    7e28:	80c00015 	stw	r3,0(r16)
    7e2c:	003fd506 	br	7d84 <__smakebuf_r+0x90>
    7e30:	80c00a17 	ldw	r3,40(r16)
    7e34:	00800074 	movhi	r2,1
    7e38:	10a5f904 	addi	r2,r2,-26652
    7e3c:	18bfcb1e 	bne	r3,r2,7d6c <__smakebuf_r+0x78>
    7e40:	8080030b 	ldhu	r2,12(r16)
    7e44:	00c10004 	movi	r3,1024
    7e48:	1825883a 	mov	r18,r3
    7e4c:	10c4b03a 	or	r2,r2,r3
    7e50:	8080030d 	sth	r2,12(r16)
    7e54:	80c01315 	stw	r3,76(r16)
    7e58:	003fca06 	br	7d84 <__smakebuf_r+0x90>
    7e5c:	8100030b 	ldhu	r4,12(r16)
    7e60:	2080800c 	andi	r2,r4,512
    7e64:	103fb21e 	bne	r2,zero,7d30 <__smakebuf_r+0x3c>
    7e68:	80c010c4 	addi	r3,r16,67
    7e6c:	21000094 	ori	r4,r4,2
    7e70:	00800044 	movi	r2,1
    7e74:	80800515 	stw	r2,20(r16)
    7e78:	8100030d 	sth	r4,12(r16)
    7e7c:	80c00415 	stw	r3,16(r16)
    7e80:	80c00015 	stw	r3,0(r16)
    7e84:	003faa06 	br	7d30 <__smakebuf_r+0x3c>

00007e88 <memchr>:
    7e88:	008000c4 	movi	r2,3
    7e8c:	29403fcc 	andi	r5,r5,255
    7e90:	2007883a 	mov	r3,r4
    7e94:	1180022e 	bgeu	r2,r6,7ea0 <memchr+0x18>
    7e98:	2084703a 	and	r2,r4,r2
    7e9c:	10000b26 	beq	r2,zero,7ecc <memchr+0x44>
    7ea0:	313fffc4 	addi	r4,r6,-1
    7ea4:	3000051e 	bne	r6,zero,7ebc <memchr+0x34>
    7ea8:	00002c06 	br	7f5c <memchr+0xd4>
    7eac:	213fffc4 	addi	r4,r4,-1
    7eb0:	00bfffc4 	movi	r2,-1
    7eb4:	18c00044 	addi	r3,r3,1
    7eb8:	20802826 	beq	r4,r2,7f5c <memchr+0xd4>
    7ebc:	18800003 	ldbu	r2,0(r3)
    7ec0:	28bffa1e 	bne	r5,r2,7eac <memchr+0x24>
    7ec4:	1805883a 	mov	r2,r3
    7ec8:	f800283a 	ret
    7ecc:	0011883a 	mov	r8,zero
    7ed0:	0007883a 	mov	r3,zero
    7ed4:	01c00104 	movi	r7,4
    7ed8:	4004923a 	slli	r2,r8,8
    7edc:	18c00044 	addi	r3,r3,1
    7ee0:	1151883a 	add	r8,r2,r5
    7ee4:	19fffc1e 	bne	r3,r7,7ed8 <memchr+0x50>
    7ee8:	02bfbff4 	movhi	r10,65279
    7eec:	52bfbfc4 	addi	r10,r10,-257
    7ef0:	02602074 	movhi	r9,32897
    7ef4:	4a602004 	addi	r9,r9,-32640
    7ef8:	02c000c4 	movi	r11,3
    7efc:	20800017 	ldw	r2,0(r4)
    7f00:	31bfff04 	addi	r6,r6,-4
    7f04:	200f883a 	mov	r7,r4
    7f08:	1204f03a 	xor	r2,r2,r8
    7f0c:	1287883a 	add	r3,r2,r10
    7f10:	1a46703a 	and	r3,r3,r9
    7f14:	0084303a 	nor	r2,zero,r2
    7f18:	10c4703a 	and	r2,r2,r3
    7f1c:	10000b26 	beq	r2,zero,7f4c <memchr+0xc4>
    7f20:	20800003 	ldbu	r2,0(r4)
    7f24:	28800f26 	beq	r5,r2,7f64 <memchr+0xdc>
    7f28:	20800043 	ldbu	r2,1(r4)
    7f2c:	21c00044 	addi	r7,r4,1
    7f30:	28800c26 	beq	r5,r2,7f64 <memchr+0xdc>
    7f34:	20800083 	ldbu	r2,2(r4)
    7f38:	21c00084 	addi	r7,r4,2
    7f3c:	28800926 	beq	r5,r2,7f64 <memchr+0xdc>
    7f40:	208000c3 	ldbu	r2,3(r4)
    7f44:	21c000c4 	addi	r7,r4,3
    7f48:	28800626 	beq	r5,r2,7f64 <memchr+0xdc>
    7f4c:	21000104 	addi	r4,r4,4
    7f50:	59bfea36 	bltu	r11,r6,7efc <memchr+0x74>
    7f54:	2007883a 	mov	r3,r4
    7f58:	003fd106 	br	7ea0 <memchr+0x18>
    7f5c:	0005883a 	mov	r2,zero
    7f60:	f800283a 	ret
    7f64:	3805883a 	mov	r2,r7
    7f68:	f800283a 	ret

00007f6c <memcpy>:
    7f6c:	01c003c4 	movi	r7,15
    7f70:	2007883a 	mov	r3,r4
    7f74:	3980032e 	bgeu	r7,r6,7f84 <memcpy+0x18>
    7f78:	2904b03a 	or	r2,r5,r4
    7f7c:	108000cc 	andi	r2,r2,3
    7f80:	10000926 	beq	r2,zero,7fa8 <memcpy+0x3c>
    7f84:	30000626 	beq	r6,zero,7fa0 <memcpy+0x34>
    7f88:	30cd883a 	add	r6,r6,r3
    7f8c:	28800003 	ldbu	r2,0(r5)
    7f90:	29400044 	addi	r5,r5,1
    7f94:	18800005 	stb	r2,0(r3)
    7f98:	18c00044 	addi	r3,r3,1
    7f9c:	30fffb1e 	bne	r6,r3,7f8c <memcpy+0x20>
    7fa0:	2005883a 	mov	r2,r4
    7fa4:	f800283a 	ret
    7fa8:	3811883a 	mov	r8,r7
    7fac:	200f883a 	mov	r7,r4
    7fb0:	28c00017 	ldw	r3,0(r5)
    7fb4:	31bffc04 	addi	r6,r6,-16
    7fb8:	38c00015 	stw	r3,0(r7)
    7fbc:	28800117 	ldw	r2,4(r5)
    7fc0:	38800115 	stw	r2,4(r7)
    7fc4:	28c00217 	ldw	r3,8(r5)
    7fc8:	38c00215 	stw	r3,8(r7)
    7fcc:	28800317 	ldw	r2,12(r5)
    7fd0:	29400404 	addi	r5,r5,16
    7fd4:	38800315 	stw	r2,12(r7)
    7fd8:	39c00404 	addi	r7,r7,16
    7fdc:	41bff436 	bltu	r8,r6,7fb0 <memcpy+0x44>
    7fe0:	008000c4 	movi	r2,3
    7fe4:	1180072e 	bgeu	r2,r6,8004 <memcpy+0x98>
    7fe8:	1007883a 	mov	r3,r2
    7fec:	28800017 	ldw	r2,0(r5)
    7ff0:	31bfff04 	addi	r6,r6,-4
    7ff4:	29400104 	addi	r5,r5,4
    7ff8:	38800015 	stw	r2,0(r7)
    7ffc:	39c00104 	addi	r7,r7,4
    8000:	19bffa36 	bltu	r3,r6,7fec <memcpy+0x80>
    8004:	3807883a 	mov	r3,r7
    8008:	003fde06 	br	7f84 <memcpy+0x18>

0000800c <memmove>:
    800c:	2807883a 	mov	r3,r5
    8010:	2011883a 	mov	r8,r4
    8014:	29000c2e 	bgeu	r5,r4,8048 <memmove+0x3c>
    8018:	298f883a 	add	r7,r5,r6
    801c:	21c00a2e 	bgeu	r4,r7,8048 <memmove+0x3c>
    8020:	30000726 	beq	r6,zero,8040 <memmove+0x34>
    8024:	2187883a 	add	r3,r4,r6
    8028:	198dc83a 	sub	r6,r3,r6
    802c:	39ffffc4 	addi	r7,r7,-1
    8030:	38800003 	ldbu	r2,0(r7)
    8034:	18ffffc4 	addi	r3,r3,-1
    8038:	18800005 	stb	r2,0(r3)
    803c:	19bffb1e 	bne	r3,r6,802c <memmove+0x20>
    8040:	2005883a 	mov	r2,r4
    8044:	f800283a 	ret
    8048:	01c003c4 	movi	r7,15
    804c:	39800a36 	bltu	r7,r6,8078 <memmove+0x6c>
    8050:	303ffb26 	beq	r6,zero,8040 <memmove+0x34>
    8054:	400f883a 	mov	r7,r8
    8058:	320d883a 	add	r6,r6,r8
    805c:	28800003 	ldbu	r2,0(r5)
    8060:	29400044 	addi	r5,r5,1
    8064:	38800005 	stb	r2,0(r7)
    8068:	39c00044 	addi	r7,r7,1
    806c:	39bffb1e 	bne	r7,r6,805c <memmove+0x50>
    8070:	2005883a 	mov	r2,r4
    8074:	f800283a 	ret
    8078:	1904b03a 	or	r2,r3,r4
    807c:	108000cc 	andi	r2,r2,3
    8080:	103ff31e 	bne	r2,zero,8050 <memmove+0x44>
    8084:	3811883a 	mov	r8,r7
    8088:	180b883a 	mov	r5,r3
    808c:	200f883a 	mov	r7,r4
    8090:	28c00017 	ldw	r3,0(r5)
    8094:	31bffc04 	addi	r6,r6,-16
    8098:	38c00015 	stw	r3,0(r7)
    809c:	28800117 	ldw	r2,4(r5)
    80a0:	38800115 	stw	r2,4(r7)
    80a4:	28c00217 	ldw	r3,8(r5)
    80a8:	38c00215 	stw	r3,8(r7)
    80ac:	28800317 	ldw	r2,12(r5)
    80b0:	29400404 	addi	r5,r5,16
    80b4:	38800315 	stw	r2,12(r7)
    80b8:	39c00404 	addi	r7,r7,16
    80bc:	41bff436 	bltu	r8,r6,8090 <memmove+0x84>
    80c0:	008000c4 	movi	r2,3
    80c4:	1180072e 	bgeu	r2,r6,80e4 <memmove+0xd8>
    80c8:	1007883a 	mov	r3,r2
    80cc:	28800017 	ldw	r2,0(r5)
    80d0:	31bfff04 	addi	r6,r6,-4
    80d4:	29400104 	addi	r5,r5,4
    80d8:	38800015 	stw	r2,0(r7)
    80dc:	39c00104 	addi	r7,r7,4
    80e0:	19bffa36 	bltu	r3,r6,80cc <memmove+0xc0>
    80e4:	3811883a 	mov	r8,r7
    80e8:	003fd906 	br	8050 <memmove+0x44>

000080ec <memset>:
    80ec:	008000c4 	movi	r2,3
    80f0:	29403fcc 	andi	r5,r5,255
    80f4:	2007883a 	mov	r3,r4
    80f8:	1180022e 	bgeu	r2,r6,8104 <memset+0x18>
    80fc:	2084703a 	and	r2,r4,r2
    8100:	10000826 	beq	r2,zero,8124 <memset+0x38>
    8104:	30000526 	beq	r6,zero,811c <memset+0x30>
    8108:	2805883a 	mov	r2,r5
    810c:	30cd883a 	add	r6,r6,r3
    8110:	18800005 	stb	r2,0(r3)
    8114:	18c00044 	addi	r3,r3,1
    8118:	19bffd1e 	bne	r3,r6,8110 <memset+0x24>
    811c:	2005883a 	mov	r2,r4
    8120:	f800283a 	ret
    8124:	2804923a 	slli	r2,r5,8
    8128:	020003c4 	movi	r8,15
    812c:	200f883a 	mov	r7,r4
    8130:	2884b03a 	or	r2,r5,r2
    8134:	1006943a 	slli	r3,r2,16
    8138:	10c6b03a 	or	r3,r2,r3
    813c:	41800a2e 	bgeu	r8,r6,8168 <memset+0x7c>
    8140:	4005883a 	mov	r2,r8
    8144:	31bffc04 	addi	r6,r6,-16
    8148:	38c00015 	stw	r3,0(r7)
    814c:	38c00115 	stw	r3,4(r7)
    8150:	38c00215 	stw	r3,8(r7)
    8154:	38c00315 	stw	r3,12(r7)
    8158:	39c00404 	addi	r7,r7,16
    815c:	11bff936 	bltu	r2,r6,8144 <memset+0x58>
    8160:	008000c4 	movi	r2,3
    8164:	1180052e 	bgeu	r2,r6,817c <memset+0x90>
    8168:	31bfff04 	addi	r6,r6,-4
    816c:	008000c4 	movi	r2,3
    8170:	38c00015 	stw	r3,0(r7)
    8174:	39c00104 	addi	r7,r7,4
    8178:	11bffb36 	bltu	r2,r6,8168 <memset+0x7c>
    817c:	3807883a 	mov	r3,r7
    8180:	003fe006 	br	8104 <memset+0x18>

00008184 <_Bfree>:
    8184:	28000826 	beq	r5,zero,81a8 <_Bfree+0x24>
    8188:	28800117 	ldw	r2,4(r5)
    818c:	21001317 	ldw	r4,76(r4)
    8190:	1085883a 	add	r2,r2,r2
    8194:	1085883a 	add	r2,r2,r2
    8198:	1105883a 	add	r2,r2,r4
    819c:	10c00017 	ldw	r3,0(r2)
    81a0:	28c00015 	stw	r3,0(r5)
    81a4:	11400015 	stw	r5,0(r2)
    81a8:	f800283a 	ret

000081ac <__hi0bits>:
    81ac:	20bfffec 	andhi	r2,r4,65535
    81b0:	10001426 	beq	r2,zero,8204 <__hi0bits+0x58>
    81b4:	0007883a 	mov	r3,zero
    81b8:	20bfc02c 	andhi	r2,r4,65280
    81bc:	1000021e 	bne	r2,zero,81c8 <__hi0bits+0x1c>
    81c0:	2008923a 	slli	r4,r4,8
    81c4:	18c00204 	addi	r3,r3,8
    81c8:	20bc002c 	andhi	r2,r4,61440
    81cc:	1000021e 	bne	r2,zero,81d8 <__hi0bits+0x2c>
    81d0:	2008913a 	slli	r4,r4,4
    81d4:	18c00104 	addi	r3,r3,4
    81d8:	20b0002c 	andhi	r2,r4,49152
    81dc:	1000031e 	bne	r2,zero,81ec <__hi0bits+0x40>
    81e0:	2105883a 	add	r2,r4,r4
    81e4:	18c00084 	addi	r3,r3,2
    81e8:	1089883a 	add	r4,r2,r2
    81ec:	20000316 	blt	r4,zero,81fc <__hi0bits+0x50>
    81f0:	2090002c 	andhi	r2,r4,16384
    81f4:	10000626 	beq	r2,zero,8210 <__hi0bits+0x64>
    81f8:	18c00044 	addi	r3,r3,1
    81fc:	1805883a 	mov	r2,r3
    8200:	f800283a 	ret
    8204:	2008943a 	slli	r4,r4,16
    8208:	00c00404 	movi	r3,16
    820c:	003fea06 	br	81b8 <__hi0bits+0xc>
    8210:	00c00804 	movi	r3,32
    8214:	1805883a 	mov	r2,r3
    8218:	f800283a 	ret

0000821c <__lo0bits>:
    821c:	20c00017 	ldw	r3,0(r4)
    8220:	188001cc 	andi	r2,r3,7
    8224:	10000a26 	beq	r2,zero,8250 <__lo0bits+0x34>
    8228:	1880004c 	andi	r2,r3,1
    822c:	1005003a 	cmpeq	r2,r2,zero
    8230:	10002126 	beq	r2,zero,82b8 <__lo0bits+0x9c>
    8234:	1880008c 	andi	r2,r3,2
    8238:	1000251e 	bne	r2,zero,82d0 <__lo0bits+0xb4>
    823c:	1804d0ba 	srli	r2,r3,2
    8240:	01400084 	movi	r5,2
    8244:	20800015 	stw	r2,0(r4)
    8248:	2805883a 	mov	r2,r5
    824c:	f800283a 	ret
    8250:	18bfffcc 	andi	r2,r3,65535
    8254:	10001526 	beq	r2,zero,82ac <__lo0bits+0x90>
    8258:	000b883a 	mov	r5,zero
    825c:	18803fcc 	andi	r2,r3,255
    8260:	1000021e 	bne	r2,zero,826c <__lo0bits+0x50>
    8264:	1806d23a 	srli	r3,r3,8
    8268:	29400204 	addi	r5,r5,8
    826c:	188003cc 	andi	r2,r3,15
    8270:	1000021e 	bne	r2,zero,827c <__lo0bits+0x60>
    8274:	1806d13a 	srli	r3,r3,4
    8278:	29400104 	addi	r5,r5,4
    827c:	188000cc 	andi	r2,r3,3
    8280:	1000021e 	bne	r2,zero,828c <__lo0bits+0x70>
    8284:	1806d0ba 	srli	r3,r3,2
    8288:	29400084 	addi	r5,r5,2
    828c:	1880004c 	andi	r2,r3,1
    8290:	1000031e 	bne	r2,zero,82a0 <__lo0bits+0x84>
    8294:	1806d07a 	srli	r3,r3,1
    8298:	18000a26 	beq	r3,zero,82c4 <__lo0bits+0xa8>
    829c:	29400044 	addi	r5,r5,1
    82a0:	2805883a 	mov	r2,r5
    82a4:	20c00015 	stw	r3,0(r4)
    82a8:	f800283a 	ret
    82ac:	1806d43a 	srli	r3,r3,16
    82b0:	01400404 	movi	r5,16
    82b4:	003fe906 	br	825c <__lo0bits+0x40>
    82b8:	000b883a 	mov	r5,zero
    82bc:	2805883a 	mov	r2,r5
    82c0:	f800283a 	ret
    82c4:	01400804 	movi	r5,32
    82c8:	2805883a 	mov	r2,r5
    82cc:	f800283a 	ret
    82d0:	1804d07a 	srli	r2,r3,1
    82d4:	01400044 	movi	r5,1
    82d8:	20800015 	stw	r2,0(r4)
    82dc:	003fda06 	br	8248 <__lo0bits+0x2c>

000082e0 <__mcmp>:
    82e0:	20800417 	ldw	r2,16(r4)
    82e4:	28c00417 	ldw	r3,16(r5)
    82e8:	10cfc83a 	sub	r7,r2,r3
    82ec:	38000c1e 	bne	r7,zero,8320 <__mcmp+0x40>
    82f0:	18c5883a 	add	r2,r3,r3
    82f4:	1085883a 	add	r2,r2,r2
    82f8:	10c00504 	addi	r3,r2,20
    82fc:	21000504 	addi	r4,r4,20
    8300:	28cb883a 	add	r5,r5,r3
    8304:	2085883a 	add	r2,r4,r2
    8308:	10bfff04 	addi	r2,r2,-4
    830c:	297fff04 	addi	r5,r5,-4
    8310:	11800017 	ldw	r6,0(r2)
    8314:	28c00017 	ldw	r3,0(r5)
    8318:	30c0031e 	bne	r6,r3,8328 <__mcmp+0x48>
    831c:	20bffa36 	bltu	r4,r2,8308 <__mcmp+0x28>
    8320:	3805883a 	mov	r2,r7
    8324:	f800283a 	ret
    8328:	30c00336 	bltu	r6,r3,8338 <__mcmp+0x58>
    832c:	01c00044 	movi	r7,1
    8330:	3805883a 	mov	r2,r7
    8334:	f800283a 	ret
    8338:	01ffffc4 	movi	r7,-1
    833c:	003ff806 	br	8320 <__mcmp+0x40>

00008340 <__ulp>:
    8340:	295ffc2c 	andhi	r5,r5,32752
    8344:	013f3034 	movhi	r4,64704
    8348:	290b883a 	add	r5,r5,r4
    834c:	0145c83a 	sub	r2,zero,r5
    8350:	1007d53a 	srai	r3,r2,20
    8354:	000d883a 	mov	r6,zero
    8358:	0140040e 	bge	zero,r5,836c <__ulp+0x2c>
    835c:	280f883a 	mov	r7,r5
    8360:	3807883a 	mov	r3,r7
    8364:	3005883a 	mov	r2,r6
    8368:	f800283a 	ret
    836c:	008004c4 	movi	r2,19
    8370:	193ffb04 	addi	r4,r3,-20
    8374:	10c00c0e 	bge	r2,r3,83a8 <__ulp+0x68>
    8378:	008007c4 	movi	r2,31
    837c:	1107c83a 	sub	r3,r2,r4
    8380:	00800784 	movi	r2,30
    8384:	01400044 	movi	r5,1
    8388:	11000216 	blt	r2,r4,8394 <__ulp+0x54>
    838c:	00800044 	movi	r2,1
    8390:	10ca983a 	sll	r5,r2,r3
    8394:	000f883a 	mov	r7,zero
    8398:	280d883a 	mov	r6,r5
    839c:	3807883a 	mov	r3,r7
    83a0:	3005883a 	mov	r2,r6
    83a4:	f800283a 	ret
    83a8:	00800234 	movhi	r2,8
    83ac:	10cfd83a 	sra	r7,r2,r3
    83b0:	000d883a 	mov	r6,zero
    83b4:	3005883a 	mov	r2,r6
    83b8:	3807883a 	mov	r3,r7
    83bc:	f800283a 	ret

000083c0 <__b2d>:
    83c0:	20800417 	ldw	r2,16(r4)
    83c4:	defff904 	addi	sp,sp,-28
    83c8:	dd000415 	stw	r20,16(sp)
    83cc:	1085883a 	add	r2,r2,r2
    83d0:	25000504 	addi	r20,r4,20
    83d4:	1085883a 	add	r2,r2,r2
    83d8:	dc000015 	stw	r16,0(sp)
    83dc:	a0a1883a 	add	r16,r20,r2
    83e0:	dd400515 	stw	r21,20(sp)
    83e4:	857fff17 	ldw	r21,-4(r16)
    83e8:	dc400115 	stw	r17,4(sp)
    83ec:	dfc00615 	stw	ra,24(sp)
    83f0:	a809883a 	mov	r4,r21
    83f4:	2823883a 	mov	r17,r5
    83f8:	dcc00315 	stw	r19,12(sp)
    83fc:	dc800215 	stw	r18,8(sp)
    8400:	00081ac0 	call	81ac <__hi0bits>
    8404:	100b883a 	mov	r5,r2
    8408:	00800804 	movi	r2,32
    840c:	1145c83a 	sub	r2,r2,r5
    8410:	88800015 	stw	r2,0(r17)
    8414:	00800284 	movi	r2,10
    8418:	80ffff04 	addi	r3,r16,-4
    841c:	11401416 	blt	r2,r5,8470 <__b2d+0xb0>
    8420:	008002c4 	movi	r2,11
    8424:	1149c83a 	sub	r4,r2,r5
    8428:	a0c02736 	bltu	r20,r3,84c8 <__b2d+0x108>
    842c:	000d883a 	mov	r6,zero
    8430:	28800544 	addi	r2,r5,21
    8434:	a906d83a 	srl	r3,r21,r4
    8438:	a884983a 	sll	r2,r21,r2
    843c:	1ccffc34 	orhi	r19,r3,16368
    8440:	11a4b03a 	or	r18,r2,r6
    8444:	9005883a 	mov	r2,r18
    8448:	9807883a 	mov	r3,r19
    844c:	dfc00617 	ldw	ra,24(sp)
    8450:	dd400517 	ldw	r21,20(sp)
    8454:	dd000417 	ldw	r20,16(sp)
    8458:	dcc00317 	ldw	r19,12(sp)
    845c:	dc800217 	ldw	r18,8(sp)
    8460:	dc400117 	ldw	r17,4(sp)
    8464:	dc000017 	ldw	r16,0(sp)
    8468:	dec00704 	addi	sp,sp,28
    846c:	f800283a 	ret
    8470:	a0c00e36 	bltu	r20,r3,84ac <__b2d+0xec>
    8474:	293ffd44 	addi	r4,r5,-11
    8478:	000d883a 	mov	r6,zero
    847c:	20000f26 	beq	r4,zero,84bc <__b2d+0xfc>
    8480:	00800804 	movi	r2,32
    8484:	110bc83a 	sub	r5,r2,r4
    8488:	a0c01236 	bltu	r20,r3,84d4 <__b2d+0x114>
    848c:	000f883a 	mov	r7,zero
    8490:	a904983a 	sll	r2,r21,r4
    8494:	3146d83a 	srl	r3,r6,r5
    8498:	3108983a 	sll	r4,r6,r4
    849c:	108ffc34 	orhi	r2,r2,16368
    84a0:	18a6b03a 	or	r19,r3,r2
    84a4:	3924b03a 	or	r18,r7,r4
    84a8:	003fe606 	br	8444 <__b2d+0x84>
    84ac:	293ffd44 	addi	r4,r5,-11
    84b0:	81bffe17 	ldw	r6,-8(r16)
    84b4:	80fffe04 	addi	r3,r16,-8
    84b8:	203ff11e 	bne	r4,zero,8480 <__b2d+0xc0>
    84bc:	accffc34 	orhi	r19,r21,16368
    84c0:	3025883a 	mov	r18,r6
    84c4:	003fdf06 	br	8444 <__b2d+0x84>
    84c8:	18bfff17 	ldw	r2,-4(r3)
    84cc:	110cd83a 	srl	r6,r2,r4
    84d0:	003fd706 	br	8430 <__b2d+0x70>
    84d4:	18bfff17 	ldw	r2,-4(r3)
    84d8:	114ed83a 	srl	r7,r2,r5
    84dc:	003fec06 	br	8490 <__b2d+0xd0>

000084e0 <__ratio>:
    84e0:	defff904 	addi	sp,sp,-28
    84e4:	dc400215 	stw	r17,8(sp)
    84e8:	2823883a 	mov	r17,r5
    84ec:	d80b883a 	mov	r5,sp
    84f0:	dfc00615 	stw	ra,24(sp)
    84f4:	dd000515 	stw	r20,20(sp)
    84f8:	dcc00415 	stw	r19,16(sp)
    84fc:	dc800315 	stw	r18,12(sp)
    8500:	2025883a 	mov	r18,r4
    8504:	00083c00 	call	83c0 <__b2d>
    8508:	8809883a 	mov	r4,r17
    850c:	d9400104 	addi	r5,sp,4
    8510:	1027883a 	mov	r19,r2
    8514:	1829883a 	mov	r20,r3
    8518:	00083c00 	call	83c0 <__b2d>
    851c:	89000417 	ldw	r4,16(r17)
    8520:	91c00417 	ldw	r7,16(r18)
    8524:	d9800117 	ldw	r6,4(sp)
    8528:	180b883a 	mov	r5,r3
    852c:	390fc83a 	sub	r7,r7,r4
    8530:	1009883a 	mov	r4,r2
    8534:	d8800017 	ldw	r2,0(sp)
    8538:	380e917a 	slli	r7,r7,5
    853c:	2011883a 	mov	r8,r4
    8540:	1185c83a 	sub	r2,r2,r6
    8544:	11c5883a 	add	r2,r2,r7
    8548:	1006953a 	slli	r3,r2,20
    854c:	2813883a 	mov	r9,r5
    8550:	00800d0e 	bge	zero,r2,8588 <__ratio+0xa8>
    8554:	1d29883a 	add	r20,r3,r20
    8558:	a00b883a 	mov	r5,r20
    855c:	480f883a 	mov	r7,r9
    8560:	9809883a 	mov	r4,r19
    8564:	400d883a 	mov	r6,r8
    8568:	000b2cc0 	call	b2cc <__divdf3>
    856c:	dfc00617 	ldw	ra,24(sp)
    8570:	dd000517 	ldw	r20,20(sp)
    8574:	dcc00417 	ldw	r19,16(sp)
    8578:	dc800317 	ldw	r18,12(sp)
    857c:	dc400217 	ldw	r17,8(sp)
    8580:	dec00704 	addi	sp,sp,28
    8584:	f800283a 	ret
    8588:	28d3c83a 	sub	r9,r5,r3
    858c:	003ff206 	br	8558 <__ratio+0x78>

00008590 <_mprec_log10>:
    8590:	defffe04 	addi	sp,sp,-8
    8594:	008005c4 	movi	r2,23
    8598:	dc000015 	stw	r16,0(sp)
    859c:	dfc00115 	stw	ra,4(sp)
    85a0:	2021883a 	mov	r16,r4
    85a4:	11000c16 	blt	r2,r4,85d8 <_mprec_log10+0x48>
    85a8:	200490fa 	slli	r2,r4,3
    85ac:	00c00074 	movhi	r3,1
    85b0:	18fc2a04 	addi	r3,r3,-3928
    85b4:	10c5883a 	add	r2,r2,r3
    85b8:	12400117 	ldw	r9,4(r2)
    85bc:	12000017 	ldw	r8,0(r2)
    85c0:	4807883a 	mov	r3,r9
    85c4:	4005883a 	mov	r2,r8
    85c8:	dfc00117 	ldw	ra,4(sp)
    85cc:	dc000017 	ldw	r16,0(sp)
    85d0:	dec00204 	addi	sp,sp,8
    85d4:	f800283a 	ret
    85d8:	0011883a 	mov	r8,zero
    85dc:	024ffc34 	movhi	r9,16368
    85e0:	0005883a 	mov	r2,zero
    85e4:	00d00934 	movhi	r3,16420
    85e8:	480b883a 	mov	r5,r9
    85ec:	4009883a 	mov	r4,r8
    85f0:	180f883a 	mov	r7,r3
    85f4:	100d883a 	mov	r6,r2
    85f8:	000af080 	call	af08 <__muldf3>
    85fc:	843fffc4 	addi	r16,r16,-1
    8600:	1011883a 	mov	r8,r2
    8604:	1813883a 	mov	r9,r3
    8608:	803ff51e 	bne	r16,zero,85e0 <_mprec_log10+0x50>
    860c:	4005883a 	mov	r2,r8
    8610:	4807883a 	mov	r3,r9
    8614:	dfc00117 	ldw	ra,4(sp)
    8618:	dc000017 	ldw	r16,0(sp)
    861c:	dec00204 	addi	sp,sp,8
    8620:	f800283a 	ret

00008624 <__copybits>:
    8624:	297fffc4 	addi	r5,r5,-1
    8628:	30800417 	ldw	r2,16(r6)
    862c:	280bd17a 	srai	r5,r5,5
    8630:	31800504 	addi	r6,r6,20
    8634:	1085883a 	add	r2,r2,r2
    8638:	294b883a 	add	r5,r5,r5
    863c:	294b883a 	add	r5,r5,r5
    8640:	1085883a 	add	r2,r2,r2
    8644:	290b883a 	add	r5,r5,r4
    8648:	3087883a 	add	r3,r6,r2
    864c:	29400104 	addi	r5,r5,4
    8650:	30c0052e 	bgeu	r6,r3,8668 <__copybits+0x44>
    8654:	30800017 	ldw	r2,0(r6)
    8658:	31800104 	addi	r6,r6,4
    865c:	20800015 	stw	r2,0(r4)
    8660:	21000104 	addi	r4,r4,4
    8664:	30fffb36 	bltu	r6,r3,8654 <__copybits+0x30>
    8668:	2140032e 	bgeu	r4,r5,8678 <__copybits+0x54>
    866c:	20000015 	stw	zero,0(r4)
    8670:	21000104 	addi	r4,r4,4
    8674:	217ffd36 	bltu	r4,r5,866c <__copybits+0x48>
    8678:	f800283a 	ret

0000867c <__any_on>:
    867c:	20800417 	ldw	r2,16(r4)
    8680:	2807d17a 	srai	r3,r5,5
    8684:	21000504 	addi	r4,r4,20
    8688:	10c00d0e 	bge	r2,r3,86c0 <__any_on+0x44>
    868c:	1085883a 	add	r2,r2,r2
    8690:	1085883a 	add	r2,r2,r2
    8694:	208d883a 	add	r6,r4,r2
    8698:	2180182e 	bgeu	r4,r6,86fc <__any_on+0x80>
    869c:	30bfff17 	ldw	r2,-4(r6)
    86a0:	30ffff04 	addi	r3,r6,-4
    86a4:	1000041e 	bne	r2,zero,86b8 <__any_on+0x3c>
    86a8:	20c0142e 	bgeu	r4,r3,86fc <__any_on+0x80>
    86ac:	18ffff04 	addi	r3,r3,-4
    86b0:	18800017 	ldw	r2,0(r3)
    86b4:	103ffc26 	beq	r2,zero,86a8 <__any_on+0x2c>
    86b8:	00800044 	movi	r2,1
    86bc:	f800283a 	ret
    86c0:	18800a0e 	bge	r3,r2,86ec <__any_on+0x70>
    86c4:	294007cc 	andi	r5,r5,31
    86c8:	28000826 	beq	r5,zero,86ec <__any_on+0x70>
    86cc:	18c5883a 	add	r2,r3,r3
    86d0:	1085883a 	add	r2,r2,r2
    86d4:	208d883a 	add	r6,r4,r2
    86d8:	30c00017 	ldw	r3,0(r6)
    86dc:	1944d83a 	srl	r2,r3,r5
    86e0:	1144983a 	sll	r2,r2,r5
    86e4:	18bff41e 	bne	r3,r2,86b8 <__any_on+0x3c>
    86e8:	003feb06 	br	8698 <__any_on+0x1c>
    86ec:	18c5883a 	add	r2,r3,r3
    86f0:	1085883a 	add	r2,r2,r2
    86f4:	208d883a 	add	r6,r4,r2
    86f8:	003fe706 	br	8698 <__any_on+0x1c>
    86fc:	0005883a 	mov	r2,zero
    8700:	f800283a 	ret

00008704 <_Balloc>:
    8704:	20c01317 	ldw	r3,76(r4)
    8708:	defffb04 	addi	sp,sp,-20
    870c:	dcc00315 	stw	r19,12(sp)
    8710:	dc800215 	stw	r18,8(sp)
    8714:	dfc00415 	stw	ra,16(sp)
    8718:	2825883a 	mov	r18,r5
    871c:	dc400115 	stw	r17,4(sp)
    8720:	dc000015 	stw	r16,0(sp)
    8724:	2027883a 	mov	r19,r4
    8728:	01800404 	movi	r6,16
    872c:	01400104 	movi	r5,4
    8730:	18001726 	beq	r3,zero,8790 <_Balloc+0x8c>
    8734:	01400044 	movi	r5,1
    8738:	9485883a 	add	r2,r18,r18
    873c:	2ca2983a 	sll	r17,r5,r18
    8740:	1085883a 	add	r2,r2,r2
    8744:	10c7883a 	add	r3,r2,r3
    8748:	1c000017 	ldw	r16,0(r3)
    874c:	8c4d883a 	add	r6,r17,r17
    8750:	318d883a 	add	r6,r6,r6
    8754:	9809883a 	mov	r4,r19
    8758:	31800504 	addi	r6,r6,20
    875c:	80001226 	beq	r16,zero,87a8 <_Balloc+0xa4>
    8760:	80800017 	ldw	r2,0(r16)
    8764:	18800015 	stw	r2,0(r3)
    8768:	80000415 	stw	zero,16(r16)
    876c:	80000315 	stw	zero,12(r16)
    8770:	8005883a 	mov	r2,r16
    8774:	dfc00417 	ldw	ra,16(sp)
    8778:	dcc00317 	ldw	r19,12(sp)
    877c:	dc800217 	ldw	r18,8(sp)
    8780:	dc400117 	ldw	r17,4(sp)
    8784:	dc000017 	ldw	r16,0(sp)
    8788:	dec00504 	addi	sp,sp,20
    878c:	f800283a 	ret
    8790:	0009a5c0 	call	9a5c <_calloc_r>
    8794:	1007883a 	mov	r3,r2
    8798:	0021883a 	mov	r16,zero
    879c:	98801315 	stw	r2,76(r19)
    87a0:	103fe41e 	bne	r2,zero,8734 <_Balloc+0x30>
    87a4:	003ff206 	br	8770 <_Balloc+0x6c>
    87a8:	0009a5c0 	call	9a5c <_calloc_r>
    87ac:	103ff026 	beq	r2,zero,8770 <_Balloc+0x6c>
    87b0:	1021883a 	mov	r16,r2
    87b4:	14800115 	stw	r18,4(r2)
    87b8:	14400215 	stw	r17,8(r2)
    87bc:	003fea06 	br	8768 <_Balloc+0x64>

000087c0 <__d2b>:
    87c0:	defff504 	addi	sp,sp,-44
    87c4:	dcc00515 	stw	r19,20(sp)
    87c8:	04c00044 	movi	r19,1
    87cc:	dc000215 	stw	r16,8(sp)
    87d0:	2821883a 	mov	r16,r5
    87d4:	980b883a 	mov	r5,r19
    87d8:	ddc00915 	stw	r23,36(sp)
    87dc:	dd800815 	stw	r22,32(sp)
    87e0:	dd400715 	stw	r21,28(sp)
    87e4:	dd000615 	stw	r20,24(sp)
    87e8:	dc800415 	stw	r18,16(sp)
    87ec:	dc400315 	stw	r17,12(sp)
    87f0:	dfc00a15 	stw	ra,40(sp)
    87f4:	3023883a 	mov	r17,r6
    87f8:	382d883a 	mov	r22,r7
    87fc:	ddc00b17 	ldw	r23,44(sp)
    8800:	00087040 	call	8704 <_Balloc>
    8804:	1025883a 	mov	r18,r2
    8808:	00a00034 	movhi	r2,32768
    880c:	10bfffc4 	addi	r2,r2,-1
    8810:	8888703a 	and	r4,r17,r2
    8814:	202ad53a 	srli	r21,r4,20
    8818:	00800434 	movhi	r2,16
    881c:	10bfffc4 	addi	r2,r2,-1
    8820:	8886703a 	and	r3,r17,r2
    8824:	a829003a 	cmpeq	r20,r21,zero
    8828:	800b883a 	mov	r5,r16
    882c:	d8c00115 	stw	r3,4(sp)
    8830:	94000504 	addi	r16,r18,20
    8834:	a000021e 	bne	r20,zero,8840 <__d2b+0x80>
    8838:	18c00434 	orhi	r3,r3,16
    883c:	d8c00115 	stw	r3,4(sp)
    8840:	28002726 	beq	r5,zero,88e0 <__d2b+0x120>
    8844:	d809883a 	mov	r4,sp
    8848:	d9400015 	stw	r5,0(sp)
    884c:	000821c0 	call	821c <__lo0bits>
    8850:	100d883a 	mov	r6,r2
    8854:	10003526 	beq	r2,zero,892c <__d2b+0x16c>
    8858:	d8c00117 	ldw	r3,4(sp)
    885c:	00800804 	movi	r2,32
    8860:	1185c83a 	sub	r2,r2,r6
    8864:	d9000017 	ldw	r4,0(sp)
    8868:	1886983a 	sll	r3,r3,r2
    886c:	1906b03a 	or	r3,r3,r4
    8870:	90c00515 	stw	r3,20(r18)
    8874:	d8c00117 	ldw	r3,4(sp)
    8878:	1986d83a 	srl	r3,r3,r6
    887c:	d8c00115 	stw	r3,4(sp)
    8880:	180b003a 	cmpeq	r5,r3,zero
    8884:	00800084 	movi	r2,2
    8888:	114bc83a 	sub	r5,r2,r5
    888c:	80c00115 	stw	r3,4(r16)
    8890:	91400415 	stw	r5,16(r18)
    8894:	a0001a1e 	bne	r20,zero,8900 <__d2b+0x140>
    8898:	3545883a 	add	r2,r6,r21
    889c:	10bef344 	addi	r2,r2,-1075
    88a0:	00c00d44 	movi	r3,53
    88a4:	b0800015 	stw	r2,0(r22)
    88a8:	1987c83a 	sub	r3,r3,r6
    88ac:	b8c00015 	stw	r3,0(r23)
    88b0:	9005883a 	mov	r2,r18
    88b4:	dfc00a17 	ldw	ra,40(sp)
    88b8:	ddc00917 	ldw	r23,36(sp)
    88bc:	dd800817 	ldw	r22,32(sp)
    88c0:	dd400717 	ldw	r21,28(sp)
    88c4:	dd000617 	ldw	r20,24(sp)
    88c8:	dcc00517 	ldw	r19,20(sp)
    88cc:	dc800417 	ldw	r18,16(sp)
    88d0:	dc400317 	ldw	r17,12(sp)
    88d4:	dc000217 	ldw	r16,8(sp)
    88d8:	dec00b04 	addi	sp,sp,44
    88dc:	f800283a 	ret
    88e0:	d9000104 	addi	r4,sp,4
    88e4:	000821c0 	call	821c <__lo0bits>
    88e8:	11800804 	addi	r6,r2,32
    88ec:	d8800117 	ldw	r2,4(sp)
    88f0:	94c00415 	stw	r19,16(r18)
    88f4:	980b883a 	mov	r5,r19
    88f8:	90800515 	stw	r2,20(r18)
    88fc:	a03fe626 	beq	r20,zero,8898 <__d2b+0xd8>
    8900:	2945883a 	add	r2,r5,r5
    8904:	1085883a 	add	r2,r2,r2
    8908:	1405883a 	add	r2,r2,r16
    890c:	113fff17 	ldw	r4,-4(r2)
    8910:	30fef384 	addi	r3,r6,-1074
    8914:	2820917a 	slli	r16,r5,5
    8918:	b0c00015 	stw	r3,0(r22)
    891c:	00081ac0 	call	81ac <__hi0bits>
    8920:	80a1c83a 	sub	r16,r16,r2
    8924:	bc000015 	stw	r16,0(r23)
    8928:	003fe106 	br	88b0 <__d2b+0xf0>
    892c:	d8800017 	ldw	r2,0(sp)
    8930:	90800515 	stw	r2,20(r18)
    8934:	d8c00117 	ldw	r3,4(sp)
    8938:	003fd106 	br	8880 <__d2b+0xc0>

0000893c <__mdiff>:
    893c:	defffb04 	addi	sp,sp,-20
    8940:	dc000015 	stw	r16,0(sp)
    8944:	2821883a 	mov	r16,r5
    8948:	dc800215 	stw	r18,8(sp)
    894c:	300b883a 	mov	r5,r6
    8950:	2025883a 	mov	r18,r4
    8954:	8009883a 	mov	r4,r16
    8958:	dc400115 	stw	r17,4(sp)
    895c:	dfc00415 	stw	ra,16(sp)
    8960:	dcc00315 	stw	r19,12(sp)
    8964:	3023883a 	mov	r17,r6
    8968:	00082e00 	call	82e0 <__mcmp>
    896c:	10004226 	beq	r2,zero,8a78 <__mdiff+0x13c>
    8970:	10005016 	blt	r2,zero,8ab4 <__mdiff+0x178>
    8974:	0027883a 	mov	r19,zero
    8978:	81400117 	ldw	r5,4(r16)
    897c:	9009883a 	mov	r4,r18
    8980:	00087040 	call	8704 <_Balloc>
    8984:	1019883a 	mov	r12,r2
    8988:	82800417 	ldw	r10,16(r16)
    898c:	88800417 	ldw	r2,16(r17)
    8990:	81800504 	addi	r6,r16,20
    8994:	5287883a 	add	r3,r10,r10
    8998:	1085883a 	add	r2,r2,r2
    899c:	18c7883a 	add	r3,r3,r3
    89a0:	1085883a 	add	r2,r2,r2
    89a4:	8a000504 	addi	r8,r17,20
    89a8:	64c00315 	stw	r19,12(r12)
    89ac:	30db883a 	add	r13,r6,r3
    89b0:	4097883a 	add	r11,r8,r2
    89b4:	61c00504 	addi	r7,r12,20
    89b8:	0013883a 	mov	r9,zero
    89bc:	31000017 	ldw	r4,0(r6)
    89c0:	41400017 	ldw	r5,0(r8)
    89c4:	42000104 	addi	r8,r8,4
    89c8:	20bfffcc 	andi	r2,r4,65535
    89cc:	28ffffcc 	andi	r3,r5,65535
    89d0:	10c5c83a 	sub	r2,r2,r3
    89d4:	1245883a 	add	r2,r2,r9
    89d8:	2008d43a 	srli	r4,r4,16
    89dc:	280ad43a 	srli	r5,r5,16
    89e0:	1007d43a 	srai	r3,r2,16
    89e4:	3880000d 	sth	r2,0(r7)
    89e8:	2149c83a 	sub	r4,r4,r5
    89ec:	20c9883a 	add	r4,r4,r3
    89f0:	3900008d 	sth	r4,2(r7)
    89f4:	31800104 	addi	r6,r6,4
    89f8:	39c00104 	addi	r7,r7,4
    89fc:	2013d43a 	srai	r9,r4,16
    8a00:	42ffee36 	bltu	r8,r11,89bc <__mdiff+0x80>
    8a04:	33400c2e 	bgeu	r6,r13,8a38 <__mdiff+0xfc>
    8a08:	30800017 	ldw	r2,0(r6)
    8a0c:	31800104 	addi	r6,r6,4
    8a10:	10ffffcc 	andi	r3,r2,65535
    8a14:	1a47883a 	add	r3,r3,r9
    8a18:	1004d43a 	srli	r2,r2,16
    8a1c:	1809d43a 	srai	r4,r3,16
    8a20:	38c0000d 	sth	r3,0(r7)
    8a24:	1105883a 	add	r2,r2,r4
    8a28:	3880008d 	sth	r2,2(r7)
    8a2c:	1013d43a 	srai	r9,r2,16
    8a30:	39c00104 	addi	r7,r7,4
    8a34:	337ff436 	bltu	r6,r13,8a08 <__mdiff+0xcc>
    8a38:	38bfff17 	ldw	r2,-4(r7)
    8a3c:	38ffff04 	addi	r3,r7,-4
    8a40:	1000041e 	bne	r2,zero,8a54 <__mdiff+0x118>
    8a44:	18ffff04 	addi	r3,r3,-4
    8a48:	18800017 	ldw	r2,0(r3)
    8a4c:	52bfffc4 	addi	r10,r10,-1
    8a50:	103ffc26 	beq	r2,zero,8a44 <__mdiff+0x108>
    8a54:	6005883a 	mov	r2,r12
    8a58:	62800415 	stw	r10,16(r12)
    8a5c:	dfc00417 	ldw	ra,16(sp)
    8a60:	dcc00317 	ldw	r19,12(sp)
    8a64:	dc800217 	ldw	r18,8(sp)
    8a68:	dc400117 	ldw	r17,4(sp)
    8a6c:	dc000017 	ldw	r16,0(sp)
    8a70:	dec00504 	addi	sp,sp,20
    8a74:	f800283a 	ret
    8a78:	9009883a 	mov	r4,r18
    8a7c:	000b883a 	mov	r5,zero
    8a80:	00087040 	call	8704 <_Balloc>
    8a84:	1019883a 	mov	r12,r2
    8a88:	00800044 	movi	r2,1
    8a8c:	60800415 	stw	r2,16(r12)
    8a90:	6005883a 	mov	r2,r12
    8a94:	60000515 	stw	zero,20(r12)
    8a98:	dfc00417 	ldw	ra,16(sp)
    8a9c:	dcc00317 	ldw	r19,12(sp)
    8aa0:	dc800217 	ldw	r18,8(sp)
    8aa4:	dc400117 	ldw	r17,4(sp)
    8aa8:	dc000017 	ldw	r16,0(sp)
    8aac:	dec00504 	addi	sp,sp,20
    8ab0:	f800283a 	ret
    8ab4:	880d883a 	mov	r6,r17
    8ab8:	04c00044 	movi	r19,1
    8abc:	8023883a 	mov	r17,r16
    8ac0:	3021883a 	mov	r16,r6
    8ac4:	003fac06 	br	8978 <__mdiff+0x3c>

00008ac8 <__lshift>:
    8ac8:	defff904 	addi	sp,sp,-28
    8acc:	28800417 	ldw	r2,16(r5)
    8ad0:	dc000015 	stw	r16,0(sp)
    8ad4:	3021d17a 	srai	r16,r6,5
    8ad8:	28c00217 	ldw	r3,8(r5)
    8adc:	10800044 	addi	r2,r2,1
    8ae0:	dc400115 	stw	r17,4(sp)
    8ae4:	80a3883a 	add	r17,r16,r2
    8ae8:	dd400515 	stw	r21,20(sp)
    8aec:	dd000415 	stw	r20,16(sp)
    8af0:	dc800215 	stw	r18,8(sp)
    8af4:	dfc00615 	stw	ra,24(sp)
    8af8:	2825883a 	mov	r18,r5
    8afc:	dcc00315 	stw	r19,12(sp)
    8b00:	3029883a 	mov	r20,r6
    8b04:	202b883a 	mov	r21,r4
    8b08:	29400117 	ldw	r5,4(r5)
    8b0c:	1c40030e 	bge	r3,r17,8b1c <__lshift+0x54>
    8b10:	18c7883a 	add	r3,r3,r3
    8b14:	29400044 	addi	r5,r5,1
    8b18:	1c7ffd16 	blt	r3,r17,8b10 <__lshift+0x48>
    8b1c:	a809883a 	mov	r4,r21
    8b20:	00087040 	call	8704 <_Balloc>
    8b24:	1027883a 	mov	r19,r2
    8b28:	11400504 	addi	r5,r2,20
    8b2c:	0400090e 	bge	zero,r16,8b54 <__lshift+0x8c>
    8b30:	2805883a 	mov	r2,r5
    8b34:	0007883a 	mov	r3,zero
    8b38:	18c00044 	addi	r3,r3,1
    8b3c:	10000015 	stw	zero,0(r2)
    8b40:	10800104 	addi	r2,r2,4
    8b44:	80fffc1e 	bne	r16,r3,8b38 <__lshift+0x70>
    8b48:	8405883a 	add	r2,r16,r16
    8b4c:	1085883a 	add	r2,r2,r2
    8b50:	288b883a 	add	r5,r5,r2
    8b54:	90800417 	ldw	r2,16(r18)
    8b58:	91000504 	addi	r4,r18,20
    8b5c:	a18007cc 	andi	r6,r20,31
    8b60:	1085883a 	add	r2,r2,r2
    8b64:	1085883a 	add	r2,r2,r2
    8b68:	208f883a 	add	r7,r4,r2
    8b6c:	30001e26 	beq	r6,zero,8be8 <__lshift+0x120>
    8b70:	00800804 	movi	r2,32
    8b74:	1191c83a 	sub	r8,r2,r6
    8b78:	0007883a 	mov	r3,zero
    8b7c:	20800017 	ldw	r2,0(r4)
    8b80:	1184983a 	sll	r2,r2,r6
    8b84:	1884b03a 	or	r2,r3,r2
    8b88:	28800015 	stw	r2,0(r5)
    8b8c:	20c00017 	ldw	r3,0(r4)
    8b90:	21000104 	addi	r4,r4,4
    8b94:	29400104 	addi	r5,r5,4
    8b98:	1a06d83a 	srl	r3,r3,r8
    8b9c:	21fff736 	bltu	r4,r7,8b7c <__lshift+0xb4>
    8ba0:	28c00015 	stw	r3,0(r5)
    8ba4:	18000126 	beq	r3,zero,8bac <__lshift+0xe4>
    8ba8:	8c400044 	addi	r17,r17,1
    8bac:	88bfffc4 	addi	r2,r17,-1
    8bb0:	98800415 	stw	r2,16(r19)
    8bb4:	a809883a 	mov	r4,r21
    8bb8:	900b883a 	mov	r5,r18
    8bbc:	00081840 	call	8184 <_Bfree>
    8bc0:	9805883a 	mov	r2,r19
    8bc4:	dfc00617 	ldw	ra,24(sp)
    8bc8:	dd400517 	ldw	r21,20(sp)
    8bcc:	dd000417 	ldw	r20,16(sp)
    8bd0:	dcc00317 	ldw	r19,12(sp)
    8bd4:	dc800217 	ldw	r18,8(sp)
    8bd8:	dc400117 	ldw	r17,4(sp)
    8bdc:	dc000017 	ldw	r16,0(sp)
    8be0:	dec00704 	addi	sp,sp,28
    8be4:	f800283a 	ret
    8be8:	20800017 	ldw	r2,0(r4)
    8bec:	21000104 	addi	r4,r4,4
    8bf0:	28800015 	stw	r2,0(r5)
    8bf4:	29400104 	addi	r5,r5,4
    8bf8:	21ffec2e 	bgeu	r4,r7,8bac <__lshift+0xe4>
    8bfc:	20800017 	ldw	r2,0(r4)
    8c00:	21000104 	addi	r4,r4,4
    8c04:	28800015 	stw	r2,0(r5)
    8c08:	29400104 	addi	r5,r5,4
    8c0c:	21fff636 	bltu	r4,r7,8be8 <__lshift+0x120>
    8c10:	003fe606 	br	8bac <__lshift+0xe4>

00008c14 <__multiply>:
    8c14:	defff904 	addi	sp,sp,-28
    8c18:	dcc00315 	stw	r19,12(sp)
    8c1c:	dc800215 	stw	r18,8(sp)
    8c20:	2cc00417 	ldw	r19,16(r5)
    8c24:	34800417 	ldw	r18,16(r6)
    8c28:	dd000415 	stw	r20,16(sp)
    8c2c:	dc400115 	stw	r17,4(sp)
    8c30:	dfc00615 	stw	ra,24(sp)
    8c34:	dd400515 	stw	r21,20(sp)
    8c38:	dc000015 	stw	r16,0(sp)
    8c3c:	2823883a 	mov	r17,r5
    8c40:	3029883a 	mov	r20,r6
    8c44:	9c80040e 	bge	r19,r18,8c58 <__multiply+0x44>
    8c48:	9027883a 	mov	r19,r18
    8c4c:	2c800417 	ldw	r18,16(r5)
    8c50:	2829883a 	mov	r20,r5
    8c54:	3023883a 	mov	r17,r6
    8c58:	88800217 	ldw	r2,8(r17)
    8c5c:	9ca1883a 	add	r16,r19,r18
    8c60:	89400117 	ldw	r5,4(r17)
    8c64:	1400010e 	bge	r2,r16,8c6c <__multiply+0x58>
    8c68:	29400044 	addi	r5,r5,1
    8c6c:	00087040 	call	8704 <_Balloc>
    8c70:	102b883a 	mov	r21,r2
    8c74:	8405883a 	add	r2,r16,r16
    8c78:	1085883a 	add	r2,r2,r2
    8c7c:	a9000504 	addi	r4,r21,20
    8c80:	209d883a 	add	r14,r4,r2
    8c84:	2380042e 	bgeu	r4,r14,8c98 <__multiply+0x84>
    8c88:	2005883a 	mov	r2,r4
    8c8c:	10000015 	stw	zero,0(r2)
    8c90:	10800104 	addi	r2,r2,4
    8c94:	13bffd36 	bltu	r2,r14,8c8c <__multiply+0x78>
    8c98:	9485883a 	add	r2,r18,r18
    8c9c:	9cc7883a 	add	r3,r19,r19
    8ca0:	a1800504 	addi	r6,r20,20
    8ca4:	1085883a 	add	r2,r2,r2
    8ca8:	8b400504 	addi	r13,r17,20
    8cac:	18c7883a 	add	r3,r3,r3
    8cb0:	309f883a 	add	r15,r6,r2
    8cb4:	68d7883a 	add	r11,r13,r3
    8cb8:	33c03b2e 	bgeu	r6,r15,8da8 <__multiply+0x194>
    8cbc:	2019883a 	mov	r12,r4
    8cc0:	30800017 	ldw	r2,0(r6)
    8cc4:	127fffcc 	andi	r9,r2,65535
    8cc8:	48001826 	beq	r9,zero,8d2c <__multiply+0x118>
    8ccc:	6811883a 	mov	r8,r13
    8cd0:	600f883a 	mov	r7,r12
    8cd4:	0015883a 	mov	r10,zero
    8cd8:	40c00017 	ldw	r3,0(r8)
    8cdc:	39400017 	ldw	r5,0(r7)
    8ce0:	42000104 	addi	r8,r8,4
    8ce4:	193fffcc 	andi	r4,r3,65535
    8ce8:	4909383a 	mul	r4,r9,r4
    8cec:	1806d43a 	srli	r3,r3,16
    8cf0:	28bfffcc 	andi	r2,r5,65535
    8cf4:	5085883a 	add	r2,r10,r2
    8cf8:	2089883a 	add	r4,r4,r2
    8cfc:	48c7383a 	mul	r3,r9,r3
    8d00:	280ad43a 	srli	r5,r5,16
    8d04:	2004d43a 	srli	r2,r4,16
    8d08:	3900000d 	sth	r4,0(r7)
    8d0c:	1947883a 	add	r3,r3,r5
    8d10:	10c5883a 	add	r2,r2,r3
    8d14:	3880008d 	sth	r2,2(r7)
    8d18:	1014d43a 	srli	r10,r2,16
    8d1c:	39c00104 	addi	r7,r7,4
    8d20:	42ffed36 	bltu	r8,r11,8cd8 <__multiply+0xc4>
    8d24:	3a800015 	stw	r10,0(r7)
    8d28:	30800017 	ldw	r2,0(r6)
    8d2c:	1012d43a 	srli	r9,r2,16
    8d30:	48001926 	beq	r9,zero,8d98 <__multiply+0x184>
    8d34:	60800017 	ldw	r2,0(r12)
    8d38:	6811883a 	mov	r8,r13
    8d3c:	600f883a 	mov	r7,r12
    8d40:	0015883a 	mov	r10,zero
    8d44:	100b883a 	mov	r5,r2
    8d48:	41000017 	ldw	r4,0(r8)
    8d4c:	2806d43a 	srli	r3,r5,16
    8d50:	3880000d 	sth	r2,0(r7)
    8d54:	20bfffcc 	andi	r2,r4,65535
    8d58:	4885383a 	mul	r2,r9,r2
    8d5c:	50c7883a 	add	r3,r10,r3
    8d60:	2008d43a 	srli	r4,r4,16
    8d64:	10c5883a 	add	r2,r2,r3
    8d68:	3880008d 	sth	r2,2(r7)
    8d6c:	39c00104 	addi	r7,r7,4
    8d70:	39400017 	ldw	r5,0(r7)
    8d74:	4909383a 	mul	r4,r9,r4
    8d78:	1004d43a 	srli	r2,r2,16
    8d7c:	28ffffcc 	andi	r3,r5,65535
    8d80:	20c9883a 	add	r4,r4,r3
    8d84:	1105883a 	add	r2,r2,r4
    8d88:	42000104 	addi	r8,r8,4
    8d8c:	1014d43a 	srli	r10,r2,16
    8d90:	42ffed36 	bltu	r8,r11,8d48 <__multiply+0x134>
    8d94:	38800015 	stw	r2,0(r7)
    8d98:	31800104 	addi	r6,r6,4
    8d9c:	33c0022e 	bgeu	r6,r15,8da8 <__multiply+0x194>
    8da0:	63000104 	addi	r12,r12,4
    8da4:	003fc606 	br	8cc0 <__multiply+0xac>
    8da8:	0400090e 	bge	zero,r16,8dd0 <__multiply+0x1bc>
    8dac:	70bfff17 	ldw	r2,-4(r14)
    8db0:	70ffff04 	addi	r3,r14,-4
    8db4:	10000326 	beq	r2,zero,8dc4 <__multiply+0x1b0>
    8db8:	00000506 	br	8dd0 <__multiply+0x1bc>
    8dbc:	18800017 	ldw	r2,0(r3)
    8dc0:	1000031e 	bne	r2,zero,8dd0 <__multiply+0x1bc>
    8dc4:	843fffc4 	addi	r16,r16,-1
    8dc8:	18ffff04 	addi	r3,r3,-4
    8dcc:	803ffb1e 	bne	r16,zero,8dbc <__multiply+0x1a8>
    8dd0:	a805883a 	mov	r2,r21
    8dd4:	ac000415 	stw	r16,16(r21)
    8dd8:	dfc00617 	ldw	ra,24(sp)
    8ddc:	dd400517 	ldw	r21,20(sp)
    8de0:	dd000417 	ldw	r20,16(sp)
    8de4:	dcc00317 	ldw	r19,12(sp)
    8de8:	dc800217 	ldw	r18,8(sp)
    8dec:	dc400117 	ldw	r17,4(sp)
    8df0:	dc000017 	ldw	r16,0(sp)
    8df4:	dec00704 	addi	sp,sp,28
    8df8:	f800283a 	ret

00008dfc <__i2b>:
    8dfc:	defffd04 	addi	sp,sp,-12
    8e00:	dc000015 	stw	r16,0(sp)
    8e04:	04000044 	movi	r16,1
    8e08:	dc800115 	stw	r18,4(sp)
    8e0c:	2825883a 	mov	r18,r5
    8e10:	800b883a 	mov	r5,r16
    8e14:	dfc00215 	stw	ra,8(sp)
    8e18:	00087040 	call	8704 <_Balloc>
    8e1c:	14000415 	stw	r16,16(r2)
    8e20:	14800515 	stw	r18,20(r2)
    8e24:	dfc00217 	ldw	ra,8(sp)
    8e28:	dc800117 	ldw	r18,4(sp)
    8e2c:	dc000017 	ldw	r16,0(sp)
    8e30:	dec00304 	addi	sp,sp,12
    8e34:	f800283a 	ret

00008e38 <__multadd>:
    8e38:	defffa04 	addi	sp,sp,-24
    8e3c:	dc800215 	stw	r18,8(sp)
    8e40:	2c800417 	ldw	r18,16(r5)
    8e44:	dd000415 	stw	r20,16(sp)
    8e48:	dcc00315 	stw	r19,12(sp)
    8e4c:	dc000015 	stw	r16,0(sp)
    8e50:	dfc00515 	stw	ra,20(sp)
    8e54:	3821883a 	mov	r16,r7
    8e58:	dc400115 	stw	r17,4(sp)
    8e5c:	2827883a 	mov	r19,r5
    8e60:	2029883a 	mov	r20,r4
    8e64:	2a000504 	addi	r8,r5,20
    8e68:	000f883a 	mov	r7,zero
    8e6c:	40800017 	ldw	r2,0(r8)
    8e70:	39c00044 	addi	r7,r7,1
    8e74:	10ffffcc 	andi	r3,r2,65535
    8e78:	1987383a 	mul	r3,r3,r6
    8e7c:	1004d43a 	srli	r2,r2,16
    8e80:	1c07883a 	add	r3,r3,r16
    8e84:	180ad43a 	srli	r5,r3,16
    8e88:	1185383a 	mul	r2,r2,r6
    8e8c:	18ffffcc 	andi	r3,r3,65535
    8e90:	1145883a 	add	r2,r2,r5
    8e94:	1008943a 	slli	r4,r2,16
    8e98:	1020d43a 	srli	r16,r2,16
    8e9c:	20c9883a 	add	r4,r4,r3
    8ea0:	41000015 	stw	r4,0(r8)
    8ea4:	42000104 	addi	r8,r8,4
    8ea8:	3cbff016 	blt	r7,r18,8e6c <__multadd+0x34>
    8eac:	80000826 	beq	r16,zero,8ed0 <__multadd+0x98>
    8eb0:	98800217 	ldw	r2,8(r19)
    8eb4:	90800f0e 	bge	r18,r2,8ef4 <__multadd+0xbc>
    8eb8:	9485883a 	add	r2,r18,r18
    8ebc:	1085883a 	add	r2,r2,r2
    8ec0:	14c5883a 	add	r2,r2,r19
    8ec4:	90c00044 	addi	r3,r18,1
    8ec8:	14000515 	stw	r16,20(r2)
    8ecc:	98c00415 	stw	r3,16(r19)
    8ed0:	9805883a 	mov	r2,r19
    8ed4:	dfc00517 	ldw	ra,20(sp)
    8ed8:	dd000417 	ldw	r20,16(sp)
    8edc:	dcc00317 	ldw	r19,12(sp)
    8ee0:	dc800217 	ldw	r18,8(sp)
    8ee4:	dc400117 	ldw	r17,4(sp)
    8ee8:	dc000017 	ldw	r16,0(sp)
    8eec:	dec00604 	addi	sp,sp,24
    8ef0:	f800283a 	ret
    8ef4:	99400117 	ldw	r5,4(r19)
    8ef8:	a009883a 	mov	r4,r20
    8efc:	29400044 	addi	r5,r5,1
    8f00:	00087040 	call	8704 <_Balloc>
    8f04:	99800417 	ldw	r6,16(r19)
    8f08:	99400304 	addi	r5,r19,12
    8f0c:	11000304 	addi	r4,r2,12
    8f10:	318d883a 	add	r6,r6,r6
    8f14:	318d883a 	add	r6,r6,r6
    8f18:	31800204 	addi	r6,r6,8
    8f1c:	1023883a 	mov	r17,r2
    8f20:	0007f6c0 	call	7f6c <memcpy>
    8f24:	980b883a 	mov	r5,r19
    8f28:	a009883a 	mov	r4,r20
    8f2c:	00081840 	call	8184 <_Bfree>
    8f30:	8827883a 	mov	r19,r17
    8f34:	003fe006 	br	8eb8 <__multadd+0x80>

00008f38 <__pow5mult>:
    8f38:	defffa04 	addi	sp,sp,-24
    8f3c:	308000cc 	andi	r2,r6,3
    8f40:	dd000415 	stw	r20,16(sp)
    8f44:	dcc00315 	stw	r19,12(sp)
    8f48:	dc000015 	stw	r16,0(sp)
    8f4c:	dfc00515 	stw	ra,20(sp)
    8f50:	dc800215 	stw	r18,8(sp)
    8f54:	dc400115 	stw	r17,4(sp)
    8f58:	3021883a 	mov	r16,r6
    8f5c:	2027883a 	mov	r19,r4
    8f60:	2829883a 	mov	r20,r5
    8f64:	10002b1e 	bne	r2,zero,9014 <__pow5mult+0xdc>
    8f68:	8025d0ba 	srai	r18,r16,2
    8f6c:	90001b26 	beq	r18,zero,8fdc <__pow5mult+0xa4>
    8f70:	9c001217 	ldw	r16,72(r19)
    8f74:	8000081e 	bne	r16,zero,8f98 <__pow5mult+0x60>
    8f78:	00003006 	br	903c <__pow5mult+0x104>
    8f7c:	800b883a 	mov	r5,r16
    8f80:	800d883a 	mov	r6,r16
    8f84:	9809883a 	mov	r4,r19
    8f88:	90001426 	beq	r18,zero,8fdc <__pow5mult+0xa4>
    8f8c:	80800017 	ldw	r2,0(r16)
    8f90:	10001b26 	beq	r2,zero,9000 <__pow5mult+0xc8>
    8f94:	1021883a 	mov	r16,r2
    8f98:	9080004c 	andi	r2,r18,1
    8f9c:	1005003a 	cmpeq	r2,r2,zero
    8fa0:	9025d07a 	srai	r18,r18,1
    8fa4:	800d883a 	mov	r6,r16
    8fa8:	9809883a 	mov	r4,r19
    8fac:	a00b883a 	mov	r5,r20
    8fb0:	103ff21e 	bne	r2,zero,8f7c <__pow5mult+0x44>
    8fb4:	0008c140 	call	8c14 <__multiply>
    8fb8:	a00b883a 	mov	r5,r20
    8fbc:	9809883a 	mov	r4,r19
    8fc0:	1023883a 	mov	r17,r2
    8fc4:	00081840 	call	8184 <_Bfree>
    8fc8:	8829883a 	mov	r20,r17
    8fcc:	800b883a 	mov	r5,r16
    8fd0:	800d883a 	mov	r6,r16
    8fd4:	9809883a 	mov	r4,r19
    8fd8:	903fec1e 	bne	r18,zero,8f8c <__pow5mult+0x54>
    8fdc:	a005883a 	mov	r2,r20
    8fe0:	dfc00517 	ldw	ra,20(sp)
    8fe4:	dd000417 	ldw	r20,16(sp)
    8fe8:	dcc00317 	ldw	r19,12(sp)
    8fec:	dc800217 	ldw	r18,8(sp)
    8ff0:	dc400117 	ldw	r17,4(sp)
    8ff4:	dc000017 	ldw	r16,0(sp)
    8ff8:	dec00604 	addi	sp,sp,24
    8ffc:	f800283a 	ret
    9000:	0008c140 	call	8c14 <__multiply>
    9004:	80800015 	stw	r2,0(r16)
    9008:	1021883a 	mov	r16,r2
    900c:	10000015 	stw	zero,0(r2)
    9010:	003fe106 	br	8f98 <__pow5mult+0x60>
    9014:	1085883a 	add	r2,r2,r2
    9018:	00c00074 	movhi	r3,1
    901c:	18fc7004 	addi	r3,r3,-3648
    9020:	1085883a 	add	r2,r2,r2
    9024:	10c5883a 	add	r2,r2,r3
    9028:	11bfff17 	ldw	r6,-4(r2)
    902c:	000f883a 	mov	r7,zero
    9030:	0008e380 	call	8e38 <__multadd>
    9034:	1029883a 	mov	r20,r2
    9038:	003fcb06 	br	8f68 <__pow5mult+0x30>
    903c:	9809883a 	mov	r4,r19
    9040:	01409c44 	movi	r5,625
    9044:	0008dfc0 	call	8dfc <__i2b>
    9048:	98801215 	stw	r2,72(r19)
    904c:	1021883a 	mov	r16,r2
    9050:	10000015 	stw	zero,0(r2)
    9054:	003fd006 	br	8f98 <__pow5mult+0x60>

00009058 <__s2b>:
    9058:	defff904 	addi	sp,sp,-28
    905c:	dcc00315 	stw	r19,12(sp)
    9060:	dc800215 	stw	r18,8(sp)
    9064:	2827883a 	mov	r19,r5
    9068:	2025883a 	mov	r18,r4
    906c:	01400244 	movi	r5,9
    9070:	39000204 	addi	r4,r7,8
    9074:	dd000415 	stw	r20,16(sp)
    9078:	dc400115 	stw	r17,4(sp)
    907c:	dfc00615 	stw	ra,24(sp)
    9080:	dd400515 	stw	r21,20(sp)
    9084:	dc000015 	stw	r16,0(sp)
    9088:	3829883a 	mov	r20,r7
    908c:	3023883a 	mov	r17,r6
    9090:	00028200 	call	2820 <__divsi3>
    9094:	00c00044 	movi	r3,1
    9098:	1880350e 	bge	r3,r2,9170 <__s2b+0x118>
    909c:	000b883a 	mov	r5,zero
    90a0:	18c7883a 	add	r3,r3,r3
    90a4:	29400044 	addi	r5,r5,1
    90a8:	18bffd16 	blt	r3,r2,90a0 <__s2b+0x48>
    90ac:	9009883a 	mov	r4,r18
    90b0:	00087040 	call	8704 <_Balloc>
    90b4:	1011883a 	mov	r8,r2
    90b8:	d8800717 	ldw	r2,28(sp)
    90bc:	00c00044 	movi	r3,1
    90c0:	01800244 	movi	r6,9
    90c4:	40800515 	stw	r2,20(r8)
    90c8:	40c00415 	stw	r3,16(r8)
    90cc:	3440260e 	bge	r6,r17,9168 <__s2b+0x110>
    90d0:	3021883a 	mov	r16,r6
    90d4:	99ab883a 	add	r21,r19,r6
    90d8:	9c05883a 	add	r2,r19,r16
    90dc:	11c00007 	ldb	r7,0(r2)
    90e0:	400b883a 	mov	r5,r8
    90e4:	9009883a 	mov	r4,r18
    90e8:	39fff404 	addi	r7,r7,-48
    90ec:	01800284 	movi	r6,10
    90f0:	0008e380 	call	8e38 <__multadd>
    90f4:	84000044 	addi	r16,r16,1
    90f8:	1011883a 	mov	r8,r2
    90fc:	8c3ff61e 	bne	r17,r16,90d8 <__s2b+0x80>
    9100:	ac45883a 	add	r2,r21,r17
    9104:	117ffe04 	addi	r5,r2,-8
    9108:	880d883a 	mov	r6,r17
    910c:	35000c0e 	bge	r6,r20,9140 <__s2b+0xe8>
    9110:	a185c83a 	sub	r2,r20,r6
    9114:	2821883a 	mov	r16,r5
    9118:	28a3883a 	add	r17,r5,r2
    911c:	81c00007 	ldb	r7,0(r16)
    9120:	400b883a 	mov	r5,r8
    9124:	9009883a 	mov	r4,r18
    9128:	39fff404 	addi	r7,r7,-48
    912c:	01800284 	movi	r6,10
    9130:	0008e380 	call	8e38 <__multadd>
    9134:	84000044 	addi	r16,r16,1
    9138:	1011883a 	mov	r8,r2
    913c:	847ff71e 	bne	r16,r17,911c <__s2b+0xc4>
    9140:	4005883a 	mov	r2,r8
    9144:	dfc00617 	ldw	ra,24(sp)
    9148:	dd400517 	ldw	r21,20(sp)
    914c:	dd000417 	ldw	r20,16(sp)
    9150:	dcc00317 	ldw	r19,12(sp)
    9154:	dc800217 	ldw	r18,8(sp)
    9158:	dc400117 	ldw	r17,4(sp)
    915c:	dc000017 	ldw	r16,0(sp)
    9160:	dec00704 	addi	sp,sp,28
    9164:	f800283a 	ret
    9168:	99400284 	addi	r5,r19,10
    916c:	003fe706 	br	910c <__s2b+0xb4>
    9170:	000b883a 	mov	r5,zero
    9174:	003fcd06 	br	90ac <__s2b+0x54>

00009178 <_realloc_r>:
    9178:	defff404 	addi	sp,sp,-48
    917c:	dd800815 	stw	r22,32(sp)
    9180:	dc800415 	stw	r18,16(sp)
    9184:	dc400315 	stw	r17,12(sp)
    9188:	dfc00b15 	stw	ra,44(sp)
    918c:	df000a15 	stw	fp,40(sp)
    9190:	ddc00915 	stw	r23,36(sp)
    9194:	dd400715 	stw	r21,28(sp)
    9198:	dd000615 	stw	r20,24(sp)
    919c:	dcc00515 	stw	r19,20(sp)
    91a0:	dc000215 	stw	r16,8(sp)
    91a4:	2825883a 	mov	r18,r5
    91a8:	3023883a 	mov	r17,r6
    91ac:	202d883a 	mov	r22,r4
    91b0:	2800c926 	beq	r5,zero,94d8 <_realloc_r+0x360>
    91b4:	000ca000 	call	ca00 <__malloc_lock>
    91b8:	943ffe04 	addi	r16,r18,-8
    91bc:	88c002c4 	addi	r3,r17,11
    91c0:	00800584 	movi	r2,22
    91c4:	82000117 	ldw	r8,4(r16)
    91c8:	10c01b2e 	bgeu	r2,r3,9238 <_realloc_r+0xc0>
    91cc:	00bffe04 	movi	r2,-8
    91d0:	188e703a 	and	r7,r3,r2
    91d4:	3839883a 	mov	fp,r7
    91d8:	38001a16 	blt	r7,zero,9244 <_realloc_r+0xcc>
    91dc:	e4401936 	bltu	fp,r17,9244 <_realloc_r+0xcc>
    91e0:	013fff04 	movi	r4,-4
    91e4:	4126703a 	and	r19,r8,r4
    91e8:	99c02616 	blt	r19,r7,9284 <_realloc_r+0x10c>
    91ec:	802b883a 	mov	r21,r16
    91f0:	9829883a 	mov	r20,r19
    91f4:	84000204 	addi	r16,r16,8
    91f8:	a80f883a 	mov	r7,r21
    91fc:	a70dc83a 	sub	r6,r20,fp
    9200:	008003c4 	movi	r2,15
    9204:	1180c136 	bltu	r2,r6,950c <_realloc_r+0x394>
    9208:	38800117 	ldw	r2,4(r7)
    920c:	a549883a 	add	r4,r20,r21
    9210:	1080004c 	andi	r2,r2,1
    9214:	a084b03a 	or	r2,r20,r2
    9218:	38800115 	stw	r2,4(r7)
    921c:	20c00117 	ldw	r3,4(r4)
    9220:	18c00054 	ori	r3,r3,1
    9224:	20c00115 	stw	r3,4(r4)
    9228:	b009883a 	mov	r4,r22
    922c:	000ca200 	call	ca20 <__malloc_unlock>
    9230:	8023883a 	mov	r17,r16
    9234:	00000606 	br	9250 <_realloc_r+0xd8>
    9238:	01c00404 	movi	r7,16
    923c:	3839883a 	mov	fp,r7
    9240:	e47fe72e 	bgeu	fp,r17,91e0 <_realloc_r+0x68>
    9244:	00800304 	movi	r2,12
    9248:	0023883a 	mov	r17,zero
    924c:	b0800015 	stw	r2,0(r22)
    9250:	8805883a 	mov	r2,r17
    9254:	dfc00b17 	ldw	ra,44(sp)
    9258:	df000a17 	ldw	fp,40(sp)
    925c:	ddc00917 	ldw	r23,36(sp)
    9260:	dd800817 	ldw	r22,32(sp)
    9264:	dd400717 	ldw	r21,28(sp)
    9268:	dd000617 	ldw	r20,24(sp)
    926c:	dcc00517 	ldw	r19,20(sp)
    9270:	dc800417 	ldw	r18,16(sp)
    9274:	dc400317 	ldw	r17,12(sp)
    9278:	dc000217 	ldw	r16,8(sp)
    927c:	dec00c04 	addi	sp,sp,48
    9280:	f800283a 	ret
    9284:	00800074 	movhi	r2,1
    9288:	10bdd304 	addi	r2,r2,-2228
    928c:	12400217 	ldw	r9,8(r2)
    9290:	84cd883a 	add	r6,r16,r19
    9294:	802b883a 	mov	r21,r16
    9298:	3240b926 	beq	r6,r9,9580 <_realloc_r+0x408>
    929c:	31400117 	ldw	r5,4(r6)
    92a0:	00bfff84 	movi	r2,-2
    92a4:	2884703a 	and	r2,r5,r2
    92a8:	1185883a 	add	r2,r2,r6
    92ac:	10c00117 	ldw	r3,4(r2)
    92b0:	18c0004c 	andi	r3,r3,1
    92b4:	1807003a 	cmpeq	r3,r3,zero
    92b8:	1800a326 	beq	r3,zero,9548 <_realloc_r+0x3d0>
    92bc:	2908703a 	and	r4,r5,r4
    92c0:	9929883a 	add	r20,r19,r4
    92c4:	a1c0a30e 	bge	r20,r7,9554 <_realloc_r+0x3dc>
    92c8:	4080004c 	andi	r2,r8,1
    92cc:	1000551e 	bne	r2,zero,9424 <_realloc_r+0x2ac>
    92d0:	80800017 	ldw	r2,0(r16)
    92d4:	80afc83a 	sub	r23,r16,r2
    92d8:	b8c00117 	ldw	r3,4(r23)
    92dc:	00bfff04 	movi	r2,-4
    92e0:	1884703a 	and	r2,r3,r2
    92e4:	30002e26 	beq	r6,zero,93a0 <_realloc_r+0x228>
    92e8:	3240b926 	beq	r6,r9,95d0 <_realloc_r+0x458>
    92ec:	98a9883a 	add	r20,r19,r2
    92f0:	2509883a 	add	r4,r4,r20
    92f4:	d9000015 	stw	r4,0(sp)
    92f8:	21c02a16 	blt	r4,r7,93a4 <_realloc_r+0x22c>
    92fc:	30800317 	ldw	r2,12(r6)
    9300:	30c00217 	ldw	r3,8(r6)
    9304:	01400904 	movi	r5,36
    9308:	99bfff04 	addi	r6,r19,-4
    930c:	18800315 	stw	r2,12(r3)
    9310:	10c00215 	stw	r3,8(r2)
    9314:	b9000317 	ldw	r4,12(r23)
    9318:	b8800217 	ldw	r2,8(r23)
    931c:	b82b883a 	mov	r21,r23
    9320:	bc000204 	addi	r16,r23,8
    9324:	20800215 	stw	r2,8(r4)
    9328:	11000315 	stw	r4,12(r2)
    932c:	2980e436 	bltu	r5,r6,96c0 <_realloc_r+0x548>
    9330:	008004c4 	movi	r2,19
    9334:	9009883a 	mov	r4,r18
    9338:	8011883a 	mov	r8,r16
    933c:	11800f2e 	bgeu	r2,r6,937c <_realloc_r+0x204>
    9340:	90800017 	ldw	r2,0(r18)
    9344:	ba000404 	addi	r8,r23,16
    9348:	91000204 	addi	r4,r18,8
    934c:	b8800215 	stw	r2,8(r23)
    9350:	90c00117 	ldw	r3,4(r18)
    9354:	008006c4 	movi	r2,27
    9358:	b8c00315 	stw	r3,12(r23)
    935c:	1180072e 	bgeu	r2,r6,937c <_realloc_r+0x204>
    9360:	90c00217 	ldw	r3,8(r18)
    9364:	ba000604 	addi	r8,r23,24
    9368:	91000404 	addi	r4,r18,16
    936c:	b8c00415 	stw	r3,16(r23)
    9370:	90800317 	ldw	r2,12(r18)
    9374:	b8800515 	stw	r2,20(r23)
    9378:	3140e726 	beq	r6,r5,9718 <_realloc_r+0x5a0>
    937c:	20800017 	ldw	r2,0(r4)
    9380:	dd000017 	ldw	r20,0(sp)
    9384:	b80f883a 	mov	r7,r23
    9388:	40800015 	stw	r2,0(r8)
    938c:	20c00117 	ldw	r3,4(r4)
    9390:	40c00115 	stw	r3,4(r8)
    9394:	20800217 	ldw	r2,8(r4)
    9398:	40800215 	stw	r2,8(r8)
    939c:	003f9706 	br	91fc <_realloc_r+0x84>
    93a0:	98a9883a 	add	r20,r19,r2
    93a4:	a1c01f16 	blt	r20,r7,9424 <_realloc_r+0x2ac>
    93a8:	b8c00317 	ldw	r3,12(r23)
    93ac:	b8800217 	ldw	r2,8(r23)
    93b0:	99bfff04 	addi	r6,r19,-4
    93b4:	01400904 	movi	r5,36
    93b8:	b82b883a 	mov	r21,r23
    93bc:	18800215 	stw	r2,8(r3)
    93c0:	10c00315 	stw	r3,12(r2)
    93c4:	bc000204 	addi	r16,r23,8
    93c8:	2980c336 	bltu	r5,r6,96d8 <_realloc_r+0x560>
    93cc:	008004c4 	movi	r2,19
    93d0:	9009883a 	mov	r4,r18
    93d4:	8011883a 	mov	r8,r16
    93d8:	11800f2e 	bgeu	r2,r6,9418 <_realloc_r+0x2a0>
    93dc:	90800017 	ldw	r2,0(r18)
    93e0:	ba000404 	addi	r8,r23,16
    93e4:	91000204 	addi	r4,r18,8
    93e8:	b8800215 	stw	r2,8(r23)
    93ec:	90c00117 	ldw	r3,4(r18)
    93f0:	008006c4 	movi	r2,27
    93f4:	b8c00315 	stw	r3,12(r23)
    93f8:	1180072e 	bgeu	r2,r6,9418 <_realloc_r+0x2a0>
    93fc:	90c00217 	ldw	r3,8(r18)
    9400:	ba000604 	addi	r8,r23,24
    9404:	91000404 	addi	r4,r18,16
    9408:	b8c00415 	stw	r3,16(r23)
    940c:	90800317 	ldw	r2,12(r18)
    9410:	b8800515 	stw	r2,20(r23)
    9414:	3140c726 	beq	r6,r5,9734 <_realloc_r+0x5bc>
    9418:	20800017 	ldw	r2,0(r4)
    941c:	b80f883a 	mov	r7,r23
    9420:	003fd906 	br	9388 <_realloc_r+0x210>
    9424:	880b883a 	mov	r5,r17
    9428:	b009883a 	mov	r4,r22
    942c:	00029b00 	call	29b0 <_malloc_r>
    9430:	1023883a 	mov	r17,r2
    9434:	10002526 	beq	r2,zero,94cc <_realloc_r+0x354>
    9438:	80800117 	ldw	r2,4(r16)
    943c:	00ffff84 	movi	r3,-2
    9440:	893ffe04 	addi	r4,r17,-8
    9444:	10c4703a 	and	r2,r2,r3
    9448:	8085883a 	add	r2,r16,r2
    944c:	20809526 	beq	r4,r2,96a4 <_realloc_r+0x52c>
    9450:	99bfff04 	addi	r6,r19,-4
    9454:	01c00904 	movi	r7,36
    9458:	39804536 	bltu	r7,r6,9570 <_realloc_r+0x3f8>
    945c:	008004c4 	movi	r2,19
    9460:	9009883a 	mov	r4,r18
    9464:	880b883a 	mov	r5,r17
    9468:	11800f2e 	bgeu	r2,r6,94a8 <_realloc_r+0x330>
    946c:	90800017 	ldw	r2,0(r18)
    9470:	89400204 	addi	r5,r17,8
    9474:	91000204 	addi	r4,r18,8
    9478:	88800015 	stw	r2,0(r17)
    947c:	90c00117 	ldw	r3,4(r18)
    9480:	008006c4 	movi	r2,27
    9484:	88c00115 	stw	r3,4(r17)
    9488:	1180072e 	bgeu	r2,r6,94a8 <_realloc_r+0x330>
    948c:	90c00217 	ldw	r3,8(r18)
    9490:	89400404 	addi	r5,r17,16
    9494:	91000404 	addi	r4,r18,16
    9498:	88c00215 	stw	r3,8(r17)
    949c:	90800317 	ldw	r2,12(r18)
    94a0:	88800315 	stw	r2,12(r17)
    94a4:	31c09126 	beq	r6,r7,96ec <_realloc_r+0x574>
    94a8:	20800017 	ldw	r2,0(r4)
    94ac:	28800015 	stw	r2,0(r5)
    94b0:	20c00117 	ldw	r3,4(r4)
    94b4:	28c00115 	stw	r3,4(r5)
    94b8:	20800217 	ldw	r2,8(r4)
    94bc:	28800215 	stw	r2,8(r5)
    94c0:	900b883a 	mov	r5,r18
    94c4:	b009883a 	mov	r4,r22
    94c8:	00073000 	call	7300 <_free_r>
    94cc:	b009883a 	mov	r4,r22
    94d0:	000ca200 	call	ca20 <__malloc_unlock>
    94d4:	003f5e06 	br	9250 <_realloc_r+0xd8>
    94d8:	300b883a 	mov	r5,r6
    94dc:	dfc00b17 	ldw	ra,44(sp)
    94e0:	df000a17 	ldw	fp,40(sp)
    94e4:	ddc00917 	ldw	r23,36(sp)
    94e8:	dd800817 	ldw	r22,32(sp)
    94ec:	dd400717 	ldw	r21,28(sp)
    94f0:	dd000617 	ldw	r20,24(sp)
    94f4:	dcc00517 	ldw	r19,20(sp)
    94f8:	dc800417 	ldw	r18,16(sp)
    94fc:	dc400317 	ldw	r17,12(sp)
    9500:	dc000217 	ldw	r16,8(sp)
    9504:	dec00c04 	addi	sp,sp,48
    9508:	00029b01 	jmpi	29b0 <_malloc_r>
    950c:	38800117 	ldw	r2,4(r7)
    9510:	e54b883a 	add	r5,fp,r21
    9514:	31000054 	ori	r4,r6,1
    9518:	1080004c 	andi	r2,r2,1
    951c:	1704b03a 	or	r2,r2,fp
    9520:	38800115 	stw	r2,4(r7)
    9524:	29000115 	stw	r4,4(r5)
    9528:	2987883a 	add	r3,r5,r6
    952c:	18800117 	ldw	r2,4(r3)
    9530:	29400204 	addi	r5,r5,8
    9534:	b009883a 	mov	r4,r22
    9538:	10800054 	ori	r2,r2,1
    953c:	18800115 	stw	r2,4(r3)
    9540:	00073000 	call	7300 <_free_r>
    9544:	003f3806 	br	9228 <_realloc_r+0xb0>
    9548:	000d883a 	mov	r6,zero
    954c:	0009883a 	mov	r4,zero
    9550:	003f5d06 	br	92c8 <_realloc_r+0x150>
    9554:	30c00217 	ldw	r3,8(r6)
    9558:	30800317 	ldw	r2,12(r6)
    955c:	800f883a 	mov	r7,r16
    9560:	84000204 	addi	r16,r16,8
    9564:	10c00215 	stw	r3,8(r2)
    9568:	18800315 	stw	r2,12(r3)
    956c:	003f2306 	br	91fc <_realloc_r+0x84>
    9570:	8809883a 	mov	r4,r17
    9574:	900b883a 	mov	r5,r18
    9578:	000800c0 	call	800c <memmove>
    957c:	003fd006 	br	94c0 <_realloc_r+0x348>
    9580:	30800117 	ldw	r2,4(r6)
    9584:	e0c00404 	addi	r3,fp,16
    9588:	1108703a 	and	r4,r2,r4
    958c:	9905883a 	add	r2,r19,r4
    9590:	10ff4d16 	blt	r2,r3,92c8 <_realloc_r+0x150>
    9594:	1705c83a 	sub	r2,r2,fp
    9598:	870b883a 	add	r5,r16,fp
    959c:	10800054 	ori	r2,r2,1
    95a0:	28800115 	stw	r2,4(r5)
    95a4:	80c00117 	ldw	r3,4(r16)
    95a8:	00800074 	movhi	r2,1
    95ac:	10bdd304 	addi	r2,r2,-2228
    95b0:	b009883a 	mov	r4,r22
    95b4:	18c0004c 	andi	r3,r3,1
    95b8:	e0c6b03a 	or	r3,fp,r3
    95bc:	11400215 	stw	r5,8(r2)
    95c0:	80c00115 	stw	r3,4(r16)
    95c4:	000ca200 	call	ca20 <__malloc_unlock>
    95c8:	84400204 	addi	r17,r16,8
    95cc:	003f2006 	br	9250 <_realloc_r+0xd8>
    95d0:	98a9883a 	add	r20,r19,r2
    95d4:	2509883a 	add	r4,r4,r20
    95d8:	e0800404 	addi	r2,fp,16
    95dc:	d9000115 	stw	r4,4(sp)
    95e0:	20bf7016 	blt	r4,r2,93a4 <_realloc_r+0x22c>
    95e4:	b8c00317 	ldw	r3,12(r23)
    95e8:	b8800217 	ldw	r2,8(r23)
    95ec:	99bfff04 	addi	r6,r19,-4
    95f0:	01400904 	movi	r5,36
    95f4:	18800215 	stw	r2,8(r3)
    95f8:	10c00315 	stw	r3,12(r2)
    95fc:	bc400204 	addi	r17,r23,8
    9600:	29804136 	bltu	r5,r6,9708 <_realloc_r+0x590>
    9604:	008004c4 	movi	r2,19
    9608:	9009883a 	mov	r4,r18
    960c:	880f883a 	mov	r7,r17
    9610:	11800f2e 	bgeu	r2,r6,9650 <_realloc_r+0x4d8>
    9614:	90800017 	ldw	r2,0(r18)
    9618:	b9c00404 	addi	r7,r23,16
    961c:	91000204 	addi	r4,r18,8
    9620:	b8800215 	stw	r2,8(r23)
    9624:	90c00117 	ldw	r3,4(r18)
    9628:	008006c4 	movi	r2,27
    962c:	b8c00315 	stw	r3,12(r23)
    9630:	1180072e 	bgeu	r2,r6,9650 <_realloc_r+0x4d8>
    9634:	90c00217 	ldw	r3,8(r18)
    9638:	b9c00604 	addi	r7,r23,24
    963c:	91000404 	addi	r4,r18,16
    9640:	b8c00415 	stw	r3,16(r23)
    9644:	90800317 	ldw	r2,12(r18)
    9648:	b8800515 	stw	r2,20(r23)
    964c:	31404026 	beq	r6,r5,9750 <_realloc_r+0x5d8>
    9650:	20800017 	ldw	r2,0(r4)
    9654:	38800015 	stw	r2,0(r7)
    9658:	20c00117 	ldw	r3,4(r4)
    965c:	38c00115 	stw	r3,4(r7)
    9660:	20800217 	ldw	r2,8(r4)
    9664:	38800215 	stw	r2,8(r7)
    9668:	d8c00117 	ldw	r3,4(sp)
    966c:	bf0b883a 	add	r5,r23,fp
    9670:	b009883a 	mov	r4,r22
    9674:	1f05c83a 	sub	r2,r3,fp
    9678:	10800054 	ori	r2,r2,1
    967c:	28800115 	stw	r2,4(r5)
    9680:	b8c00117 	ldw	r3,4(r23)
    9684:	00800074 	movhi	r2,1
    9688:	10bdd304 	addi	r2,r2,-2228
    968c:	11400215 	stw	r5,8(r2)
    9690:	18c0004c 	andi	r3,r3,1
    9694:	e0c6b03a 	or	r3,fp,r3
    9698:	b8c00115 	stw	r3,4(r23)
    969c:	000ca200 	call	ca20 <__malloc_unlock>
    96a0:	003eeb06 	br	9250 <_realloc_r+0xd8>
    96a4:	20800117 	ldw	r2,4(r4)
    96a8:	00ffff04 	movi	r3,-4
    96ac:	800f883a 	mov	r7,r16
    96b0:	10c4703a 	and	r2,r2,r3
    96b4:	98a9883a 	add	r20,r19,r2
    96b8:	84000204 	addi	r16,r16,8
    96bc:	003ecf06 	br	91fc <_realloc_r+0x84>
    96c0:	900b883a 	mov	r5,r18
    96c4:	8009883a 	mov	r4,r16
    96c8:	000800c0 	call	800c <memmove>
    96cc:	dd000017 	ldw	r20,0(sp)
    96d0:	b80f883a 	mov	r7,r23
    96d4:	003ec906 	br	91fc <_realloc_r+0x84>
    96d8:	900b883a 	mov	r5,r18
    96dc:	8009883a 	mov	r4,r16
    96e0:	000800c0 	call	800c <memmove>
    96e4:	b80f883a 	mov	r7,r23
    96e8:	003ec406 	br	91fc <_realloc_r+0x84>
    96ec:	90c00417 	ldw	r3,16(r18)
    96f0:	89400604 	addi	r5,r17,24
    96f4:	91000604 	addi	r4,r18,24
    96f8:	88c00415 	stw	r3,16(r17)
    96fc:	90800517 	ldw	r2,20(r18)
    9700:	88800515 	stw	r2,20(r17)
    9704:	003f6806 	br	94a8 <_realloc_r+0x330>
    9708:	900b883a 	mov	r5,r18
    970c:	8809883a 	mov	r4,r17
    9710:	000800c0 	call	800c <memmove>
    9714:	003fd406 	br	9668 <_realloc_r+0x4f0>
    9718:	90c00417 	ldw	r3,16(r18)
    971c:	91000604 	addi	r4,r18,24
    9720:	ba000804 	addi	r8,r23,32
    9724:	b8c00615 	stw	r3,24(r23)
    9728:	90800517 	ldw	r2,20(r18)
    972c:	b8800715 	stw	r2,28(r23)
    9730:	003f1206 	br	937c <_realloc_r+0x204>
    9734:	90c00417 	ldw	r3,16(r18)
    9738:	91000604 	addi	r4,r18,24
    973c:	ba000804 	addi	r8,r23,32
    9740:	b8c00615 	stw	r3,24(r23)
    9744:	90800517 	ldw	r2,20(r18)
    9748:	b8800715 	stw	r2,28(r23)
    974c:	003f3206 	br	9418 <_realloc_r+0x2a0>
    9750:	90c00417 	ldw	r3,16(r18)
    9754:	91000604 	addi	r4,r18,24
    9758:	b9c00804 	addi	r7,r23,32
    975c:	b8c00615 	stw	r3,24(r23)
    9760:	90800517 	ldw	r2,20(r18)
    9764:	b8800715 	stw	r2,28(r23)
    9768:	003fb906 	br	9650 <_realloc_r+0x4d8>

0000976c <__isinfd>:
    976c:	200d883a 	mov	r6,r4
    9770:	0109c83a 	sub	r4,zero,r4
    9774:	2188b03a 	or	r4,r4,r6
    9778:	2008d7fa 	srli	r4,r4,31
    977c:	00a00034 	movhi	r2,32768
    9780:	10bfffc4 	addi	r2,r2,-1
    9784:	1144703a 	and	r2,r2,r5
    9788:	2088b03a 	or	r4,r4,r2
    978c:	009ffc34 	movhi	r2,32752
    9790:	1105c83a 	sub	r2,r2,r4
    9794:	0087c83a 	sub	r3,zero,r2
    9798:	10c4b03a 	or	r2,r2,r3
    979c:	1004d7fa 	srli	r2,r2,31
    97a0:	00c00044 	movi	r3,1
    97a4:	1885c83a 	sub	r2,r3,r2
    97a8:	f800283a 	ret

000097ac <__isnand>:
    97ac:	200d883a 	mov	r6,r4
    97b0:	0109c83a 	sub	r4,zero,r4
    97b4:	2188b03a 	or	r4,r4,r6
    97b8:	2008d7fa 	srli	r4,r4,31
    97bc:	00a00034 	movhi	r2,32768
    97c0:	10bfffc4 	addi	r2,r2,-1
    97c4:	1144703a 	and	r2,r2,r5
    97c8:	2088b03a 	or	r4,r4,r2
    97cc:	009ffc34 	movhi	r2,32752
    97d0:	1105c83a 	sub	r2,r2,r4
    97d4:	1004d7fa 	srli	r2,r2,31
    97d8:	f800283a 	ret

000097dc <__sclose>:
    97dc:	2940038f 	ldh	r5,14(r5)
    97e0:	0009b101 	jmpi	9b10 <_close_r>

000097e4 <__sseek>:
    97e4:	defffe04 	addi	sp,sp,-8
    97e8:	dc000015 	stw	r16,0(sp)
    97ec:	2821883a 	mov	r16,r5
    97f0:	2940038f 	ldh	r5,14(r5)
    97f4:	dfc00115 	stw	ra,4(sp)
    97f8:	0009d880 	call	9d88 <_lseek_r>
    97fc:	1007883a 	mov	r3,r2
    9800:	00bfffc4 	movi	r2,-1
    9804:	18800926 	beq	r3,r2,982c <__sseek+0x48>
    9808:	8080030b 	ldhu	r2,12(r16)
    980c:	80c01415 	stw	r3,80(r16)
    9810:	10840014 	ori	r2,r2,4096
    9814:	8080030d 	sth	r2,12(r16)
    9818:	1805883a 	mov	r2,r3
    981c:	dfc00117 	ldw	ra,4(sp)
    9820:	dc000017 	ldw	r16,0(sp)
    9824:	dec00204 	addi	sp,sp,8
    9828:	f800283a 	ret
    982c:	8080030b 	ldhu	r2,12(r16)
    9830:	10bbffcc 	andi	r2,r2,61439
    9834:	8080030d 	sth	r2,12(r16)
    9838:	1805883a 	mov	r2,r3
    983c:	dfc00117 	ldw	ra,4(sp)
    9840:	dc000017 	ldw	r16,0(sp)
    9844:	dec00204 	addi	sp,sp,8
    9848:	f800283a 	ret

0000984c <__swrite>:
    984c:	2880030b 	ldhu	r2,12(r5)
    9850:	defffb04 	addi	sp,sp,-20
    9854:	dcc00315 	stw	r19,12(sp)
    9858:	1080400c 	andi	r2,r2,256
    985c:	dc800215 	stw	r18,8(sp)
    9860:	dc400115 	stw	r17,4(sp)
    9864:	dc000015 	stw	r16,0(sp)
    9868:	3027883a 	mov	r19,r6
    986c:	3825883a 	mov	r18,r7
    9870:	dfc00415 	stw	ra,16(sp)
    9874:	2821883a 	mov	r16,r5
    9878:	000d883a 	mov	r6,zero
    987c:	01c00084 	movi	r7,2
    9880:	2023883a 	mov	r17,r4
    9884:	10000226 	beq	r2,zero,9890 <__swrite+0x44>
    9888:	2940038f 	ldh	r5,14(r5)
    988c:	0009d880 	call	9d88 <_lseek_r>
    9890:	8080030b 	ldhu	r2,12(r16)
    9894:	8140038f 	ldh	r5,14(r16)
    9898:	8809883a 	mov	r4,r17
    989c:	10bbffcc 	andi	r2,r2,61439
    98a0:	980d883a 	mov	r6,r19
    98a4:	900f883a 	mov	r7,r18
    98a8:	8080030d 	sth	r2,12(r16)
    98ac:	dfc00417 	ldw	ra,16(sp)
    98b0:	dcc00317 	ldw	r19,12(sp)
    98b4:	dc800217 	ldw	r18,8(sp)
    98b8:	dc400117 	ldw	r17,4(sp)
    98bc:	dc000017 	ldw	r16,0(sp)
    98c0:	dec00504 	addi	sp,sp,20
    98c4:	00099e41 	jmpi	99e4 <_write_r>

000098c8 <__sread>:
    98c8:	defffe04 	addi	sp,sp,-8
    98cc:	dc000015 	stw	r16,0(sp)
    98d0:	2821883a 	mov	r16,r5
    98d4:	2940038f 	ldh	r5,14(r5)
    98d8:	dfc00115 	stw	ra,4(sp)
    98dc:	0009e000 	call	9e00 <_read_r>
    98e0:	1007883a 	mov	r3,r2
    98e4:	10000816 	blt	r2,zero,9908 <__sread+0x40>
    98e8:	80801417 	ldw	r2,80(r16)
    98ec:	10c5883a 	add	r2,r2,r3
    98f0:	80801415 	stw	r2,80(r16)
    98f4:	1805883a 	mov	r2,r3
    98f8:	dfc00117 	ldw	ra,4(sp)
    98fc:	dc000017 	ldw	r16,0(sp)
    9900:	dec00204 	addi	sp,sp,8
    9904:	f800283a 	ret
    9908:	8080030b 	ldhu	r2,12(r16)
    990c:	10bbffcc 	andi	r2,r2,61439
    9910:	8080030d 	sth	r2,12(r16)
    9914:	1805883a 	mov	r2,r3
    9918:	dfc00117 	ldw	ra,4(sp)
    991c:	dc000017 	ldw	r16,0(sp)
    9920:	dec00204 	addi	sp,sp,8
    9924:	f800283a 	ret

00009928 <strcmp>:
    9928:	2144b03a 	or	r2,r4,r5
    992c:	108000cc 	andi	r2,r2,3
    9930:	10001d1e 	bne	r2,zero,99a8 <strcmp+0x80>
    9934:	200f883a 	mov	r7,r4
    9938:	28800017 	ldw	r2,0(r5)
    993c:	21000017 	ldw	r4,0(r4)
    9940:	280d883a 	mov	r6,r5
    9944:	2080161e 	bne	r4,r2,99a0 <strcmp+0x78>
    9948:	023fbff4 	movhi	r8,65279
    994c:	423fbfc4 	addi	r8,r8,-257
    9950:	2207883a 	add	r3,r4,r8
    9954:	01602074 	movhi	r5,32897
    9958:	29602004 	addi	r5,r5,-32640
    995c:	1946703a 	and	r3,r3,r5
    9960:	0104303a 	nor	r2,zero,r4
    9964:	10c4703a 	and	r2,r2,r3
    9968:	10001c1e 	bne	r2,zero,99dc <strcmp+0xb4>
    996c:	4013883a 	mov	r9,r8
    9970:	2811883a 	mov	r8,r5
    9974:	00000106 	br	997c <strcmp+0x54>
    9978:	1800181e 	bne	r3,zero,99dc <strcmp+0xb4>
    997c:	39c00104 	addi	r7,r7,4
    9980:	39000017 	ldw	r4,0(r7)
    9984:	31800104 	addi	r6,r6,4
    9988:	31400017 	ldw	r5,0(r6)
    998c:	2245883a 	add	r2,r4,r9
    9990:	1204703a 	and	r2,r2,r8
    9994:	0106303a 	nor	r3,zero,r4
    9998:	1886703a 	and	r3,r3,r2
    999c:	217ff626 	beq	r4,r5,9978 <strcmp+0x50>
    99a0:	3809883a 	mov	r4,r7
    99a4:	300b883a 	mov	r5,r6
    99a8:	20c00007 	ldb	r3,0(r4)
    99ac:	1800051e 	bne	r3,zero,99c4 <strcmp+0x9c>
    99b0:	00000606 	br	99cc <strcmp+0xa4>
    99b4:	21000044 	addi	r4,r4,1
    99b8:	20c00007 	ldb	r3,0(r4)
    99bc:	29400044 	addi	r5,r5,1
    99c0:	18000226 	beq	r3,zero,99cc <strcmp+0xa4>
    99c4:	28800007 	ldb	r2,0(r5)
    99c8:	18bffa26 	beq	r3,r2,99b4 <strcmp+0x8c>
    99cc:	20c00003 	ldbu	r3,0(r4)
    99d0:	28800003 	ldbu	r2,0(r5)
    99d4:	1885c83a 	sub	r2,r3,r2
    99d8:	f800283a 	ret
    99dc:	0005883a 	mov	r2,zero
    99e0:	f800283a 	ret

000099e4 <_write_r>:
    99e4:	defffd04 	addi	sp,sp,-12
    99e8:	dc000015 	stw	r16,0(sp)
    99ec:	04000074 	movhi	r16,1
    99f0:	840a2204 	addi	r16,r16,10376
    99f4:	dc400115 	stw	r17,4(sp)
    99f8:	80000015 	stw	zero,0(r16)
    99fc:	2023883a 	mov	r17,r4
    9a00:	2809883a 	mov	r4,r5
    9a04:	300b883a 	mov	r5,r6
    9a08:	380d883a 	mov	r6,r7
    9a0c:	dfc00215 	stw	ra,8(sp)
    9a10:	000ccdc0 	call	ccdc <write>
    9a14:	1007883a 	mov	r3,r2
    9a18:	00bfffc4 	movi	r2,-1
    9a1c:	18800626 	beq	r3,r2,9a38 <_write_r+0x54>
    9a20:	1805883a 	mov	r2,r3
    9a24:	dfc00217 	ldw	ra,8(sp)
    9a28:	dc400117 	ldw	r17,4(sp)
    9a2c:	dc000017 	ldw	r16,0(sp)
    9a30:	dec00304 	addi	sp,sp,12
    9a34:	f800283a 	ret
    9a38:	80800017 	ldw	r2,0(r16)
    9a3c:	103ff826 	beq	r2,zero,9a20 <_write_r+0x3c>
    9a40:	88800015 	stw	r2,0(r17)
    9a44:	1805883a 	mov	r2,r3
    9a48:	dfc00217 	ldw	ra,8(sp)
    9a4c:	dc400117 	ldw	r17,4(sp)
    9a50:	dc000017 	ldw	r16,0(sp)
    9a54:	dec00304 	addi	sp,sp,12
    9a58:	f800283a 	ret

00009a5c <_calloc_r>:
    9a5c:	298b383a 	mul	r5,r5,r6
    9a60:	defffe04 	addi	sp,sp,-8
    9a64:	dc000015 	stw	r16,0(sp)
    9a68:	dfc00115 	stw	ra,4(sp)
    9a6c:	00029b00 	call	29b0 <_malloc_r>
    9a70:	1021883a 	mov	r16,r2
    9a74:	01c00904 	movi	r7,36
    9a78:	10000d26 	beq	r2,zero,9ab0 <_calloc_r+0x54>
    9a7c:	10ffff17 	ldw	r3,-4(r2)
    9a80:	1009883a 	mov	r4,r2
    9a84:	00bfff04 	movi	r2,-4
    9a88:	1886703a 	and	r3,r3,r2
    9a8c:	1887883a 	add	r3,r3,r2
    9a90:	180d883a 	mov	r6,r3
    9a94:	000b883a 	mov	r5,zero
    9a98:	38c01736 	bltu	r7,r3,9af8 <_calloc_r+0x9c>
    9a9c:	008004c4 	movi	r2,19
    9aa0:	10c00836 	bltu	r2,r3,9ac4 <_calloc_r+0x68>
    9aa4:	20000215 	stw	zero,8(r4)
    9aa8:	20000015 	stw	zero,0(r4)
    9aac:	20000115 	stw	zero,4(r4)
    9ab0:	8005883a 	mov	r2,r16
    9ab4:	dfc00117 	ldw	ra,4(sp)
    9ab8:	dc000017 	ldw	r16,0(sp)
    9abc:	dec00204 	addi	sp,sp,8
    9ac0:	f800283a 	ret
    9ac4:	008006c4 	movi	r2,27
    9ac8:	80000015 	stw	zero,0(r16)
    9acc:	80000115 	stw	zero,4(r16)
    9ad0:	81000204 	addi	r4,r16,8
    9ad4:	10fff32e 	bgeu	r2,r3,9aa4 <_calloc_r+0x48>
    9ad8:	80000215 	stw	zero,8(r16)
    9adc:	80000315 	stw	zero,12(r16)
    9ae0:	81000404 	addi	r4,r16,16
    9ae4:	19ffef1e 	bne	r3,r7,9aa4 <_calloc_r+0x48>
    9ae8:	81000604 	addi	r4,r16,24
    9aec:	80000415 	stw	zero,16(r16)
    9af0:	80000515 	stw	zero,20(r16)
    9af4:	003feb06 	br	9aa4 <_calloc_r+0x48>
    9af8:	00080ec0 	call	80ec <memset>
    9afc:	8005883a 	mov	r2,r16
    9b00:	dfc00117 	ldw	ra,4(sp)
    9b04:	dc000017 	ldw	r16,0(sp)
    9b08:	dec00204 	addi	sp,sp,8
    9b0c:	f800283a 	ret

00009b10 <_close_r>:
    9b10:	defffd04 	addi	sp,sp,-12
    9b14:	dc000015 	stw	r16,0(sp)
    9b18:	04000074 	movhi	r16,1
    9b1c:	840a2204 	addi	r16,r16,10376
    9b20:	dc400115 	stw	r17,4(sp)
    9b24:	80000015 	stw	zero,0(r16)
    9b28:	2023883a 	mov	r17,r4
    9b2c:	2809883a 	mov	r4,r5
    9b30:	dfc00215 	stw	ra,8(sp)
    9b34:	000c15c0 	call	c15c <close>
    9b38:	1007883a 	mov	r3,r2
    9b3c:	00bfffc4 	movi	r2,-1
    9b40:	18800626 	beq	r3,r2,9b5c <_close_r+0x4c>
    9b44:	1805883a 	mov	r2,r3
    9b48:	dfc00217 	ldw	ra,8(sp)
    9b4c:	dc400117 	ldw	r17,4(sp)
    9b50:	dc000017 	ldw	r16,0(sp)
    9b54:	dec00304 	addi	sp,sp,12
    9b58:	f800283a 	ret
    9b5c:	80800017 	ldw	r2,0(r16)
    9b60:	103ff826 	beq	r2,zero,9b44 <_close_r+0x34>
    9b64:	88800015 	stw	r2,0(r17)
    9b68:	1805883a 	mov	r2,r3
    9b6c:	dfc00217 	ldw	ra,8(sp)
    9b70:	dc400117 	ldw	r17,4(sp)
    9b74:	dc000017 	ldw	r16,0(sp)
    9b78:	dec00304 	addi	sp,sp,12
    9b7c:	f800283a 	ret

00009b80 <_fclose_r>:
    9b80:	defffc04 	addi	sp,sp,-16
    9b84:	dc400115 	stw	r17,4(sp)
    9b88:	dc000015 	stw	r16,0(sp)
    9b8c:	dfc00315 	stw	ra,12(sp)
    9b90:	dc800215 	stw	r18,8(sp)
    9b94:	2821883a 	mov	r16,r5
    9b98:	2023883a 	mov	r17,r4
    9b9c:	28002926 	beq	r5,zero,9c44 <_fclose_r+0xc4>
    9ba0:	0006f6c0 	call	6f6c <__sfp_lock_acquire>
    9ba4:	88000226 	beq	r17,zero,9bb0 <_fclose_r+0x30>
    9ba8:	88800e17 	ldw	r2,56(r17)
    9bac:	10002d26 	beq	r2,zero,9c64 <_fclose_r+0xe4>
    9bb0:	8080030f 	ldh	r2,12(r16)
    9bb4:	10002226 	beq	r2,zero,9c40 <_fclose_r+0xc0>
    9bb8:	8809883a 	mov	r4,r17
    9bbc:	800b883a 	mov	r5,r16
    9bc0:	0006ce40 	call	6ce4 <_fflush_r>
    9bc4:	1025883a 	mov	r18,r2
    9bc8:	80800b17 	ldw	r2,44(r16)
    9bcc:	10000426 	beq	r2,zero,9be0 <_fclose_r+0x60>
    9bd0:	81400717 	ldw	r5,28(r16)
    9bd4:	8809883a 	mov	r4,r17
    9bd8:	103ee83a 	callr	r2
    9bdc:	10002a16 	blt	r2,zero,9c88 <_fclose_r+0x108>
    9be0:	8080030b 	ldhu	r2,12(r16)
    9be4:	1080200c 	andi	r2,r2,128
    9be8:	1000231e 	bne	r2,zero,9c78 <_fclose_r+0xf8>
    9bec:	81400c17 	ldw	r5,48(r16)
    9bf0:	28000526 	beq	r5,zero,9c08 <_fclose_r+0x88>
    9bf4:	80801004 	addi	r2,r16,64
    9bf8:	28800226 	beq	r5,r2,9c04 <_fclose_r+0x84>
    9bfc:	8809883a 	mov	r4,r17
    9c00:	00073000 	call	7300 <_free_r>
    9c04:	80000c15 	stw	zero,48(r16)
    9c08:	81401117 	ldw	r5,68(r16)
    9c0c:	28000326 	beq	r5,zero,9c1c <_fclose_r+0x9c>
    9c10:	8809883a 	mov	r4,r17
    9c14:	00073000 	call	7300 <_free_r>
    9c18:	80001115 	stw	zero,68(r16)
    9c1c:	8000030d 	sth	zero,12(r16)
    9c20:	0006f700 	call	6f70 <__sfp_lock_release>
    9c24:	9005883a 	mov	r2,r18
    9c28:	dfc00317 	ldw	ra,12(sp)
    9c2c:	dc800217 	ldw	r18,8(sp)
    9c30:	dc400117 	ldw	r17,4(sp)
    9c34:	dc000017 	ldw	r16,0(sp)
    9c38:	dec00404 	addi	sp,sp,16
    9c3c:	f800283a 	ret
    9c40:	0006f700 	call	6f70 <__sfp_lock_release>
    9c44:	0025883a 	mov	r18,zero
    9c48:	9005883a 	mov	r2,r18
    9c4c:	dfc00317 	ldw	ra,12(sp)
    9c50:	dc800217 	ldw	r18,8(sp)
    9c54:	dc400117 	ldw	r17,4(sp)
    9c58:	dc000017 	ldw	r16,0(sp)
    9c5c:	dec00404 	addi	sp,sp,16
    9c60:	f800283a 	ret
    9c64:	8809883a 	mov	r4,r17
    9c68:	0006f7c0 	call	6f7c <__sinit>
    9c6c:	8080030f 	ldh	r2,12(r16)
    9c70:	103fd11e 	bne	r2,zero,9bb8 <_fclose_r+0x38>
    9c74:	003ff206 	br	9c40 <_fclose_r+0xc0>
    9c78:	81400417 	ldw	r5,16(r16)
    9c7c:	8809883a 	mov	r4,r17
    9c80:	00073000 	call	7300 <_free_r>
    9c84:	003fd906 	br	9bec <_fclose_r+0x6c>
    9c88:	04bfffc4 	movi	r18,-1
    9c8c:	003fd406 	br	9be0 <_fclose_r+0x60>

00009c90 <fclose>:
    9c90:	00800074 	movhi	r2,1
    9c94:	10835c04 	addi	r2,r2,3440
    9c98:	200b883a 	mov	r5,r4
    9c9c:	11000017 	ldw	r4,0(r2)
    9ca0:	0009b801 	jmpi	9b80 <_fclose_r>

00009ca4 <_fstat_r>:
    9ca4:	defffd04 	addi	sp,sp,-12
    9ca8:	dc000015 	stw	r16,0(sp)
    9cac:	04000074 	movhi	r16,1
    9cb0:	840a2204 	addi	r16,r16,10376
    9cb4:	dc400115 	stw	r17,4(sp)
    9cb8:	80000015 	stw	zero,0(r16)
    9cbc:	2023883a 	mov	r17,r4
    9cc0:	2809883a 	mov	r4,r5
    9cc4:	300b883a 	mov	r5,r6
    9cc8:	dfc00215 	stw	ra,8(sp)
    9ccc:	000c3440 	call	c344 <fstat>
    9cd0:	1007883a 	mov	r3,r2
    9cd4:	00bfffc4 	movi	r2,-1
    9cd8:	18800626 	beq	r3,r2,9cf4 <_fstat_r+0x50>
    9cdc:	1805883a 	mov	r2,r3
    9ce0:	dfc00217 	ldw	ra,8(sp)
    9ce4:	dc400117 	ldw	r17,4(sp)
    9ce8:	dc000017 	ldw	r16,0(sp)
    9cec:	dec00304 	addi	sp,sp,12
    9cf0:	f800283a 	ret
    9cf4:	80800017 	ldw	r2,0(r16)
    9cf8:	103ff826 	beq	r2,zero,9cdc <_fstat_r+0x38>
    9cfc:	88800015 	stw	r2,0(r17)
    9d00:	1805883a 	mov	r2,r3
    9d04:	dfc00217 	ldw	ra,8(sp)
    9d08:	dc400117 	ldw	r17,4(sp)
    9d0c:	dc000017 	ldw	r16,0(sp)
    9d10:	dec00304 	addi	sp,sp,12
    9d14:	f800283a 	ret

00009d18 <_isatty_r>:
    9d18:	defffd04 	addi	sp,sp,-12
    9d1c:	dc000015 	stw	r16,0(sp)
    9d20:	04000074 	movhi	r16,1
    9d24:	840a2204 	addi	r16,r16,10376
    9d28:	dc400115 	stw	r17,4(sp)
    9d2c:	80000015 	stw	zero,0(r16)
    9d30:	2023883a 	mov	r17,r4
    9d34:	2809883a 	mov	r4,r5
    9d38:	dfc00215 	stw	ra,8(sp)
    9d3c:	000c6380 	call	c638 <isatty>
    9d40:	1007883a 	mov	r3,r2
    9d44:	00bfffc4 	movi	r2,-1
    9d48:	18800626 	beq	r3,r2,9d64 <_isatty_r+0x4c>
    9d4c:	1805883a 	mov	r2,r3
    9d50:	dfc00217 	ldw	ra,8(sp)
    9d54:	dc400117 	ldw	r17,4(sp)
    9d58:	dc000017 	ldw	r16,0(sp)
    9d5c:	dec00304 	addi	sp,sp,12
    9d60:	f800283a 	ret
    9d64:	80800017 	ldw	r2,0(r16)
    9d68:	103ff826 	beq	r2,zero,9d4c <_isatty_r+0x34>
    9d6c:	88800015 	stw	r2,0(r17)
    9d70:	1805883a 	mov	r2,r3
    9d74:	dfc00217 	ldw	ra,8(sp)
    9d78:	dc400117 	ldw	r17,4(sp)
    9d7c:	dc000017 	ldw	r16,0(sp)
    9d80:	dec00304 	addi	sp,sp,12
    9d84:	f800283a 	ret

00009d88 <_lseek_r>:
    9d88:	defffd04 	addi	sp,sp,-12
    9d8c:	dc000015 	stw	r16,0(sp)
    9d90:	04000074 	movhi	r16,1
    9d94:	840a2204 	addi	r16,r16,10376
    9d98:	dc400115 	stw	r17,4(sp)
    9d9c:	80000015 	stw	zero,0(r16)
    9da0:	2023883a 	mov	r17,r4
    9da4:	2809883a 	mov	r4,r5
    9da8:	300b883a 	mov	r5,r6
    9dac:	380d883a 	mov	r6,r7
    9db0:	dfc00215 	stw	ra,8(sp)
    9db4:	000c8440 	call	c844 <lseek>
    9db8:	1007883a 	mov	r3,r2
    9dbc:	00bfffc4 	movi	r2,-1
    9dc0:	18800626 	beq	r3,r2,9ddc <_lseek_r+0x54>
    9dc4:	1805883a 	mov	r2,r3
    9dc8:	dfc00217 	ldw	ra,8(sp)
    9dcc:	dc400117 	ldw	r17,4(sp)
    9dd0:	dc000017 	ldw	r16,0(sp)
    9dd4:	dec00304 	addi	sp,sp,12
    9dd8:	f800283a 	ret
    9ddc:	80800017 	ldw	r2,0(r16)
    9de0:	103ff826 	beq	r2,zero,9dc4 <_lseek_r+0x3c>
    9de4:	88800015 	stw	r2,0(r17)
    9de8:	1805883a 	mov	r2,r3
    9dec:	dfc00217 	ldw	ra,8(sp)
    9df0:	dc400117 	ldw	r17,4(sp)
    9df4:	dc000017 	ldw	r16,0(sp)
    9df8:	dec00304 	addi	sp,sp,12
    9dfc:	f800283a 	ret

00009e00 <_read_r>:
    9e00:	defffd04 	addi	sp,sp,-12
    9e04:	dc000015 	stw	r16,0(sp)
    9e08:	04000074 	movhi	r16,1
    9e0c:	840a2204 	addi	r16,r16,10376
    9e10:	dc400115 	stw	r17,4(sp)
    9e14:	80000015 	stw	zero,0(r16)
    9e18:	2023883a 	mov	r17,r4
    9e1c:	2809883a 	mov	r4,r5
    9e20:	300b883a 	mov	r5,r6
    9e24:	380d883a 	mov	r6,r7
    9e28:	dfc00215 	stw	ra,8(sp)
    9e2c:	000ca400 	call	ca40 <read>
    9e30:	1007883a 	mov	r3,r2
    9e34:	00bfffc4 	movi	r2,-1
    9e38:	18800626 	beq	r3,r2,9e54 <_read_r+0x54>
    9e3c:	1805883a 	mov	r2,r3
    9e40:	dfc00217 	ldw	ra,8(sp)
    9e44:	dc400117 	ldw	r17,4(sp)
    9e48:	dc000017 	ldw	r16,0(sp)
    9e4c:	dec00304 	addi	sp,sp,12
    9e50:	f800283a 	ret
    9e54:	80800017 	ldw	r2,0(r16)
    9e58:	103ff826 	beq	r2,zero,9e3c <_read_r+0x3c>
    9e5c:	88800015 	stw	r2,0(r17)
    9e60:	1805883a 	mov	r2,r3
    9e64:	dfc00217 	ldw	ra,8(sp)
    9e68:	dc400117 	ldw	r17,4(sp)
    9e6c:	dc000017 	ldw	r16,0(sp)
    9e70:	dec00304 	addi	sp,sp,12
    9e74:	f800283a 	ret

00009e78 <__udivdi3>:
    9e78:	defff004 	addi	sp,sp,-64
    9e7c:	2005883a 	mov	r2,r4
    9e80:	3011883a 	mov	r8,r6
    9e84:	df000e15 	stw	fp,56(sp)
    9e88:	dd000a15 	stw	r20,40(sp)
    9e8c:	dc000615 	stw	r16,24(sp)
    9e90:	dfc00f15 	stw	ra,60(sp)
    9e94:	ddc00d15 	stw	r23,52(sp)
    9e98:	dd800c15 	stw	r22,48(sp)
    9e9c:	dd400b15 	stw	r21,44(sp)
    9ea0:	dcc00915 	stw	r19,36(sp)
    9ea4:	dc800815 	stw	r18,32(sp)
    9ea8:	dc400715 	stw	r17,28(sp)
    9eac:	4021883a 	mov	r16,r8
    9eb0:	1039883a 	mov	fp,r2
    9eb4:	2829883a 	mov	r20,r5
    9eb8:	38003b1e 	bne	r7,zero,9fa8 <__udivdi3+0x130>
    9ebc:	2a005c36 	bltu	r5,r8,a030 <__udivdi3+0x1b8>
    9ec0:	4000a626 	beq	r8,zero,a15c <__udivdi3+0x2e4>
    9ec4:	00bfffd4 	movui	r2,65535
    9ec8:	14009e36 	bltu	r2,r16,a144 <__udivdi3+0x2cc>
    9ecc:	00803fc4 	movi	r2,255
    9ed0:	14013d36 	bltu	r2,r16,a3c8 <__udivdi3+0x550>
    9ed4:	000b883a 	mov	r5,zero
    9ed8:	0005883a 	mov	r2,zero
    9edc:	8084d83a 	srl	r2,r16,r2
    9ee0:	01000074 	movhi	r4,1
    9ee4:	213c7804 	addi	r4,r4,-3616
    9ee8:	01800804 	movi	r6,32
    9eec:	1105883a 	add	r2,r2,r4
    9ef0:	10c00003 	ldbu	r3,0(r2)
    9ef4:	28c7883a 	add	r3,r5,r3
    9ef8:	30edc83a 	sub	r22,r6,r3
    9efc:	b000ee1e 	bne	r22,zero,a2b8 <__udivdi3+0x440>
    9f00:	802ad43a 	srli	r21,r16,16
    9f04:	00800044 	movi	r2,1
    9f08:	a423c83a 	sub	r17,r20,r16
    9f0c:	85ffffcc 	andi	r23,r16,65535
    9f10:	d8800315 	stw	r2,12(sp)
    9f14:	8809883a 	mov	r4,r17
    9f18:	a80b883a 	mov	r5,r21
    9f1c:	00028e00 	call	28e0 <__udivsi3>
    9f20:	8809883a 	mov	r4,r17
    9f24:	a80b883a 	mov	r5,r21
    9f28:	102d883a 	mov	r22,r2
    9f2c:	00028e80 	call	28e8 <__umodsi3>
    9f30:	1004943a 	slli	r2,r2,16
    9f34:	e006d43a 	srli	r3,fp,16
    9f38:	bda3383a 	mul	r17,r23,r22
    9f3c:	10c4b03a 	or	r2,r2,r3
    9f40:	1440042e 	bgeu	r2,r17,9f54 <__udivdi3+0xdc>
    9f44:	1405883a 	add	r2,r2,r16
    9f48:	b5bfffc4 	addi	r22,r22,-1
    9f4c:	14000136 	bltu	r2,r16,9f54 <__udivdi3+0xdc>
    9f50:	14413d36 	bltu	r2,r17,a448 <__udivdi3+0x5d0>
    9f54:	1463c83a 	sub	r17,r2,r17
    9f58:	8809883a 	mov	r4,r17
    9f5c:	a80b883a 	mov	r5,r21
    9f60:	00028e00 	call	28e0 <__udivsi3>
    9f64:	8809883a 	mov	r4,r17
    9f68:	a80b883a 	mov	r5,r21
    9f6c:	1029883a 	mov	r20,r2
    9f70:	00028e80 	call	28e8 <__umodsi3>
    9f74:	1004943a 	slli	r2,r2,16
    9f78:	bd09383a 	mul	r4,r23,r20
    9f7c:	e0ffffcc 	andi	r3,fp,65535
    9f80:	10c4b03a 	or	r2,r2,r3
    9f84:	1100042e 	bgeu	r2,r4,9f98 <__udivdi3+0x120>
    9f88:	8085883a 	add	r2,r16,r2
    9f8c:	a53fffc4 	addi	r20,r20,-1
    9f90:	14000136 	bltu	r2,r16,9f98 <__udivdi3+0x120>
    9f94:	11012036 	bltu	r2,r4,a418 <__udivdi3+0x5a0>
    9f98:	b004943a 	slli	r2,r22,16
    9f9c:	d9000317 	ldw	r4,12(sp)
    9fa0:	a084b03a 	or	r2,r20,r2
    9fa4:	00001506 	br	9ffc <__udivdi3+0x184>
    9fa8:	380d883a 	mov	r6,r7
    9fac:	29c06236 	bltu	r5,r7,a138 <__udivdi3+0x2c0>
    9fb0:	00bfffd4 	movui	r2,65535
    9fb4:	11c05a36 	bltu	r2,r7,a120 <__udivdi3+0x2a8>
    9fb8:	00803fc4 	movi	r2,255
    9fbc:	11c0fc36 	bltu	r2,r7,a3b0 <__udivdi3+0x538>
    9fc0:	000b883a 	mov	r5,zero
    9fc4:	0005883a 	mov	r2,zero
    9fc8:	3084d83a 	srl	r2,r6,r2
    9fcc:	01000074 	movhi	r4,1
    9fd0:	213c7804 	addi	r4,r4,-3616
    9fd4:	01c00804 	movi	r7,32
    9fd8:	1105883a 	add	r2,r2,r4
    9fdc:	10c00003 	ldbu	r3,0(r2)
    9fe0:	28c7883a 	add	r3,r5,r3
    9fe4:	38efc83a 	sub	r23,r7,r3
    9fe8:	b800691e 	bne	r23,zero,a190 <__udivdi3+0x318>
    9fec:	35000136 	bltu	r6,r20,9ff4 <__udivdi3+0x17c>
    9ff0:	e4005136 	bltu	fp,r16,a138 <__udivdi3+0x2c0>
    9ff4:	00800044 	movi	r2,1
    9ff8:	0009883a 	mov	r4,zero
    9ffc:	2007883a 	mov	r3,r4
    a000:	dfc00f17 	ldw	ra,60(sp)
    a004:	df000e17 	ldw	fp,56(sp)
    a008:	ddc00d17 	ldw	r23,52(sp)
    a00c:	dd800c17 	ldw	r22,48(sp)
    a010:	dd400b17 	ldw	r21,44(sp)
    a014:	dd000a17 	ldw	r20,40(sp)
    a018:	dcc00917 	ldw	r19,36(sp)
    a01c:	dc800817 	ldw	r18,32(sp)
    a020:	dc400717 	ldw	r17,28(sp)
    a024:	dc000617 	ldw	r16,24(sp)
    a028:	dec01004 	addi	sp,sp,64
    a02c:	f800283a 	ret
    a030:	00bfffd4 	movui	r2,65535
    a034:	12005036 	bltu	r2,r8,a178 <__udivdi3+0x300>
    a038:	00803fc4 	movi	r2,255
    a03c:	1200e836 	bltu	r2,r8,a3e0 <__udivdi3+0x568>
    a040:	000b883a 	mov	r5,zero
    a044:	0005883a 	mov	r2,zero
    a048:	8084d83a 	srl	r2,r16,r2
    a04c:	01000074 	movhi	r4,1
    a050:	213c7804 	addi	r4,r4,-3616
    a054:	01800804 	movi	r6,32
    a058:	1105883a 	add	r2,r2,r4
    a05c:	10c00003 	ldbu	r3,0(r2)
    a060:	28c7883a 	add	r3,r5,r3
    a064:	30cbc83a 	sub	r5,r6,r3
    a068:	28000626 	beq	r5,zero,a084 <__udivdi3+0x20c>
    a06c:	3145c83a 	sub	r2,r6,r5
    a070:	e084d83a 	srl	r2,fp,r2
    a074:	a146983a 	sll	r3,r20,r5
    a078:	e178983a 	sll	fp,fp,r5
    a07c:	8160983a 	sll	r16,r16,r5
    a080:	18a8b03a 	or	r20,r3,r2
    a084:	802ad43a 	srli	r21,r16,16
    a088:	a009883a 	mov	r4,r20
    a08c:	85ffffcc 	andi	r23,r16,65535
    a090:	a80b883a 	mov	r5,r21
    a094:	00028e00 	call	28e0 <__udivsi3>
    a098:	a009883a 	mov	r4,r20
    a09c:	a80b883a 	mov	r5,r21
    a0a0:	102d883a 	mov	r22,r2
    a0a4:	00028e80 	call	28e8 <__umodsi3>
    a0a8:	1004943a 	slli	r2,r2,16
    a0ac:	e006d43a 	srli	r3,fp,16
    a0b0:	bda3383a 	mul	r17,r23,r22
    a0b4:	10c4b03a 	or	r2,r2,r3
    a0b8:	1440042e 	bgeu	r2,r17,a0cc <__udivdi3+0x254>
    a0bc:	1405883a 	add	r2,r2,r16
    a0c0:	b5bfffc4 	addi	r22,r22,-1
    a0c4:	14000136 	bltu	r2,r16,a0cc <__udivdi3+0x254>
    a0c8:	1440d536 	bltu	r2,r17,a420 <__udivdi3+0x5a8>
    a0cc:	1463c83a 	sub	r17,r2,r17
    a0d0:	8809883a 	mov	r4,r17
    a0d4:	a80b883a 	mov	r5,r21
    a0d8:	00028e00 	call	28e0 <__udivsi3>
    a0dc:	8809883a 	mov	r4,r17
    a0e0:	a80b883a 	mov	r5,r21
    a0e4:	1029883a 	mov	r20,r2
    a0e8:	00028e80 	call	28e8 <__umodsi3>
    a0ec:	1004943a 	slli	r2,r2,16
    a0f0:	bd09383a 	mul	r4,r23,r20
    a0f4:	e0ffffcc 	andi	r3,fp,65535
    a0f8:	10c4b03a 	or	r2,r2,r3
    a0fc:	1100042e 	bgeu	r2,r4,a110 <__udivdi3+0x298>
    a100:	8085883a 	add	r2,r16,r2
    a104:	a53fffc4 	addi	r20,r20,-1
    a108:	14000136 	bltu	r2,r16,a110 <__udivdi3+0x298>
    a10c:	1100c736 	bltu	r2,r4,a42c <__udivdi3+0x5b4>
    a110:	b004943a 	slli	r2,r22,16
    a114:	0009883a 	mov	r4,zero
    a118:	a084b03a 	or	r2,r20,r2
    a11c:	003fb706 	br	9ffc <__udivdi3+0x184>
    a120:	00804034 	movhi	r2,256
    a124:	10bfffc4 	addi	r2,r2,-1
    a128:	11c0a436 	bltu	r2,r7,a3bc <__udivdi3+0x544>
    a12c:	01400404 	movi	r5,16
    a130:	2805883a 	mov	r2,r5
    a134:	003fa406 	br	9fc8 <__udivdi3+0x150>
    a138:	0005883a 	mov	r2,zero
    a13c:	0009883a 	mov	r4,zero
    a140:	003fae06 	br	9ffc <__udivdi3+0x184>
    a144:	00804034 	movhi	r2,256
    a148:	10bfffc4 	addi	r2,r2,-1
    a14c:	1400a136 	bltu	r2,r16,a3d4 <__udivdi3+0x55c>
    a150:	01400404 	movi	r5,16
    a154:	2805883a 	mov	r2,r5
    a158:	003f6006 	br	9edc <__udivdi3+0x64>
    a15c:	01000044 	movi	r4,1
    a160:	000b883a 	mov	r5,zero
    a164:	00028e00 	call	28e0 <__udivsi3>
    a168:	1021883a 	mov	r16,r2
    a16c:	00bfffd4 	movui	r2,65535
    a170:	143ff436 	bltu	r2,r16,a144 <__udivdi3+0x2cc>
    a174:	003f5506 	br	9ecc <__udivdi3+0x54>
    a178:	00804034 	movhi	r2,256
    a17c:	10bfffc4 	addi	r2,r2,-1
    a180:	12009a36 	bltu	r2,r8,a3ec <__udivdi3+0x574>
    a184:	01400404 	movi	r5,16
    a188:	2805883a 	mov	r2,r5
    a18c:	003fae06 	br	a048 <__udivdi3+0x1d0>
    a190:	3dc5c83a 	sub	r2,r7,r23
    a194:	35c8983a 	sll	r4,r6,r23
    a198:	8086d83a 	srl	r3,r16,r2
    a19c:	a0a2d83a 	srl	r17,r20,r2
    a1a0:	e084d83a 	srl	r2,fp,r2
    a1a4:	20eab03a 	or	r21,r4,r3
    a1a8:	a82cd43a 	srli	r22,r21,16
    a1ac:	a5c6983a 	sll	r3,r20,r23
    a1b0:	8809883a 	mov	r4,r17
    a1b4:	b00b883a 	mov	r5,r22
    a1b8:	1886b03a 	or	r3,r3,r2
    a1bc:	d8c00215 	stw	r3,8(sp)
    a1c0:	00028e00 	call	28e0 <__udivsi3>
    a1c4:	8809883a 	mov	r4,r17
    a1c8:	b00b883a 	mov	r5,r22
    a1cc:	1029883a 	mov	r20,r2
    a1d0:	00028e80 	call	28e8 <__umodsi3>
    a1d4:	a8ffffcc 	andi	r3,r21,65535
    a1d8:	d8c00515 	stw	r3,20(sp)
    a1dc:	d9000217 	ldw	r4,8(sp)
    a1e0:	d9400517 	ldw	r5,20(sp)
    a1e4:	1004943a 	slli	r2,r2,16
    a1e8:	2006d43a 	srli	r3,r4,16
    a1ec:	85e0983a 	sll	r16,r16,r23
    a1f0:	2d23383a 	mul	r17,r5,r20
    a1f4:	10c4b03a 	or	r2,r2,r3
    a1f8:	dc000015 	stw	r16,0(sp)
    a1fc:	1440032e 	bgeu	r2,r17,a20c <__udivdi3+0x394>
    a200:	1545883a 	add	r2,r2,r21
    a204:	a53fffc4 	addi	r20,r20,-1
    a208:	15407f2e 	bgeu	r2,r21,a408 <__udivdi3+0x590>
    a20c:	1463c83a 	sub	r17,r2,r17
    a210:	8809883a 	mov	r4,r17
    a214:	b00b883a 	mov	r5,r22
    a218:	00028e00 	call	28e0 <__udivsi3>
    a21c:	8809883a 	mov	r4,r17
    a220:	b00b883a 	mov	r5,r22
    a224:	1021883a 	mov	r16,r2
    a228:	00028e80 	call	28e8 <__umodsi3>
    a22c:	d8c00517 	ldw	r3,20(sp)
    a230:	d9000217 	ldw	r4,8(sp)
    a234:	1004943a 	slli	r2,r2,16
    a238:	1c0f383a 	mul	r7,r3,r16
    a23c:	20ffffcc 	andi	r3,r4,65535
    a240:	10e2b03a 	or	r17,r2,r3
    a244:	89c0032e 	bgeu	r17,r7,a254 <__udivdi3+0x3dc>
    a248:	8d63883a 	add	r17,r17,r21
    a24c:	843fffc4 	addi	r16,r16,-1
    a250:	8d40692e 	bgeu	r17,r21,a3f8 <__udivdi3+0x580>
    a254:	a008943a 	slli	r4,r20,16
    a258:	d9400017 	ldw	r5,0(sp)
    a25c:	89e3c83a 	sub	r17,r17,r7
    a260:	8110b03a 	or	r8,r16,r4
    a264:	280cd43a 	srli	r6,r5,16
    a268:	28ffffcc 	andi	r3,r5,65535
    a26c:	40bfffcc 	andi	r2,r8,65535
    a270:	400ad43a 	srli	r5,r8,16
    a274:	10d3383a 	mul	r9,r2,r3
    a278:	1185383a 	mul	r2,r2,r6
    a27c:	28c7383a 	mul	r3,r5,r3
    a280:	4808d43a 	srli	r4,r9,16
    a284:	298b383a 	mul	r5,r5,r6
    a288:	10c5883a 	add	r2,r2,r3
    a28c:	2089883a 	add	r4,r4,r2
    a290:	20c0022e 	bgeu	r4,r3,a29c <__udivdi3+0x424>
    a294:	00800074 	movhi	r2,1
    a298:	288b883a 	add	r5,r5,r2
    a29c:	2004d43a 	srli	r2,r4,16
    a2a0:	288b883a 	add	r5,r5,r2
    a2a4:	89403f36 	bltu	r17,r5,a3a4 <__udivdi3+0x52c>
    a2a8:	89403926 	beq	r17,r5,a390 <__udivdi3+0x518>
    a2ac:	4005883a 	mov	r2,r8
    a2b0:	0009883a 	mov	r4,zero
    a2b4:	003f5106 	br	9ffc <__udivdi3+0x184>
    a2b8:	85a0983a 	sll	r16,r16,r22
    a2bc:	3585c83a 	sub	r2,r6,r22
    a2c0:	a0a2d83a 	srl	r17,r20,r2
    a2c4:	802ad43a 	srli	r21,r16,16
    a2c8:	e084d83a 	srl	r2,fp,r2
    a2cc:	a586983a 	sll	r3,r20,r22
    a2d0:	8809883a 	mov	r4,r17
    a2d4:	a80b883a 	mov	r5,r21
    a2d8:	1886b03a 	or	r3,r3,r2
    a2dc:	d8c00115 	stw	r3,4(sp)
    a2e0:	00028e00 	call	28e0 <__udivsi3>
    a2e4:	8809883a 	mov	r4,r17
    a2e8:	a80b883a 	mov	r5,r21
    a2ec:	d8800415 	stw	r2,16(sp)
    a2f0:	00028e80 	call	28e8 <__umodsi3>
    a2f4:	d9000117 	ldw	r4,4(sp)
    a2f8:	d9400417 	ldw	r5,16(sp)
    a2fc:	1004943a 	slli	r2,r2,16
    a300:	85ffffcc 	andi	r23,r16,65535
    a304:	2006d43a 	srli	r3,r4,16
    a308:	b963383a 	mul	r17,r23,r5
    a30c:	10c4b03a 	or	r2,r2,r3
    a310:	1440042e 	bgeu	r2,r17,a324 <__udivdi3+0x4ac>
    a314:	297fffc4 	addi	r5,r5,-1
    a318:	1405883a 	add	r2,r2,r16
    a31c:	d9400415 	stw	r5,16(sp)
    a320:	1400442e 	bgeu	r2,r16,a434 <__udivdi3+0x5bc>
    a324:	1463c83a 	sub	r17,r2,r17
    a328:	8809883a 	mov	r4,r17
    a32c:	a80b883a 	mov	r5,r21
    a330:	00028e00 	call	28e0 <__udivsi3>
    a334:	8809883a 	mov	r4,r17
    a338:	a80b883a 	mov	r5,r21
    a33c:	1029883a 	mov	r20,r2
    a340:	00028e80 	call	28e8 <__umodsi3>
    a344:	d9400117 	ldw	r5,4(sp)
    a348:	1004943a 	slli	r2,r2,16
    a34c:	bd09383a 	mul	r4,r23,r20
    a350:	28ffffcc 	andi	r3,r5,65535
    a354:	10c6b03a 	or	r3,r2,r3
    a358:	1900062e 	bgeu	r3,r4,a374 <__udivdi3+0x4fc>
    a35c:	1c07883a 	add	r3,r3,r16
    a360:	a53fffc4 	addi	r20,r20,-1
    a364:	1c000336 	bltu	r3,r16,a374 <__udivdi3+0x4fc>
    a368:	1900022e 	bgeu	r3,r4,a374 <__udivdi3+0x4fc>
    a36c:	a53fffc4 	addi	r20,r20,-1
    a370:	1c07883a 	add	r3,r3,r16
    a374:	d9400417 	ldw	r5,16(sp)
    a378:	e5b8983a 	sll	fp,fp,r22
    a37c:	1923c83a 	sub	r17,r3,r4
    a380:	2804943a 	slli	r2,r5,16
    a384:	a0a8b03a 	or	r20,r20,r2
    a388:	dd000315 	stw	r20,12(sp)
    a38c:	003ee106 	br	9f14 <__udivdi3+0x9c>
    a390:	2004943a 	slli	r2,r4,16
    a394:	e5c8983a 	sll	r4,fp,r23
    a398:	48ffffcc 	andi	r3,r9,65535
    a39c:	10c5883a 	add	r2,r2,r3
    a3a0:	20bfc22e 	bgeu	r4,r2,a2ac <__udivdi3+0x434>
    a3a4:	40bfffc4 	addi	r2,r8,-1
    a3a8:	0009883a 	mov	r4,zero
    a3ac:	003f1306 	br	9ffc <__udivdi3+0x184>
    a3b0:	01400204 	movi	r5,8
    a3b4:	2805883a 	mov	r2,r5
    a3b8:	003f0306 	br	9fc8 <__udivdi3+0x150>
    a3bc:	01400604 	movi	r5,24
    a3c0:	2805883a 	mov	r2,r5
    a3c4:	003f0006 	br	9fc8 <__udivdi3+0x150>
    a3c8:	01400204 	movi	r5,8
    a3cc:	2805883a 	mov	r2,r5
    a3d0:	003ec206 	br	9edc <__udivdi3+0x64>
    a3d4:	01400604 	movi	r5,24
    a3d8:	2805883a 	mov	r2,r5
    a3dc:	003ebf06 	br	9edc <__udivdi3+0x64>
    a3e0:	01400204 	movi	r5,8
    a3e4:	2805883a 	mov	r2,r5
    a3e8:	003f1706 	br	a048 <__udivdi3+0x1d0>
    a3ec:	01400604 	movi	r5,24
    a3f0:	2805883a 	mov	r2,r5
    a3f4:	003f1406 	br	a048 <__udivdi3+0x1d0>
    a3f8:	89ff962e 	bgeu	r17,r7,a254 <__udivdi3+0x3dc>
    a3fc:	8d63883a 	add	r17,r17,r21
    a400:	843fffc4 	addi	r16,r16,-1
    a404:	003f9306 	br	a254 <__udivdi3+0x3dc>
    a408:	147f802e 	bgeu	r2,r17,a20c <__udivdi3+0x394>
    a40c:	a53fffc4 	addi	r20,r20,-1
    a410:	1545883a 	add	r2,r2,r21
    a414:	003f7d06 	br	a20c <__udivdi3+0x394>
    a418:	a53fffc4 	addi	r20,r20,-1
    a41c:	003ede06 	br	9f98 <__udivdi3+0x120>
    a420:	b5bfffc4 	addi	r22,r22,-1
    a424:	1405883a 	add	r2,r2,r16
    a428:	003f2806 	br	a0cc <__udivdi3+0x254>
    a42c:	a53fffc4 	addi	r20,r20,-1
    a430:	003f3706 	br	a110 <__udivdi3+0x298>
    a434:	147fbb2e 	bgeu	r2,r17,a324 <__udivdi3+0x4ac>
    a438:	297fffc4 	addi	r5,r5,-1
    a43c:	1405883a 	add	r2,r2,r16
    a440:	d9400415 	stw	r5,16(sp)
    a444:	003fb706 	br	a324 <__udivdi3+0x4ac>
    a448:	b5bfffc4 	addi	r22,r22,-1
    a44c:	1405883a 	add	r2,r2,r16
    a450:	003ec006 	br	9f54 <__udivdi3+0xdc>

0000a454 <__umoddi3>:
    a454:	defff104 	addi	sp,sp,-60
    a458:	dd800b15 	stw	r22,44(sp)
    a45c:	dd000915 	stw	r20,36(sp)
    a460:	dc000515 	stw	r16,20(sp)
    a464:	dfc00e15 	stw	ra,56(sp)
    a468:	df000d15 	stw	fp,52(sp)
    a46c:	ddc00c15 	stw	r23,48(sp)
    a470:	dd400a15 	stw	r21,40(sp)
    a474:	dcc00815 	stw	r19,32(sp)
    a478:	dc800715 	stw	r18,28(sp)
    a47c:	dc400615 	stw	r17,24(sp)
    a480:	3021883a 	mov	r16,r6
    a484:	202d883a 	mov	r22,r4
    a488:	2829883a 	mov	r20,r5
    a48c:	38002b1e 	bne	r7,zero,a53c <__umoddi3+0xe8>
    a490:	29805036 	bltu	r5,r6,a5d4 <__umoddi3+0x180>
    a494:	30008a26 	beq	r6,zero,a6c0 <__umoddi3+0x26c>
    a498:	00bfffd4 	movui	r2,65535
    a49c:	14008236 	bltu	r2,r16,a6a8 <__umoddi3+0x254>
    a4a0:	00803fc4 	movi	r2,255
    a4a4:	14013636 	bltu	r2,r16,a980 <__umoddi3+0x52c>
    a4a8:	000b883a 	mov	r5,zero
    a4ac:	0005883a 	mov	r2,zero
    a4b0:	8084d83a 	srl	r2,r16,r2
    a4b4:	01000074 	movhi	r4,1
    a4b8:	213c7804 	addi	r4,r4,-3616
    a4bc:	01800804 	movi	r6,32
    a4c0:	1105883a 	add	r2,r2,r4
    a4c4:	10c00003 	ldbu	r3,0(r2)
    a4c8:	28c7883a 	add	r3,r5,r3
    a4cc:	30efc83a 	sub	r23,r6,r3
    a4d0:	b800941e 	bne	r23,zero,a724 <__umoddi3+0x2d0>
    a4d4:	802ad43a 	srli	r21,r16,16
    a4d8:	a423c83a 	sub	r17,r20,r16
    a4dc:	0039883a 	mov	fp,zero
    a4e0:	853fffcc 	andi	r20,r16,65535
    a4e4:	8809883a 	mov	r4,r17
    a4e8:	a80b883a 	mov	r5,r21
    a4ec:	00028e00 	call	28e0 <__udivsi3>
    a4f0:	8809883a 	mov	r4,r17
    a4f4:	a80b883a 	mov	r5,r21
    a4f8:	a0a3383a 	mul	r17,r20,r2
    a4fc:	00028e80 	call	28e8 <__umodsi3>
    a500:	1004943a 	slli	r2,r2,16
    a504:	b006d43a 	srli	r3,r22,16
    a508:	10c4b03a 	or	r2,r2,r3
    a50c:	1440032e 	bgeu	r2,r17,a51c <__umoddi3+0xc8>
    a510:	1405883a 	add	r2,r2,r16
    a514:	14000136 	bltu	r2,r16,a51c <__umoddi3+0xc8>
    a518:	14413536 	bltu	r2,r17,a9f0 <__umoddi3+0x59c>
    a51c:	1463c83a 	sub	r17,r2,r17
    a520:	8809883a 	mov	r4,r17
    a524:	a80b883a 	mov	r5,r21
    a528:	00028e00 	call	28e0 <__udivsi3>
    a52c:	8809883a 	mov	r4,r17
    a530:	a0a3383a 	mul	r17,r20,r2
    a534:	a80b883a 	mov	r5,r21
    a538:	00004d06 	br	a670 <__umoddi3+0x21c>
    a53c:	380d883a 	mov	r6,r7
    a540:	29c0102e 	bgeu	r5,r7,a584 <__umoddi3+0x130>
    a544:	2011883a 	mov	r8,r4
    a548:	2813883a 	mov	r9,r5
    a54c:	4005883a 	mov	r2,r8
    a550:	4807883a 	mov	r3,r9
    a554:	dfc00e17 	ldw	ra,56(sp)
    a558:	df000d17 	ldw	fp,52(sp)
    a55c:	ddc00c17 	ldw	r23,48(sp)
    a560:	dd800b17 	ldw	r22,44(sp)
    a564:	dd400a17 	ldw	r21,40(sp)
    a568:	dd000917 	ldw	r20,36(sp)
    a56c:	dcc00817 	ldw	r19,32(sp)
    a570:	dc800717 	ldw	r18,28(sp)
    a574:	dc400617 	ldw	r17,24(sp)
    a578:	dc000517 	ldw	r16,20(sp)
    a57c:	dec00f04 	addi	sp,sp,60
    a580:	f800283a 	ret
    a584:	00bfffd4 	movui	r2,65535
    a588:	11c05a36 	bltu	r2,r7,a6f4 <__umoddi3+0x2a0>
    a58c:	00803fc4 	movi	r2,255
    a590:	11c0fe36 	bltu	r2,r7,a98c <__umoddi3+0x538>
    a594:	000b883a 	mov	r5,zero
    a598:	0005883a 	mov	r2,zero
    a59c:	3084d83a 	srl	r2,r6,r2
    a5a0:	01000074 	movhi	r4,1
    a5a4:	213c7804 	addi	r4,r4,-3616
    a5a8:	01c00804 	movi	r7,32
    a5ac:	1105883a 	add	r2,r2,r4
    a5b0:	10c00003 	ldbu	r3,0(r2)
    a5b4:	28c7883a 	add	r3,r5,r3
    a5b8:	38ebc83a 	sub	r21,r7,r3
    a5bc:	a800851e 	bne	r21,zero,a7d4 <__umoddi3+0x380>
    a5c0:	35005236 	bltu	r6,r20,a70c <__umoddi3+0x2b8>
    a5c4:	b400512e 	bgeu	r22,r16,a70c <__umoddi3+0x2b8>
    a5c8:	b011883a 	mov	r8,r22
    a5cc:	a013883a 	mov	r9,r20
    a5d0:	003fde06 	br	a54c <__umoddi3+0xf8>
    a5d4:	00bfffd4 	movui	r2,65535
    a5d8:	11804036 	bltu	r2,r6,a6dc <__umoddi3+0x288>
    a5dc:	00803fc4 	movi	r2,255
    a5e0:	1180ed36 	bltu	r2,r6,a998 <__umoddi3+0x544>
    a5e4:	000b883a 	mov	r5,zero
    a5e8:	0005883a 	mov	r2,zero
    a5ec:	8084d83a 	srl	r2,r16,r2
    a5f0:	01000074 	movhi	r4,1
    a5f4:	213c7804 	addi	r4,r4,-3616
    a5f8:	01800804 	movi	r6,32
    a5fc:	1105883a 	add	r2,r2,r4
    a600:	10c00003 	ldbu	r3,0(r2)
    a604:	28c7883a 	add	r3,r5,r3
    a608:	30c7c83a 	sub	r3,r6,r3
    a60c:	1800bf1e 	bne	r3,zero,a90c <__umoddi3+0x4b8>
    a610:	0039883a 	mov	fp,zero
    a614:	802ad43a 	srli	r21,r16,16
    a618:	a009883a 	mov	r4,r20
    a61c:	85ffffcc 	andi	r23,r16,65535
    a620:	a80b883a 	mov	r5,r21
    a624:	00028e00 	call	28e0 <__udivsi3>
    a628:	a009883a 	mov	r4,r20
    a62c:	a80b883a 	mov	r5,r21
    a630:	b8a3383a 	mul	r17,r23,r2
    a634:	00028e80 	call	28e8 <__umodsi3>
    a638:	1004943a 	slli	r2,r2,16
    a63c:	b006d43a 	srli	r3,r22,16
    a640:	10c4b03a 	or	r2,r2,r3
    a644:	1440032e 	bgeu	r2,r17,a654 <__umoddi3+0x200>
    a648:	1405883a 	add	r2,r2,r16
    a64c:	14000136 	bltu	r2,r16,a654 <__umoddi3+0x200>
    a650:	1440e536 	bltu	r2,r17,a9e8 <__umoddi3+0x594>
    a654:	1463c83a 	sub	r17,r2,r17
    a658:	8809883a 	mov	r4,r17
    a65c:	a80b883a 	mov	r5,r21
    a660:	00028e00 	call	28e0 <__udivsi3>
    a664:	8809883a 	mov	r4,r17
    a668:	b8a3383a 	mul	r17,r23,r2
    a66c:	a80b883a 	mov	r5,r21
    a670:	00028e80 	call	28e8 <__umodsi3>
    a674:	1004943a 	slli	r2,r2,16
    a678:	b0ffffcc 	andi	r3,r22,65535
    a67c:	10c4b03a 	or	r2,r2,r3
    a680:	1440042e 	bgeu	r2,r17,a694 <__umoddi3+0x240>
    a684:	1405883a 	add	r2,r2,r16
    a688:	14000236 	bltu	r2,r16,a694 <__umoddi3+0x240>
    a68c:	1440012e 	bgeu	r2,r17,a694 <__umoddi3+0x240>
    a690:	1405883a 	add	r2,r2,r16
    a694:	1445c83a 	sub	r2,r2,r17
    a698:	1724d83a 	srl	r18,r2,fp
    a69c:	0013883a 	mov	r9,zero
    a6a0:	9011883a 	mov	r8,r18
    a6a4:	003fa906 	br	a54c <__umoddi3+0xf8>
    a6a8:	00804034 	movhi	r2,256
    a6ac:	10bfffc4 	addi	r2,r2,-1
    a6b0:	1400b036 	bltu	r2,r16,a974 <__umoddi3+0x520>
    a6b4:	01400404 	movi	r5,16
    a6b8:	2805883a 	mov	r2,r5
    a6bc:	003f7c06 	br	a4b0 <__umoddi3+0x5c>
    a6c0:	01000044 	movi	r4,1
    a6c4:	000b883a 	mov	r5,zero
    a6c8:	00028e00 	call	28e0 <__udivsi3>
    a6cc:	1021883a 	mov	r16,r2
    a6d0:	00bfffd4 	movui	r2,65535
    a6d4:	143ff436 	bltu	r2,r16,a6a8 <__umoddi3+0x254>
    a6d8:	003f7106 	br	a4a0 <__umoddi3+0x4c>
    a6dc:	00804034 	movhi	r2,256
    a6e0:	10bfffc4 	addi	r2,r2,-1
    a6e4:	1180af36 	bltu	r2,r6,a9a4 <__umoddi3+0x550>
    a6e8:	01400404 	movi	r5,16
    a6ec:	2805883a 	mov	r2,r5
    a6f0:	003fbe06 	br	a5ec <__umoddi3+0x198>
    a6f4:	00804034 	movhi	r2,256
    a6f8:	10bfffc4 	addi	r2,r2,-1
    a6fc:	11c0ac36 	bltu	r2,r7,a9b0 <__umoddi3+0x55c>
    a700:	01400404 	movi	r5,16
    a704:	2805883a 	mov	r2,r5
    a708:	003fa406 	br	a59c <__umoddi3+0x148>
    a70c:	b409c83a 	sub	r4,r22,r16
    a710:	b105803a 	cmpltu	r2,r22,r4
    a714:	a187c83a 	sub	r3,r20,r6
    a718:	18a9c83a 	sub	r20,r3,r2
    a71c:	202d883a 	mov	r22,r4
    a720:	003fa906 	br	a5c8 <__umoddi3+0x174>
    a724:	85e0983a 	sll	r16,r16,r23
    a728:	35c5c83a 	sub	r2,r6,r23
    a72c:	a0a2d83a 	srl	r17,r20,r2
    a730:	802ad43a 	srli	r21,r16,16
    a734:	b084d83a 	srl	r2,r22,r2
    a738:	a5c6983a 	sll	r3,r20,r23
    a73c:	8809883a 	mov	r4,r17
    a740:	a80b883a 	mov	r5,r21
    a744:	1886b03a 	or	r3,r3,r2
    a748:	d8c00115 	stw	r3,4(sp)
    a74c:	853fffcc 	andi	r20,r16,65535
    a750:	00028e00 	call	28e0 <__udivsi3>
    a754:	8809883a 	mov	r4,r17
    a758:	a80b883a 	mov	r5,r21
    a75c:	a0a3383a 	mul	r17,r20,r2
    a760:	00028e80 	call	28e8 <__umodsi3>
    a764:	d9000117 	ldw	r4,4(sp)
    a768:	1004943a 	slli	r2,r2,16
    a76c:	b839883a 	mov	fp,r23
    a770:	2006d43a 	srli	r3,r4,16
    a774:	10c4b03a 	or	r2,r2,r3
    a778:	1440022e 	bgeu	r2,r17,a784 <__umoddi3+0x330>
    a77c:	1405883a 	add	r2,r2,r16
    a780:	1400962e 	bgeu	r2,r16,a9dc <__umoddi3+0x588>
    a784:	1463c83a 	sub	r17,r2,r17
    a788:	8809883a 	mov	r4,r17
    a78c:	a80b883a 	mov	r5,r21
    a790:	00028e00 	call	28e0 <__udivsi3>
    a794:	8809883a 	mov	r4,r17
    a798:	a80b883a 	mov	r5,r21
    a79c:	a0a3383a 	mul	r17,r20,r2
    a7a0:	00028e80 	call	28e8 <__umodsi3>
    a7a4:	d9400117 	ldw	r5,4(sp)
    a7a8:	1004943a 	slli	r2,r2,16
    a7ac:	28ffffcc 	andi	r3,r5,65535
    a7b0:	10c4b03a 	or	r2,r2,r3
    a7b4:	1440042e 	bgeu	r2,r17,a7c8 <__umoddi3+0x374>
    a7b8:	1405883a 	add	r2,r2,r16
    a7bc:	14000236 	bltu	r2,r16,a7c8 <__umoddi3+0x374>
    a7c0:	1440012e 	bgeu	r2,r17,a7c8 <__umoddi3+0x374>
    a7c4:	1405883a 	add	r2,r2,r16
    a7c8:	b5ec983a 	sll	r22,r22,r23
    a7cc:	1463c83a 	sub	r17,r2,r17
    a7d0:	003f4406 	br	a4e4 <__umoddi3+0x90>
    a7d4:	3d4fc83a 	sub	r7,r7,r21
    a7d8:	3546983a 	sll	r3,r6,r21
    a7dc:	81c4d83a 	srl	r2,r16,r7
    a7e0:	a1e2d83a 	srl	r17,r20,r7
    a7e4:	a54c983a 	sll	r6,r20,r21
    a7e8:	18aeb03a 	or	r23,r3,r2
    a7ec:	b828d43a 	srli	r20,r23,16
    a7f0:	b1c4d83a 	srl	r2,r22,r7
    a7f4:	8809883a 	mov	r4,r17
    a7f8:	a00b883a 	mov	r5,r20
    a7fc:	308cb03a 	or	r6,r6,r2
    a800:	d9c00315 	stw	r7,12(sp)
    a804:	d9800215 	stw	r6,8(sp)
    a808:	00028e00 	call	28e0 <__udivsi3>
    a80c:	8809883a 	mov	r4,r17
    a810:	a00b883a 	mov	r5,r20
    a814:	1039883a 	mov	fp,r2
    a818:	00028e80 	call	28e8 <__umodsi3>
    a81c:	b8ffffcc 	andi	r3,r23,65535
    a820:	d8c00415 	stw	r3,16(sp)
    a824:	d9000217 	ldw	r4,8(sp)
    a828:	d9400417 	ldw	r5,16(sp)
    a82c:	1004943a 	slli	r2,r2,16
    a830:	2006d43a 	srli	r3,r4,16
    a834:	8560983a 	sll	r16,r16,r21
    a838:	2f23383a 	mul	r17,r5,fp
    a83c:	10c4b03a 	or	r2,r2,r3
    a840:	dc000015 	stw	r16,0(sp)
    a844:	b56c983a 	sll	r22,r22,r21
    a848:	1440032e 	bgeu	r2,r17,a858 <__umoddi3+0x404>
    a84c:	15c5883a 	add	r2,r2,r23
    a850:	e73fffc4 	addi	fp,fp,-1
    a854:	15c05d2e 	bgeu	r2,r23,a9cc <__umoddi3+0x578>
    a858:	1463c83a 	sub	r17,r2,r17
    a85c:	8809883a 	mov	r4,r17
    a860:	a00b883a 	mov	r5,r20
    a864:	00028e00 	call	28e0 <__udivsi3>
    a868:	8809883a 	mov	r4,r17
    a86c:	a00b883a 	mov	r5,r20
    a870:	1021883a 	mov	r16,r2
    a874:	00028e80 	call	28e8 <__umodsi3>
    a878:	d8c00417 	ldw	r3,16(sp)
    a87c:	d9000217 	ldw	r4,8(sp)
    a880:	1004943a 	slli	r2,r2,16
    a884:	1c23383a 	mul	r17,r3,r16
    a888:	20ffffcc 	andi	r3,r4,65535
    a88c:	10ceb03a 	or	r7,r2,r3
    a890:	3c40032e 	bgeu	r7,r17,a8a0 <__umoddi3+0x44c>
    a894:	3dcf883a 	add	r7,r7,r23
    a898:	843fffc4 	addi	r16,r16,-1
    a89c:	3dc0472e 	bgeu	r7,r23,a9bc <__umoddi3+0x568>
    a8a0:	e004943a 	slli	r2,fp,16
    a8a4:	d9400017 	ldw	r5,0(sp)
    a8a8:	3c4fc83a 	sub	r7,r7,r17
    a8ac:	8084b03a 	or	r2,r16,r2
    a8b0:	28ffffcc 	andi	r3,r5,65535
    a8b4:	280cd43a 	srli	r6,r5,16
    a8b8:	100ad43a 	srli	r5,r2,16
    a8bc:	10bfffcc 	andi	r2,r2,65535
    a8c0:	10d1383a 	mul	r8,r2,r3
    a8c4:	28c7383a 	mul	r3,r5,r3
    a8c8:	1185383a 	mul	r2,r2,r6
    a8cc:	4008d43a 	srli	r4,r8,16
    a8d0:	298b383a 	mul	r5,r5,r6
    a8d4:	10c5883a 	add	r2,r2,r3
    a8d8:	2089883a 	add	r4,r4,r2
    a8dc:	20c0022e 	bgeu	r4,r3,a8e8 <__umoddi3+0x494>
    a8e0:	00800074 	movhi	r2,1
    a8e4:	288b883a 	add	r5,r5,r2
    a8e8:	2004d43a 	srli	r2,r4,16
    a8ec:	2008943a 	slli	r4,r4,16
    a8f0:	40ffffcc 	andi	r3,r8,65535
    a8f4:	288b883a 	add	r5,r5,r2
    a8f8:	20c9883a 	add	r4,r4,r3
    a8fc:	39400b36 	bltu	r7,r5,a92c <__umoddi3+0x4d8>
    a900:	39403d26 	beq	r7,r5,a9f8 <__umoddi3+0x5a4>
    a904:	394bc83a 	sub	r5,r7,r5
    a908:	00000f06 	br	a948 <__umoddi3+0x4f4>
    a90c:	30c5c83a 	sub	r2,r6,r3
    a910:	1839883a 	mov	fp,r3
    a914:	b084d83a 	srl	r2,r22,r2
    a918:	a0c6983a 	sll	r3,r20,r3
    a91c:	8720983a 	sll	r16,r16,fp
    a920:	b72c983a 	sll	r22,r22,fp
    a924:	18a8b03a 	or	r20,r3,r2
    a928:	003f3a06 	br	a614 <__umoddi3+0x1c0>
    a92c:	d8c00017 	ldw	r3,0(sp)
    a930:	20c5c83a 	sub	r2,r4,r3
    a934:	2089803a 	cmpltu	r4,r4,r2
    a938:	2dc7c83a 	sub	r3,r5,r23
    a93c:	1907c83a 	sub	r3,r3,r4
    a940:	38cbc83a 	sub	r5,r7,r3
    a944:	1009883a 	mov	r4,r2
    a948:	b105c83a 	sub	r2,r22,r4
    a94c:	b087803a 	cmpltu	r3,r22,r2
    a950:	28c7c83a 	sub	r3,r5,r3
    a954:	d9400317 	ldw	r5,12(sp)
    a958:	1544d83a 	srl	r2,r2,r21
    a95c:	1948983a 	sll	r4,r3,r5
    a960:	1d46d83a 	srl	r3,r3,r21
    a964:	20a4b03a 	or	r18,r4,r2
    a968:	9011883a 	mov	r8,r18
    a96c:	1813883a 	mov	r9,r3
    a970:	003ef606 	br	a54c <__umoddi3+0xf8>
    a974:	01400604 	movi	r5,24
    a978:	2805883a 	mov	r2,r5
    a97c:	003ecc06 	br	a4b0 <__umoddi3+0x5c>
    a980:	01400204 	movi	r5,8
    a984:	2805883a 	mov	r2,r5
    a988:	003ec906 	br	a4b0 <__umoddi3+0x5c>
    a98c:	01400204 	movi	r5,8
    a990:	2805883a 	mov	r2,r5
    a994:	003f0106 	br	a59c <__umoddi3+0x148>
    a998:	01400204 	movi	r5,8
    a99c:	2805883a 	mov	r2,r5
    a9a0:	003f1206 	br	a5ec <__umoddi3+0x198>
    a9a4:	01400604 	movi	r5,24
    a9a8:	2805883a 	mov	r2,r5
    a9ac:	003f0f06 	br	a5ec <__umoddi3+0x198>
    a9b0:	01400604 	movi	r5,24
    a9b4:	2805883a 	mov	r2,r5
    a9b8:	003ef806 	br	a59c <__umoddi3+0x148>
    a9bc:	3c7fb82e 	bgeu	r7,r17,a8a0 <__umoddi3+0x44c>
    a9c0:	843fffc4 	addi	r16,r16,-1
    a9c4:	3dcf883a 	add	r7,r7,r23
    a9c8:	003fb506 	br	a8a0 <__umoddi3+0x44c>
    a9cc:	147fa22e 	bgeu	r2,r17,a858 <__umoddi3+0x404>
    a9d0:	e73fffc4 	addi	fp,fp,-1
    a9d4:	15c5883a 	add	r2,r2,r23
    a9d8:	003f9f06 	br	a858 <__umoddi3+0x404>
    a9dc:	147f692e 	bgeu	r2,r17,a784 <__umoddi3+0x330>
    a9e0:	1405883a 	add	r2,r2,r16
    a9e4:	003f6706 	br	a784 <__umoddi3+0x330>
    a9e8:	1405883a 	add	r2,r2,r16
    a9ec:	003f1906 	br	a654 <__umoddi3+0x200>
    a9f0:	1405883a 	add	r2,r2,r16
    a9f4:	003ec906 	br	a51c <__umoddi3+0xc8>
    a9f8:	b13fcc36 	bltu	r22,r4,a92c <__umoddi3+0x4d8>
    a9fc:	000b883a 	mov	r5,zero
    aa00:	003fd106 	br	a948 <__umoddi3+0x4f4>

0000aa04 <_fpadd_parts>:
    aa04:	defff804 	addi	sp,sp,-32
    aa08:	dcc00315 	stw	r19,12(sp)
    aa0c:	2027883a 	mov	r19,r4
    aa10:	21000017 	ldw	r4,0(r4)
    aa14:	00c00044 	movi	r3,1
    aa18:	dd400515 	stw	r21,20(sp)
    aa1c:	dd000415 	stw	r20,16(sp)
    aa20:	ddc00715 	stw	r23,28(sp)
    aa24:	dd800615 	stw	r22,24(sp)
    aa28:	dc800215 	stw	r18,8(sp)
    aa2c:	dc400115 	stw	r17,4(sp)
    aa30:	dc000015 	stw	r16,0(sp)
    aa34:	282b883a 	mov	r21,r5
    aa38:	3029883a 	mov	r20,r6
    aa3c:	1900632e 	bgeu	r3,r4,abcc <_fpadd_parts+0x1c8>
    aa40:	28800017 	ldw	r2,0(r5)
    aa44:	1880812e 	bgeu	r3,r2,ac4c <_fpadd_parts+0x248>
    aa48:	00c00104 	movi	r3,4
    aa4c:	20c0dc26 	beq	r4,r3,adc0 <_fpadd_parts+0x3bc>
    aa50:	10c07e26 	beq	r2,r3,ac4c <_fpadd_parts+0x248>
    aa54:	00c00084 	movi	r3,2
    aa58:	10c06726 	beq	r2,r3,abf8 <_fpadd_parts+0x1f4>
    aa5c:	20c07b26 	beq	r4,r3,ac4c <_fpadd_parts+0x248>
    aa60:	9dc00217 	ldw	r23,8(r19)
    aa64:	28c00217 	ldw	r3,8(r5)
    aa68:	9c400317 	ldw	r17,12(r19)
    aa6c:	2bc00317 	ldw	r15,12(r5)
    aa70:	b8cdc83a 	sub	r6,r23,r3
    aa74:	9c800417 	ldw	r18,16(r19)
    aa78:	2c000417 	ldw	r16,16(r5)
    aa7c:	3009883a 	mov	r4,r6
    aa80:	30009716 	blt	r6,zero,ace0 <_fpadd_parts+0x2dc>
    aa84:	00800fc4 	movi	r2,63
    aa88:	11806b16 	blt	r2,r6,ac38 <_fpadd_parts+0x234>
    aa8c:	0100a40e 	bge	zero,r4,ad20 <_fpadd_parts+0x31c>
    aa90:	35bff804 	addi	r22,r6,-32
    aa94:	b000bc16 	blt	r22,zero,ad88 <_fpadd_parts+0x384>
    aa98:	8596d83a 	srl	r11,r16,r22
    aa9c:	0019883a 	mov	r12,zero
    aaa0:	0013883a 	mov	r9,zero
    aaa4:	01000044 	movi	r4,1
    aaa8:	0015883a 	mov	r10,zero
    aaac:	b000be16 	blt	r22,zero,ada8 <_fpadd_parts+0x3a4>
    aab0:	2590983a 	sll	r8,r4,r22
    aab4:	000f883a 	mov	r7,zero
    aab8:	00bfffc4 	movi	r2,-1
    aabc:	3889883a 	add	r4,r7,r2
    aac0:	408b883a 	add	r5,r8,r2
    aac4:	21cd803a 	cmpltu	r6,r4,r7
    aac8:	314b883a 	add	r5,r6,r5
    aacc:	7904703a 	and	r2,r15,r4
    aad0:	8146703a 	and	r3,r16,r5
    aad4:	10c4b03a 	or	r2,r2,r3
    aad8:	10000226 	beq	r2,zero,aae4 <_fpadd_parts+0xe0>
    aadc:	02400044 	movi	r9,1
    aae0:	0015883a 	mov	r10,zero
    aae4:	5a5eb03a 	or	r15,r11,r9
    aae8:	62a0b03a 	or	r16,r12,r10
    aaec:	99400117 	ldw	r5,4(r19)
    aaf0:	a8800117 	ldw	r2,4(r21)
    aaf4:	28806e26 	beq	r5,r2,acb0 <_fpadd_parts+0x2ac>
    aaf8:	28006626 	beq	r5,zero,ac94 <_fpadd_parts+0x290>
    aafc:	7c45c83a 	sub	r2,r15,r17
    ab00:	7889803a 	cmpltu	r4,r15,r2
    ab04:	8487c83a 	sub	r3,r16,r18
    ab08:	1909c83a 	sub	r4,r3,r4
    ab0c:	100d883a 	mov	r6,r2
    ab10:	200f883a 	mov	r7,r4
    ab14:	38007716 	blt	r7,zero,acf4 <_fpadd_parts+0x2f0>
    ab18:	a5c00215 	stw	r23,8(r20)
    ab1c:	a1c00415 	stw	r7,16(r20)
    ab20:	a0000115 	stw	zero,4(r20)
    ab24:	a1800315 	stw	r6,12(r20)
    ab28:	a2000317 	ldw	r8,12(r20)
    ab2c:	a2400417 	ldw	r9,16(r20)
    ab30:	00bfffc4 	movi	r2,-1
    ab34:	408b883a 	add	r5,r8,r2
    ab38:	2a09803a 	cmpltu	r4,r5,r8
    ab3c:	488d883a 	add	r6,r9,r2
    ab40:	01c40034 	movhi	r7,4096
    ab44:	39ffffc4 	addi	r7,r7,-1
    ab48:	218d883a 	add	r6,r4,r6
    ab4c:	39801736 	bltu	r7,r6,abac <_fpadd_parts+0x1a8>
    ab50:	31c06526 	beq	r6,r7,ace8 <_fpadd_parts+0x2e4>
    ab54:	a3000217 	ldw	r12,8(r20)
    ab58:	4209883a 	add	r4,r8,r8
    ab5c:	00bfffc4 	movi	r2,-1
    ab60:	220f803a 	cmpltu	r7,r4,r8
    ab64:	4a4b883a 	add	r5,r9,r9
    ab68:	394f883a 	add	r7,r7,r5
    ab6c:	2095883a 	add	r10,r4,r2
    ab70:	3897883a 	add	r11,r7,r2
    ab74:	510d803a 	cmpltu	r6,r10,r4
    ab78:	6099883a 	add	r12,r12,r2
    ab7c:	32d7883a 	add	r11,r6,r11
    ab80:	00840034 	movhi	r2,4096
    ab84:	10bfffc4 	addi	r2,r2,-1
    ab88:	2011883a 	mov	r8,r4
    ab8c:	3813883a 	mov	r9,r7
    ab90:	a1000315 	stw	r4,12(r20)
    ab94:	a1c00415 	stw	r7,16(r20)
    ab98:	a3000215 	stw	r12,8(r20)
    ab9c:	12c00336 	bltu	r2,r11,abac <_fpadd_parts+0x1a8>
    aba0:	58bfed1e 	bne	r11,r2,ab58 <_fpadd_parts+0x154>
    aba4:	00bfff84 	movi	r2,-2
    aba8:	12bfeb2e 	bgeu	r2,r10,ab58 <_fpadd_parts+0x154>
    abac:	a2800417 	ldw	r10,16(r20)
    abb0:	008000c4 	movi	r2,3
    abb4:	00c80034 	movhi	r3,8192
    abb8:	18ffffc4 	addi	r3,r3,-1
    abbc:	a2400317 	ldw	r9,12(r20)
    abc0:	a0800015 	stw	r2,0(r20)
    abc4:	1a802336 	bltu	r3,r10,ac54 <_fpadd_parts+0x250>
    abc8:	a027883a 	mov	r19,r20
    abcc:	9805883a 	mov	r2,r19
    abd0:	ddc00717 	ldw	r23,28(sp)
    abd4:	dd800617 	ldw	r22,24(sp)
    abd8:	dd400517 	ldw	r21,20(sp)
    abdc:	dd000417 	ldw	r20,16(sp)
    abe0:	dcc00317 	ldw	r19,12(sp)
    abe4:	dc800217 	ldw	r18,8(sp)
    abe8:	dc400117 	ldw	r17,4(sp)
    abec:	dc000017 	ldw	r16,0(sp)
    abf0:	dec00804 	addi	sp,sp,32
    abf4:	f800283a 	ret
    abf8:	20fff41e 	bne	r4,r3,abcc <_fpadd_parts+0x1c8>
    abfc:	31000015 	stw	r4,0(r6)
    ac00:	98800117 	ldw	r2,4(r19)
    ac04:	30800115 	stw	r2,4(r6)
    ac08:	98c00217 	ldw	r3,8(r19)
    ac0c:	30c00215 	stw	r3,8(r6)
    ac10:	98800317 	ldw	r2,12(r19)
    ac14:	30800315 	stw	r2,12(r6)
    ac18:	98c00417 	ldw	r3,16(r19)
    ac1c:	30c00415 	stw	r3,16(r6)
    ac20:	98800117 	ldw	r2,4(r19)
    ac24:	28c00117 	ldw	r3,4(r5)
    ac28:	3027883a 	mov	r19,r6
    ac2c:	10c4703a 	and	r2,r2,r3
    ac30:	30800115 	stw	r2,4(r6)
    ac34:	003fe506 	br	abcc <_fpadd_parts+0x1c8>
    ac38:	1dc02616 	blt	r3,r23,acd4 <_fpadd_parts+0x2d0>
    ac3c:	0023883a 	mov	r17,zero
    ac40:	182f883a 	mov	r23,r3
    ac44:	0025883a 	mov	r18,zero
    ac48:	003fa806 	br	aaec <_fpadd_parts+0xe8>
    ac4c:	a827883a 	mov	r19,r21
    ac50:	003fde06 	br	abcc <_fpadd_parts+0x1c8>
    ac54:	01800044 	movi	r6,1
    ac58:	500497fa 	slli	r2,r10,31
    ac5c:	4808d07a 	srli	r4,r9,1
    ac60:	518ad83a 	srl	r5,r10,r6
    ac64:	a2000217 	ldw	r8,8(r20)
    ac68:	1108b03a 	or	r4,r2,r4
    ac6c:	0007883a 	mov	r3,zero
    ac70:	4984703a 	and	r2,r9,r6
    ac74:	208cb03a 	or	r6,r4,r2
    ac78:	28ceb03a 	or	r7,r5,r3
    ac7c:	42000044 	addi	r8,r8,1
    ac80:	a027883a 	mov	r19,r20
    ac84:	a1c00415 	stw	r7,16(r20)
    ac88:	a2000215 	stw	r8,8(r20)
    ac8c:	a1800315 	stw	r6,12(r20)
    ac90:	003fce06 	br	abcc <_fpadd_parts+0x1c8>
    ac94:	8bc5c83a 	sub	r2,r17,r15
    ac98:	8889803a 	cmpltu	r4,r17,r2
    ac9c:	9407c83a 	sub	r3,r18,r16
    aca0:	1909c83a 	sub	r4,r3,r4
    aca4:	100d883a 	mov	r6,r2
    aca8:	200f883a 	mov	r7,r4
    acac:	003f9906 	br	ab14 <_fpadd_parts+0x110>
    acb0:	7c45883a 	add	r2,r15,r17
    acb4:	13c9803a 	cmpltu	r4,r2,r15
    acb8:	8487883a 	add	r3,r16,r18
    acbc:	20c9883a 	add	r4,r4,r3
    acc0:	a1400115 	stw	r5,4(r20)
    acc4:	a5c00215 	stw	r23,8(r20)
    acc8:	a0800315 	stw	r2,12(r20)
    accc:	a1000415 	stw	r4,16(r20)
    acd0:	003fb606 	br	abac <_fpadd_parts+0x1a8>
    acd4:	001f883a 	mov	r15,zero
    acd8:	0021883a 	mov	r16,zero
    acdc:	003f8306 	br	aaec <_fpadd_parts+0xe8>
    ace0:	018dc83a 	sub	r6,zero,r6
    ace4:	003f6706 	br	aa84 <_fpadd_parts+0x80>
    ace8:	00bfff84 	movi	r2,-2
    acec:	117faf36 	bltu	r2,r5,abac <_fpadd_parts+0x1a8>
    acf0:	003f9806 	br	ab54 <_fpadd_parts+0x150>
    acf4:	0005883a 	mov	r2,zero
    acf8:	1189c83a 	sub	r4,r2,r6
    acfc:	1105803a 	cmpltu	r2,r2,r4
    ad00:	01cbc83a 	sub	r5,zero,r7
    ad04:	2885c83a 	sub	r2,r5,r2
    ad08:	01800044 	movi	r6,1
    ad0c:	a1800115 	stw	r6,4(r20)
    ad10:	a5c00215 	stw	r23,8(r20)
    ad14:	a1000315 	stw	r4,12(r20)
    ad18:	a0800415 	stw	r2,16(r20)
    ad1c:	003f8206 	br	ab28 <_fpadd_parts+0x124>
    ad20:	203f7226 	beq	r4,zero,aaec <_fpadd_parts+0xe8>
    ad24:	35bff804 	addi	r22,r6,-32
    ad28:	b9af883a 	add	r23,r23,r6
    ad2c:	b0003116 	blt	r22,zero,adf4 <_fpadd_parts+0x3f0>
    ad30:	959ad83a 	srl	r13,r18,r22
    ad34:	001d883a 	mov	r14,zero
    ad38:	000f883a 	mov	r7,zero
    ad3c:	01000044 	movi	r4,1
    ad40:	0011883a 	mov	r8,zero
    ad44:	b0002516 	blt	r22,zero,addc <_fpadd_parts+0x3d8>
    ad48:	2594983a 	sll	r10,r4,r22
    ad4c:	0013883a 	mov	r9,zero
    ad50:	00bfffc4 	movi	r2,-1
    ad54:	4889883a 	add	r4,r9,r2
    ad58:	508b883a 	add	r5,r10,r2
    ad5c:	224d803a 	cmpltu	r6,r4,r9
    ad60:	314b883a 	add	r5,r6,r5
    ad64:	8904703a 	and	r2,r17,r4
    ad68:	9146703a 	and	r3,r18,r5
    ad6c:	10c4b03a 	or	r2,r2,r3
    ad70:	10000226 	beq	r2,zero,ad7c <_fpadd_parts+0x378>
    ad74:	01c00044 	movi	r7,1
    ad78:	0011883a 	mov	r8,zero
    ad7c:	69e2b03a 	or	r17,r13,r7
    ad80:	7224b03a 	or	r18,r14,r8
    ad84:	003f5906 	br	aaec <_fpadd_parts+0xe8>
    ad88:	8407883a 	add	r3,r16,r16
    ad8c:	008007c4 	movi	r2,31
    ad90:	1185c83a 	sub	r2,r2,r6
    ad94:	1886983a 	sll	r3,r3,r2
    ad98:	7996d83a 	srl	r11,r15,r6
    ad9c:	8198d83a 	srl	r12,r16,r6
    ada0:	1ad6b03a 	or	r11,r3,r11
    ada4:	003f3e06 	br	aaa0 <_fpadd_parts+0x9c>
    ada8:	2006d07a 	srli	r3,r4,1
    adac:	008007c4 	movi	r2,31
    adb0:	1185c83a 	sub	r2,r2,r6
    adb4:	1890d83a 	srl	r8,r3,r2
    adb8:	218e983a 	sll	r7,r4,r6
    adbc:	003f3e06 	br	aab8 <_fpadd_parts+0xb4>
    adc0:	113f821e 	bne	r2,r4,abcc <_fpadd_parts+0x1c8>
    adc4:	28c00117 	ldw	r3,4(r5)
    adc8:	98800117 	ldw	r2,4(r19)
    adcc:	10ff7f26 	beq	r2,r3,abcc <_fpadd_parts+0x1c8>
    add0:	04c00074 	movhi	r19,1
    add4:	9cfc7304 	addi	r19,r19,-3636
    add8:	003f7c06 	br	abcc <_fpadd_parts+0x1c8>
    addc:	2006d07a 	srli	r3,r4,1
    ade0:	008007c4 	movi	r2,31
    ade4:	1185c83a 	sub	r2,r2,r6
    ade8:	1894d83a 	srl	r10,r3,r2
    adec:	2192983a 	sll	r9,r4,r6
    adf0:	003fd706 	br	ad50 <_fpadd_parts+0x34c>
    adf4:	9487883a 	add	r3,r18,r18
    adf8:	008007c4 	movi	r2,31
    adfc:	1185c83a 	sub	r2,r2,r6
    ae00:	1886983a 	sll	r3,r3,r2
    ae04:	899ad83a 	srl	r13,r17,r6
    ae08:	919cd83a 	srl	r14,r18,r6
    ae0c:	1b5ab03a 	or	r13,r3,r13
    ae10:	003fc906 	br	ad38 <_fpadd_parts+0x334>

0000ae14 <__subdf3>:
    ae14:	deffea04 	addi	sp,sp,-88
    ae18:	dcc01415 	stw	r19,80(sp)
    ae1c:	dcc00404 	addi	r19,sp,16
    ae20:	2011883a 	mov	r8,r4
    ae24:	2813883a 	mov	r9,r5
    ae28:	dc401315 	stw	r17,76(sp)
    ae2c:	d809883a 	mov	r4,sp
    ae30:	980b883a 	mov	r5,r19
    ae34:	dc400904 	addi	r17,sp,36
    ae38:	dfc01515 	stw	ra,84(sp)
    ae3c:	da400115 	stw	r9,4(sp)
    ae40:	d9c00315 	stw	r7,12(sp)
    ae44:	da000015 	stw	r8,0(sp)
    ae48:	d9800215 	stw	r6,8(sp)
    ae4c:	000bf5c0 	call	bf5c <__unpack_d>
    ae50:	d9000204 	addi	r4,sp,8
    ae54:	880b883a 	mov	r5,r17
    ae58:	000bf5c0 	call	bf5c <__unpack_d>
    ae5c:	d8800a17 	ldw	r2,40(sp)
    ae60:	880b883a 	mov	r5,r17
    ae64:	9809883a 	mov	r4,r19
    ae68:	d9800e04 	addi	r6,sp,56
    ae6c:	1080005c 	xori	r2,r2,1
    ae70:	d8800a15 	stw	r2,40(sp)
    ae74:	000aa040 	call	aa04 <_fpadd_parts>
    ae78:	1009883a 	mov	r4,r2
    ae7c:	000bc480 	call	bc48 <__pack_d>
    ae80:	dfc01517 	ldw	ra,84(sp)
    ae84:	dcc01417 	ldw	r19,80(sp)
    ae88:	dc401317 	ldw	r17,76(sp)
    ae8c:	dec01604 	addi	sp,sp,88
    ae90:	f800283a 	ret

0000ae94 <__adddf3>:
    ae94:	deffea04 	addi	sp,sp,-88
    ae98:	dcc01415 	stw	r19,80(sp)
    ae9c:	dcc00404 	addi	r19,sp,16
    aea0:	2011883a 	mov	r8,r4
    aea4:	2813883a 	mov	r9,r5
    aea8:	dc401315 	stw	r17,76(sp)
    aeac:	d809883a 	mov	r4,sp
    aeb0:	980b883a 	mov	r5,r19
    aeb4:	dc400904 	addi	r17,sp,36
    aeb8:	dfc01515 	stw	ra,84(sp)
    aebc:	da400115 	stw	r9,4(sp)
    aec0:	d9c00315 	stw	r7,12(sp)
    aec4:	da000015 	stw	r8,0(sp)
    aec8:	d9800215 	stw	r6,8(sp)
    aecc:	000bf5c0 	call	bf5c <__unpack_d>
    aed0:	d9000204 	addi	r4,sp,8
    aed4:	880b883a 	mov	r5,r17
    aed8:	000bf5c0 	call	bf5c <__unpack_d>
    aedc:	d9800e04 	addi	r6,sp,56
    aee0:	9809883a 	mov	r4,r19
    aee4:	880b883a 	mov	r5,r17
    aee8:	000aa040 	call	aa04 <_fpadd_parts>
    aeec:	1009883a 	mov	r4,r2
    aef0:	000bc480 	call	bc48 <__pack_d>
    aef4:	dfc01517 	ldw	ra,84(sp)
    aef8:	dcc01417 	ldw	r19,80(sp)
    aefc:	dc401317 	ldw	r17,76(sp)
    af00:	dec01604 	addi	sp,sp,88
    af04:	f800283a 	ret

0000af08 <__muldf3>:
    af08:	deffe004 	addi	sp,sp,-128
    af0c:	dc401815 	stw	r17,96(sp)
    af10:	dc400404 	addi	r17,sp,16
    af14:	2011883a 	mov	r8,r4
    af18:	2813883a 	mov	r9,r5
    af1c:	dc001715 	stw	r16,92(sp)
    af20:	d809883a 	mov	r4,sp
    af24:	880b883a 	mov	r5,r17
    af28:	dc000904 	addi	r16,sp,36
    af2c:	dfc01f15 	stw	ra,124(sp)
    af30:	da400115 	stw	r9,4(sp)
    af34:	d9c00315 	stw	r7,12(sp)
    af38:	da000015 	stw	r8,0(sp)
    af3c:	d9800215 	stw	r6,8(sp)
    af40:	ddc01e15 	stw	r23,120(sp)
    af44:	dd801d15 	stw	r22,116(sp)
    af48:	dd401c15 	stw	r21,112(sp)
    af4c:	dd001b15 	stw	r20,108(sp)
    af50:	dcc01a15 	stw	r19,104(sp)
    af54:	dc801915 	stw	r18,100(sp)
    af58:	000bf5c0 	call	bf5c <__unpack_d>
    af5c:	d9000204 	addi	r4,sp,8
    af60:	800b883a 	mov	r5,r16
    af64:	000bf5c0 	call	bf5c <__unpack_d>
    af68:	d9000417 	ldw	r4,16(sp)
    af6c:	00800044 	movi	r2,1
    af70:	1100102e 	bgeu	r2,r4,afb4 <__muldf3+0xac>
    af74:	d8c00917 	ldw	r3,36(sp)
    af78:	10c0062e 	bgeu	r2,r3,af94 <__muldf3+0x8c>
    af7c:	00800104 	movi	r2,4
    af80:	20800a26 	beq	r4,r2,afac <__muldf3+0xa4>
    af84:	1880cc26 	beq	r3,r2,b2b8 <__muldf3+0x3b0>
    af88:	00800084 	movi	r2,2
    af8c:	20800926 	beq	r4,r2,afb4 <__muldf3+0xac>
    af90:	1880191e 	bne	r3,r2,aff8 <__muldf3+0xf0>
    af94:	d8c00a17 	ldw	r3,40(sp)
    af98:	d8800517 	ldw	r2,20(sp)
    af9c:	8009883a 	mov	r4,r16
    afa0:	10c4c03a 	cmpne	r2,r2,r3
    afa4:	d8800a15 	stw	r2,40(sp)
    afa8:	00000706 	br	afc8 <__muldf3+0xc0>
    afac:	00800084 	movi	r2,2
    afb0:	1880c326 	beq	r3,r2,b2c0 <__muldf3+0x3b8>
    afb4:	d8800517 	ldw	r2,20(sp)
    afb8:	d8c00a17 	ldw	r3,40(sp)
    afbc:	8809883a 	mov	r4,r17
    afc0:	10c4c03a 	cmpne	r2,r2,r3
    afc4:	d8800515 	stw	r2,20(sp)
    afc8:	000bc480 	call	bc48 <__pack_d>
    afcc:	dfc01f17 	ldw	ra,124(sp)
    afd0:	ddc01e17 	ldw	r23,120(sp)
    afd4:	dd801d17 	ldw	r22,116(sp)
    afd8:	dd401c17 	ldw	r21,112(sp)
    afdc:	dd001b17 	ldw	r20,108(sp)
    afe0:	dcc01a17 	ldw	r19,104(sp)
    afe4:	dc801917 	ldw	r18,100(sp)
    afe8:	dc401817 	ldw	r17,96(sp)
    afec:	dc001717 	ldw	r16,92(sp)
    aff0:	dec02004 	addi	sp,sp,128
    aff4:	f800283a 	ret
    aff8:	dd800717 	ldw	r22,28(sp)
    affc:	dc800c17 	ldw	r18,48(sp)
    b000:	002b883a 	mov	r21,zero
    b004:	0023883a 	mov	r17,zero
    b008:	a80b883a 	mov	r5,r21
    b00c:	b00d883a 	mov	r6,r22
    b010:	880f883a 	mov	r7,r17
    b014:	ddc00817 	ldw	r23,32(sp)
    b018:	dcc00d17 	ldw	r19,52(sp)
    b01c:	9009883a 	mov	r4,r18
    b020:	000bb300 	call	bb30 <__muldi3>
    b024:	001b883a 	mov	r13,zero
    b028:	680f883a 	mov	r7,r13
    b02c:	b009883a 	mov	r4,r22
    b030:	000b883a 	mov	r5,zero
    b034:	980d883a 	mov	r6,r19
    b038:	b82d883a 	mov	r22,r23
    b03c:	002f883a 	mov	r23,zero
    b040:	db401615 	stw	r13,88(sp)
    b044:	d8801315 	stw	r2,76(sp)
    b048:	d8c01415 	stw	r3,80(sp)
    b04c:	dcc01515 	stw	r19,84(sp)
    b050:	000bb300 	call	bb30 <__muldi3>
    b054:	b00d883a 	mov	r6,r22
    b058:	000b883a 	mov	r5,zero
    b05c:	9009883a 	mov	r4,r18
    b060:	b80f883a 	mov	r7,r23
    b064:	1021883a 	mov	r16,r2
    b068:	1823883a 	mov	r17,r3
    b06c:	000bb300 	call	bb30 <__muldi3>
    b070:	8085883a 	add	r2,r16,r2
    b074:	140d803a 	cmpltu	r6,r2,r16
    b078:	88c7883a 	add	r3,r17,r3
    b07c:	30cd883a 	add	r6,r6,r3
    b080:	1029883a 	mov	r20,r2
    b084:	302b883a 	mov	r21,r6
    b088:	da801317 	ldw	r10,76(sp)
    b08c:	dac01417 	ldw	r11,80(sp)
    b090:	db001517 	ldw	r12,84(sp)
    b094:	db401617 	ldw	r13,88(sp)
    b098:	3440612e 	bgeu	r6,r17,b220 <__muldf3+0x318>
    b09c:	0009883a 	mov	r4,zero
    b0a0:	5105883a 	add	r2,r10,r4
    b0a4:	128d803a 	cmpltu	r6,r2,r10
    b0a8:	5d07883a 	add	r3,r11,r20
    b0ac:	30cd883a 	add	r6,r6,r3
    b0b0:	0021883a 	mov	r16,zero
    b0b4:	04400044 	movi	r17,1
    b0b8:	1025883a 	mov	r18,r2
    b0bc:	3027883a 	mov	r19,r6
    b0c0:	32c06236 	bltu	r6,r11,b24c <__muldf3+0x344>
    b0c4:	59807a26 	beq	r11,r6,b2b0 <__muldf3+0x3a8>
    b0c8:	680b883a 	mov	r5,r13
    b0cc:	b80f883a 	mov	r7,r23
    b0d0:	6009883a 	mov	r4,r12
    b0d4:	b00d883a 	mov	r6,r22
    b0d8:	000bb300 	call	bb30 <__muldi3>
    b0dc:	1009883a 	mov	r4,r2
    b0e0:	000f883a 	mov	r7,zero
    b0e4:	1545883a 	add	r2,r2,r21
    b0e8:	1111803a 	cmpltu	r8,r2,r4
    b0ec:	19c7883a 	add	r3,r3,r7
    b0f0:	40c7883a 	add	r3,r8,r3
    b0f4:	88cb883a 	add	r5,r17,r3
    b0f8:	d8c00617 	ldw	r3,24(sp)
    b0fc:	8089883a 	add	r4,r16,r2
    b100:	d8800b17 	ldw	r2,44(sp)
    b104:	18c00104 	addi	r3,r3,4
    b108:	240d803a 	cmpltu	r6,r4,r16
    b10c:	10c7883a 	add	r3,r2,r3
    b110:	2013883a 	mov	r9,r4
    b114:	d8800a17 	ldw	r2,40(sp)
    b118:	d9000517 	ldw	r4,20(sp)
    b11c:	314d883a 	add	r6,r6,r5
    b120:	3015883a 	mov	r10,r6
    b124:	2088c03a 	cmpne	r4,r4,r2
    b128:	00880034 	movhi	r2,8192
    b12c:	10bfffc4 	addi	r2,r2,-1
    b130:	d9000f15 	stw	r4,60(sp)
    b134:	d8c01015 	stw	r3,64(sp)
    b138:	1180162e 	bgeu	r2,r6,b194 <__muldf3+0x28c>
    b13c:	1811883a 	mov	r8,r3
    b140:	101f883a 	mov	r15,r2
    b144:	980497fa 	slli	r2,r19,31
    b148:	9016d07a 	srli	r11,r18,1
    b14c:	500697fa 	slli	r3,r10,31
    b150:	480cd07a 	srli	r6,r9,1
    b154:	500ed07a 	srli	r7,r10,1
    b158:	12d6b03a 	or	r11,r2,r11
    b15c:	00800044 	movi	r2,1
    b160:	198cb03a 	or	r6,r3,r6
    b164:	4888703a 	and	r4,r9,r2
    b168:	9818d07a 	srli	r12,r19,1
    b16c:	001b883a 	mov	r13,zero
    b170:	03a00034 	movhi	r14,32768
    b174:	3013883a 	mov	r9,r6
    b178:	3815883a 	mov	r10,r7
    b17c:	4091883a 	add	r8,r8,r2
    b180:	20000226 	beq	r4,zero,b18c <__muldf3+0x284>
    b184:	5b64b03a 	or	r18,r11,r13
    b188:	63a6b03a 	or	r19,r12,r14
    b18c:	7abfed36 	bltu	r15,r10,b144 <__muldf3+0x23c>
    b190:	da001015 	stw	r8,64(sp)
    b194:	00840034 	movhi	r2,4096
    b198:	10bfffc4 	addi	r2,r2,-1
    b19c:	12801436 	bltu	r2,r10,b1f0 <__muldf3+0x2e8>
    b1a0:	da001017 	ldw	r8,64(sp)
    b1a4:	101f883a 	mov	r15,r2
    b1a8:	4a45883a 	add	r2,r9,r9
    b1ac:	124d803a 	cmpltu	r6,r2,r9
    b1b0:	5287883a 	add	r3,r10,r10
    b1b4:	9497883a 	add	r11,r18,r18
    b1b8:	5c8f803a 	cmpltu	r7,r11,r18
    b1bc:	9cd9883a 	add	r12,r19,r19
    b1c0:	01000044 	movi	r4,1
    b1c4:	30cd883a 	add	r6,r6,r3
    b1c8:	3b0f883a 	add	r7,r7,r12
    b1cc:	423fffc4 	addi	r8,r8,-1
    b1d0:	1013883a 	mov	r9,r2
    b1d4:	3015883a 	mov	r10,r6
    b1d8:	111ab03a 	or	r13,r2,r4
    b1dc:	98003016 	blt	r19,zero,b2a0 <__muldf3+0x398>
    b1e0:	5825883a 	mov	r18,r11
    b1e4:	3827883a 	mov	r19,r7
    b1e8:	7abfef2e 	bgeu	r15,r10,b1a8 <__muldf3+0x2a0>
    b1ec:	da001015 	stw	r8,64(sp)
    b1f0:	00803fc4 	movi	r2,255
    b1f4:	488e703a 	and	r7,r9,r2
    b1f8:	00802004 	movi	r2,128
    b1fc:	0007883a 	mov	r3,zero
    b200:	0011883a 	mov	r8,zero
    b204:	38801826 	beq	r7,r2,b268 <__muldf3+0x360>
    b208:	008000c4 	movi	r2,3
    b20c:	d9000e04 	addi	r4,sp,56
    b210:	da801215 	stw	r10,72(sp)
    b214:	d8800e15 	stw	r2,56(sp)
    b218:	da401115 	stw	r9,68(sp)
    b21c:	003f6a06 	br	afc8 <__muldf3+0xc0>
    b220:	89802126 	beq	r17,r6,b2a8 <__muldf3+0x3a0>
    b224:	0009883a 	mov	r4,zero
    b228:	5105883a 	add	r2,r10,r4
    b22c:	128d803a 	cmpltu	r6,r2,r10
    b230:	5d07883a 	add	r3,r11,r20
    b234:	30cd883a 	add	r6,r6,r3
    b238:	0021883a 	mov	r16,zero
    b23c:	0023883a 	mov	r17,zero
    b240:	1025883a 	mov	r18,r2
    b244:	3027883a 	mov	r19,r6
    b248:	32ff9e2e 	bgeu	r6,r11,b0c4 <__muldf3+0x1bc>
    b24c:	00800044 	movi	r2,1
    b250:	8089883a 	add	r4,r16,r2
    b254:	240d803a 	cmpltu	r6,r4,r16
    b258:	344d883a 	add	r6,r6,r17
    b25c:	2021883a 	mov	r16,r4
    b260:	3023883a 	mov	r17,r6
    b264:	003f9806 	br	b0c8 <__muldf3+0x1c0>
    b268:	403fe71e 	bne	r8,zero,b208 <__muldf3+0x300>
    b26c:	01004004 	movi	r4,256
    b270:	4904703a 	and	r2,r9,r4
    b274:	10c4b03a 	or	r2,r2,r3
    b278:	103fe31e 	bne	r2,zero,b208 <__muldf3+0x300>
    b27c:	94c4b03a 	or	r2,r18,r19
    b280:	103fe126 	beq	r2,zero,b208 <__muldf3+0x300>
    b284:	49c5883a 	add	r2,r9,r7
    b288:	1251803a 	cmpltu	r8,r2,r9
    b28c:	4291883a 	add	r8,r8,r10
    b290:	013fc004 	movi	r4,-256
    b294:	1112703a 	and	r9,r2,r4
    b298:	4015883a 	mov	r10,r8
    b29c:	003fda06 	br	b208 <__muldf3+0x300>
    b2a0:	6813883a 	mov	r9,r13
    b2a4:	003fce06 	br	b1e0 <__muldf3+0x2d8>
    b2a8:	143f7c36 	bltu	r2,r16,b09c <__muldf3+0x194>
    b2ac:	003fdd06 	br	b224 <__muldf3+0x31c>
    b2b0:	12bf852e 	bgeu	r2,r10,b0c8 <__muldf3+0x1c0>
    b2b4:	003fe506 	br	b24c <__muldf3+0x344>
    b2b8:	00800084 	movi	r2,2
    b2bc:	20bf351e 	bne	r4,r2,af94 <__muldf3+0x8c>
    b2c0:	01000074 	movhi	r4,1
    b2c4:	213c7304 	addi	r4,r4,-3636
    b2c8:	003f3f06 	br	afc8 <__muldf3+0xc0>

0000b2cc <__divdf3>:
    b2cc:	deffed04 	addi	sp,sp,-76
    b2d0:	dcc01115 	stw	r19,68(sp)
    b2d4:	dcc00404 	addi	r19,sp,16
    b2d8:	2011883a 	mov	r8,r4
    b2dc:	2813883a 	mov	r9,r5
    b2e0:	dc000e15 	stw	r16,56(sp)
    b2e4:	d809883a 	mov	r4,sp
    b2e8:	980b883a 	mov	r5,r19
    b2ec:	dc000904 	addi	r16,sp,36
    b2f0:	dfc01215 	stw	ra,72(sp)
    b2f4:	da400115 	stw	r9,4(sp)
    b2f8:	d9c00315 	stw	r7,12(sp)
    b2fc:	da000015 	stw	r8,0(sp)
    b300:	d9800215 	stw	r6,8(sp)
    b304:	dc801015 	stw	r18,64(sp)
    b308:	dc400f15 	stw	r17,60(sp)
    b30c:	000bf5c0 	call	bf5c <__unpack_d>
    b310:	d9000204 	addi	r4,sp,8
    b314:	800b883a 	mov	r5,r16
    b318:	000bf5c0 	call	bf5c <__unpack_d>
    b31c:	d9000417 	ldw	r4,16(sp)
    b320:	00800044 	movi	r2,1
    b324:	11000b2e 	bgeu	r2,r4,b354 <__divdf3+0x88>
    b328:	d9400917 	ldw	r5,36(sp)
    b32c:	1140762e 	bgeu	r2,r5,b508 <__divdf3+0x23c>
    b330:	d8800517 	ldw	r2,20(sp)
    b334:	d8c00a17 	ldw	r3,40(sp)
    b338:	01800104 	movi	r6,4
    b33c:	10c4f03a 	xor	r2,r2,r3
    b340:	d8800515 	stw	r2,20(sp)
    b344:	21800226 	beq	r4,r6,b350 <__divdf3+0x84>
    b348:	00800084 	movi	r2,2
    b34c:	2080141e 	bne	r4,r2,b3a0 <__divdf3+0xd4>
    b350:	29000926 	beq	r5,r4,b378 <__divdf3+0xac>
    b354:	9809883a 	mov	r4,r19
    b358:	000bc480 	call	bc48 <__pack_d>
    b35c:	dfc01217 	ldw	ra,72(sp)
    b360:	dcc01117 	ldw	r19,68(sp)
    b364:	dc801017 	ldw	r18,64(sp)
    b368:	dc400f17 	ldw	r17,60(sp)
    b36c:	dc000e17 	ldw	r16,56(sp)
    b370:	dec01304 	addi	sp,sp,76
    b374:	f800283a 	ret
    b378:	01000074 	movhi	r4,1
    b37c:	213c7304 	addi	r4,r4,-3636
    b380:	000bc480 	call	bc48 <__pack_d>
    b384:	dfc01217 	ldw	ra,72(sp)
    b388:	dcc01117 	ldw	r19,68(sp)
    b38c:	dc801017 	ldw	r18,64(sp)
    b390:	dc400f17 	ldw	r17,60(sp)
    b394:	dc000e17 	ldw	r16,56(sp)
    b398:	dec01304 	addi	sp,sp,76
    b39c:	f800283a 	ret
    b3a0:	29805b26 	beq	r5,r6,b510 <__divdf3+0x244>
    b3a4:	28802d26 	beq	r5,r2,b45c <__divdf3+0x190>
    b3a8:	d8c00617 	ldw	r3,24(sp)
    b3ac:	d8800b17 	ldw	r2,44(sp)
    b3b0:	d9c00817 	ldw	r7,32(sp)
    b3b4:	dc400d17 	ldw	r17,52(sp)
    b3b8:	188bc83a 	sub	r5,r3,r2
    b3bc:	d9800717 	ldw	r6,28(sp)
    b3c0:	dc000c17 	ldw	r16,48(sp)
    b3c4:	d9400615 	stw	r5,24(sp)
    b3c8:	3c403836 	bltu	r7,r17,b4ac <__divdf3+0x1e0>
    b3cc:	89c03626 	beq	r17,r7,b4a8 <__divdf3+0x1dc>
    b3d0:	0015883a 	mov	r10,zero
    b3d4:	001d883a 	mov	r14,zero
    b3d8:	02c40034 	movhi	r11,4096
    b3dc:	001f883a 	mov	r15,zero
    b3e0:	003f883a 	mov	ra,zero
    b3e4:	04800f44 	movi	r18,61
    b3e8:	00000f06 	br	b428 <__divdf3+0x15c>
    b3ec:	601d883a 	mov	r14,r12
    b3f0:	681f883a 	mov	r15,r13
    b3f4:	400d883a 	mov	r6,r8
    b3f8:	100f883a 	mov	r7,r2
    b3fc:	3191883a 	add	r8,r6,r6
    b400:	5808d07a 	srli	r4,r11,1
    b404:	4185803a 	cmpltu	r2,r8,r6
    b408:	39d3883a 	add	r9,r7,r7
    b40c:	28c6b03a 	or	r3,r5,r3
    b410:	1245883a 	add	r2,r2,r9
    b414:	1815883a 	mov	r10,r3
    b418:	2017883a 	mov	r11,r4
    b41c:	400d883a 	mov	r6,r8
    b420:	100f883a 	mov	r7,r2
    b424:	fc801726 	beq	ra,r18,b484 <__divdf3+0x1b8>
    b428:	580a97fa 	slli	r5,r11,31
    b42c:	5006d07a 	srli	r3,r10,1
    b430:	ffc00044 	addi	ra,ra,1
    b434:	3c7ff136 	bltu	r7,r17,b3fc <__divdf3+0x130>
    b438:	3411c83a 	sub	r8,r6,r16
    b43c:	3205803a 	cmpltu	r2,r6,r8
    b440:	3c53c83a 	sub	r9,r7,r17
    b444:	7298b03a 	or	r12,r14,r10
    b448:	7adab03a 	or	r13,r15,r11
    b44c:	4885c83a 	sub	r2,r9,r2
    b450:	89ffe61e 	bne	r17,r7,b3ec <__divdf3+0x120>
    b454:	343fe936 	bltu	r6,r16,b3fc <__divdf3+0x130>
    b458:	003fe406 	br	b3ec <__divdf3+0x120>
    b45c:	9809883a 	mov	r4,r19
    b460:	d9800415 	stw	r6,16(sp)
    b464:	000bc480 	call	bc48 <__pack_d>
    b468:	dfc01217 	ldw	ra,72(sp)
    b46c:	dcc01117 	ldw	r19,68(sp)
    b470:	dc801017 	ldw	r18,64(sp)
    b474:	dc400f17 	ldw	r17,60(sp)
    b478:	dc000e17 	ldw	r16,56(sp)
    b47c:	dec01304 	addi	sp,sp,76
    b480:	f800283a 	ret
    b484:	00803fc4 	movi	r2,255
    b488:	7090703a 	and	r8,r14,r2
    b48c:	00802004 	movi	r2,128
    b490:	0007883a 	mov	r3,zero
    b494:	0013883a 	mov	r9,zero
    b498:	40800d26 	beq	r8,r2,b4d0 <__divdf3+0x204>
    b49c:	dbc00815 	stw	r15,32(sp)
    b4a0:	db800715 	stw	r14,28(sp)
    b4a4:	003fab06 	br	b354 <__divdf3+0x88>
    b4a8:	343fc92e 	bgeu	r6,r16,b3d0 <__divdf3+0x104>
    b4ac:	3185883a 	add	r2,r6,r6
    b4b0:	1189803a 	cmpltu	r4,r2,r6
    b4b4:	39c7883a 	add	r3,r7,r7
    b4b8:	20c9883a 	add	r4,r4,r3
    b4bc:	297fffc4 	addi	r5,r5,-1
    b4c0:	100d883a 	mov	r6,r2
    b4c4:	200f883a 	mov	r7,r4
    b4c8:	d9400615 	stw	r5,24(sp)
    b4cc:	003fc006 	br	b3d0 <__divdf3+0x104>
    b4d0:	483ff21e 	bne	r9,zero,b49c <__divdf3+0x1d0>
    b4d4:	01004004 	movi	r4,256
    b4d8:	7104703a 	and	r2,r14,r4
    b4dc:	10c4b03a 	or	r2,r2,r3
    b4e0:	103fee1e 	bne	r2,zero,b49c <__divdf3+0x1d0>
    b4e4:	31c4b03a 	or	r2,r6,r7
    b4e8:	103fec26 	beq	r2,zero,b49c <__divdf3+0x1d0>
    b4ec:	7205883a 	add	r2,r14,r8
    b4f0:	1391803a 	cmpltu	r8,r2,r14
    b4f4:	43d1883a 	add	r8,r8,r15
    b4f8:	013fc004 	movi	r4,-256
    b4fc:	111c703a 	and	r14,r2,r4
    b500:	401f883a 	mov	r15,r8
    b504:	003fe506 	br	b49c <__divdf3+0x1d0>
    b508:	8009883a 	mov	r4,r16
    b50c:	003f9206 	br	b358 <__divdf3+0x8c>
    b510:	9809883a 	mov	r4,r19
    b514:	d8000715 	stw	zero,28(sp)
    b518:	d8000815 	stw	zero,32(sp)
    b51c:	d8000615 	stw	zero,24(sp)
    b520:	003f8d06 	br	b358 <__divdf3+0x8c>

0000b524 <__eqdf2>:
    b524:	deffef04 	addi	sp,sp,-68
    b528:	dc400f15 	stw	r17,60(sp)
    b52c:	dc400404 	addi	r17,sp,16
    b530:	2005883a 	mov	r2,r4
    b534:	2807883a 	mov	r3,r5
    b538:	dc000e15 	stw	r16,56(sp)
    b53c:	d809883a 	mov	r4,sp
    b540:	880b883a 	mov	r5,r17
    b544:	dc000904 	addi	r16,sp,36
    b548:	d8c00115 	stw	r3,4(sp)
    b54c:	d8800015 	stw	r2,0(sp)
    b550:	d9800215 	stw	r6,8(sp)
    b554:	dfc01015 	stw	ra,64(sp)
    b558:	d9c00315 	stw	r7,12(sp)
    b55c:	000bf5c0 	call	bf5c <__unpack_d>
    b560:	d9000204 	addi	r4,sp,8
    b564:	800b883a 	mov	r5,r16
    b568:	000bf5c0 	call	bf5c <__unpack_d>
    b56c:	d8800417 	ldw	r2,16(sp)
    b570:	00c00044 	movi	r3,1
    b574:	180d883a 	mov	r6,r3
    b578:	1880062e 	bgeu	r3,r2,b594 <__eqdf2+0x70>
    b57c:	d8800917 	ldw	r2,36(sp)
    b580:	8809883a 	mov	r4,r17
    b584:	800b883a 	mov	r5,r16
    b588:	1880022e 	bgeu	r3,r2,b594 <__eqdf2+0x70>
    b58c:	000c0940 	call	c094 <__fpcmp_parts_d>
    b590:	100d883a 	mov	r6,r2
    b594:	3005883a 	mov	r2,r6
    b598:	dfc01017 	ldw	ra,64(sp)
    b59c:	dc400f17 	ldw	r17,60(sp)
    b5a0:	dc000e17 	ldw	r16,56(sp)
    b5a4:	dec01104 	addi	sp,sp,68
    b5a8:	f800283a 	ret

0000b5ac <__nedf2>:
    b5ac:	deffef04 	addi	sp,sp,-68
    b5b0:	dc400f15 	stw	r17,60(sp)
    b5b4:	dc400404 	addi	r17,sp,16
    b5b8:	2005883a 	mov	r2,r4
    b5bc:	2807883a 	mov	r3,r5
    b5c0:	dc000e15 	stw	r16,56(sp)
    b5c4:	d809883a 	mov	r4,sp
    b5c8:	880b883a 	mov	r5,r17
    b5cc:	dc000904 	addi	r16,sp,36
    b5d0:	d8c00115 	stw	r3,4(sp)
    b5d4:	d8800015 	stw	r2,0(sp)
    b5d8:	d9800215 	stw	r6,8(sp)
    b5dc:	dfc01015 	stw	ra,64(sp)
    b5e0:	d9c00315 	stw	r7,12(sp)
    b5e4:	000bf5c0 	call	bf5c <__unpack_d>
    b5e8:	d9000204 	addi	r4,sp,8
    b5ec:	800b883a 	mov	r5,r16
    b5f0:	000bf5c0 	call	bf5c <__unpack_d>
    b5f4:	d8800417 	ldw	r2,16(sp)
    b5f8:	00c00044 	movi	r3,1
    b5fc:	180d883a 	mov	r6,r3
    b600:	1880062e 	bgeu	r3,r2,b61c <__nedf2+0x70>
    b604:	d8800917 	ldw	r2,36(sp)
    b608:	8809883a 	mov	r4,r17
    b60c:	800b883a 	mov	r5,r16
    b610:	1880022e 	bgeu	r3,r2,b61c <__nedf2+0x70>
    b614:	000c0940 	call	c094 <__fpcmp_parts_d>
    b618:	100d883a 	mov	r6,r2
    b61c:	3005883a 	mov	r2,r6
    b620:	dfc01017 	ldw	ra,64(sp)
    b624:	dc400f17 	ldw	r17,60(sp)
    b628:	dc000e17 	ldw	r16,56(sp)
    b62c:	dec01104 	addi	sp,sp,68
    b630:	f800283a 	ret

0000b634 <__gtdf2>:
    b634:	deffef04 	addi	sp,sp,-68
    b638:	dc400f15 	stw	r17,60(sp)
    b63c:	dc400404 	addi	r17,sp,16
    b640:	2005883a 	mov	r2,r4
    b644:	2807883a 	mov	r3,r5
    b648:	dc000e15 	stw	r16,56(sp)
    b64c:	d809883a 	mov	r4,sp
    b650:	880b883a 	mov	r5,r17
    b654:	dc000904 	addi	r16,sp,36
    b658:	d8c00115 	stw	r3,4(sp)
    b65c:	d8800015 	stw	r2,0(sp)
    b660:	d9800215 	stw	r6,8(sp)
    b664:	dfc01015 	stw	ra,64(sp)
    b668:	d9c00315 	stw	r7,12(sp)
    b66c:	000bf5c0 	call	bf5c <__unpack_d>
    b670:	d9000204 	addi	r4,sp,8
    b674:	800b883a 	mov	r5,r16
    b678:	000bf5c0 	call	bf5c <__unpack_d>
    b67c:	d8800417 	ldw	r2,16(sp)
    b680:	00c00044 	movi	r3,1
    b684:	01bfffc4 	movi	r6,-1
    b688:	1880062e 	bgeu	r3,r2,b6a4 <__gtdf2+0x70>
    b68c:	d8800917 	ldw	r2,36(sp)
    b690:	8809883a 	mov	r4,r17
    b694:	800b883a 	mov	r5,r16
    b698:	1880022e 	bgeu	r3,r2,b6a4 <__gtdf2+0x70>
    b69c:	000c0940 	call	c094 <__fpcmp_parts_d>
    b6a0:	100d883a 	mov	r6,r2
    b6a4:	3005883a 	mov	r2,r6
    b6a8:	dfc01017 	ldw	ra,64(sp)
    b6ac:	dc400f17 	ldw	r17,60(sp)
    b6b0:	dc000e17 	ldw	r16,56(sp)
    b6b4:	dec01104 	addi	sp,sp,68
    b6b8:	f800283a 	ret

0000b6bc <__gedf2>:
    b6bc:	deffef04 	addi	sp,sp,-68
    b6c0:	dc400f15 	stw	r17,60(sp)
    b6c4:	dc400404 	addi	r17,sp,16
    b6c8:	2005883a 	mov	r2,r4
    b6cc:	2807883a 	mov	r3,r5
    b6d0:	dc000e15 	stw	r16,56(sp)
    b6d4:	d809883a 	mov	r4,sp
    b6d8:	880b883a 	mov	r5,r17
    b6dc:	dc000904 	addi	r16,sp,36
    b6e0:	d8c00115 	stw	r3,4(sp)
    b6e4:	d8800015 	stw	r2,0(sp)
    b6e8:	d9800215 	stw	r6,8(sp)
    b6ec:	dfc01015 	stw	ra,64(sp)
    b6f0:	d9c00315 	stw	r7,12(sp)
    b6f4:	000bf5c0 	call	bf5c <__unpack_d>
    b6f8:	d9000204 	addi	r4,sp,8
    b6fc:	800b883a 	mov	r5,r16
    b700:	000bf5c0 	call	bf5c <__unpack_d>
    b704:	d8800417 	ldw	r2,16(sp)
    b708:	00c00044 	movi	r3,1
    b70c:	01bfffc4 	movi	r6,-1
    b710:	1880062e 	bgeu	r3,r2,b72c <__gedf2+0x70>
    b714:	d8800917 	ldw	r2,36(sp)
    b718:	8809883a 	mov	r4,r17
    b71c:	800b883a 	mov	r5,r16
    b720:	1880022e 	bgeu	r3,r2,b72c <__gedf2+0x70>
    b724:	000c0940 	call	c094 <__fpcmp_parts_d>
    b728:	100d883a 	mov	r6,r2
    b72c:	3005883a 	mov	r2,r6
    b730:	dfc01017 	ldw	ra,64(sp)
    b734:	dc400f17 	ldw	r17,60(sp)
    b738:	dc000e17 	ldw	r16,56(sp)
    b73c:	dec01104 	addi	sp,sp,68
    b740:	f800283a 	ret

0000b744 <__ltdf2>:
    b744:	deffef04 	addi	sp,sp,-68
    b748:	dc400f15 	stw	r17,60(sp)
    b74c:	dc400404 	addi	r17,sp,16
    b750:	2005883a 	mov	r2,r4
    b754:	2807883a 	mov	r3,r5
    b758:	dc000e15 	stw	r16,56(sp)
    b75c:	d809883a 	mov	r4,sp
    b760:	880b883a 	mov	r5,r17
    b764:	dc000904 	addi	r16,sp,36
    b768:	d8c00115 	stw	r3,4(sp)
    b76c:	d8800015 	stw	r2,0(sp)
    b770:	d9800215 	stw	r6,8(sp)
    b774:	dfc01015 	stw	ra,64(sp)
    b778:	d9c00315 	stw	r7,12(sp)
    b77c:	000bf5c0 	call	bf5c <__unpack_d>
    b780:	d9000204 	addi	r4,sp,8
    b784:	800b883a 	mov	r5,r16
    b788:	000bf5c0 	call	bf5c <__unpack_d>
    b78c:	d8800417 	ldw	r2,16(sp)
    b790:	00c00044 	movi	r3,1
    b794:	180d883a 	mov	r6,r3
    b798:	1880062e 	bgeu	r3,r2,b7b4 <__ltdf2+0x70>
    b79c:	d8800917 	ldw	r2,36(sp)
    b7a0:	8809883a 	mov	r4,r17
    b7a4:	800b883a 	mov	r5,r16
    b7a8:	1880022e 	bgeu	r3,r2,b7b4 <__ltdf2+0x70>
    b7ac:	000c0940 	call	c094 <__fpcmp_parts_d>
    b7b0:	100d883a 	mov	r6,r2
    b7b4:	3005883a 	mov	r2,r6
    b7b8:	dfc01017 	ldw	ra,64(sp)
    b7bc:	dc400f17 	ldw	r17,60(sp)
    b7c0:	dc000e17 	ldw	r16,56(sp)
    b7c4:	dec01104 	addi	sp,sp,68
    b7c8:	f800283a 	ret

0000b7cc <__floatsidf>:
    b7cc:	2006d7fa 	srli	r3,r4,31
    b7d0:	defff604 	addi	sp,sp,-40
    b7d4:	008000c4 	movi	r2,3
    b7d8:	dfc00915 	stw	ra,36(sp)
    b7dc:	dcc00815 	stw	r19,32(sp)
    b7e0:	dc800715 	stw	r18,28(sp)
    b7e4:	dc400615 	stw	r17,24(sp)
    b7e8:	dc000515 	stw	r16,20(sp)
    b7ec:	d8800015 	stw	r2,0(sp)
    b7f0:	d8c00115 	stw	r3,4(sp)
    b7f4:	20000f1e 	bne	r4,zero,b834 <__floatsidf+0x68>
    b7f8:	00800084 	movi	r2,2
    b7fc:	d8800015 	stw	r2,0(sp)
    b800:	d809883a 	mov	r4,sp
    b804:	000bc480 	call	bc48 <__pack_d>
    b808:	1009883a 	mov	r4,r2
    b80c:	180b883a 	mov	r5,r3
    b810:	2005883a 	mov	r2,r4
    b814:	2807883a 	mov	r3,r5
    b818:	dfc00917 	ldw	ra,36(sp)
    b81c:	dcc00817 	ldw	r19,32(sp)
    b820:	dc800717 	ldw	r18,28(sp)
    b824:	dc400617 	ldw	r17,24(sp)
    b828:	dc000517 	ldw	r16,20(sp)
    b82c:	dec00a04 	addi	sp,sp,40
    b830:	f800283a 	ret
    b834:	00800f04 	movi	r2,60
    b838:	1807003a 	cmpeq	r3,r3,zero
    b83c:	d8800215 	stw	r2,8(sp)
    b840:	18001126 	beq	r3,zero,b888 <__floatsidf+0xbc>
    b844:	0027883a 	mov	r19,zero
    b848:	2025883a 	mov	r18,r4
    b84c:	d9000315 	stw	r4,12(sp)
    b850:	dcc00415 	stw	r19,16(sp)
    b854:	000bbc80 	call	bbc8 <__clzsi2>
    b858:	11000744 	addi	r4,r2,29
    b85c:	013fe80e 	bge	zero,r4,b800 <__floatsidf+0x34>
    b860:	10bfff44 	addi	r2,r2,-3
    b864:	10000c16 	blt	r2,zero,b898 <__floatsidf+0xcc>
    b868:	90a2983a 	sll	r17,r18,r2
    b86c:	0021883a 	mov	r16,zero
    b870:	d8800217 	ldw	r2,8(sp)
    b874:	dc400415 	stw	r17,16(sp)
    b878:	dc000315 	stw	r16,12(sp)
    b87c:	1105c83a 	sub	r2,r2,r4
    b880:	d8800215 	stw	r2,8(sp)
    b884:	003fde06 	br	b800 <__floatsidf+0x34>
    b888:	00a00034 	movhi	r2,32768
    b88c:	20800a26 	beq	r4,r2,b8b8 <__floatsidf+0xec>
    b890:	0109c83a 	sub	r4,zero,r4
    b894:	003feb06 	br	b844 <__floatsidf+0x78>
    b898:	9006d07a 	srli	r3,r18,1
    b89c:	008007c4 	movi	r2,31
    b8a0:	1105c83a 	sub	r2,r2,r4
    b8a4:	1886d83a 	srl	r3,r3,r2
    b8a8:	9922983a 	sll	r17,r19,r4
    b8ac:	9120983a 	sll	r16,r18,r4
    b8b0:	1c62b03a 	or	r17,r3,r17
    b8b4:	003fee06 	br	b870 <__floatsidf+0xa4>
    b8b8:	0009883a 	mov	r4,zero
    b8bc:	01707834 	movhi	r5,49632
    b8c0:	003fd306 	br	b810 <__floatsidf+0x44>

0000b8c4 <__fixdfsi>:
    b8c4:	defff804 	addi	sp,sp,-32
    b8c8:	2005883a 	mov	r2,r4
    b8cc:	2807883a 	mov	r3,r5
    b8d0:	d809883a 	mov	r4,sp
    b8d4:	d9400204 	addi	r5,sp,8
    b8d8:	d8c00115 	stw	r3,4(sp)
    b8dc:	d8800015 	stw	r2,0(sp)
    b8e0:	dfc00715 	stw	ra,28(sp)
    b8e4:	000bf5c0 	call	bf5c <__unpack_d>
    b8e8:	d8c00217 	ldw	r3,8(sp)
    b8ec:	00800084 	movi	r2,2
    b8f0:	1880051e 	bne	r3,r2,b908 <__fixdfsi+0x44>
    b8f4:	0007883a 	mov	r3,zero
    b8f8:	1805883a 	mov	r2,r3
    b8fc:	dfc00717 	ldw	ra,28(sp)
    b900:	dec00804 	addi	sp,sp,32
    b904:	f800283a 	ret
    b908:	00800044 	movi	r2,1
    b90c:	10fff92e 	bgeu	r2,r3,b8f4 <__fixdfsi+0x30>
    b910:	00800104 	movi	r2,4
    b914:	18800426 	beq	r3,r2,b928 <__fixdfsi+0x64>
    b918:	d8c00417 	ldw	r3,16(sp)
    b91c:	183ff516 	blt	r3,zero,b8f4 <__fixdfsi+0x30>
    b920:	00800784 	movi	r2,30
    b924:	10c0080e 	bge	r2,r3,b948 <__fixdfsi+0x84>
    b928:	d8800317 	ldw	r2,12(sp)
    b92c:	1000121e 	bne	r2,zero,b978 <__fixdfsi+0xb4>
    b930:	00e00034 	movhi	r3,32768
    b934:	18ffffc4 	addi	r3,r3,-1
    b938:	1805883a 	mov	r2,r3
    b93c:	dfc00717 	ldw	ra,28(sp)
    b940:	dec00804 	addi	sp,sp,32
    b944:	f800283a 	ret
    b948:	00800f04 	movi	r2,60
    b94c:	10d1c83a 	sub	r8,r2,r3
    b950:	40bff804 	addi	r2,r8,-32
    b954:	d9800517 	ldw	r6,20(sp)
    b958:	d9c00617 	ldw	r7,24(sp)
    b95c:	10000816 	blt	r2,zero,b980 <__fixdfsi+0xbc>
    b960:	3888d83a 	srl	r4,r7,r2
    b964:	d8800317 	ldw	r2,12(sp)
    b968:	2007883a 	mov	r3,r4
    b96c:	103fe226 	beq	r2,zero,b8f8 <__fixdfsi+0x34>
    b970:	0107c83a 	sub	r3,zero,r4
    b974:	003fe006 	br	b8f8 <__fixdfsi+0x34>
    b978:	00e00034 	movhi	r3,32768
    b97c:	003fde06 	br	b8f8 <__fixdfsi+0x34>
    b980:	39c7883a 	add	r3,r7,r7
    b984:	008007c4 	movi	r2,31
    b988:	1205c83a 	sub	r2,r2,r8
    b98c:	1886983a 	sll	r3,r3,r2
    b990:	3208d83a 	srl	r4,r6,r8
    b994:	1908b03a 	or	r4,r3,r4
    b998:	003ff206 	br	b964 <__fixdfsi+0xa0>

0000b99c <__floatunsidf>:
    b99c:	defff204 	addi	sp,sp,-56
    b9a0:	dfc00d15 	stw	ra,52(sp)
    b9a4:	ddc00c15 	stw	r23,48(sp)
    b9a8:	dd800b15 	stw	r22,44(sp)
    b9ac:	dd400a15 	stw	r21,40(sp)
    b9b0:	dd000915 	stw	r20,36(sp)
    b9b4:	dcc00815 	stw	r19,32(sp)
    b9b8:	dc800715 	stw	r18,28(sp)
    b9bc:	dc400615 	stw	r17,24(sp)
    b9c0:	dc000515 	stw	r16,20(sp)
    b9c4:	d8000115 	stw	zero,4(sp)
    b9c8:	20000f1e 	bne	r4,zero,ba08 <__floatunsidf+0x6c>
    b9cc:	00800084 	movi	r2,2
    b9d0:	d8800015 	stw	r2,0(sp)
    b9d4:	d809883a 	mov	r4,sp
    b9d8:	000bc480 	call	bc48 <__pack_d>
    b9dc:	dfc00d17 	ldw	ra,52(sp)
    b9e0:	ddc00c17 	ldw	r23,48(sp)
    b9e4:	dd800b17 	ldw	r22,44(sp)
    b9e8:	dd400a17 	ldw	r21,40(sp)
    b9ec:	dd000917 	ldw	r20,36(sp)
    b9f0:	dcc00817 	ldw	r19,32(sp)
    b9f4:	dc800717 	ldw	r18,28(sp)
    b9f8:	dc400617 	ldw	r17,24(sp)
    b9fc:	dc000517 	ldw	r16,20(sp)
    ba00:	dec00e04 	addi	sp,sp,56
    ba04:	f800283a 	ret
    ba08:	008000c4 	movi	r2,3
    ba0c:	00c00f04 	movi	r3,60
    ba10:	002f883a 	mov	r23,zero
    ba14:	202d883a 	mov	r22,r4
    ba18:	d8800015 	stw	r2,0(sp)
    ba1c:	d8c00215 	stw	r3,8(sp)
    ba20:	d9000315 	stw	r4,12(sp)
    ba24:	ddc00415 	stw	r23,16(sp)
    ba28:	000bbc80 	call	bbc8 <__clzsi2>
    ba2c:	12400744 	addi	r9,r2,29
    ba30:	48000b16 	blt	r9,zero,ba60 <__floatunsidf+0xc4>
    ba34:	483fe726 	beq	r9,zero,b9d4 <__floatunsidf+0x38>
    ba38:	10bfff44 	addi	r2,r2,-3
    ba3c:	10002e16 	blt	r2,zero,baf8 <__floatunsidf+0x15c>
    ba40:	b0a2983a 	sll	r17,r22,r2
    ba44:	0021883a 	mov	r16,zero
    ba48:	d8800217 	ldw	r2,8(sp)
    ba4c:	dc400415 	stw	r17,16(sp)
    ba50:	dc000315 	stw	r16,12(sp)
    ba54:	1245c83a 	sub	r2,r2,r9
    ba58:	d8800215 	stw	r2,8(sp)
    ba5c:	003fdd06 	br	b9d4 <__floatunsidf+0x38>
    ba60:	0255c83a 	sub	r10,zero,r9
    ba64:	51bff804 	addi	r6,r10,-32
    ba68:	30001b16 	blt	r6,zero,bad8 <__floatunsidf+0x13c>
    ba6c:	b9a8d83a 	srl	r20,r23,r6
    ba70:	002b883a 	mov	r21,zero
    ba74:	000f883a 	mov	r7,zero
    ba78:	01000044 	movi	r4,1
    ba7c:	0011883a 	mov	r8,zero
    ba80:	30002516 	blt	r6,zero,bb18 <__floatunsidf+0x17c>
    ba84:	21a6983a 	sll	r19,r4,r6
    ba88:	0025883a 	mov	r18,zero
    ba8c:	00bfffc4 	movi	r2,-1
    ba90:	9089883a 	add	r4,r18,r2
    ba94:	988b883a 	add	r5,r19,r2
    ba98:	248d803a 	cmpltu	r6,r4,r18
    ba9c:	314b883a 	add	r5,r6,r5
    baa0:	b104703a 	and	r2,r22,r4
    baa4:	b946703a 	and	r3,r23,r5
    baa8:	10c4b03a 	or	r2,r2,r3
    baac:	10000226 	beq	r2,zero,bab8 <__floatunsidf+0x11c>
    bab0:	01c00044 	movi	r7,1
    bab4:	0011883a 	mov	r8,zero
    bab8:	d9000217 	ldw	r4,8(sp)
    babc:	a1c4b03a 	or	r2,r20,r7
    bac0:	aa06b03a 	or	r3,r21,r8
    bac4:	2249c83a 	sub	r4,r4,r9
    bac8:	d8c00415 	stw	r3,16(sp)
    bacc:	d9000215 	stw	r4,8(sp)
    bad0:	d8800315 	stw	r2,12(sp)
    bad4:	003fbf06 	br	b9d4 <__floatunsidf+0x38>
    bad8:	bdc7883a 	add	r3,r23,r23
    badc:	008007c4 	movi	r2,31
    bae0:	1285c83a 	sub	r2,r2,r10
    bae4:	1886983a 	sll	r3,r3,r2
    bae8:	b2a8d83a 	srl	r20,r22,r10
    baec:	baaad83a 	srl	r21,r23,r10
    baf0:	1d28b03a 	or	r20,r3,r20
    baf4:	003fdf06 	br	ba74 <__floatunsidf+0xd8>
    baf8:	b006d07a 	srli	r3,r22,1
    bafc:	008007c4 	movi	r2,31
    bb00:	1245c83a 	sub	r2,r2,r9
    bb04:	1886d83a 	srl	r3,r3,r2
    bb08:	ba62983a 	sll	r17,r23,r9
    bb0c:	b260983a 	sll	r16,r22,r9
    bb10:	1c62b03a 	or	r17,r3,r17
    bb14:	003fcc06 	br	ba48 <__floatunsidf+0xac>
    bb18:	2006d07a 	srli	r3,r4,1
    bb1c:	008007c4 	movi	r2,31
    bb20:	1285c83a 	sub	r2,r2,r10
    bb24:	18a6d83a 	srl	r19,r3,r2
    bb28:	22a4983a 	sll	r18,r4,r10
    bb2c:	003fd706 	br	ba8c <__floatunsidf+0xf0>

0000bb30 <__muldi3>:
    bb30:	2011883a 	mov	r8,r4
    bb34:	427fffcc 	andi	r9,r8,65535
    bb38:	4018d43a 	srli	r12,r8,16
    bb3c:	32bfffcc 	andi	r10,r6,65535
    bb40:	3016d43a 	srli	r11,r6,16
    bb44:	4a85383a 	mul	r2,r9,r10
    bb48:	6295383a 	mul	r10,r12,r10
    bb4c:	4ad3383a 	mul	r9,r9,r11
    bb50:	113fffcc 	andi	r4,r2,65535
    bb54:	1004d43a 	srli	r2,r2,16
    bb58:	4a93883a 	add	r9,r9,r10
    bb5c:	3807883a 	mov	r3,r7
    bb60:	1245883a 	add	r2,r2,r9
    bb64:	280f883a 	mov	r7,r5
    bb68:	180b883a 	mov	r5,r3
    bb6c:	1006943a 	slli	r3,r2,16
    bb70:	defffd04 	addi	sp,sp,-12
    bb74:	dc800215 	stw	r18,8(sp)
    bb78:	1907883a 	add	r3,r3,r4
    bb7c:	dc400115 	stw	r17,4(sp)
    bb80:	dc000015 	stw	r16,0(sp)
    bb84:	4165383a 	mul	r18,r8,r5
    bb88:	31e3383a 	mul	r17,r6,r7
    bb8c:	1012d43a 	srli	r9,r2,16
    bb90:	62d9383a 	mul	r12,r12,r11
    bb94:	181f883a 	mov	r15,r3
    bb98:	1280022e 	bgeu	r2,r10,bba4 <__muldi3+0x74>
    bb9c:	00800074 	movhi	r2,1
    bba0:	6099883a 	add	r12,r12,r2
    bba4:	624d883a 	add	r6,r12,r9
    bba8:	9187883a 	add	r3,r18,r6
    bbac:	88c7883a 	add	r3,r17,r3
    bbb0:	7805883a 	mov	r2,r15
    bbb4:	dc800217 	ldw	r18,8(sp)
    bbb8:	dc400117 	ldw	r17,4(sp)
    bbbc:	dc000017 	ldw	r16,0(sp)
    bbc0:	dec00304 	addi	sp,sp,12
    bbc4:	f800283a 	ret

0000bbc8 <__clzsi2>:
    bbc8:	00bfffd4 	movui	r2,65535
    bbcc:	11000e36 	bltu	r2,r4,bc08 <__clzsi2+0x40>
    bbd0:	00803fc4 	movi	r2,255
    bbd4:	01400204 	movi	r5,8
    bbd8:	0007883a 	mov	r3,zero
    bbdc:	11001036 	bltu	r2,r4,bc20 <__clzsi2+0x58>
    bbe0:	000b883a 	mov	r5,zero
    bbe4:	20c6d83a 	srl	r3,r4,r3
    bbe8:	00800074 	movhi	r2,1
    bbec:	10bc7804 	addi	r2,r2,-3616
    bbf0:	1887883a 	add	r3,r3,r2
    bbf4:	18800003 	ldbu	r2,0(r3)
    bbf8:	00c00804 	movi	r3,32
    bbfc:	2885883a 	add	r2,r5,r2
    bc00:	1885c83a 	sub	r2,r3,r2
    bc04:	f800283a 	ret
    bc08:	01400404 	movi	r5,16
    bc0c:	00804034 	movhi	r2,256
    bc10:	10bfffc4 	addi	r2,r2,-1
    bc14:	2807883a 	mov	r3,r5
    bc18:	113ff22e 	bgeu	r2,r4,bbe4 <__clzsi2+0x1c>
    bc1c:	01400604 	movi	r5,24
    bc20:	2807883a 	mov	r3,r5
    bc24:	20c6d83a 	srl	r3,r4,r3
    bc28:	00800074 	movhi	r2,1
    bc2c:	10bc7804 	addi	r2,r2,-3616
    bc30:	1887883a 	add	r3,r3,r2
    bc34:	18800003 	ldbu	r2,0(r3)
    bc38:	00c00804 	movi	r3,32
    bc3c:	2885883a 	add	r2,r5,r2
    bc40:	1885c83a 	sub	r2,r3,r2
    bc44:	f800283a 	ret

0000bc48 <__pack_d>:
    bc48:	20c00017 	ldw	r3,0(r4)
    bc4c:	defffd04 	addi	sp,sp,-12
    bc50:	dc000015 	stw	r16,0(sp)
    bc54:	dc800215 	stw	r18,8(sp)
    bc58:	dc400115 	stw	r17,4(sp)
    bc5c:	00800044 	movi	r2,1
    bc60:	22000317 	ldw	r8,12(r4)
    bc64:	001f883a 	mov	r15,zero
    bc68:	22400417 	ldw	r9,16(r4)
    bc6c:	24000117 	ldw	r16,4(r4)
    bc70:	10c0552e 	bgeu	r2,r3,bdc8 <__pack_d+0x180>
    bc74:	00800104 	movi	r2,4
    bc78:	18804f26 	beq	r3,r2,bdb8 <__pack_d+0x170>
    bc7c:	00800084 	movi	r2,2
    bc80:	18800226 	beq	r3,r2,bc8c <__pack_d+0x44>
    bc84:	4244b03a 	or	r2,r8,r9
    bc88:	10001a1e 	bne	r2,zero,bcf4 <__pack_d+0xac>
    bc8c:	000d883a 	mov	r6,zero
    bc90:	000f883a 	mov	r7,zero
    bc94:	0011883a 	mov	r8,zero
    bc98:	00800434 	movhi	r2,16
    bc9c:	10bfffc4 	addi	r2,r2,-1
    bca0:	301d883a 	mov	r14,r6
    bca4:	3884703a 	and	r2,r7,r2
    bca8:	400a953a 	slli	r5,r8,20
    bcac:	79bffc2c 	andhi	r6,r15,65520
    bcb0:	308cb03a 	or	r6,r6,r2
    bcb4:	00e00434 	movhi	r3,32784
    bcb8:	18ffffc4 	addi	r3,r3,-1
    bcbc:	800497fa 	slli	r2,r16,31
    bcc0:	30c6703a 	and	r3,r6,r3
    bcc4:	1946b03a 	or	r3,r3,r5
    bcc8:	01600034 	movhi	r5,32768
    bccc:	297fffc4 	addi	r5,r5,-1
    bcd0:	194a703a 	and	r5,r3,r5
    bcd4:	288ab03a 	or	r5,r5,r2
    bcd8:	2807883a 	mov	r3,r5
    bcdc:	7005883a 	mov	r2,r14
    bce0:	dc800217 	ldw	r18,8(sp)
    bce4:	dc400117 	ldw	r17,4(sp)
    bce8:	dc000017 	ldw	r16,0(sp)
    bcec:	dec00304 	addi	sp,sp,12
    bcf0:	f800283a 	ret
    bcf4:	21000217 	ldw	r4,8(r4)
    bcf8:	00bf0084 	movi	r2,-1022
    bcfc:	20803f16 	blt	r4,r2,bdfc <__pack_d+0x1b4>
    bd00:	0080ffc4 	movi	r2,1023
    bd04:	11002c16 	blt	r2,r4,bdb8 <__pack_d+0x170>
    bd08:	00803fc4 	movi	r2,255
    bd0c:	408c703a 	and	r6,r8,r2
    bd10:	00802004 	movi	r2,128
    bd14:	0007883a 	mov	r3,zero
    bd18:	000f883a 	mov	r7,zero
    bd1c:	2280ffc4 	addi	r10,r4,1023
    bd20:	30801e26 	beq	r6,r2,bd9c <__pack_d+0x154>
    bd24:	00801fc4 	movi	r2,127
    bd28:	4089883a 	add	r4,r8,r2
    bd2c:	220d803a 	cmpltu	r6,r4,r8
    bd30:	324d883a 	add	r6,r6,r9
    bd34:	2011883a 	mov	r8,r4
    bd38:	3013883a 	mov	r9,r6
    bd3c:	00880034 	movhi	r2,8192
    bd40:	10bfffc4 	addi	r2,r2,-1
    bd44:	12400d36 	bltu	r2,r9,bd7c <__pack_d+0x134>
    bd48:	4804963a 	slli	r2,r9,24
    bd4c:	400cd23a 	srli	r6,r8,8
    bd50:	480ed23a 	srli	r7,r9,8
    bd54:	013fffc4 	movi	r4,-1
    bd58:	118cb03a 	or	r6,r2,r6
    bd5c:	01400434 	movhi	r5,16
    bd60:	297fffc4 	addi	r5,r5,-1
    bd64:	3104703a 	and	r2,r6,r4
    bd68:	3946703a 	and	r3,r7,r5
    bd6c:	5201ffcc 	andi	r8,r10,2047
    bd70:	100d883a 	mov	r6,r2
    bd74:	180f883a 	mov	r7,r3
    bd78:	003fc706 	br	bc98 <__pack_d+0x50>
    bd7c:	480897fa 	slli	r4,r9,31
    bd80:	4004d07a 	srli	r2,r8,1
    bd84:	4806d07a 	srli	r3,r9,1
    bd88:	52800044 	addi	r10,r10,1
    bd8c:	2084b03a 	or	r2,r4,r2
    bd90:	1011883a 	mov	r8,r2
    bd94:	1813883a 	mov	r9,r3
    bd98:	003feb06 	br	bd48 <__pack_d+0x100>
    bd9c:	383fe11e 	bne	r7,zero,bd24 <__pack_d+0xdc>
    bda0:	01004004 	movi	r4,256
    bda4:	4104703a 	and	r2,r8,r4
    bda8:	10c4b03a 	or	r2,r2,r3
    bdac:	103fe326 	beq	r2,zero,bd3c <__pack_d+0xf4>
    bdb0:	3005883a 	mov	r2,r6
    bdb4:	003fdc06 	br	bd28 <__pack_d+0xe0>
    bdb8:	000d883a 	mov	r6,zero
    bdbc:	000f883a 	mov	r7,zero
    bdc0:	0201ffc4 	movi	r8,2047
    bdc4:	003fb406 	br	bc98 <__pack_d+0x50>
    bdc8:	0005883a 	mov	r2,zero
    bdcc:	00c00234 	movhi	r3,8
    bdd0:	408cb03a 	or	r6,r8,r2
    bdd4:	48ceb03a 	or	r7,r9,r3
    bdd8:	013fffc4 	movi	r4,-1
    bddc:	01400434 	movhi	r5,16
    bde0:	297fffc4 	addi	r5,r5,-1
    bde4:	3104703a 	and	r2,r6,r4
    bde8:	3946703a 	and	r3,r7,r5
    bdec:	100d883a 	mov	r6,r2
    bdf0:	180f883a 	mov	r7,r3
    bdf4:	0201ffc4 	movi	r8,2047
    bdf8:	003fa706 	br	bc98 <__pack_d+0x50>
    bdfc:	1109c83a 	sub	r4,r2,r4
    be00:	00800e04 	movi	r2,56
    be04:	11004316 	blt	r2,r4,bf14 <__pack_d+0x2cc>
    be08:	21fff804 	addi	r7,r4,-32
    be0c:	38004516 	blt	r7,zero,bf24 <__pack_d+0x2dc>
    be10:	49d8d83a 	srl	r12,r9,r7
    be14:	001b883a 	mov	r13,zero
    be18:	0023883a 	mov	r17,zero
    be1c:	01400044 	movi	r5,1
    be20:	0025883a 	mov	r18,zero
    be24:	38004716 	blt	r7,zero,bf44 <__pack_d+0x2fc>
    be28:	29d6983a 	sll	r11,r5,r7
    be2c:	0015883a 	mov	r10,zero
    be30:	00bfffc4 	movi	r2,-1
    be34:	5089883a 	add	r4,r10,r2
    be38:	588b883a 	add	r5,r11,r2
    be3c:	228d803a 	cmpltu	r6,r4,r10
    be40:	314b883a 	add	r5,r6,r5
    be44:	4104703a 	and	r2,r8,r4
    be48:	4946703a 	and	r3,r9,r5
    be4c:	10c4b03a 	or	r2,r2,r3
    be50:	10000226 	beq	r2,zero,be5c <__pack_d+0x214>
    be54:	04400044 	movi	r17,1
    be58:	0025883a 	mov	r18,zero
    be5c:	00803fc4 	movi	r2,255
    be60:	644eb03a 	or	r7,r12,r17
    be64:	3892703a 	and	r9,r7,r2
    be68:	00802004 	movi	r2,128
    be6c:	6c90b03a 	or	r8,r13,r18
    be70:	0015883a 	mov	r10,zero
    be74:	48801626 	beq	r9,r2,bed0 <__pack_d+0x288>
    be78:	01001fc4 	movi	r4,127
    be7c:	3905883a 	add	r2,r7,r4
    be80:	11cd803a 	cmpltu	r6,r2,r7
    be84:	320d883a 	add	r6,r6,r8
    be88:	100f883a 	mov	r7,r2
    be8c:	00840034 	movhi	r2,4096
    be90:	10bfffc4 	addi	r2,r2,-1
    be94:	3011883a 	mov	r8,r6
    be98:	0007883a 	mov	r3,zero
    be9c:	11801b36 	bltu	r2,r6,bf0c <__pack_d+0x2c4>
    bea0:	4004963a 	slli	r2,r8,24
    bea4:	3808d23a 	srli	r4,r7,8
    bea8:	400ad23a 	srli	r5,r8,8
    beac:	1813883a 	mov	r9,r3
    beb0:	1108b03a 	or	r4,r2,r4
    beb4:	00bfffc4 	movi	r2,-1
    beb8:	00c00434 	movhi	r3,16
    bebc:	18ffffc4 	addi	r3,r3,-1
    bec0:	208c703a 	and	r6,r4,r2
    bec4:	28ce703a 	and	r7,r5,r3
    bec8:	4a01ffcc 	andi	r8,r9,2047
    becc:	003f7206 	br	bc98 <__pack_d+0x50>
    bed0:	503fe91e 	bne	r10,zero,be78 <__pack_d+0x230>
    bed4:	01004004 	movi	r4,256
    bed8:	3904703a 	and	r2,r7,r4
    bedc:	0007883a 	mov	r3,zero
    bee0:	10c4b03a 	or	r2,r2,r3
    bee4:	10000626 	beq	r2,zero,bf00 <__pack_d+0x2b8>
    bee8:	3a45883a 	add	r2,r7,r9
    beec:	11cd803a 	cmpltu	r6,r2,r7
    bef0:	320d883a 	add	r6,r6,r8
    bef4:	100f883a 	mov	r7,r2
    bef8:	3011883a 	mov	r8,r6
    befc:	0007883a 	mov	r3,zero
    bf00:	00840034 	movhi	r2,4096
    bf04:	10bfffc4 	addi	r2,r2,-1
    bf08:	123fe52e 	bgeu	r2,r8,bea0 <__pack_d+0x258>
    bf0c:	00c00044 	movi	r3,1
    bf10:	003fe306 	br	bea0 <__pack_d+0x258>
    bf14:	0009883a 	mov	r4,zero
    bf18:	0013883a 	mov	r9,zero
    bf1c:	000b883a 	mov	r5,zero
    bf20:	003fe406 	br	beb4 <__pack_d+0x26c>
    bf24:	4a47883a 	add	r3,r9,r9
    bf28:	008007c4 	movi	r2,31
    bf2c:	1105c83a 	sub	r2,r2,r4
    bf30:	1886983a 	sll	r3,r3,r2
    bf34:	4118d83a 	srl	r12,r8,r4
    bf38:	491ad83a 	srl	r13,r9,r4
    bf3c:	1b18b03a 	or	r12,r3,r12
    bf40:	003fb506 	br	be18 <__pack_d+0x1d0>
    bf44:	2806d07a 	srli	r3,r5,1
    bf48:	008007c4 	movi	r2,31
    bf4c:	1105c83a 	sub	r2,r2,r4
    bf50:	1896d83a 	srl	r11,r3,r2
    bf54:	2914983a 	sll	r10,r5,r4
    bf58:	003fb506 	br	be30 <__pack_d+0x1e8>

0000bf5c <__unpack_d>:
    bf5c:	20c00117 	ldw	r3,4(r4)
    bf60:	22400017 	ldw	r9,0(r4)
    bf64:	00800434 	movhi	r2,16
    bf68:	10bfffc4 	addi	r2,r2,-1
    bf6c:	1808d53a 	srli	r4,r3,20
    bf70:	180cd7fa 	srli	r6,r3,31
    bf74:	1894703a 	and	r10,r3,r2
    bf78:	2201ffcc 	andi	r8,r4,2047
    bf7c:	281b883a 	mov	r13,r5
    bf80:	4817883a 	mov	r11,r9
    bf84:	29800115 	stw	r6,4(r5)
    bf88:	5019883a 	mov	r12,r10
    bf8c:	40001e1e 	bne	r8,zero,c008 <__unpack_d+0xac>
    bf90:	4a84b03a 	or	r2,r9,r10
    bf94:	10001926 	beq	r2,zero,bffc <__unpack_d+0xa0>
    bf98:	4804d63a 	srli	r2,r9,24
    bf9c:	500c923a 	slli	r6,r10,8
    bfa0:	013f0084 	movi	r4,-1022
    bfa4:	00c40034 	movhi	r3,4096
    bfa8:	18ffffc4 	addi	r3,r3,-1
    bfac:	118cb03a 	or	r6,r2,r6
    bfb0:	008000c4 	movi	r2,3
    bfb4:	480a923a 	slli	r5,r9,8
    bfb8:	68800015 	stw	r2,0(r13)
    bfbc:	69000215 	stw	r4,8(r13)
    bfc0:	19800b36 	bltu	r3,r6,bff0 <__unpack_d+0x94>
    bfc4:	200f883a 	mov	r7,r4
    bfc8:	1811883a 	mov	r8,r3
    bfcc:	2945883a 	add	r2,r5,r5
    bfd0:	1149803a 	cmpltu	r4,r2,r5
    bfd4:	3187883a 	add	r3,r6,r6
    bfd8:	20c9883a 	add	r4,r4,r3
    bfdc:	100b883a 	mov	r5,r2
    bfe0:	200d883a 	mov	r6,r4
    bfe4:	39ffffc4 	addi	r7,r7,-1
    bfe8:	413ff82e 	bgeu	r8,r4,bfcc <__unpack_d+0x70>
    bfec:	69c00215 	stw	r7,8(r13)
    bff0:	69800415 	stw	r6,16(r13)
    bff4:	69400315 	stw	r5,12(r13)
    bff8:	f800283a 	ret
    bffc:	00800084 	movi	r2,2
    c000:	28800015 	stw	r2,0(r5)
    c004:	f800283a 	ret
    c008:	0081ffc4 	movi	r2,2047
    c00c:	40800f26 	beq	r8,r2,c04c <__unpack_d+0xf0>
    c010:	480cd63a 	srli	r6,r9,24
    c014:	5006923a 	slli	r3,r10,8
    c018:	4804923a 	slli	r2,r9,8
    c01c:	0009883a 	mov	r4,zero
    c020:	30c6b03a 	or	r3,r6,r3
    c024:	01440034 	movhi	r5,4096
    c028:	110cb03a 	or	r6,r2,r4
    c02c:	423f0044 	addi	r8,r8,-1023
    c030:	194eb03a 	or	r7,r3,r5
    c034:	008000c4 	movi	r2,3
    c038:	69c00415 	stw	r7,16(r13)
    c03c:	6a000215 	stw	r8,8(r13)
    c040:	68800015 	stw	r2,0(r13)
    c044:	69800315 	stw	r6,12(r13)
    c048:	f800283a 	ret
    c04c:	4a84b03a 	or	r2,r9,r10
    c050:	1000031e 	bne	r2,zero,c060 <__unpack_d+0x104>
    c054:	00800104 	movi	r2,4
    c058:	28800015 	stw	r2,0(r5)
    c05c:	f800283a 	ret
    c060:	0009883a 	mov	r4,zero
    c064:	01400234 	movhi	r5,8
    c068:	4904703a 	and	r2,r9,r4
    c06c:	5146703a 	and	r3,r10,r5
    c070:	10c4b03a 	or	r2,r2,r3
    c074:	10000526 	beq	r2,zero,c08c <__unpack_d+0x130>
    c078:	00800044 	movi	r2,1
    c07c:	68800015 	stw	r2,0(r13)
    c080:	6b000415 	stw	r12,16(r13)
    c084:	6ac00315 	stw	r11,12(r13)
    c088:	f800283a 	ret
    c08c:	68000015 	stw	zero,0(r13)
    c090:	003ffb06 	br	c080 <__unpack_d+0x124>

0000c094 <__fpcmp_parts_d>:
    c094:	21800017 	ldw	r6,0(r4)
    c098:	00c00044 	movi	r3,1
    c09c:	19800a2e 	bgeu	r3,r6,c0c8 <__fpcmp_parts_d+0x34>
    c0a0:	28800017 	ldw	r2,0(r5)
    c0a4:	1880082e 	bgeu	r3,r2,c0c8 <__fpcmp_parts_d+0x34>
    c0a8:	00c00104 	movi	r3,4
    c0ac:	30c02626 	beq	r6,r3,c148 <__fpcmp_parts_d+0xb4>
    c0b0:	10c02226 	beq	r2,r3,c13c <__fpcmp_parts_d+0xa8>
    c0b4:	00c00084 	movi	r3,2
    c0b8:	30c00526 	beq	r6,r3,c0d0 <__fpcmp_parts_d+0x3c>
    c0bc:	10c0071e 	bne	r2,r3,c0dc <__fpcmp_parts_d+0x48>
    c0c0:	20800117 	ldw	r2,4(r4)
    c0c4:	1000091e 	bne	r2,zero,c0ec <__fpcmp_parts_d+0x58>
    c0c8:	00800044 	movi	r2,1
    c0cc:	f800283a 	ret
    c0d0:	10c01a1e 	bne	r2,r3,c13c <__fpcmp_parts_d+0xa8>
    c0d4:	0005883a 	mov	r2,zero
    c0d8:	f800283a 	ret
    c0dc:	22000117 	ldw	r8,4(r4)
    c0e0:	28800117 	ldw	r2,4(r5)
    c0e4:	40800326 	beq	r8,r2,c0f4 <__fpcmp_parts_d+0x60>
    c0e8:	403ff726 	beq	r8,zero,c0c8 <__fpcmp_parts_d+0x34>
    c0ec:	00bfffc4 	movi	r2,-1
    c0f0:	f800283a 	ret
    c0f4:	20c00217 	ldw	r3,8(r4)
    c0f8:	28800217 	ldw	r2,8(r5)
    c0fc:	10fffa16 	blt	r2,r3,c0e8 <__fpcmp_parts_d+0x54>
    c100:	18800916 	blt	r3,r2,c128 <__fpcmp_parts_d+0x94>
    c104:	21c00417 	ldw	r7,16(r4)
    c108:	28c00417 	ldw	r3,16(r5)
    c10c:	21800317 	ldw	r6,12(r4)
    c110:	28800317 	ldw	r2,12(r5)
    c114:	19fff436 	bltu	r3,r7,c0e8 <__fpcmp_parts_d+0x54>
    c118:	38c00526 	beq	r7,r3,c130 <__fpcmp_parts_d+0x9c>
    c11c:	38c00236 	bltu	r7,r3,c128 <__fpcmp_parts_d+0x94>
    c120:	19ffec1e 	bne	r3,r7,c0d4 <__fpcmp_parts_d+0x40>
    c124:	30bfeb2e 	bgeu	r6,r2,c0d4 <__fpcmp_parts_d+0x40>
    c128:	403fe71e 	bne	r8,zero,c0c8 <__fpcmp_parts_d+0x34>
    c12c:	003fef06 	br	c0ec <__fpcmp_parts_d+0x58>
    c130:	11bffa2e 	bgeu	r2,r6,c11c <__fpcmp_parts_d+0x88>
    c134:	403fe426 	beq	r8,zero,c0c8 <__fpcmp_parts_d+0x34>
    c138:	003fec06 	br	c0ec <__fpcmp_parts_d+0x58>
    c13c:	28800117 	ldw	r2,4(r5)
    c140:	103fe11e 	bne	r2,zero,c0c8 <__fpcmp_parts_d+0x34>
    c144:	003fe906 	br	c0ec <__fpcmp_parts_d+0x58>
    c148:	11bfdd1e 	bne	r2,r6,c0c0 <__fpcmp_parts_d+0x2c>
    c14c:	28c00117 	ldw	r3,4(r5)
    c150:	20800117 	ldw	r2,4(r4)
    c154:	1885c83a 	sub	r2,r3,r2
    c158:	f800283a 	ret

0000c15c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    c15c:	defff804 	addi	sp,sp,-32
    c160:	dfc00715 	stw	ra,28(sp)
    c164:	df000615 	stw	fp,24(sp)
    c168:	df000604 	addi	fp,sp,24
    c16c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    c170:	e0bffc17 	ldw	r2,-16(fp)
    c174:	1004803a 	cmplt	r2,r2,zero
    c178:	1000081e 	bne	r2,zero,c19c <close+0x40>
    c17c:	e0bffc17 	ldw	r2,-16(fp)
    c180:	10800324 	muli	r2,r2,12
    c184:	1007883a 	mov	r3,r2
    c188:	00800074 	movhi	r2,1
    c18c:	10bee204 	addi	r2,r2,-1144
    c190:	1887883a 	add	r3,r3,r2
    c194:	e0ffff15 	stw	r3,-4(fp)
    c198:	00000106 	br	c1a0 <close+0x44>
    c19c:	e03fff15 	stw	zero,-4(fp)
    c1a0:	e0bfff17 	ldw	r2,-4(fp)
    c1a4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    c1a8:	e0bffb17 	ldw	r2,-20(fp)
    c1ac:	1005003a 	cmpeq	r2,r2,zero
    c1b0:	10001d1e 	bne	r2,zero,c228 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    c1b4:	e0bffb17 	ldw	r2,-20(fp)
    c1b8:	10800017 	ldw	r2,0(r2)
    c1bc:	10800417 	ldw	r2,16(r2)
    c1c0:	1005003a 	cmpeq	r2,r2,zero
    c1c4:	1000071e 	bne	r2,zero,c1e4 <close+0x88>
    c1c8:	e0bffb17 	ldw	r2,-20(fp)
    c1cc:	10800017 	ldw	r2,0(r2)
    c1d0:	10800417 	ldw	r2,16(r2)
    c1d4:	e13ffb17 	ldw	r4,-20(fp)
    c1d8:	103ee83a 	callr	r2
    c1dc:	e0bffe15 	stw	r2,-8(fp)
    c1e0:	00000106 	br	c1e8 <close+0x8c>
    c1e4:	e03ffe15 	stw	zero,-8(fp)
    c1e8:	e0bffe17 	ldw	r2,-8(fp)
    c1ec:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    c1f0:	e13ffc17 	ldw	r4,-16(fp)
    c1f4:	000cbc00 	call	cbc0 <alt_release_fd>
    if (rval < 0)
    c1f8:	e0bffa17 	ldw	r2,-24(fp)
    c1fc:	1004403a 	cmpge	r2,r2,zero
    c200:	1000071e 	bne	r2,zero,c220 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    c204:	000c2580 	call	c258 <alt_get_errno>
    c208:	e0fffa17 	ldw	r3,-24(fp)
    c20c:	00c7c83a 	sub	r3,zero,r3
    c210:	10c00015 	stw	r3,0(r2)
      return -1;
    c214:	00bfffc4 	movi	r2,-1
    c218:	e0bffd15 	stw	r2,-12(fp)
    c21c:	00000806 	br	c240 <close+0xe4>
    }
    return 0;
    c220:	e03ffd15 	stw	zero,-12(fp)
    c224:	00000606 	br	c240 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c228:	000c2580 	call	c258 <alt_get_errno>
    c22c:	1007883a 	mov	r3,r2
    c230:	00801444 	movi	r2,81
    c234:	18800015 	stw	r2,0(r3)
    return -1;
    c238:	00bfffc4 	movi	r2,-1
    c23c:	e0bffd15 	stw	r2,-12(fp)
    c240:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    c244:	e037883a 	mov	sp,fp
    c248:	dfc00117 	ldw	ra,4(sp)
    c24c:	df000017 	ldw	fp,0(sp)
    c250:	dec00204 	addi	sp,sp,8
    c254:	f800283a 	ret

0000c258 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c258:	defffd04 	addi	sp,sp,-12
    c25c:	dfc00215 	stw	ra,8(sp)
    c260:	df000115 	stw	fp,4(sp)
    c264:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c268:	00800074 	movhi	r2,1
    c26c:	10836704 	addi	r2,r2,3484
    c270:	10800017 	ldw	r2,0(r2)
    c274:	1005003a 	cmpeq	r2,r2,zero
    c278:	1000061e 	bne	r2,zero,c294 <alt_get_errno+0x3c>
    c27c:	00800074 	movhi	r2,1
    c280:	10836704 	addi	r2,r2,3484
    c284:	10800017 	ldw	r2,0(r2)
    c288:	103ee83a 	callr	r2
    c28c:	e0bfff15 	stw	r2,-4(fp)
    c290:	00000306 	br	c2a0 <alt_get_errno+0x48>
    c294:	00800074 	movhi	r2,1
    c298:	108a2204 	addi	r2,r2,10376
    c29c:	e0bfff15 	stw	r2,-4(fp)
    c2a0:	e0bfff17 	ldw	r2,-4(fp)
}
    c2a4:	e037883a 	mov	sp,fp
    c2a8:	dfc00117 	ldw	ra,4(sp)
    c2ac:	df000017 	ldw	fp,0(sp)
    c2b0:	dec00204 	addi	sp,sp,8
    c2b4:	f800283a 	ret

0000c2b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    c2b8:	defffc04 	addi	sp,sp,-16
    c2bc:	df000315 	stw	fp,12(sp)
    c2c0:	df000304 	addi	fp,sp,12
    c2c4:	e13ffd15 	stw	r4,-12(fp)
    c2c8:	e17ffe15 	stw	r5,-8(fp)
    c2cc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    c2d0:	e0bfff17 	ldw	r2,-4(fp)
}
    c2d4:	e037883a 	mov	sp,fp
    c2d8:	df000017 	ldw	fp,0(sp)
    c2dc:	dec00104 	addi	sp,sp,4
    c2e0:	f800283a 	ret

0000c2e4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    c2e4:	defffd04 	addi	sp,sp,-12
    c2e8:	df000215 	stw	fp,8(sp)
    c2ec:	df000204 	addi	fp,sp,8
    c2f0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    c2f4:	e0bfff17 	ldw	r2,-4(fp)
    c2f8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c2fc:	e0bffe17 	ldw	r2,-8(fp)
    c300:	1005003a 	cmpeq	r2,r2,zero
    c304:	1000021e 	bne	r2,zero,c310 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    c308:	002af070 	cmpltui	zero,zero,43969
    c30c:	00000106 	br	c314 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    c310:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    c314:	e037883a 	mov	sp,fp
    c318:	df000017 	ldw	fp,0(sp)
    c31c:	dec00104 	addi	sp,sp,4
    c320:	f800283a 	ret

0000c324 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c324:	defffd04 	addi	sp,sp,-12
    c328:	dfc00215 	stw	ra,8(sp)
    c32c:	df000115 	stw	fp,4(sp)
    c330:	df000104 	addi	fp,sp,4
    c334:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    c338:	e13fff17 	ldw	r4,-4(fp)
    c33c:	000c2e40 	call	c2e4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c340:	003fff06 	br	c340 <_exit+0x1c>

0000c344 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    c344:	defff904 	addi	sp,sp,-28
    c348:	dfc00615 	stw	ra,24(sp)
    c34c:	df000515 	stw	fp,20(sp)
    c350:	df000504 	addi	fp,sp,20
    c354:	e13ffc15 	stw	r4,-16(fp)
    c358:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c35c:	e0bffc17 	ldw	r2,-16(fp)
    c360:	1004803a 	cmplt	r2,r2,zero
    c364:	1000081e 	bne	r2,zero,c388 <fstat+0x44>
    c368:	e0bffc17 	ldw	r2,-16(fp)
    c36c:	10800324 	muli	r2,r2,12
    c370:	1007883a 	mov	r3,r2
    c374:	00800074 	movhi	r2,1
    c378:	10bee204 	addi	r2,r2,-1144
    c37c:	1887883a 	add	r3,r3,r2
    c380:	e0ffff15 	stw	r3,-4(fp)
    c384:	00000106 	br	c38c <fstat+0x48>
    c388:	e03fff15 	stw	zero,-4(fp)
    c38c:	e0bfff17 	ldw	r2,-4(fp)
    c390:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    c394:	e0bffb17 	ldw	r2,-20(fp)
    c398:	1005003a 	cmpeq	r2,r2,zero
    c39c:	1000121e 	bne	r2,zero,c3e8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    c3a0:	e0bffb17 	ldw	r2,-20(fp)
    c3a4:	10800017 	ldw	r2,0(r2)
    c3a8:	10800817 	ldw	r2,32(r2)
    c3ac:	1005003a 	cmpeq	r2,r2,zero
    c3b0:	1000081e 	bne	r2,zero,c3d4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    c3b4:	e0bffb17 	ldw	r2,-20(fp)
    c3b8:	10800017 	ldw	r2,0(r2)
    c3bc:	10800817 	ldw	r2,32(r2)
    c3c0:	e13ffb17 	ldw	r4,-20(fp)
    c3c4:	e17ffd17 	ldw	r5,-12(fp)
    c3c8:	103ee83a 	callr	r2
    c3cc:	e0bffe15 	stw	r2,-8(fp)
    c3d0:	00000b06 	br	c400 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    c3d4:	e0fffd17 	ldw	r3,-12(fp)
    c3d8:	00880004 	movi	r2,8192
    c3dc:	18800115 	stw	r2,4(r3)
      return 0;
    c3e0:	e03ffe15 	stw	zero,-8(fp)
    c3e4:	00000606 	br	c400 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c3e8:	000c4180 	call	c418 <alt_get_errno>
    c3ec:	1007883a 	mov	r3,r2
    c3f0:	00801444 	movi	r2,81
    c3f4:	18800015 	stw	r2,0(r3)
    return -1;
    c3f8:	00bfffc4 	movi	r2,-1
    c3fc:	e0bffe15 	stw	r2,-8(fp)
    c400:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    c404:	e037883a 	mov	sp,fp
    c408:	dfc00117 	ldw	ra,4(sp)
    c40c:	df000017 	ldw	fp,0(sp)
    c410:	dec00204 	addi	sp,sp,8
    c414:	f800283a 	ret

0000c418 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c418:	defffd04 	addi	sp,sp,-12
    c41c:	dfc00215 	stw	ra,8(sp)
    c420:	df000115 	stw	fp,4(sp)
    c424:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c428:	00800074 	movhi	r2,1
    c42c:	10836704 	addi	r2,r2,3484
    c430:	10800017 	ldw	r2,0(r2)
    c434:	1005003a 	cmpeq	r2,r2,zero
    c438:	1000061e 	bne	r2,zero,c454 <alt_get_errno+0x3c>
    c43c:	00800074 	movhi	r2,1
    c440:	10836704 	addi	r2,r2,3484
    c444:	10800017 	ldw	r2,0(r2)
    c448:	103ee83a 	callr	r2
    c44c:	e0bfff15 	stw	r2,-4(fp)
    c450:	00000306 	br	c460 <alt_get_errno+0x48>
    c454:	00800074 	movhi	r2,1
    c458:	108a2204 	addi	r2,r2,10376
    c45c:	e0bfff15 	stw	r2,-4(fp)
    c460:	e0bfff17 	ldw	r2,-4(fp)
}
    c464:	e037883a 	mov	sp,fp
    c468:	dfc00117 	ldw	ra,4(sp)
    c46c:	df000017 	ldw	fp,0(sp)
    c470:	dec00204 	addi	sp,sp,8
    c474:	f800283a 	ret

0000c478 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    c478:	deffef04 	addi	sp,sp,-68
    c47c:	df001015 	stw	fp,64(sp)
    c480:	df001004 	addi	fp,sp,64
    c484:	e13ffc15 	stw	r4,-16(fp)
    c488:	e17ffd15 	stw	r5,-12(fp)
    c48c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    c490:	00bffa84 	movi	r2,-22
    c494:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c498:	e0bffc17 	ldw	r2,-16(fp)
    c49c:	10800828 	cmpgeui	r2,r2,32
    c4a0:	1000601e 	bne	r2,zero,c624 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c4a4:	0005303a 	rdctl	r2,status
    c4a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c4ac:	e0fff917 	ldw	r3,-28(fp)
    c4b0:	00bfff84 	movi	r2,-2
    c4b4:	1884703a 	and	r2,r3,r2
    c4b8:	1001703a 	wrctl	status,r2
  
  return context;
    c4bc:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    c4c0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    c4c4:	e0bffc17 	ldw	r2,-16(fp)
    c4c8:	00c00074 	movhi	r3,1
    c4cc:	18cb0104 	addi	r3,r3,11268
    c4d0:	100490fa 	slli	r2,r2,3
    c4d4:	10c7883a 	add	r3,r2,r3
    c4d8:	e0bffe17 	ldw	r2,-8(fp)
    c4dc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    c4e0:	e0bffc17 	ldw	r2,-16(fp)
    c4e4:	00c00074 	movhi	r3,1
    c4e8:	18cb0104 	addi	r3,r3,11268
    c4ec:	100490fa 	slli	r2,r2,3
    c4f0:	10c5883a 	add	r2,r2,r3
    c4f4:	10c00104 	addi	r3,r2,4
    c4f8:	e0bffd17 	ldw	r2,-12(fp)
    c4fc:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    c500:	e0bffe17 	ldw	r2,-8(fp)
    c504:	1005003a 	cmpeq	r2,r2,zero
    c508:	1000201e 	bne	r2,zero,c58c <alt_irq_register+0x114>
    c50c:	e0bffc17 	ldw	r2,-16(fp)
    c510:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c514:	0005303a 	rdctl	r2,status
    c518:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c51c:	e0fff617 	ldw	r3,-40(fp)
    c520:	00bfff84 	movi	r2,-2
    c524:	1884703a 	and	r2,r3,r2
    c528:	1001703a 	wrctl	status,r2
  
  return context;
    c52c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c530:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    c534:	e0fff717 	ldw	r3,-36(fp)
    c538:	00800044 	movi	r2,1
    c53c:	10c4983a 	sll	r2,r2,r3
    c540:	1007883a 	mov	r3,r2
    c544:	00800074 	movhi	r2,1
    c548:	108a2604 	addi	r2,r2,10392
    c54c:	10800017 	ldw	r2,0(r2)
    c550:	1886b03a 	or	r3,r3,r2
    c554:	00800074 	movhi	r2,1
    c558:	108a2604 	addi	r2,r2,10392
    c55c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c560:	00800074 	movhi	r2,1
    c564:	108a2604 	addi	r2,r2,10392
    c568:	10800017 	ldw	r2,0(r2)
    c56c:	100170fa 	wrctl	ienable,r2
    c570:	e0bff817 	ldw	r2,-32(fp)
    c574:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c578:	e0bff517 	ldw	r2,-44(fp)
    c57c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c580:	0005883a 	mov	r2,zero
    c584:	e0bfff15 	stw	r2,-4(fp)
    c588:	00002006 	br	c60c <alt_irq_register+0x194>
    c58c:	e0bffc17 	ldw	r2,-16(fp)
    c590:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c594:	0005303a 	rdctl	r2,status
    c598:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c59c:	e0fff217 	ldw	r3,-56(fp)
    c5a0:	00bfff84 	movi	r2,-2
    c5a4:	1884703a 	and	r2,r3,r2
    c5a8:	1001703a 	wrctl	status,r2
  
  return context;
    c5ac:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c5b0:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    c5b4:	e0fff317 	ldw	r3,-52(fp)
    c5b8:	00800044 	movi	r2,1
    c5bc:	10c4983a 	sll	r2,r2,r3
    c5c0:	0084303a 	nor	r2,zero,r2
    c5c4:	1007883a 	mov	r3,r2
    c5c8:	00800074 	movhi	r2,1
    c5cc:	108a2604 	addi	r2,r2,10392
    c5d0:	10800017 	ldw	r2,0(r2)
    c5d4:	1886703a 	and	r3,r3,r2
    c5d8:	00800074 	movhi	r2,1
    c5dc:	108a2604 	addi	r2,r2,10392
    c5e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c5e4:	00800074 	movhi	r2,1
    c5e8:	108a2604 	addi	r2,r2,10392
    c5ec:	10800017 	ldw	r2,0(r2)
    c5f0:	100170fa 	wrctl	ienable,r2
    c5f4:	e0bff417 	ldw	r2,-48(fp)
    c5f8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c5fc:	e0bff117 	ldw	r2,-60(fp)
    c600:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c604:	0005883a 	mov	r2,zero
    c608:	e0bfff15 	stw	r2,-4(fp)
    c60c:	e0bfff17 	ldw	r2,-4(fp)
    c610:	e0bffb15 	stw	r2,-20(fp)
    c614:	e0bffa17 	ldw	r2,-24(fp)
    c618:	e0bff015 	stw	r2,-64(fp)
    c61c:	e0bff017 	ldw	r2,-64(fp)
    c620:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    c624:	e0bffb17 	ldw	r2,-20(fp)
}
    c628:	e037883a 	mov	sp,fp
    c62c:	df000017 	ldw	fp,0(sp)
    c630:	dec00104 	addi	sp,sp,4
    c634:	f800283a 	ret

0000c638 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    c638:	deffeb04 	addi	sp,sp,-84
    c63c:	dfc01415 	stw	ra,80(sp)
    c640:	df001315 	stw	fp,76(sp)
    c644:	df001304 	addi	fp,sp,76
    c648:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c64c:	e0bffd17 	ldw	r2,-12(fp)
    c650:	1004803a 	cmplt	r2,r2,zero
    c654:	1000081e 	bne	r2,zero,c678 <isatty+0x40>
    c658:	e0bffd17 	ldw	r2,-12(fp)
    c65c:	10800324 	muli	r2,r2,12
    c660:	1007883a 	mov	r3,r2
    c664:	00800074 	movhi	r2,1
    c668:	10bee204 	addi	r2,r2,-1144
    c66c:	1887883a 	add	r3,r3,r2
    c670:	e0ffff15 	stw	r3,-4(fp)
    c674:	00000106 	br	c67c <isatty+0x44>
    c678:	e03fff15 	stw	zero,-4(fp)
    c67c:	e0bfff17 	ldw	r2,-4(fp)
    c680:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    c684:	e0bfed17 	ldw	r2,-76(fp)
    c688:	1005003a 	cmpeq	r2,r2,zero
    c68c:	10000f1e 	bne	r2,zero,c6cc <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    c690:	e0bfed17 	ldw	r2,-76(fp)
    c694:	10800017 	ldw	r2,0(r2)
    c698:	10800817 	ldw	r2,32(r2)
    c69c:	1004c03a 	cmpne	r2,r2,zero
    c6a0:	1000031e 	bne	r2,zero,c6b0 <isatty+0x78>
    {
      return 1;
    c6a4:	00800044 	movi	r2,1
    c6a8:	e0bffe15 	stw	r2,-8(fp)
    c6ac:	00000c06 	br	c6e0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    c6b0:	e17fee04 	addi	r5,fp,-72
    c6b4:	e13ffd17 	ldw	r4,-12(fp)
    c6b8:	000c3440 	call	c344 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    c6bc:	e0bfef17 	ldw	r2,-68(fp)
    c6c0:	10880020 	cmpeqi	r2,r2,8192
    c6c4:	e0bffe15 	stw	r2,-8(fp)
    c6c8:	00000506 	br	c6e0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c6cc:	000c6f80 	call	c6f8 <alt_get_errno>
    c6d0:	1007883a 	mov	r3,r2
    c6d4:	00801444 	movi	r2,81
    c6d8:	18800015 	stw	r2,0(r3)
    return 0;
    c6dc:	e03ffe15 	stw	zero,-8(fp)
    c6e0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    c6e4:	e037883a 	mov	sp,fp
    c6e8:	dfc00117 	ldw	ra,4(sp)
    c6ec:	df000017 	ldw	fp,0(sp)
    c6f0:	dec00204 	addi	sp,sp,8
    c6f4:	f800283a 	ret

0000c6f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c6f8:	defffd04 	addi	sp,sp,-12
    c6fc:	dfc00215 	stw	ra,8(sp)
    c700:	df000115 	stw	fp,4(sp)
    c704:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c708:	00800074 	movhi	r2,1
    c70c:	10836704 	addi	r2,r2,3484
    c710:	10800017 	ldw	r2,0(r2)
    c714:	1005003a 	cmpeq	r2,r2,zero
    c718:	1000061e 	bne	r2,zero,c734 <alt_get_errno+0x3c>
    c71c:	00800074 	movhi	r2,1
    c720:	10836704 	addi	r2,r2,3484
    c724:	10800017 	ldw	r2,0(r2)
    c728:	103ee83a 	callr	r2
    c72c:	e0bfff15 	stw	r2,-4(fp)
    c730:	00000306 	br	c740 <alt_get_errno+0x48>
    c734:	00800074 	movhi	r2,1
    c738:	108a2204 	addi	r2,r2,10376
    c73c:	e0bfff15 	stw	r2,-4(fp)
    c740:	e0bfff17 	ldw	r2,-4(fp)
}
    c744:	e037883a 	mov	sp,fp
    c748:	dfc00117 	ldw	ra,4(sp)
    c74c:	df000017 	ldw	fp,0(sp)
    c750:	dec00204 	addi	sp,sp,8
    c754:	f800283a 	ret

0000c758 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    c758:	defffe04 	addi	sp,sp,-8
    c75c:	dfc00115 	stw	ra,4(sp)
    c760:	df000015 	stw	fp,0(sp)
    c764:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    c768:	01000074 	movhi	r4,1
    c76c:	21036c04 	addi	r4,r4,3504
    c770:	01400074 	movhi	r5,1
    c774:	297cc504 	addi	r5,r5,-3308
    c778:	01800074 	movhi	r6,1
    c77c:	31836c04 	addi	r6,r6,3504
    c780:	000c7d80 	call	c7d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    c784:	01000034 	movhi	r4,0
    c788:	21000004 	addi	r4,r4,0
    c78c:	01408034 	movhi	r5,512
    c790:	29400804 	addi	r5,r5,32
    c794:	01808034 	movhi	r6,512
    c798:	31806d04 	addi	r6,r6,436
    c79c:	000c7d80 	call	c7d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    c7a0:	01000074 	movhi	r4,1
    c7a4:	213b0104 	addi	r4,r4,-5116
    c7a8:	01400074 	movhi	r5,1
    c7ac:	297b0104 	addi	r5,r5,-5116
    c7b0:	01800074 	movhi	r6,1
    c7b4:	31bcc504 	addi	r6,r6,-3308
    c7b8:	000c7d80 	call	c7d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    c7bc:	000dc240 	call	dc24 <alt_dcache_flush_all>
  alt_icache_flush_all();
    c7c0:	000de1c0 	call	de1c <alt_icache_flush_all>
}
    c7c4:	e037883a 	mov	sp,fp
    c7c8:	dfc00117 	ldw	ra,4(sp)
    c7cc:	df000017 	ldw	fp,0(sp)
    c7d0:	dec00204 	addi	sp,sp,8
    c7d4:	f800283a 	ret

0000c7d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    c7d8:	defffc04 	addi	sp,sp,-16
    c7dc:	df000315 	stw	fp,12(sp)
    c7e0:	df000304 	addi	fp,sp,12
    c7e4:	e13ffd15 	stw	r4,-12(fp)
    c7e8:	e17ffe15 	stw	r5,-8(fp)
    c7ec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    c7f0:	e0fffe17 	ldw	r3,-8(fp)
    c7f4:	e0bffd17 	ldw	r2,-12(fp)
    c7f8:	18800e26 	beq	r3,r2,c834 <alt_load_section+0x5c>
  {
    while( to != end )
    c7fc:	00000a06 	br	c828 <alt_load_section+0x50>
    {
      *to++ = *from++;
    c800:	e0bffd17 	ldw	r2,-12(fp)
    c804:	10c00017 	ldw	r3,0(r2)
    c808:	e0bffe17 	ldw	r2,-8(fp)
    c80c:	10c00015 	stw	r3,0(r2)
    c810:	e0bffe17 	ldw	r2,-8(fp)
    c814:	10800104 	addi	r2,r2,4
    c818:	e0bffe15 	stw	r2,-8(fp)
    c81c:	e0bffd17 	ldw	r2,-12(fp)
    c820:	10800104 	addi	r2,r2,4
    c824:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    c828:	e0fffe17 	ldw	r3,-8(fp)
    c82c:	e0bfff17 	ldw	r2,-4(fp)
    c830:	18bff31e 	bne	r3,r2,c800 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    c834:	e037883a 	mov	sp,fp
    c838:	df000017 	ldw	fp,0(sp)
    c83c:	dec00104 	addi	sp,sp,4
    c840:	f800283a 	ret

0000c844 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    c844:	defff804 	addi	sp,sp,-32
    c848:	dfc00715 	stw	ra,28(sp)
    c84c:	df000615 	stw	fp,24(sp)
    c850:	df000604 	addi	fp,sp,24
    c854:	e13ffc15 	stw	r4,-16(fp)
    c858:	e17ffd15 	stw	r5,-12(fp)
    c85c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    c860:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c864:	e0bffc17 	ldw	r2,-16(fp)
    c868:	1004803a 	cmplt	r2,r2,zero
    c86c:	1000081e 	bne	r2,zero,c890 <lseek+0x4c>
    c870:	e0bffc17 	ldw	r2,-16(fp)
    c874:	10800324 	muli	r2,r2,12
    c878:	1007883a 	mov	r3,r2
    c87c:	00800074 	movhi	r2,1
    c880:	10bee204 	addi	r2,r2,-1144
    c884:	1887883a 	add	r3,r3,r2
    c888:	e0ffff15 	stw	r3,-4(fp)
    c88c:	00000106 	br	c894 <lseek+0x50>
    c890:	e03fff15 	stw	zero,-4(fp)
    c894:	e0bfff17 	ldw	r2,-4(fp)
    c898:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    c89c:	e0bffb17 	ldw	r2,-20(fp)
    c8a0:	1005003a 	cmpeq	r2,r2,zero
    c8a4:	1000111e 	bne	r2,zero,c8ec <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    c8a8:	e0bffb17 	ldw	r2,-20(fp)
    c8ac:	10800017 	ldw	r2,0(r2)
    c8b0:	10800717 	ldw	r2,28(r2)
    c8b4:	1005003a 	cmpeq	r2,r2,zero
    c8b8:	1000091e 	bne	r2,zero,c8e0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    c8bc:	e0bffb17 	ldw	r2,-20(fp)
    c8c0:	10800017 	ldw	r2,0(r2)
    c8c4:	10800717 	ldw	r2,28(r2)
    c8c8:	e13ffb17 	ldw	r4,-20(fp)
    c8cc:	e17ffd17 	ldw	r5,-12(fp)
    c8d0:	e1bffe17 	ldw	r6,-8(fp)
    c8d4:	103ee83a 	callr	r2
    c8d8:	e0bffa15 	stw	r2,-24(fp)
    c8dc:	00000506 	br	c8f4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    c8e0:	00bfde84 	movi	r2,-134
    c8e4:	e0bffa15 	stw	r2,-24(fp)
    c8e8:	00000206 	br	c8f4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    c8ec:	00bfebc4 	movi	r2,-81
    c8f0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    c8f4:	e0bffa17 	ldw	r2,-24(fp)
    c8f8:	1004403a 	cmpge	r2,r2,zero
    c8fc:	1000071e 	bne	r2,zero,c91c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    c900:	000c9340 	call	c934 <alt_get_errno>
    c904:	1007883a 	mov	r3,r2
    c908:	e0bffa17 	ldw	r2,-24(fp)
    c90c:	0085c83a 	sub	r2,zero,r2
    c910:	18800015 	stw	r2,0(r3)
    rc = -1;
    c914:	00bfffc4 	movi	r2,-1
    c918:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    c91c:	e0bffa17 	ldw	r2,-24(fp)
}
    c920:	e037883a 	mov	sp,fp
    c924:	dfc00117 	ldw	ra,4(sp)
    c928:	df000017 	ldw	fp,0(sp)
    c92c:	dec00204 	addi	sp,sp,8
    c930:	f800283a 	ret

0000c934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c934:	defffd04 	addi	sp,sp,-12
    c938:	dfc00215 	stw	ra,8(sp)
    c93c:	df000115 	stw	fp,4(sp)
    c940:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c944:	00800074 	movhi	r2,1
    c948:	10836704 	addi	r2,r2,3484
    c94c:	10800017 	ldw	r2,0(r2)
    c950:	1005003a 	cmpeq	r2,r2,zero
    c954:	1000061e 	bne	r2,zero,c970 <alt_get_errno+0x3c>
    c958:	00800074 	movhi	r2,1
    c95c:	10836704 	addi	r2,r2,3484
    c960:	10800017 	ldw	r2,0(r2)
    c964:	103ee83a 	callr	r2
    c968:	e0bfff15 	stw	r2,-4(fp)
    c96c:	00000306 	br	c97c <alt_get_errno+0x48>
    c970:	00800074 	movhi	r2,1
    c974:	108a2204 	addi	r2,r2,10376
    c978:	e0bfff15 	stw	r2,-4(fp)
    c97c:	e0bfff17 	ldw	r2,-4(fp)
}
    c980:	e037883a 	mov	sp,fp
    c984:	dfc00117 	ldw	ra,4(sp)
    c988:	df000017 	ldw	fp,0(sp)
    c98c:	dec00204 	addi	sp,sp,8
    c990:	f800283a 	ret

0000c994 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    c994:	defffd04 	addi	sp,sp,-12
    c998:	dfc00215 	stw	ra,8(sp)
    c99c:	df000115 	stw	fp,4(sp)
    c9a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    c9a4:	0009883a 	mov	r4,zero
    c9a8:	000ce5c0 	call	ce5c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    c9ac:	000ce900 	call	ce90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    c9b0:	01000074 	movhi	r4,1
    c9b4:	213cbb04 	addi	r4,r4,-3348
    c9b8:	01400074 	movhi	r5,1
    c9bc:	297cbb04 	addi	r5,r5,-3348
    c9c0:	01800074 	movhi	r6,1
    c9c4:	31bcbb04 	addi	r6,r6,-3348
    c9c8:	000e1dc0 	call	e1dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    c9cc:	000dd540 	call	dd54 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    c9d0:	01000074 	movhi	r4,1
    c9d4:	21376e04 	addi	r4,r4,-8776
    c9d8:	000e9d80 	call	e9d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    c9dc:	d126cd17 	ldw	r4,-25804(gp)
    c9e0:	d166ce17 	ldw	r5,-25800(gp)
    c9e4:	d1a6cf17 	ldw	r6,-25796(gp)
    c9e8:	000251c0 	call	251c <main>
    c9ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    c9f0:	01000044 	movi	r4,1
    c9f4:	000c15c0 	call	c15c <close>
  exit (result);
    c9f8:	e13fff17 	ldw	r4,-4(fp)
    c9fc:	00028f00 	call	28f0 <exit>

0000ca00 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    ca00:	defffe04 	addi	sp,sp,-8
    ca04:	df000115 	stw	fp,4(sp)
    ca08:	df000104 	addi	fp,sp,4
    ca0c:	e13fff15 	stw	r4,-4(fp)
}
    ca10:	e037883a 	mov	sp,fp
    ca14:	df000017 	ldw	fp,0(sp)
    ca18:	dec00104 	addi	sp,sp,4
    ca1c:	f800283a 	ret

0000ca20 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ca20:	defffe04 	addi	sp,sp,-8
    ca24:	df000115 	stw	fp,4(sp)
    ca28:	df000104 	addi	fp,sp,4
    ca2c:	e13fff15 	stw	r4,-4(fp)
}
    ca30:	e037883a 	mov	sp,fp
    ca34:	df000017 	ldw	fp,0(sp)
    ca38:	dec00104 	addi	sp,sp,4
    ca3c:	f800283a 	ret

0000ca40 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    ca40:	defff704 	addi	sp,sp,-36
    ca44:	dfc00815 	stw	ra,32(sp)
    ca48:	df000715 	stw	fp,28(sp)
    ca4c:	df000704 	addi	fp,sp,28
    ca50:	e13ffb15 	stw	r4,-20(fp)
    ca54:	e17ffc15 	stw	r5,-16(fp)
    ca58:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ca5c:	e0bffb17 	ldw	r2,-20(fp)
    ca60:	1004803a 	cmplt	r2,r2,zero
    ca64:	1000081e 	bne	r2,zero,ca88 <read+0x48>
    ca68:	e0bffb17 	ldw	r2,-20(fp)
    ca6c:	10800324 	muli	r2,r2,12
    ca70:	1007883a 	mov	r3,r2
    ca74:	00800074 	movhi	r2,1
    ca78:	10bee204 	addi	r2,r2,-1144
    ca7c:	1887883a 	add	r3,r3,r2
    ca80:	e0ffff15 	stw	r3,-4(fp)
    ca84:	00000106 	br	ca8c <read+0x4c>
    ca88:	e03fff15 	stw	zero,-4(fp)
    ca8c:	e0bfff17 	ldw	r2,-4(fp)
    ca90:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    ca94:	e0bffa17 	ldw	r2,-24(fp)
    ca98:	1005003a 	cmpeq	r2,r2,zero
    ca9c:	1000241e 	bne	r2,zero,cb30 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    caa0:	e0bffa17 	ldw	r2,-24(fp)
    caa4:	10800217 	ldw	r2,8(r2)
    caa8:	108000cc 	andi	r2,r2,3
    caac:	10800060 	cmpeqi	r2,r2,1
    cab0:	10001a1e 	bne	r2,zero,cb1c <read+0xdc>
    cab4:	e0bffa17 	ldw	r2,-24(fp)
    cab8:	10800017 	ldw	r2,0(r2)
    cabc:	10800517 	ldw	r2,20(r2)
    cac0:	1005003a 	cmpeq	r2,r2,zero
    cac4:	1000151e 	bne	r2,zero,cb1c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    cac8:	e0bffa17 	ldw	r2,-24(fp)
    cacc:	10800017 	ldw	r2,0(r2)
    cad0:	10800517 	ldw	r2,20(r2)
    cad4:	e17ffc17 	ldw	r5,-16(fp)
    cad8:	e1bffd17 	ldw	r6,-12(fp)
    cadc:	e13ffa17 	ldw	r4,-24(fp)
    cae0:	103ee83a 	callr	r2
    cae4:	e0bff915 	stw	r2,-28(fp)
    cae8:	e0bff917 	ldw	r2,-28(fp)
    caec:	1004403a 	cmpge	r2,r2,zero
    caf0:	1000071e 	bne	r2,zero,cb10 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    caf4:	000cb600 	call	cb60 <alt_get_errno>
    caf8:	e0fff917 	ldw	r3,-28(fp)
    cafc:	00c7c83a 	sub	r3,zero,r3
    cb00:	10c00015 	stw	r3,0(r2)
          return -1;
    cb04:	00bfffc4 	movi	r2,-1
    cb08:	e0bffe15 	stw	r2,-8(fp)
    cb0c:	00000e06 	br	cb48 <read+0x108>
        }
        return rval;
    cb10:	e0bff917 	ldw	r2,-28(fp)
    cb14:	e0bffe15 	stw	r2,-8(fp)
    cb18:	00000b06 	br	cb48 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    cb1c:	000cb600 	call	cb60 <alt_get_errno>
    cb20:	1007883a 	mov	r3,r2
    cb24:	00800344 	movi	r2,13
    cb28:	18800015 	stw	r2,0(r3)
    cb2c:	00000406 	br	cb40 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    cb30:	000cb600 	call	cb60 <alt_get_errno>
    cb34:	1007883a 	mov	r3,r2
    cb38:	00801444 	movi	r2,81
    cb3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    cb40:	00bfffc4 	movi	r2,-1
    cb44:	e0bffe15 	stw	r2,-8(fp)
    cb48:	e0bffe17 	ldw	r2,-8(fp)
}
    cb4c:	e037883a 	mov	sp,fp
    cb50:	dfc00117 	ldw	ra,4(sp)
    cb54:	df000017 	ldw	fp,0(sp)
    cb58:	dec00204 	addi	sp,sp,8
    cb5c:	f800283a 	ret

0000cb60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cb60:	defffd04 	addi	sp,sp,-12
    cb64:	dfc00215 	stw	ra,8(sp)
    cb68:	df000115 	stw	fp,4(sp)
    cb6c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    cb70:	00800074 	movhi	r2,1
    cb74:	10836704 	addi	r2,r2,3484
    cb78:	10800017 	ldw	r2,0(r2)
    cb7c:	1005003a 	cmpeq	r2,r2,zero
    cb80:	1000061e 	bne	r2,zero,cb9c <alt_get_errno+0x3c>
    cb84:	00800074 	movhi	r2,1
    cb88:	10836704 	addi	r2,r2,3484
    cb8c:	10800017 	ldw	r2,0(r2)
    cb90:	103ee83a 	callr	r2
    cb94:	e0bfff15 	stw	r2,-4(fp)
    cb98:	00000306 	br	cba8 <alt_get_errno+0x48>
    cb9c:	00800074 	movhi	r2,1
    cba0:	108a2204 	addi	r2,r2,10376
    cba4:	e0bfff15 	stw	r2,-4(fp)
    cba8:	e0bfff17 	ldw	r2,-4(fp)
}
    cbac:	e037883a 	mov	sp,fp
    cbb0:	dfc00117 	ldw	ra,4(sp)
    cbb4:	df000017 	ldw	fp,0(sp)
    cbb8:	dec00204 	addi	sp,sp,8
    cbbc:	f800283a 	ret

0000cbc0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    cbc0:	defffe04 	addi	sp,sp,-8
    cbc4:	df000115 	stw	fp,4(sp)
    cbc8:	df000104 	addi	fp,sp,4
    cbcc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    cbd0:	e0bfff17 	ldw	r2,-4(fp)
    cbd4:	108000d0 	cmplti	r2,r2,3
    cbd8:	10000d1e 	bne	r2,zero,cc10 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    cbdc:	e0bfff17 	ldw	r2,-4(fp)
    cbe0:	00c00074 	movhi	r3,1
    cbe4:	18fee204 	addi	r3,r3,-1144
    cbe8:	10800324 	muli	r2,r2,12
    cbec:	10c5883a 	add	r2,r2,r3
    cbf0:	10800204 	addi	r2,r2,8
    cbf4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    cbf8:	e0bfff17 	ldw	r2,-4(fp)
    cbfc:	00c00074 	movhi	r3,1
    cc00:	18fee204 	addi	r3,r3,-1144
    cc04:	10800324 	muli	r2,r2,12
    cc08:	10c5883a 	add	r2,r2,r3
    cc0c:	10000015 	stw	zero,0(r2)
  }
}
    cc10:	e037883a 	mov	sp,fp
    cc14:	df000017 	ldw	fp,0(sp)
    cc18:	dec00104 	addi	sp,sp,4
    cc1c:	f800283a 	ret

0000cc20 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    cc20:	defff804 	addi	sp,sp,-32
    cc24:	df000715 	stw	fp,28(sp)
    cc28:	df000704 	addi	fp,sp,28
    cc2c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cc30:	0005303a 	rdctl	r2,status
    cc34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cc38:	e0fffb17 	ldw	r3,-20(fp)
    cc3c:	00bfff84 	movi	r2,-2
    cc40:	1884703a 	and	r2,r3,r2
    cc44:	1001703a 	wrctl	status,r2
  
  return context;
    cc48:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    cc4c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    cc50:	d0a00f17 	ldw	r2,-32708(gp)
    cc54:	10c000c4 	addi	r3,r2,3
    cc58:	00bfff04 	movi	r2,-4
    cc5c:	1884703a 	and	r2,r3,r2
    cc60:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    cc64:	d0e00f17 	ldw	r3,-32708(gp)
    cc68:	e0bffe17 	ldw	r2,-8(fp)
    cc6c:	1887883a 	add	r3,r3,r2
    cc70:	00808034 	movhi	r2,512
    cc74:	10800004 	addi	r2,r2,0
    cc78:	10c0072e 	bgeu	r2,r3,cc98 <sbrk+0x78>
    cc7c:	e0bffd17 	ldw	r2,-12(fp)
    cc80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cc84:	e0bffa17 	ldw	r2,-24(fp)
    cc88:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    cc8c:	00bfffc4 	movi	r2,-1
    cc90:	e0bfff15 	stw	r2,-4(fp)
    cc94:	00000c06 	br	ccc8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    cc98:	d0a00f17 	ldw	r2,-32708(gp)
    cc9c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    cca0:	d0e00f17 	ldw	r3,-32708(gp)
    cca4:	e0bffe17 	ldw	r2,-8(fp)
    cca8:	1885883a 	add	r2,r3,r2
    ccac:	d0a00f15 	stw	r2,-32708(gp)
    ccb0:	e0bffd17 	ldw	r2,-12(fp)
    ccb4:	e0bff915 	stw	r2,-28(fp)
    ccb8:	e0bff917 	ldw	r2,-28(fp)
    ccbc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ccc0:	e0bffc17 	ldw	r2,-16(fp)
    ccc4:	e0bfff15 	stw	r2,-4(fp)
    ccc8:	e0bfff17 	ldw	r2,-4(fp)
} 
    cccc:	e037883a 	mov	sp,fp
    ccd0:	df000017 	ldw	fp,0(sp)
    ccd4:	dec00104 	addi	sp,sp,4
    ccd8:	f800283a 	ret

0000ccdc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ccdc:	defff704 	addi	sp,sp,-36
    cce0:	dfc00815 	stw	ra,32(sp)
    cce4:	df000715 	stw	fp,28(sp)
    cce8:	df000704 	addi	fp,sp,28
    ccec:	e13ffb15 	stw	r4,-20(fp)
    ccf0:	e17ffc15 	stw	r5,-16(fp)
    ccf4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ccf8:	e0bffb17 	ldw	r2,-20(fp)
    ccfc:	1004803a 	cmplt	r2,r2,zero
    cd00:	1000081e 	bne	r2,zero,cd24 <write+0x48>
    cd04:	e0bffb17 	ldw	r2,-20(fp)
    cd08:	10800324 	muli	r2,r2,12
    cd0c:	1007883a 	mov	r3,r2
    cd10:	00800074 	movhi	r2,1
    cd14:	10bee204 	addi	r2,r2,-1144
    cd18:	1887883a 	add	r3,r3,r2
    cd1c:	e0ffff15 	stw	r3,-4(fp)
    cd20:	00000106 	br	cd28 <write+0x4c>
    cd24:	e03fff15 	stw	zero,-4(fp)
    cd28:	e0bfff17 	ldw	r2,-4(fp)
    cd2c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    cd30:	e0bffa17 	ldw	r2,-24(fp)
    cd34:	1005003a 	cmpeq	r2,r2,zero
    cd38:	1000241e 	bne	r2,zero,cdcc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    cd3c:	e0bffa17 	ldw	r2,-24(fp)
    cd40:	10800217 	ldw	r2,8(r2)
    cd44:	108000cc 	andi	r2,r2,3
    cd48:	1005003a 	cmpeq	r2,r2,zero
    cd4c:	10001a1e 	bne	r2,zero,cdb8 <write+0xdc>
    cd50:	e0bffa17 	ldw	r2,-24(fp)
    cd54:	10800017 	ldw	r2,0(r2)
    cd58:	10800617 	ldw	r2,24(r2)
    cd5c:	1005003a 	cmpeq	r2,r2,zero
    cd60:	1000151e 	bne	r2,zero,cdb8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    cd64:	e0bffa17 	ldw	r2,-24(fp)
    cd68:	10800017 	ldw	r2,0(r2)
    cd6c:	10800617 	ldw	r2,24(r2)
    cd70:	e17ffc17 	ldw	r5,-16(fp)
    cd74:	e1bffd17 	ldw	r6,-12(fp)
    cd78:	e13ffa17 	ldw	r4,-24(fp)
    cd7c:	103ee83a 	callr	r2
    cd80:	e0bff915 	stw	r2,-28(fp)
    cd84:	e0bff917 	ldw	r2,-28(fp)
    cd88:	1004403a 	cmpge	r2,r2,zero
    cd8c:	1000071e 	bne	r2,zero,cdac <write+0xd0>
      {
        ALT_ERRNO = -rval;
    cd90:	000cdfc0 	call	cdfc <alt_get_errno>
    cd94:	e0fff917 	ldw	r3,-28(fp)
    cd98:	00c7c83a 	sub	r3,zero,r3
    cd9c:	10c00015 	stw	r3,0(r2)
        return -1;
    cda0:	00bfffc4 	movi	r2,-1
    cda4:	e0bffe15 	stw	r2,-8(fp)
    cda8:	00000e06 	br	cde4 <write+0x108>
      }
      return rval;
    cdac:	e0bff917 	ldw	r2,-28(fp)
    cdb0:	e0bffe15 	stw	r2,-8(fp)
    cdb4:	00000b06 	br	cde4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    cdb8:	000cdfc0 	call	cdfc <alt_get_errno>
    cdbc:	1007883a 	mov	r3,r2
    cdc0:	00800344 	movi	r2,13
    cdc4:	18800015 	stw	r2,0(r3)
    cdc8:	00000406 	br	cddc <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    cdcc:	000cdfc0 	call	cdfc <alt_get_errno>
    cdd0:	1007883a 	mov	r3,r2
    cdd4:	00801444 	movi	r2,81
    cdd8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    cddc:	00bfffc4 	movi	r2,-1
    cde0:	e0bffe15 	stw	r2,-8(fp)
    cde4:	e0bffe17 	ldw	r2,-8(fp)
}
    cde8:	e037883a 	mov	sp,fp
    cdec:	dfc00117 	ldw	ra,4(sp)
    cdf0:	df000017 	ldw	fp,0(sp)
    cdf4:	dec00204 	addi	sp,sp,8
    cdf8:	f800283a 	ret

0000cdfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cdfc:	defffd04 	addi	sp,sp,-12
    ce00:	dfc00215 	stw	ra,8(sp)
    ce04:	df000115 	stw	fp,4(sp)
    ce08:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ce0c:	00800074 	movhi	r2,1
    ce10:	10836704 	addi	r2,r2,3484
    ce14:	10800017 	ldw	r2,0(r2)
    ce18:	1005003a 	cmpeq	r2,r2,zero
    ce1c:	1000061e 	bne	r2,zero,ce38 <alt_get_errno+0x3c>
    ce20:	00800074 	movhi	r2,1
    ce24:	10836704 	addi	r2,r2,3484
    ce28:	10800017 	ldw	r2,0(r2)
    ce2c:	103ee83a 	callr	r2
    ce30:	e0bfff15 	stw	r2,-4(fp)
    ce34:	00000306 	br	ce44 <alt_get_errno+0x48>
    ce38:	00800074 	movhi	r2,1
    ce3c:	108a2204 	addi	r2,r2,10376
    ce40:	e0bfff15 	stw	r2,-4(fp)
    ce44:	e0bfff17 	ldw	r2,-4(fp)
}
    ce48:	e037883a 	mov	sp,fp
    ce4c:	dfc00117 	ldw	ra,4(sp)
    ce50:	df000017 	ldw	fp,0(sp)
    ce54:	dec00204 	addi	sp,sp,8
    ce58:	f800283a 	ret

0000ce5c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ce5c:	defffd04 	addi	sp,sp,-12
    ce60:	dfc00215 	stw	ra,8(sp)
    ce64:	df000115 	stw	fp,4(sp)
    ce68:	df000104 	addi	fp,sp,4
    ce6c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    ce70:	000e6bc0 	call	e6bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ce74:	00800044 	movi	r2,1
    ce78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ce7c:	e037883a 	mov	sp,fp
    ce80:	dfc00117 	ldw	ra,4(sp)
    ce84:	df000017 	ldw	fp,0(sp)
    ce88:	dec00204 	addi	sp,sp,8
    ce8c:	f800283a 	ret

0000ce90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ce90:	defffe04 	addi	sp,sp,-8
    ce94:	dfc00115 	stw	ra,4(sp)
    ce98:	df000015 	stw	fp,0(sp)
    ce9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    cea0:	01008034 	movhi	r4,512
    cea4:	21142804 	addi	r4,r4,20640
    cea8:	000b883a 	mov	r5,zero
    ceac:	000d883a 	mov	r6,zero
    ceb0:	01c0fa04 	movi	r7,1000
    ceb4:	000da400 	call	da40 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ceb8:	01000074 	movhi	r4,1
    cebc:	213f4c04 	addi	r4,r4,-720
    cec0:	000b883a 	mov	r5,zero
    cec4:	018000c4 	movi	r6,3
    cec8:	000d06c0 	call	d06c <altera_avalon_jtag_uart_init>
    cecc:	01000074 	movhi	r4,1
    ced0:	213f4204 	addi	r4,r4,-760
    ced4:	000ceec0 	call	ceec <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    ced8:	e037883a 	mov	sp,fp
    cedc:	dfc00117 	ldw	ra,4(sp)
    cee0:	df000017 	ldw	fp,0(sp)
    cee4:	dec00204 	addi	sp,sp,8
    cee8:	f800283a 	ret

0000ceec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    ceec:	defffd04 	addi	sp,sp,-12
    cef0:	dfc00215 	stw	ra,8(sp)
    cef4:	df000115 	stw	fp,4(sp)
    cef8:	df000104 	addi	fp,sp,4
    cefc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    cf00:	e13fff17 	ldw	r4,-4(fp)
    cf04:	01400074 	movhi	r5,1
    cf08:	29436404 	addi	r5,r5,3472
    cf0c:	000dc400 	call	dc40 <alt_dev_llist_insert>
}
    cf10:	e037883a 	mov	sp,fp
    cf14:	dfc00117 	ldw	ra,4(sp)
    cf18:	df000017 	ldw	fp,0(sp)
    cf1c:	dec00204 	addi	sp,sp,8
    cf20:	f800283a 	ret

0000cf24 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    cf24:	defffa04 	addi	sp,sp,-24
    cf28:	dfc00515 	stw	ra,20(sp)
    cf2c:	df000415 	stw	fp,16(sp)
    cf30:	df000404 	addi	fp,sp,16
    cf34:	e13ffd15 	stw	r4,-12(fp)
    cf38:	e17ffe15 	stw	r5,-8(fp)
    cf3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    cf40:	e0bffd17 	ldw	r2,-12(fp)
    cf44:	10800017 	ldw	r2,0(r2)
    cf48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    cf4c:	e0bffc17 	ldw	r2,-16(fp)
    cf50:	11000a04 	addi	r4,r2,40
    cf54:	e0bffd17 	ldw	r2,-12(fp)
    cf58:	11c00217 	ldw	r7,8(r2)
    cf5c:	e17ffe17 	ldw	r5,-8(fp)
    cf60:	e1bfff17 	ldw	r6,-4(fp)
    cf64:	000d56c0 	call	d56c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    cf68:	e037883a 	mov	sp,fp
    cf6c:	dfc00117 	ldw	ra,4(sp)
    cf70:	df000017 	ldw	fp,0(sp)
    cf74:	dec00204 	addi	sp,sp,8
    cf78:	f800283a 	ret

0000cf7c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    cf7c:	defffa04 	addi	sp,sp,-24
    cf80:	dfc00515 	stw	ra,20(sp)
    cf84:	df000415 	stw	fp,16(sp)
    cf88:	df000404 	addi	fp,sp,16
    cf8c:	e13ffd15 	stw	r4,-12(fp)
    cf90:	e17ffe15 	stw	r5,-8(fp)
    cf94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    cf98:	e0bffd17 	ldw	r2,-12(fp)
    cf9c:	10800017 	ldw	r2,0(r2)
    cfa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    cfa4:	e0bffc17 	ldw	r2,-16(fp)
    cfa8:	11000a04 	addi	r4,r2,40
    cfac:	e0bffd17 	ldw	r2,-12(fp)
    cfb0:	11c00217 	ldw	r7,8(r2)
    cfb4:	e17ffe17 	ldw	r5,-8(fp)
    cfb8:	e1bfff17 	ldw	r6,-4(fp)
    cfbc:	000d7900 	call	d790 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    cfc0:	e037883a 	mov	sp,fp
    cfc4:	dfc00117 	ldw	ra,4(sp)
    cfc8:	df000017 	ldw	fp,0(sp)
    cfcc:	dec00204 	addi	sp,sp,8
    cfd0:	f800283a 	ret

0000cfd4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    cfd4:	defffc04 	addi	sp,sp,-16
    cfd8:	dfc00315 	stw	ra,12(sp)
    cfdc:	df000215 	stw	fp,8(sp)
    cfe0:	df000204 	addi	fp,sp,8
    cfe4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    cfe8:	e0bfff17 	ldw	r2,-4(fp)
    cfec:	10800017 	ldw	r2,0(r2)
    cff0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    cff4:	e0bffe17 	ldw	r2,-8(fp)
    cff8:	11000a04 	addi	r4,r2,40
    cffc:	e0bfff17 	ldw	r2,-4(fp)
    d000:	11400217 	ldw	r5,8(r2)
    d004:	000d4040 	call	d404 <altera_avalon_jtag_uart_close>
}
    d008:	e037883a 	mov	sp,fp
    d00c:	dfc00117 	ldw	ra,4(sp)
    d010:	df000017 	ldw	fp,0(sp)
    d014:	dec00204 	addi	sp,sp,8
    d018:	f800283a 	ret

0000d01c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    d01c:	defffa04 	addi	sp,sp,-24
    d020:	dfc00515 	stw	ra,20(sp)
    d024:	df000415 	stw	fp,16(sp)
    d028:	df000404 	addi	fp,sp,16
    d02c:	e13ffd15 	stw	r4,-12(fp)
    d030:	e17ffe15 	stw	r5,-8(fp)
    d034:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    d038:	e0bffd17 	ldw	r2,-12(fp)
    d03c:	10800017 	ldw	r2,0(r2)
    d040:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    d044:	e0bffc17 	ldw	r2,-16(fp)
    d048:	11000a04 	addi	r4,r2,40
    d04c:	e17ffe17 	ldw	r5,-8(fp)
    d050:	e1bfff17 	ldw	r6,-4(fp)
    d054:	000d4780 	call	d478 <altera_avalon_jtag_uart_ioctl>
}
    d058:	e037883a 	mov	sp,fp
    d05c:	dfc00117 	ldw	ra,4(sp)
    d060:	df000017 	ldw	fp,0(sp)
    d064:	dec00204 	addi	sp,sp,8
    d068:	f800283a 	ret

0000d06c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    d06c:	defffa04 	addi	sp,sp,-24
    d070:	dfc00515 	stw	ra,20(sp)
    d074:	df000415 	stw	fp,16(sp)
    d078:	df000404 	addi	fp,sp,16
    d07c:	e13ffd15 	stw	r4,-12(fp)
    d080:	e17ffe15 	stw	r5,-8(fp)
    d084:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d088:	e0fffd17 	ldw	r3,-12(fp)
    d08c:	00800044 	movi	r2,1
    d090:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    d094:	e0bffd17 	ldw	r2,-12(fp)
    d098:	10800017 	ldw	r2,0(r2)
    d09c:	11000104 	addi	r4,r2,4
    d0a0:	e0bffd17 	ldw	r2,-12(fp)
    d0a4:	10800817 	ldw	r2,32(r2)
    d0a8:	1007883a 	mov	r3,r2
    d0ac:	2005883a 	mov	r2,r4
    d0b0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    d0b4:	e13ffe17 	ldw	r4,-8(fp)
    d0b8:	e17fff17 	ldw	r5,-4(fp)
    d0bc:	d8000015 	stw	zero,0(sp)
    d0c0:	01800074 	movhi	r6,1
    d0c4:	31b44b04 	addi	r6,r6,-11988
    d0c8:	e1fffd17 	ldw	r7,-12(fp)
    d0cc:	000de4c0 	call	de4c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    d0d0:	e0bffd17 	ldw	r2,-12(fp)
    d0d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    d0d8:	e0bffd17 	ldw	r2,-12(fp)
    d0dc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d0e0:	00800074 	movhi	r2,1
    d0e4:	108a2a04 	addi	r2,r2,10408
    d0e8:	10800017 	ldw	r2,0(r2)
    d0ec:	100b883a 	mov	r5,r2
    d0f0:	01800074 	movhi	r6,1
    d0f4:	31b4d504 	addi	r6,r6,-11436
    d0f8:	e1fffd17 	ldw	r7,-12(fp)
    d0fc:	000dad00 	call	dad0 <alt_alarm_start>
    d100:	1004403a 	cmpge	r2,r2,zero
    d104:	1000041e 	bne	r2,zero,d118 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    d108:	e0fffd17 	ldw	r3,-12(fp)
    d10c:	00a00034 	movhi	r2,32768
    d110:	10bfffc4 	addi	r2,r2,-1
    d114:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    d118:	e037883a 	mov	sp,fp
    d11c:	dfc00117 	ldw	ra,4(sp)
    d120:	df000017 	ldw	fp,0(sp)
    d124:	dec00204 	addi	sp,sp,8
    d128:	f800283a 	ret

0000d12c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    d12c:	defff804 	addi	sp,sp,-32
    d130:	df000715 	stw	fp,28(sp)
    d134:	df000704 	addi	fp,sp,28
    d138:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    d13c:	e0bfff17 	ldw	r2,-4(fp)
    d140:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    d144:	e0bffe17 	ldw	r2,-8(fp)
    d148:	10800017 	ldw	r2,0(r2)
    d14c:	e0bffd15 	stw	r2,-12(fp)
    d150:	00000006 	br	d154 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d154:	e0bffd17 	ldw	r2,-12(fp)
    d158:	10800104 	addi	r2,r2,4
    d15c:	10800037 	ldwio	r2,0(r2)
    d160:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    d164:	e0bffc17 	ldw	r2,-16(fp)
    d168:	1080c00c 	andi	r2,r2,768
    d16c:	1005003a 	cmpeq	r2,r2,zero
    d170:	1000741e 	bne	r2,zero,d344 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    d174:	e0bffc17 	ldw	r2,-16(fp)
    d178:	1080400c 	andi	r2,r2,256
    d17c:	1005003a 	cmpeq	r2,r2,zero
    d180:	1000351e 	bne	r2,zero,d258 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    d184:	00800074 	movhi	r2,1
    d188:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d18c:	e0bffe17 	ldw	r2,-8(fp)
    d190:	10800a17 	ldw	r2,40(r2)
    d194:	10800044 	addi	r2,r2,1
    d198:	1081ffcc 	andi	r2,r2,2047
    d19c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    d1a0:	e0bffe17 	ldw	r2,-8(fp)
    d1a4:	10c00b17 	ldw	r3,44(r2)
    d1a8:	e0bffa17 	ldw	r2,-24(fp)
    d1ac:	18801626 	beq	r3,r2,d208 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    d1b0:	e0bffd17 	ldw	r2,-12(fp)
    d1b4:	10800037 	ldwio	r2,0(r2)
    d1b8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    d1bc:	e0bffb17 	ldw	r2,-20(fp)
    d1c0:	10a0000c 	andi	r2,r2,32768
    d1c4:	1005003a 	cmpeq	r2,r2,zero
    d1c8:	10000f1e 	bne	r2,zero,d208 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    d1cc:	e0bffe17 	ldw	r2,-8(fp)
    d1d0:	10c00a17 	ldw	r3,40(r2)
    d1d4:	e0bffb17 	ldw	r2,-20(fp)
    d1d8:	1009883a 	mov	r4,r2
    d1dc:	e0bffe17 	ldw	r2,-8(fp)
    d1e0:	1885883a 	add	r2,r3,r2
    d1e4:	10800e04 	addi	r2,r2,56
    d1e8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d1ec:	e0bffe17 	ldw	r2,-8(fp)
    d1f0:	10800a17 	ldw	r2,40(r2)
    d1f4:	10800044 	addi	r2,r2,1
    d1f8:	10c1ffcc 	andi	r3,r2,2047
    d1fc:	e0bffe17 	ldw	r2,-8(fp)
    d200:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    d204:	003fe106 	br	d18c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    d208:	e0bffb17 	ldw	r2,-20(fp)
    d20c:	10bfffec 	andhi	r2,r2,65535
    d210:	1005003a 	cmpeq	r2,r2,zero
    d214:	1000101e 	bne	r2,zero,d258 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d218:	e0bffe17 	ldw	r2,-8(fp)
    d21c:	10c00817 	ldw	r3,32(r2)
    d220:	00bfff84 	movi	r2,-2
    d224:	1886703a 	and	r3,r3,r2
    d228:	e0bffe17 	ldw	r2,-8(fp)
    d22c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    d230:	e0bffd17 	ldw	r2,-12(fp)
    d234:	11000104 	addi	r4,r2,4
    d238:	e0bffe17 	ldw	r2,-8(fp)
    d23c:	10800817 	ldw	r2,32(r2)
    d240:	1007883a 	mov	r3,r2
    d244:	2005883a 	mov	r2,r4
    d248:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d24c:	e0bffd17 	ldw	r2,-12(fp)
    d250:	10800104 	addi	r2,r2,4
    d254:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    d258:	e0bffc17 	ldw	r2,-16(fp)
    d25c:	1080800c 	andi	r2,r2,512
    d260:	1005003a 	cmpeq	r2,r2,zero
    d264:	103fbb1e 	bne	r2,zero,d154 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    d268:	e0bffc17 	ldw	r2,-16(fp)
    d26c:	10bfffec 	andhi	r2,r2,65535
    d270:	1004d43a 	srli	r2,r2,16
    d274:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    d278:	00001506 	br	d2d0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    d27c:	e13ffd17 	ldw	r4,-12(fp)
    d280:	e0bffe17 	ldw	r2,-8(fp)
    d284:	10c00d17 	ldw	r3,52(r2)
    d288:	e0bffe17 	ldw	r2,-8(fp)
    d28c:	1885883a 	add	r2,r3,r2
    d290:	10820e04 	addi	r2,r2,2104
    d294:	10800003 	ldbu	r2,0(r2)
    d298:	10c03fcc 	andi	r3,r2,255
    d29c:	18c0201c 	xori	r3,r3,128
    d2a0:	18ffe004 	addi	r3,r3,-128
    d2a4:	2005883a 	mov	r2,r4
    d2a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d2ac:	e0bffe17 	ldw	r2,-8(fp)
    d2b0:	10800d17 	ldw	r2,52(r2)
    d2b4:	10800044 	addi	r2,r2,1
    d2b8:	10c1ffcc 	andi	r3,r2,2047
    d2bc:	e0bffe17 	ldw	r2,-8(fp)
    d2c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    d2c4:	e0bff917 	ldw	r2,-28(fp)
    d2c8:	10bfffc4 	addi	r2,r2,-1
    d2cc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    d2d0:	e0bff917 	ldw	r2,-28(fp)
    d2d4:	1005003a 	cmpeq	r2,r2,zero
    d2d8:	1000051e 	bne	r2,zero,d2f0 <altera_avalon_jtag_uart_irq+0x1c4>
    d2dc:	e0bffe17 	ldw	r2,-8(fp)
    d2e0:	10c00d17 	ldw	r3,52(r2)
    d2e4:	e0bffe17 	ldw	r2,-8(fp)
    d2e8:	10800c17 	ldw	r2,48(r2)
    d2ec:	18bfe31e 	bne	r3,r2,d27c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    d2f0:	e0bff917 	ldw	r2,-28(fp)
    d2f4:	1005003a 	cmpeq	r2,r2,zero
    d2f8:	103f961e 	bne	r2,zero,d154 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    d2fc:	e0bffe17 	ldw	r2,-8(fp)
    d300:	10c00817 	ldw	r3,32(r2)
    d304:	00bfff44 	movi	r2,-3
    d308:	1886703a 	and	r3,r3,r2
    d30c:	e0bffe17 	ldw	r2,-8(fp)
    d310:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d314:	e0bffe17 	ldw	r2,-8(fp)
    d318:	10800017 	ldw	r2,0(r2)
    d31c:	11000104 	addi	r4,r2,4
    d320:	e0bffe17 	ldw	r2,-8(fp)
    d324:	10800817 	ldw	r2,32(r2)
    d328:	1007883a 	mov	r3,r2
    d32c:	2005883a 	mov	r2,r4
    d330:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d334:	e0bffd17 	ldw	r2,-12(fp)
    d338:	10800104 	addi	r2,r2,4
    d33c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    d340:	003f8406 	br	d154 <altera_avalon_jtag_uart_irq+0x28>
}
    d344:	e037883a 	mov	sp,fp
    d348:	df000017 	ldw	fp,0(sp)
    d34c:	dec00104 	addi	sp,sp,4
    d350:	f800283a 	ret

0000d354 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    d354:	defffc04 	addi	sp,sp,-16
    d358:	df000315 	stw	fp,12(sp)
    d35c:	df000304 	addi	fp,sp,12
    d360:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    d364:	e0bfff17 	ldw	r2,-4(fp)
    d368:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    d36c:	e0bffe17 	ldw	r2,-8(fp)
    d370:	10800017 	ldw	r2,0(r2)
    d374:	10800104 	addi	r2,r2,4
    d378:	10800037 	ldwio	r2,0(r2)
    d37c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    d380:	e0bffd17 	ldw	r2,-12(fp)
    d384:	1081000c 	andi	r2,r2,1024
    d388:	1005003a 	cmpeq	r2,r2,zero
    d38c:	10000c1e 	bne	r2,zero,d3c0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    d390:	e0bffe17 	ldw	r2,-8(fp)
    d394:	10800017 	ldw	r2,0(r2)
    d398:	11000104 	addi	r4,r2,4
    d39c:	e0bffe17 	ldw	r2,-8(fp)
    d3a0:	10800817 	ldw	r2,32(r2)
    d3a4:	10810014 	ori	r2,r2,1024
    d3a8:	1007883a 	mov	r3,r2
    d3ac:	2005883a 	mov	r2,r4
    d3b0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    d3b4:	e0bffe17 	ldw	r2,-8(fp)
    d3b8:	10000915 	stw	zero,36(r2)
    d3bc:	00000a06 	br	d3e8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    d3c0:	e0bffe17 	ldw	r2,-8(fp)
    d3c4:	10c00917 	ldw	r3,36(r2)
    d3c8:	00a00034 	movhi	r2,32768
    d3cc:	10bfff04 	addi	r2,r2,-4
    d3d0:	10c00536 	bltu	r2,r3,d3e8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    d3d4:	e0bffe17 	ldw	r2,-8(fp)
    d3d8:	10800917 	ldw	r2,36(r2)
    d3dc:	10c00044 	addi	r3,r2,1
    d3e0:	e0bffe17 	ldw	r2,-8(fp)
    d3e4:	10c00915 	stw	r3,36(r2)
    d3e8:	00800074 	movhi	r2,1
    d3ec:	108a2a04 	addi	r2,r2,10408
    d3f0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    d3f4:	e037883a 	mov	sp,fp
    d3f8:	df000017 	ldw	fp,0(sp)
    d3fc:	dec00104 	addi	sp,sp,4
    d400:	f800283a 	ret

0000d404 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    d404:	defffc04 	addi	sp,sp,-16
    d408:	df000315 	stw	fp,12(sp)
    d40c:	df000304 	addi	fp,sp,12
    d410:	e13ffd15 	stw	r4,-12(fp)
    d414:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    d418:	00000706 	br	d438 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    d41c:	e0bffe17 	ldw	r2,-8(fp)
    d420:	1090000c 	andi	r2,r2,16384
    d424:	1005003a 	cmpeq	r2,r2,zero
    d428:	1000031e 	bne	r2,zero,d438 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    d42c:	00bffd44 	movi	r2,-11
    d430:	e0bfff15 	stw	r2,-4(fp)
    d434:	00000b06 	br	d464 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    d438:	e0bffd17 	ldw	r2,-12(fp)
    d43c:	10c00d17 	ldw	r3,52(r2)
    d440:	e0bffd17 	ldw	r2,-12(fp)
    d444:	10800c17 	ldw	r2,48(r2)
    d448:	18800526 	beq	r3,r2,d460 <altera_avalon_jtag_uart_close+0x5c>
    d44c:	e0bffd17 	ldw	r2,-12(fp)
    d450:	10c00917 	ldw	r3,36(r2)
    d454:	e0bffd17 	ldw	r2,-12(fp)
    d458:	10800117 	ldw	r2,4(r2)
    d45c:	18bfef36 	bltu	r3,r2,d41c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    d460:	e03fff15 	stw	zero,-4(fp)
    d464:	e0bfff17 	ldw	r2,-4(fp)
}
    d468:	e037883a 	mov	sp,fp
    d46c:	df000017 	ldw	fp,0(sp)
    d470:	dec00104 	addi	sp,sp,4
    d474:	f800283a 	ret

0000d478 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    d478:	defff804 	addi	sp,sp,-32
    d47c:	df000715 	stw	fp,28(sp)
    d480:	df000704 	addi	fp,sp,28
    d484:	e13ffb15 	stw	r4,-20(fp)
    d488:	e17ffc15 	stw	r5,-16(fp)
    d48c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    d490:	00bff9c4 	movi	r2,-25
    d494:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    d498:	e0bffc17 	ldw	r2,-16(fp)
    d49c:	e0bfff15 	stw	r2,-4(fp)
    d4a0:	e0ffff17 	ldw	r3,-4(fp)
    d4a4:	189a8060 	cmpeqi	r2,r3,27137
    d4a8:	1000041e 	bne	r2,zero,d4bc <altera_avalon_jtag_uart_ioctl+0x44>
    d4ac:	e0ffff17 	ldw	r3,-4(fp)
    d4b0:	189a80a0 	cmpeqi	r2,r3,27138
    d4b4:	10001b1e 	bne	r2,zero,d524 <altera_avalon_jtag_uart_ioctl+0xac>
    d4b8:	00002706 	br	d558 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    d4bc:	e0bffb17 	ldw	r2,-20(fp)
    d4c0:	10c00117 	ldw	r3,4(r2)
    d4c4:	00a00034 	movhi	r2,32768
    d4c8:	10bfffc4 	addi	r2,r2,-1
    d4cc:	18802226 	beq	r3,r2,d558 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    d4d0:	e0bffd17 	ldw	r2,-12(fp)
    d4d4:	10800017 	ldw	r2,0(r2)
    d4d8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    d4dc:	e0bff917 	ldw	r2,-28(fp)
    d4e0:	10800090 	cmplti	r2,r2,2
    d4e4:	1000071e 	bne	r2,zero,d504 <altera_avalon_jtag_uart_ioctl+0x8c>
    d4e8:	e0fff917 	ldw	r3,-28(fp)
    d4ec:	00a00034 	movhi	r2,32768
    d4f0:	10bfffc4 	addi	r2,r2,-1
    d4f4:	18800326 	beq	r3,r2,d504 <altera_avalon_jtag_uart_ioctl+0x8c>
    d4f8:	e0bff917 	ldw	r2,-28(fp)
    d4fc:	e0bffe15 	stw	r2,-8(fp)
    d500:	00000306 	br	d510 <altera_avalon_jtag_uart_ioctl+0x98>
    d504:	00e00034 	movhi	r3,32768
    d508:	18ffff84 	addi	r3,r3,-2
    d50c:	e0fffe15 	stw	r3,-8(fp)
    d510:	e0bffb17 	ldw	r2,-20(fp)
    d514:	e0fffe17 	ldw	r3,-8(fp)
    d518:	10c00115 	stw	r3,4(r2)
      rc = 0;
    d51c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    d520:	00000d06 	br	d558 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    d524:	e0bffb17 	ldw	r2,-20(fp)
    d528:	10c00117 	ldw	r3,4(r2)
    d52c:	00a00034 	movhi	r2,32768
    d530:	10bfffc4 	addi	r2,r2,-1
    d534:	18800826 	beq	r3,r2,d558 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    d538:	e13ffd17 	ldw	r4,-12(fp)
    d53c:	e0bffb17 	ldw	r2,-20(fp)
    d540:	10c00917 	ldw	r3,36(r2)
    d544:	e0bffb17 	ldw	r2,-20(fp)
    d548:	10800117 	ldw	r2,4(r2)
    d54c:	1885803a 	cmpltu	r2,r3,r2
    d550:	20800015 	stw	r2,0(r4)
      rc = 0;
    d554:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    d558:	e0bffa17 	ldw	r2,-24(fp)
}
    d55c:	e037883a 	mov	sp,fp
    d560:	df000017 	ldw	fp,0(sp)
    d564:	dec00104 	addi	sp,sp,4
    d568:	f800283a 	ret

0000d56c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    d56c:	defff204 	addi	sp,sp,-56
    d570:	dfc00d15 	stw	ra,52(sp)
    d574:	df000c15 	stw	fp,48(sp)
    d578:	df000c04 	addi	fp,sp,48
    d57c:	e13ffb15 	stw	r4,-20(fp)
    d580:	e17ffc15 	stw	r5,-16(fp)
    d584:	e1bffd15 	stw	r6,-12(fp)
    d588:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    d58c:	e0bffc17 	ldw	r2,-16(fp)
    d590:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    d594:	00004806 	br	d6b8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    d598:	e0bffb17 	ldw	r2,-20(fp)
    d59c:	10800a17 	ldw	r2,40(r2)
    d5a0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    d5a4:	e0bffb17 	ldw	r2,-20(fp)
    d5a8:	10800b17 	ldw	r2,44(r2)
    d5ac:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    d5b0:	e0fff717 	ldw	r3,-36(fp)
    d5b4:	e0bff617 	ldw	r2,-40(fp)
    d5b8:	18800536 	bltu	r3,r2,d5d0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    d5bc:	e0bff717 	ldw	r2,-36(fp)
    d5c0:	e0fff617 	ldw	r3,-40(fp)
    d5c4:	10c5c83a 	sub	r2,r2,r3
    d5c8:	e0bff815 	stw	r2,-32(fp)
    d5cc:	00000406 	br	d5e0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    d5d0:	00820004 	movi	r2,2048
    d5d4:	e0fff617 	ldw	r3,-40(fp)
    d5d8:	10c5c83a 	sub	r2,r2,r3
    d5dc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    d5e0:	e0bff817 	ldw	r2,-32(fp)
    d5e4:	1005003a 	cmpeq	r2,r2,zero
    d5e8:	10001f1e 	bne	r2,zero,d668 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    d5ec:	e0fffd17 	ldw	r3,-12(fp)
    d5f0:	e0bff817 	ldw	r2,-32(fp)
    d5f4:	1880022e 	bgeu	r3,r2,d600 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    d5f8:	e0bffd17 	ldw	r2,-12(fp)
    d5fc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    d600:	e0bffb17 	ldw	r2,-20(fp)
    d604:	10c00e04 	addi	r3,r2,56
    d608:	e0bff617 	ldw	r2,-40(fp)
    d60c:	1887883a 	add	r3,r3,r2
    d610:	e0bffa17 	ldw	r2,-24(fp)
    d614:	1009883a 	mov	r4,r2
    d618:	180b883a 	mov	r5,r3
    d61c:	e1bff817 	ldw	r6,-32(fp)
    d620:	0007f6c0 	call	7f6c <memcpy>
      ptr   += n;
    d624:	e0fff817 	ldw	r3,-32(fp)
    d628:	e0bffa17 	ldw	r2,-24(fp)
    d62c:	10c5883a 	add	r2,r2,r3
    d630:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    d634:	e0fffd17 	ldw	r3,-12(fp)
    d638:	e0bff817 	ldw	r2,-32(fp)
    d63c:	1885c83a 	sub	r2,r3,r2
    d640:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d644:	e0fff617 	ldw	r3,-40(fp)
    d648:	e0bff817 	ldw	r2,-32(fp)
    d64c:	1885883a 	add	r2,r3,r2
    d650:	10c1ffcc 	andi	r3,r2,2047
    d654:	e0bffb17 	ldw	r2,-20(fp)
    d658:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    d65c:	e0bffd17 	ldw	r2,-12(fp)
    d660:	10800048 	cmpgei	r2,r2,1
    d664:	103fcc1e 	bne	r2,zero,d598 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    d668:	e0fffa17 	ldw	r3,-24(fp)
    d66c:	e0bffc17 	ldw	r2,-16(fp)
    d670:	1880141e 	bne	r3,r2,d6c4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    d674:	e0bffe17 	ldw	r2,-8(fp)
    d678:	1090000c 	andi	r2,r2,16384
    d67c:	1004c03a 	cmpne	r2,r2,zero
    d680:	1000101e 	bne	r2,zero,d6c4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    d684:	e0bffb17 	ldw	r2,-20(fp)
    d688:	10c00a17 	ldw	r3,40(r2)
    d68c:	e0bff717 	ldw	r2,-36(fp)
    d690:	1880051e 	bne	r3,r2,d6a8 <altera_avalon_jtag_uart_read+0x13c>
    d694:	e0bffb17 	ldw	r2,-20(fp)
    d698:	10c00917 	ldw	r3,36(r2)
    d69c:	e0bffb17 	ldw	r2,-20(fp)
    d6a0:	10800117 	ldw	r2,4(r2)
    d6a4:	18bff736 	bltu	r3,r2,d684 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    d6a8:	e0bffb17 	ldw	r2,-20(fp)
    d6ac:	10c00a17 	ldw	r3,40(r2)
    d6b0:	e0bff717 	ldw	r2,-36(fp)
    d6b4:	18800326 	beq	r3,r2,d6c4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    d6b8:	e0bffd17 	ldw	r2,-12(fp)
    d6bc:	10800048 	cmpgei	r2,r2,1
    d6c0:	103fb51e 	bne	r2,zero,d598 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    d6c4:	e0fffa17 	ldw	r3,-24(fp)
    d6c8:	e0bffc17 	ldw	r2,-16(fp)
    d6cc:	18801926 	beq	r3,r2,d734 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d6d0:	0005303a 	rdctl	r2,status
    d6d4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d6d8:	e0fff517 	ldw	r3,-44(fp)
    d6dc:	00bfff84 	movi	r2,-2
    d6e0:	1884703a 	and	r2,r3,r2
    d6e4:	1001703a 	wrctl	status,r2
  
  return context;
    d6e8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    d6ec:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d6f0:	e0bffb17 	ldw	r2,-20(fp)
    d6f4:	10800817 	ldw	r2,32(r2)
    d6f8:	10c00054 	ori	r3,r2,1
    d6fc:	e0bffb17 	ldw	r2,-20(fp)
    d700:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d704:	e0bffb17 	ldw	r2,-20(fp)
    d708:	10800017 	ldw	r2,0(r2)
    d70c:	11000104 	addi	r4,r2,4
    d710:	e0bffb17 	ldw	r2,-20(fp)
    d714:	10800817 	ldw	r2,32(r2)
    d718:	1007883a 	mov	r3,r2
    d71c:	2005883a 	mov	r2,r4
    d720:	10c00035 	stwio	r3,0(r2)
    d724:	e0bff917 	ldw	r2,-28(fp)
    d728:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d72c:	e0bff417 	ldw	r2,-48(fp)
    d730:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    d734:	e0fffa17 	ldw	r3,-24(fp)
    d738:	e0bffc17 	ldw	r2,-16(fp)
    d73c:	18800526 	beq	r3,r2,d754 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    d740:	e0fffa17 	ldw	r3,-24(fp)
    d744:	e0bffc17 	ldw	r2,-16(fp)
    d748:	1887c83a 	sub	r3,r3,r2
    d74c:	e0ffff15 	stw	r3,-4(fp)
    d750:	00000906 	br	d778 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    d754:	e0bffe17 	ldw	r2,-8(fp)
    d758:	1090000c 	andi	r2,r2,16384
    d75c:	1005003a 	cmpeq	r2,r2,zero
    d760:	1000031e 	bne	r2,zero,d770 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    d764:	00bffd44 	movi	r2,-11
    d768:	e0bfff15 	stw	r2,-4(fp)
    d76c:	00000206 	br	d778 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    d770:	00bffec4 	movi	r2,-5
    d774:	e0bfff15 	stw	r2,-4(fp)
    d778:	e0bfff17 	ldw	r2,-4(fp)
}
    d77c:	e037883a 	mov	sp,fp
    d780:	dfc00117 	ldw	ra,4(sp)
    d784:	df000017 	ldw	fp,0(sp)
    d788:	dec00204 	addi	sp,sp,8
    d78c:	f800283a 	ret

0000d790 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    d790:	defff204 	addi	sp,sp,-56
    d794:	dfc00d15 	stw	ra,52(sp)
    d798:	df000c15 	stw	fp,48(sp)
    d79c:	df000c04 	addi	fp,sp,48
    d7a0:	e13ffb15 	stw	r4,-20(fp)
    d7a4:	e17ffc15 	stw	r5,-16(fp)
    d7a8:	e1bffd15 	stw	r6,-12(fp)
    d7ac:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    d7b0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    d7b4:	e0bffc17 	ldw	r2,-16(fp)
    d7b8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    d7bc:	00003a06 	br	d8a8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    d7c0:	e0bffb17 	ldw	r2,-20(fp)
    d7c4:	10800c17 	ldw	r2,48(r2)
    d7c8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    d7cc:	e0bffb17 	ldw	r2,-20(fp)
    d7d0:	10800d17 	ldw	r2,52(r2)
    d7d4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    d7d8:	e0fffa17 	ldw	r3,-24(fp)
    d7dc:	e0bff917 	ldw	r2,-28(fp)
    d7e0:	1880062e 	bgeu	r3,r2,d7fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    d7e4:	e0fff917 	ldw	r3,-28(fp)
    d7e8:	e0bffa17 	ldw	r2,-24(fp)
    d7ec:	1885c83a 	sub	r2,r3,r2
    d7f0:	10bfffc4 	addi	r2,r2,-1
    d7f4:	e0bff815 	stw	r2,-32(fp)
    d7f8:	00000c06 	br	d82c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    d7fc:	e0bff917 	ldw	r2,-28(fp)
    d800:	1005003a 	cmpeq	r2,r2,zero
    d804:	1000051e 	bne	r2,zero,d81c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    d808:	00820004 	movi	r2,2048
    d80c:	e0fffa17 	ldw	r3,-24(fp)
    d810:	10c5c83a 	sub	r2,r2,r3
    d814:	e0bff815 	stw	r2,-32(fp)
    d818:	00000406 	br	d82c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    d81c:	0081ffc4 	movi	r2,2047
    d820:	e0fffa17 	ldw	r3,-24(fp)
    d824:	10c5c83a 	sub	r2,r2,r3
    d828:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    d82c:	e0bff817 	ldw	r2,-32(fp)
    d830:	1005003a 	cmpeq	r2,r2,zero
    d834:	10001f1e 	bne	r2,zero,d8b4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    d838:	e0fffd17 	ldw	r3,-12(fp)
    d83c:	e0bff817 	ldw	r2,-32(fp)
    d840:	1880022e 	bgeu	r3,r2,d84c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    d844:	e0bffd17 	ldw	r2,-12(fp)
    d848:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    d84c:	e0bffb17 	ldw	r2,-20(fp)
    d850:	10c20e04 	addi	r3,r2,2104
    d854:	e0bffa17 	ldw	r2,-24(fp)
    d858:	1885883a 	add	r2,r3,r2
    d85c:	e0fffc17 	ldw	r3,-16(fp)
    d860:	1009883a 	mov	r4,r2
    d864:	180b883a 	mov	r5,r3
    d868:	e1bff817 	ldw	r6,-32(fp)
    d86c:	0007f6c0 	call	7f6c <memcpy>
      ptr   += n;
    d870:	e0fff817 	ldw	r3,-32(fp)
    d874:	e0bffc17 	ldw	r2,-16(fp)
    d878:	10c5883a 	add	r2,r2,r3
    d87c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    d880:	e0fffd17 	ldw	r3,-12(fp)
    d884:	e0bff817 	ldw	r2,-32(fp)
    d888:	1885c83a 	sub	r2,r3,r2
    d88c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d890:	e0fffa17 	ldw	r3,-24(fp)
    d894:	e0bff817 	ldw	r2,-32(fp)
    d898:	1885883a 	add	r2,r3,r2
    d89c:	10c1ffcc 	andi	r3,r2,2047
    d8a0:	e0bffb17 	ldw	r2,-20(fp)
    d8a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    d8a8:	e0bffd17 	ldw	r2,-12(fp)
    d8ac:	10800048 	cmpgei	r2,r2,1
    d8b0:	103fc31e 	bne	r2,zero,d7c0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d8b4:	0005303a 	rdctl	r2,status
    d8b8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d8bc:	e0fff517 	ldw	r3,-44(fp)
    d8c0:	00bfff84 	movi	r2,-2
    d8c4:	1884703a 	and	r2,r3,r2
    d8c8:	1001703a 	wrctl	status,r2
  
  return context;
    d8cc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    d8d0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    d8d4:	e0bffb17 	ldw	r2,-20(fp)
    d8d8:	10800817 	ldw	r2,32(r2)
    d8dc:	10c00094 	ori	r3,r2,2
    d8e0:	e0bffb17 	ldw	r2,-20(fp)
    d8e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d8e8:	e0bffb17 	ldw	r2,-20(fp)
    d8ec:	10800017 	ldw	r2,0(r2)
    d8f0:	11000104 	addi	r4,r2,4
    d8f4:	e0bffb17 	ldw	r2,-20(fp)
    d8f8:	10800817 	ldw	r2,32(r2)
    d8fc:	1007883a 	mov	r3,r2
    d900:	2005883a 	mov	r2,r4
    d904:	10c00035 	stwio	r3,0(r2)
    d908:	e0bff717 	ldw	r2,-36(fp)
    d90c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d910:	e0bff417 	ldw	r2,-48(fp)
    d914:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    d918:	e0bffd17 	ldw	r2,-12(fp)
    d91c:	10800050 	cmplti	r2,r2,1
    d920:	1000111e 	bne	r2,zero,d968 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    d924:	e0bffe17 	ldw	r2,-8(fp)
    d928:	1090000c 	andi	r2,r2,16384
    d92c:	1004c03a 	cmpne	r2,r2,zero
    d930:	1000101e 	bne	r2,zero,d974 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    d934:	e0bffb17 	ldw	r2,-20(fp)
    d938:	10c00d17 	ldw	r3,52(r2)
    d93c:	e0bff917 	ldw	r2,-28(fp)
    d940:	1880051e 	bne	r3,r2,d958 <altera_avalon_jtag_uart_write+0x1c8>
    d944:	e0bffb17 	ldw	r2,-20(fp)
    d948:	10c00917 	ldw	r3,36(r2)
    d94c:	e0bffb17 	ldw	r2,-20(fp)
    d950:	10800117 	ldw	r2,4(r2)
    d954:	18bff736 	bltu	r3,r2,d934 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    d958:	e0bffb17 	ldw	r2,-20(fp)
    d95c:	10c00d17 	ldw	r3,52(r2)
    d960:	e0bff917 	ldw	r2,-28(fp)
    d964:	18800326 	beq	r3,r2,d974 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    d968:	e0bffd17 	ldw	r2,-12(fp)
    d96c:	10800048 	cmpgei	r2,r2,1
    d970:	103fcd1e 	bne	r2,zero,d8a8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    d974:	e0fffc17 	ldw	r3,-16(fp)
    d978:	e0bff617 	ldw	r2,-40(fp)
    d97c:	18800526 	beq	r3,r2,d994 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    d980:	e0fffc17 	ldw	r3,-16(fp)
    d984:	e0bff617 	ldw	r2,-40(fp)
    d988:	1887c83a 	sub	r3,r3,r2
    d98c:	e0ffff15 	stw	r3,-4(fp)
    d990:	00000906 	br	d9b8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    d994:	e0bffe17 	ldw	r2,-8(fp)
    d998:	1090000c 	andi	r2,r2,16384
    d99c:	1005003a 	cmpeq	r2,r2,zero
    d9a0:	1000031e 	bne	r2,zero,d9b0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    d9a4:	00bffd44 	movi	r2,-11
    d9a8:	e0bfff15 	stw	r2,-4(fp)
    d9ac:	00000206 	br	d9b8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    d9b0:	00bffec4 	movi	r2,-5
    d9b4:	e0bfff15 	stw	r2,-4(fp)
    d9b8:	e0bfff17 	ldw	r2,-4(fp)
}
    d9bc:	e037883a 	mov	sp,fp
    d9c0:	dfc00117 	ldw	ra,4(sp)
    d9c4:	df000017 	ldw	fp,0(sp)
    d9c8:	dec00204 	addi	sp,sp,8
    d9cc:	f800283a 	ret

0000d9d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    d9d0:	defffa04 	addi	sp,sp,-24
    d9d4:	dfc00515 	stw	ra,20(sp)
    d9d8:	df000415 	stw	fp,16(sp)
    d9dc:	df000404 	addi	fp,sp,16
    d9e0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    d9e4:	e0bfff17 	ldw	r2,-4(fp)
    d9e8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    d9ec:	e0bfff17 	ldw	r2,-4(fp)
    d9f0:	10800104 	addi	r2,r2,4
    d9f4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d9f8:	0005303a 	rdctl	r2,status
    d9fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    da00:	e0fffd17 	ldw	r3,-12(fp)
    da04:	00bfff84 	movi	r2,-2
    da08:	1884703a 	and	r2,r3,r2
    da0c:	1001703a 	wrctl	status,r2
  
  return context;
    da10:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    da14:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    da18:	000e5b00 	call	e5b0 <alt_tick>
    da1c:	e0bffe17 	ldw	r2,-8(fp)
    da20:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    da24:	e0bffc17 	ldw	r2,-16(fp)
    da28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    da2c:	e037883a 	mov	sp,fp
    da30:	dfc00117 	ldw	ra,4(sp)
    da34:	df000017 	ldw	fp,0(sp)
    da38:	dec00204 	addi	sp,sp,8
    da3c:	f800283a 	ret

0000da40 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    da40:	defff804 	addi	sp,sp,-32
    da44:	dfc00715 	stw	ra,28(sp)
    da48:	df000615 	stw	fp,24(sp)
    da4c:	df000604 	addi	fp,sp,24
    da50:	e13ffc15 	stw	r4,-16(fp)
    da54:	e17ffd15 	stw	r5,-12(fp)
    da58:	e1bffe15 	stw	r6,-8(fp)
    da5c:	e1ffff15 	stw	r7,-4(fp)
    da60:	e0bfff17 	ldw	r2,-4(fp)
    da64:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    da68:	00800074 	movhi	r2,1
    da6c:	108a2a04 	addi	r2,r2,10408
    da70:	10800017 	ldw	r2,0(r2)
    da74:	1004c03a 	cmpne	r2,r2,zero
    da78:	1000041e 	bne	r2,zero,da8c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    da7c:	00c00074 	movhi	r3,1
    da80:	18ca2a04 	addi	r3,r3,10408
    da84:	e0bffb17 	ldw	r2,-20(fp)
    da88:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    da8c:	e0bffc17 	ldw	r2,-16(fp)
    da90:	10800104 	addi	r2,r2,4
    da94:	1007883a 	mov	r3,r2
    da98:	008001c4 	movi	r2,7
    da9c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    daa0:	d8000015 	stw	zero,0(sp)
    daa4:	e13ffd17 	ldw	r4,-12(fp)
    daa8:	e17ffe17 	ldw	r5,-8(fp)
    daac:	01800074 	movhi	r6,1
    dab0:	31b67404 	addi	r6,r6,-9776
    dab4:	e1fffc17 	ldw	r7,-16(fp)
    dab8:	000de4c0 	call	de4c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    dabc:	e037883a 	mov	sp,fp
    dac0:	dfc00117 	ldw	ra,4(sp)
    dac4:	df000017 	ldw	fp,0(sp)
    dac8:	dec00204 	addi	sp,sp,8
    dacc:	f800283a 	ret

0000dad0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    dad0:	defff404 	addi	sp,sp,-48
    dad4:	df000b15 	stw	fp,44(sp)
    dad8:	df000b04 	addi	fp,sp,44
    dadc:	e13ffb15 	stw	r4,-20(fp)
    dae0:	e17ffc15 	stw	r5,-16(fp)
    dae4:	e1bffd15 	stw	r6,-12(fp)
    dae8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    daec:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    daf0:	00800074 	movhi	r2,1
    daf4:	108a2a04 	addi	r2,r2,10408
    daf8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    dafc:	1005003a 	cmpeq	r2,r2,zero
    db00:	1000411e 	bne	r2,zero,dc08 <alt_alarm_start+0x138>
  {
    if (alarm)
    db04:	e0bffb17 	ldw	r2,-20(fp)
    db08:	1005003a 	cmpeq	r2,r2,zero
    db0c:	10003b1e 	bne	r2,zero,dbfc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    db10:	e0fffb17 	ldw	r3,-20(fp)
    db14:	e0bffd17 	ldw	r2,-12(fp)
    db18:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    db1c:	e0fffb17 	ldw	r3,-20(fp)
    db20:	e0bffe17 	ldw	r2,-8(fp)
    db24:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    db28:	0005303a 	rdctl	r2,status
    db2c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    db30:	e0fff817 	ldw	r3,-32(fp)
    db34:	00bfff84 	movi	r2,-2
    db38:	1884703a 	and	r2,r3,r2
    db3c:	1001703a 	wrctl	status,r2
  
  return context;
    db40:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    db44:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    db48:	00800074 	movhi	r2,1
    db4c:	108a2b04 	addi	r2,r2,10412
    db50:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    db54:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    db58:	e0fffc17 	ldw	r3,-16(fp)
    db5c:	e0bff917 	ldw	r2,-28(fp)
    db60:	1885883a 	add	r2,r3,r2
    db64:	10c00044 	addi	r3,r2,1
    db68:	e0bffb17 	ldw	r2,-20(fp)
    db6c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    db70:	e0bffb17 	ldw	r2,-20(fp)
    db74:	10c00217 	ldw	r3,8(r2)
    db78:	e0bff917 	ldw	r2,-28(fp)
    db7c:	1880042e 	bgeu	r3,r2,db90 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    db80:	e0fffb17 	ldw	r3,-20(fp)
    db84:	00800044 	movi	r2,1
    db88:	18800405 	stb	r2,16(r3)
    db8c:	00000206 	br	db98 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    db90:	e0bffb17 	ldw	r2,-20(fp)
    db94:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    db98:	e0fffb17 	ldw	r3,-20(fp)
    db9c:	00800074 	movhi	r2,1
    dba0:	10836a04 	addi	r2,r2,3496
    dba4:	e0bff615 	stw	r2,-40(fp)
    dba8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    dbac:	e0fff717 	ldw	r3,-36(fp)
    dbb0:	e0bff617 	ldw	r2,-40(fp)
    dbb4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    dbb8:	e0bff617 	ldw	r2,-40(fp)
    dbbc:	10c00017 	ldw	r3,0(r2)
    dbc0:	e0bff717 	ldw	r2,-36(fp)
    dbc4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    dbc8:	e0bff617 	ldw	r2,-40(fp)
    dbcc:	10c00017 	ldw	r3,0(r2)
    dbd0:	e0bff717 	ldw	r2,-36(fp)
    dbd4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    dbd8:	e0fff617 	ldw	r3,-40(fp)
    dbdc:	e0bff717 	ldw	r2,-36(fp)
    dbe0:	18800015 	stw	r2,0(r3)
    dbe4:	e0bffa17 	ldw	r2,-24(fp)
    dbe8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dbec:	e0bff517 	ldw	r2,-44(fp)
    dbf0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    dbf4:	e03fff15 	stw	zero,-4(fp)
    dbf8:	00000506 	br	dc10 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    dbfc:	00bffa84 	movi	r2,-22
    dc00:	e0bfff15 	stw	r2,-4(fp)
    dc04:	00000206 	br	dc10 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    dc08:	00bfde84 	movi	r2,-134
    dc0c:	e0bfff15 	stw	r2,-4(fp)
    dc10:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    dc14:	e037883a 	mov	sp,fp
    dc18:	df000017 	ldw	fp,0(sp)
    dc1c:	dec00104 	addi	sp,sp,4
    dc20:	f800283a 	ret

0000dc24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    dc24:	deffff04 	addi	sp,sp,-4
    dc28:	df000015 	stw	fp,0(sp)
    dc2c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    dc30:	e037883a 	mov	sp,fp
    dc34:	df000017 	ldw	fp,0(sp)
    dc38:	dec00104 	addi	sp,sp,4
    dc3c:	f800283a 	ret

0000dc40 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    dc40:	defff904 	addi	sp,sp,-28
    dc44:	dfc00615 	stw	ra,24(sp)
    dc48:	df000515 	stw	fp,20(sp)
    dc4c:	df000504 	addi	fp,sp,20
    dc50:	e13ffd15 	stw	r4,-12(fp)
    dc54:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    dc58:	e0bffd17 	ldw	r2,-12(fp)
    dc5c:	1005003a 	cmpeq	r2,r2,zero
    dc60:	1000041e 	bne	r2,zero,dc74 <alt_dev_llist_insert+0x34>
    dc64:	e0bffd17 	ldw	r2,-12(fp)
    dc68:	10800217 	ldw	r2,8(r2)
    dc6c:	1004c03a 	cmpne	r2,r2,zero
    dc70:	1000071e 	bne	r2,zero,dc90 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    dc74:	000dcf40 	call	dcf4 <alt_get_errno>
    dc78:	1007883a 	mov	r3,r2
    dc7c:	00800584 	movi	r2,22
    dc80:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    dc84:	00bffa84 	movi	r2,-22
    dc88:	e0bfff15 	stw	r2,-4(fp)
    dc8c:	00001306 	br	dcdc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    dc90:	e0fffd17 	ldw	r3,-12(fp)
    dc94:	e0bffe17 	ldw	r2,-8(fp)
    dc98:	e0bffb15 	stw	r2,-20(fp)
    dc9c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    dca0:	e0fffc17 	ldw	r3,-16(fp)
    dca4:	e0bffb17 	ldw	r2,-20(fp)
    dca8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    dcac:	e0bffb17 	ldw	r2,-20(fp)
    dcb0:	10c00017 	ldw	r3,0(r2)
    dcb4:	e0bffc17 	ldw	r2,-16(fp)
    dcb8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    dcbc:	e0bffb17 	ldw	r2,-20(fp)
    dcc0:	10c00017 	ldw	r3,0(r2)
    dcc4:	e0bffc17 	ldw	r2,-16(fp)
    dcc8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    dccc:	e0fffb17 	ldw	r3,-20(fp)
    dcd0:	e0bffc17 	ldw	r2,-16(fp)
    dcd4:	18800015 	stw	r2,0(r3)

  return 0;  
    dcd8:	e03fff15 	stw	zero,-4(fp)
    dcdc:	e0bfff17 	ldw	r2,-4(fp)
}
    dce0:	e037883a 	mov	sp,fp
    dce4:	dfc00117 	ldw	ra,4(sp)
    dce8:	df000017 	ldw	fp,0(sp)
    dcec:	dec00204 	addi	sp,sp,8
    dcf0:	f800283a 	ret

0000dcf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dcf4:	defffd04 	addi	sp,sp,-12
    dcf8:	dfc00215 	stw	ra,8(sp)
    dcfc:	df000115 	stw	fp,4(sp)
    dd00:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    dd04:	00800074 	movhi	r2,1
    dd08:	10836704 	addi	r2,r2,3484
    dd0c:	10800017 	ldw	r2,0(r2)
    dd10:	1005003a 	cmpeq	r2,r2,zero
    dd14:	1000061e 	bne	r2,zero,dd30 <alt_get_errno+0x3c>
    dd18:	00800074 	movhi	r2,1
    dd1c:	10836704 	addi	r2,r2,3484
    dd20:	10800017 	ldw	r2,0(r2)
    dd24:	103ee83a 	callr	r2
    dd28:	e0bfff15 	stw	r2,-4(fp)
    dd2c:	00000306 	br	dd3c <alt_get_errno+0x48>
    dd30:	00800074 	movhi	r2,1
    dd34:	108a2204 	addi	r2,r2,10376
    dd38:	e0bfff15 	stw	r2,-4(fp)
    dd3c:	e0bfff17 	ldw	r2,-4(fp)
}
    dd40:	e037883a 	mov	sp,fp
    dd44:	dfc00117 	ldw	ra,4(sp)
    dd48:	df000017 	ldw	fp,0(sp)
    dd4c:	dec00204 	addi	sp,sp,8
    dd50:	f800283a 	ret

0000dd54 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    dd54:	defffd04 	addi	sp,sp,-12
    dd58:	dfc00215 	stw	ra,8(sp)
    dd5c:	df000115 	stw	fp,4(sp)
    dd60:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    dd64:	00bfff04 	movi	r2,-4
    dd68:	00c00074 	movhi	r3,1
    dd6c:	18fb0104 	addi	r3,r3,-5116
    dd70:	1885883a 	add	r2,r3,r2
    dd74:	e0bfff15 	stw	r2,-4(fp)
    dd78:	00000606 	br	dd94 <_do_ctors+0x40>
        (*ctor) (); 
    dd7c:	e0bfff17 	ldw	r2,-4(fp)
    dd80:	10800017 	ldw	r2,0(r2)
    dd84:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    dd88:	e0bfff17 	ldw	r2,-4(fp)
    dd8c:	10bfff04 	addi	r2,r2,-4
    dd90:	e0bfff15 	stw	r2,-4(fp)
    dd94:	e0ffff17 	ldw	r3,-4(fp)
    dd98:	00800074 	movhi	r2,1
    dd9c:	10bb0004 	addi	r2,r2,-5120
    dda0:	18bff62e 	bgeu	r3,r2,dd7c <_do_ctors+0x28>
        (*ctor) (); 
}
    dda4:	e037883a 	mov	sp,fp
    dda8:	dfc00117 	ldw	ra,4(sp)
    ddac:	df000017 	ldw	fp,0(sp)
    ddb0:	dec00204 	addi	sp,sp,8
    ddb4:	f800283a 	ret

0000ddb8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    ddb8:	defffd04 	addi	sp,sp,-12
    ddbc:	dfc00215 	stw	ra,8(sp)
    ddc0:	df000115 	stw	fp,4(sp)
    ddc4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ddc8:	00bfff04 	movi	r2,-4
    ddcc:	00c00074 	movhi	r3,1
    ddd0:	18fb0104 	addi	r3,r3,-5116
    ddd4:	1885883a 	add	r2,r3,r2
    ddd8:	e0bfff15 	stw	r2,-4(fp)
    dddc:	00000606 	br	ddf8 <_do_dtors+0x40>
        (*dtor) (); 
    dde0:	e0bfff17 	ldw	r2,-4(fp)
    dde4:	10800017 	ldw	r2,0(r2)
    dde8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ddec:	e0bfff17 	ldw	r2,-4(fp)
    ddf0:	10bfff04 	addi	r2,r2,-4
    ddf4:	e0bfff15 	stw	r2,-4(fp)
    ddf8:	e0ffff17 	ldw	r3,-4(fp)
    ddfc:	00800074 	movhi	r2,1
    de00:	10bb0104 	addi	r2,r2,-5116
    de04:	18bff62e 	bgeu	r3,r2,dde0 <_do_dtors+0x28>
        (*dtor) (); 
}
    de08:	e037883a 	mov	sp,fp
    de0c:	dfc00117 	ldw	ra,4(sp)
    de10:	df000017 	ldw	fp,0(sp)
    de14:	dec00204 	addi	sp,sp,8
    de18:	f800283a 	ret

0000de1c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    de1c:	defffe04 	addi	sp,sp,-8
    de20:	dfc00115 	stw	ra,4(sp)
    de24:	df000015 	stw	fp,0(sp)
    de28:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    de2c:	0009883a 	mov	r4,zero
    de30:	01440004 	movi	r5,4096
    de34:	000e9480 	call	e948 <alt_icache_flush>
#endif
}
    de38:	e037883a 	mov	sp,fp
    de3c:	dfc00117 	ldw	ra,4(sp)
    de40:	df000017 	ldw	fp,0(sp)
    de44:	dec00204 	addi	sp,sp,8
    de48:	f800283a 	ret

0000de4c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    de4c:	defff904 	addi	sp,sp,-28
    de50:	dfc00615 	stw	ra,24(sp)
    de54:	df000515 	stw	fp,20(sp)
    de58:	df000504 	addi	fp,sp,20
    de5c:	e13ffc15 	stw	r4,-16(fp)
    de60:	e17ffd15 	stw	r5,-12(fp)
    de64:	e1bffe15 	stw	r6,-8(fp)
    de68:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    de6c:	e0800217 	ldw	r2,8(fp)
    de70:	d8800015 	stw	r2,0(sp)
    de74:	e13ffc17 	ldw	r4,-16(fp)
    de78:	e17ffd17 	ldw	r5,-12(fp)
    de7c:	e1bffe17 	ldw	r6,-8(fp)
    de80:	e1ffff17 	ldw	r7,-4(fp)
    de84:	000e0200 	call	e020 <alt_iic_isr_register>
}  
    de88:	e037883a 	mov	sp,fp
    de8c:	dfc00117 	ldw	ra,4(sp)
    de90:	df000017 	ldw	fp,0(sp)
    de94:	dec00204 	addi	sp,sp,8
    de98:	f800283a 	ret

0000de9c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    de9c:	defff904 	addi	sp,sp,-28
    dea0:	df000615 	stw	fp,24(sp)
    dea4:	df000604 	addi	fp,sp,24
    dea8:	e13ffe15 	stw	r4,-8(fp)
    deac:	e17fff15 	stw	r5,-4(fp)
    deb0:	e0bfff17 	ldw	r2,-4(fp)
    deb4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    deb8:	0005303a 	rdctl	r2,status
    debc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dec0:	e0fffb17 	ldw	r3,-20(fp)
    dec4:	00bfff84 	movi	r2,-2
    dec8:	1884703a 	and	r2,r3,r2
    decc:	1001703a 	wrctl	status,r2
  
  return context;
    ded0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ded4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    ded8:	e0fffc17 	ldw	r3,-16(fp)
    dedc:	00800044 	movi	r2,1
    dee0:	10c4983a 	sll	r2,r2,r3
    dee4:	1007883a 	mov	r3,r2
    dee8:	00800074 	movhi	r2,1
    deec:	108a2604 	addi	r2,r2,10392
    def0:	10800017 	ldw	r2,0(r2)
    def4:	1886b03a 	or	r3,r3,r2
    def8:	00800074 	movhi	r2,1
    defc:	108a2604 	addi	r2,r2,10392
    df00:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    df04:	00800074 	movhi	r2,1
    df08:	108a2604 	addi	r2,r2,10392
    df0c:	10800017 	ldw	r2,0(r2)
    df10:	100170fa 	wrctl	ienable,r2
    df14:	e0bffd17 	ldw	r2,-12(fp)
    df18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df1c:	e0bffa17 	ldw	r2,-24(fp)
    df20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    df24:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    df28:	e037883a 	mov	sp,fp
    df2c:	df000017 	ldw	fp,0(sp)
    df30:	dec00104 	addi	sp,sp,4
    df34:	f800283a 	ret

0000df38 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    df38:	defff904 	addi	sp,sp,-28
    df3c:	df000615 	stw	fp,24(sp)
    df40:	df000604 	addi	fp,sp,24
    df44:	e13ffe15 	stw	r4,-8(fp)
    df48:	e17fff15 	stw	r5,-4(fp)
    df4c:	e0bfff17 	ldw	r2,-4(fp)
    df50:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df54:	0005303a 	rdctl	r2,status
    df58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df5c:	e0fffb17 	ldw	r3,-20(fp)
    df60:	00bfff84 	movi	r2,-2
    df64:	1884703a 	and	r2,r3,r2
    df68:	1001703a 	wrctl	status,r2
  
  return context;
    df6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    df70:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    df74:	e0fffc17 	ldw	r3,-16(fp)
    df78:	00800044 	movi	r2,1
    df7c:	10c4983a 	sll	r2,r2,r3
    df80:	0084303a 	nor	r2,zero,r2
    df84:	1007883a 	mov	r3,r2
    df88:	00800074 	movhi	r2,1
    df8c:	108a2604 	addi	r2,r2,10392
    df90:	10800017 	ldw	r2,0(r2)
    df94:	1886703a 	and	r3,r3,r2
    df98:	00800074 	movhi	r2,1
    df9c:	108a2604 	addi	r2,r2,10392
    dfa0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    dfa4:	00800074 	movhi	r2,1
    dfa8:	108a2604 	addi	r2,r2,10392
    dfac:	10800017 	ldw	r2,0(r2)
    dfb0:	100170fa 	wrctl	ienable,r2
    dfb4:	e0bffd17 	ldw	r2,-12(fp)
    dfb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dfbc:	e0bffa17 	ldw	r2,-24(fp)
    dfc0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    dfc4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    dfc8:	e037883a 	mov	sp,fp
    dfcc:	df000017 	ldw	fp,0(sp)
    dfd0:	dec00104 	addi	sp,sp,4
    dfd4:	f800283a 	ret

0000dfd8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    dfd8:	defffc04 	addi	sp,sp,-16
    dfdc:	df000315 	stw	fp,12(sp)
    dfe0:	df000304 	addi	fp,sp,12
    dfe4:	e13ffe15 	stw	r4,-8(fp)
    dfe8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    dfec:	000530fa 	rdctl	r2,ienable
    dff0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    dff4:	e0ffff17 	ldw	r3,-4(fp)
    dff8:	00800044 	movi	r2,1
    dffc:	10c4983a 	sll	r2,r2,r3
    e000:	1007883a 	mov	r3,r2
    e004:	e0bffd17 	ldw	r2,-12(fp)
    e008:	1884703a 	and	r2,r3,r2
    e00c:	1004c03a 	cmpne	r2,r2,zero
}
    e010:	e037883a 	mov	sp,fp
    e014:	df000017 	ldw	fp,0(sp)
    e018:	dec00104 	addi	sp,sp,4
    e01c:	f800283a 	ret

0000e020 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e020:	defff404 	addi	sp,sp,-48
    e024:	dfc00b15 	stw	ra,44(sp)
    e028:	df000a15 	stw	fp,40(sp)
    e02c:	df000a04 	addi	fp,sp,40
    e030:	e13ffb15 	stw	r4,-20(fp)
    e034:	e17ffc15 	stw	r5,-16(fp)
    e038:	e1bffd15 	stw	r6,-12(fp)
    e03c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    e040:	00bffa84 	movi	r2,-22
    e044:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    e048:	e0bffc17 	ldw	r2,-16(fp)
    e04c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    e050:	e0bff917 	ldw	r2,-28(fp)
    e054:	10800808 	cmpgei	r2,r2,32
    e058:	1000291e 	bne	r2,zero,e100 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e05c:	0005303a 	rdctl	r2,status
    e060:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e064:	e0fff717 	ldw	r3,-36(fp)
    e068:	00bfff84 	movi	r2,-2
    e06c:	1884703a 	and	r2,r3,r2
    e070:	1001703a 	wrctl	status,r2
  
  return context;
    e074:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    e078:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    e07c:	e0bff917 	ldw	r2,-28(fp)
    e080:	00c00074 	movhi	r3,1
    e084:	18cb0104 	addi	r3,r3,11268
    e088:	100490fa 	slli	r2,r2,3
    e08c:	10c7883a 	add	r3,r2,r3
    e090:	e0bffd17 	ldw	r2,-12(fp)
    e094:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    e098:	e0bff917 	ldw	r2,-28(fp)
    e09c:	00c00074 	movhi	r3,1
    e0a0:	18cb0104 	addi	r3,r3,11268
    e0a4:	100490fa 	slli	r2,r2,3
    e0a8:	10c5883a 	add	r2,r2,r3
    e0ac:	10c00104 	addi	r3,r2,4
    e0b0:	e0bffe17 	ldw	r2,-8(fp)
    e0b4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    e0b8:	e0bffd17 	ldw	r2,-12(fp)
    e0bc:	1005003a 	cmpeq	r2,r2,zero
    e0c0:	1000051e 	bne	r2,zero,e0d8 <alt_iic_isr_register+0xb8>
    e0c4:	e17ff917 	ldw	r5,-28(fp)
    e0c8:	e13ffb17 	ldw	r4,-20(fp)
    e0cc:	000de9c0 	call	de9c <alt_ic_irq_enable>
    e0d0:	e0bfff15 	stw	r2,-4(fp)
    e0d4:	00000406 	br	e0e8 <alt_iic_isr_register+0xc8>
    e0d8:	e17ff917 	ldw	r5,-28(fp)
    e0dc:	e13ffb17 	ldw	r4,-20(fp)
    e0e0:	000df380 	call	df38 <alt_ic_irq_disable>
    e0e4:	e0bfff15 	stw	r2,-4(fp)
    e0e8:	e0bfff17 	ldw	r2,-4(fp)
    e0ec:	e0bffa15 	stw	r2,-24(fp)
    e0f0:	e0bff817 	ldw	r2,-32(fp)
    e0f4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e0f8:	e0bff617 	ldw	r2,-40(fp)
    e0fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    e100:	e0bffa17 	ldw	r2,-24(fp)
}
    e104:	e037883a 	mov	sp,fp
    e108:	dfc00117 	ldw	ra,4(sp)
    e10c:	df000017 	ldw	fp,0(sp)
    e110:	dec00204 	addi	sp,sp,8
    e114:	f800283a 	ret

0000e118 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    e118:	defff904 	addi	sp,sp,-28
    e11c:	dfc00615 	stw	ra,24(sp)
    e120:	df000515 	stw	fp,20(sp)
    e124:	df000504 	addi	fp,sp,20
    e128:	e13ffc15 	stw	r4,-16(fp)
    e12c:	e17ffd15 	stw	r5,-12(fp)
    e130:	e1bffe15 	stw	r6,-8(fp)
    e134:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    e138:	e13ffd17 	ldw	r4,-12(fp)
    e13c:	e17ffe17 	ldw	r5,-8(fp)
    e140:	e1bfff17 	ldw	r6,-4(fp)
    e144:	000e3300 	call	e330 <open>
    e148:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    e14c:	e0bffb17 	ldw	r2,-20(fp)
    e150:	1004803a 	cmplt	r2,r2,zero
    e154:	10001c1e 	bne	r2,zero,e1c8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    e158:	e0bffb17 	ldw	r2,-20(fp)
    e15c:	00c00074 	movhi	r3,1
    e160:	18fee204 	addi	r3,r3,-1144
    e164:	10800324 	muli	r2,r2,12
    e168:	10c5883a 	add	r2,r2,r3
    e16c:	10c00017 	ldw	r3,0(r2)
    e170:	e0bffc17 	ldw	r2,-16(fp)
    e174:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    e178:	e0bffb17 	ldw	r2,-20(fp)
    e17c:	00c00074 	movhi	r3,1
    e180:	18fee204 	addi	r3,r3,-1144
    e184:	10800324 	muli	r2,r2,12
    e188:	10c5883a 	add	r2,r2,r3
    e18c:	10800104 	addi	r2,r2,4
    e190:	10c00017 	ldw	r3,0(r2)
    e194:	e0bffc17 	ldw	r2,-16(fp)
    e198:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    e19c:	e0bffb17 	ldw	r2,-20(fp)
    e1a0:	00c00074 	movhi	r3,1
    e1a4:	18fee204 	addi	r3,r3,-1144
    e1a8:	10800324 	muli	r2,r2,12
    e1ac:	10c5883a 	add	r2,r2,r3
    e1b0:	10800204 	addi	r2,r2,8
    e1b4:	10c00017 	ldw	r3,0(r2)
    e1b8:	e0bffc17 	ldw	r2,-16(fp)
    e1bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    e1c0:	e13ffb17 	ldw	r4,-20(fp)
    e1c4:	000cbc00 	call	cbc0 <alt_release_fd>
  }
} 
    e1c8:	e037883a 	mov	sp,fp
    e1cc:	dfc00117 	ldw	ra,4(sp)
    e1d0:	df000017 	ldw	fp,0(sp)
    e1d4:	dec00204 	addi	sp,sp,8
    e1d8:	f800283a 	ret

0000e1dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    e1dc:	defffb04 	addi	sp,sp,-20
    e1e0:	dfc00415 	stw	ra,16(sp)
    e1e4:	df000315 	stw	fp,12(sp)
    e1e8:	df000304 	addi	fp,sp,12
    e1ec:	e13ffd15 	stw	r4,-12(fp)
    e1f0:	e17ffe15 	stw	r5,-8(fp)
    e1f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    e1f8:	01000074 	movhi	r4,1
    e1fc:	213ee504 	addi	r4,r4,-1132
    e200:	e17ffd17 	ldw	r5,-12(fp)
    e204:	01800044 	movi	r6,1
    e208:	01c07fc4 	movi	r7,511
    e20c:	000e1180 	call	e118 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    e210:	01000074 	movhi	r4,1
    e214:	213ee204 	addi	r4,r4,-1144
    e218:	e17ffe17 	ldw	r5,-8(fp)
    e21c:	000d883a 	mov	r6,zero
    e220:	01c07fc4 	movi	r7,511
    e224:	000e1180 	call	e118 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    e228:	01000074 	movhi	r4,1
    e22c:	213ee804 	addi	r4,r4,-1120
    e230:	e17fff17 	ldw	r5,-4(fp)
    e234:	01800044 	movi	r6,1
    e238:	01c07fc4 	movi	r7,511
    e23c:	000e1180 	call	e118 <alt_open_fd>
}  
    e240:	e037883a 	mov	sp,fp
    e244:	dfc00117 	ldw	ra,4(sp)
    e248:	df000017 	ldw	fp,0(sp)
    e24c:	dec00204 	addi	sp,sp,8
    e250:	f800283a 	ret

0000e254 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    e254:	defffc04 	addi	sp,sp,-16
    e258:	df000315 	stw	fp,12(sp)
    e25c:	df000304 	addi	fp,sp,12
    e260:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    e264:	e0bffe17 	ldw	r2,-8(fp)
    e268:	10800217 	ldw	r2,8(r2)
    e26c:	10d00034 	orhi	r3,r2,16384
    e270:	e0bffe17 	ldw	r2,-8(fp)
    e274:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e278:	e03ffd15 	stw	zero,-12(fp)
    e27c:	00002006 	br	e300 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    e280:	e0bffd17 	ldw	r2,-12(fp)
    e284:	00c00074 	movhi	r3,1
    e288:	18fee204 	addi	r3,r3,-1144
    e28c:	10800324 	muli	r2,r2,12
    e290:	10c5883a 	add	r2,r2,r3
    e294:	10c00017 	ldw	r3,0(r2)
    e298:	e0bffe17 	ldw	r2,-8(fp)
    e29c:	10800017 	ldw	r2,0(r2)
    e2a0:	1880141e 	bne	r3,r2,e2f4 <alt_file_locked+0xa0>
    e2a4:	e0bffd17 	ldw	r2,-12(fp)
    e2a8:	00c00074 	movhi	r3,1
    e2ac:	18fee204 	addi	r3,r3,-1144
    e2b0:	10800324 	muli	r2,r2,12
    e2b4:	10c5883a 	add	r2,r2,r3
    e2b8:	10800204 	addi	r2,r2,8
    e2bc:	10800017 	ldw	r2,0(r2)
    e2c0:	1004403a 	cmpge	r2,r2,zero
    e2c4:	10000b1e 	bne	r2,zero,e2f4 <alt_file_locked+0xa0>
    e2c8:	e0bffd17 	ldw	r2,-12(fp)
    e2cc:	10800324 	muli	r2,r2,12
    e2d0:	1007883a 	mov	r3,r2
    e2d4:	00800074 	movhi	r2,1
    e2d8:	10bee204 	addi	r2,r2,-1144
    e2dc:	1887883a 	add	r3,r3,r2
    e2e0:	e0bffe17 	ldw	r2,-8(fp)
    e2e4:	18800326 	beq	r3,r2,e2f4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    e2e8:	00bffcc4 	movi	r2,-13
    e2ec:	e0bfff15 	stw	r2,-4(fp)
    e2f0:	00000a06 	br	e31c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e2f4:	e0bffd17 	ldw	r2,-12(fp)
    e2f8:	10800044 	addi	r2,r2,1
    e2fc:	e0bffd15 	stw	r2,-12(fp)
    e300:	00800074 	movhi	r2,1
    e304:	10836604 	addi	r2,r2,3480
    e308:	10800017 	ldw	r2,0(r2)
    e30c:	1007883a 	mov	r3,r2
    e310:	e0bffd17 	ldw	r2,-12(fp)
    e314:	18bfda2e 	bgeu	r3,r2,e280 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    e318:	e03fff15 	stw	zero,-4(fp)
    e31c:	e0bfff17 	ldw	r2,-4(fp)
}
    e320:	e037883a 	mov	sp,fp
    e324:	df000017 	ldw	fp,0(sp)
    e328:	dec00104 	addi	sp,sp,4
    e32c:	f800283a 	ret

0000e330 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    e330:	defff404 	addi	sp,sp,-48
    e334:	dfc00b15 	stw	ra,44(sp)
    e338:	df000a15 	stw	fp,40(sp)
    e33c:	df000a04 	addi	fp,sp,40
    e340:	e13ffb15 	stw	r4,-20(fp)
    e344:	e17ffc15 	stw	r5,-16(fp)
    e348:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    e34c:	00bfffc4 	movi	r2,-1
    e350:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    e354:	00bffb44 	movi	r2,-19
    e358:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    e35c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    e360:	e13ffb17 	ldw	r4,-20(fp)
    e364:	01400074 	movhi	r5,1
    e368:	29436404 	addi	r5,r5,3472
    e36c:	000e6dc0 	call	e6dc <alt_find_dev>
    e370:	e0bffa15 	stw	r2,-24(fp)
    e374:	e0bffa17 	ldw	r2,-24(fp)
    e378:	1004c03a 	cmpne	r2,r2,zero
    e37c:	1000051e 	bne	r2,zero,e394 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    e380:	e13ffb17 	ldw	r4,-20(fp)
    e384:	000e7700 	call	e770 <alt_find_file>
    e388:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    e38c:	00800044 	movi	r2,1
    e390:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    e394:	e0bffa17 	ldw	r2,-24(fp)
    e398:	1005003a 	cmpeq	r2,r2,zero
    e39c:	1000301e 	bne	r2,zero,e460 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    e3a0:	e13ffa17 	ldw	r4,-24(fp)
    e3a4:	000e8900 	call	e890 <alt_get_fd>
    e3a8:	e0bff815 	stw	r2,-32(fp)
    e3ac:	e0bff817 	ldw	r2,-32(fp)
    e3b0:	1004403a 	cmpge	r2,r2,zero
    e3b4:	1000031e 	bne	r2,zero,e3c4 <open+0x94>
    {
      status = index;
    e3b8:	e0bff817 	ldw	r2,-32(fp)
    e3bc:	e0bff715 	stw	r2,-36(fp)
    e3c0:	00002906 	br	e468 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    e3c4:	e0bff817 	ldw	r2,-32(fp)
    e3c8:	10800324 	muli	r2,r2,12
    e3cc:	1007883a 	mov	r3,r2
    e3d0:	00800074 	movhi	r2,1
    e3d4:	10bee204 	addi	r2,r2,-1144
    e3d8:	1885883a 	add	r2,r3,r2
    e3dc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    e3e0:	e0fffc17 	ldw	r3,-16(fp)
    e3e4:	00900034 	movhi	r2,16384
    e3e8:	10bfffc4 	addi	r2,r2,-1
    e3ec:	1886703a 	and	r3,r3,r2
    e3f0:	e0bff917 	ldw	r2,-28(fp)
    e3f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    e3f8:	e0bff617 	ldw	r2,-40(fp)
    e3fc:	1004c03a 	cmpne	r2,r2,zero
    e400:	1000061e 	bne	r2,zero,e41c <open+0xec>
    e404:	e13ff917 	ldw	r4,-28(fp)
    e408:	000e2540 	call	e254 <alt_file_locked>
    e40c:	e0bff715 	stw	r2,-36(fp)
    e410:	e0bff717 	ldw	r2,-36(fp)
    e414:	1004803a 	cmplt	r2,r2,zero
    e418:	1000131e 	bne	r2,zero,e468 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    e41c:	e0bffa17 	ldw	r2,-24(fp)
    e420:	10800317 	ldw	r2,12(r2)
    e424:	1005003a 	cmpeq	r2,r2,zero
    e428:	1000091e 	bne	r2,zero,e450 <open+0x120>
    e42c:	e0bffa17 	ldw	r2,-24(fp)
    e430:	10800317 	ldw	r2,12(r2)
    e434:	e13ff917 	ldw	r4,-28(fp)
    e438:	e17ffb17 	ldw	r5,-20(fp)
    e43c:	e1bffc17 	ldw	r6,-16(fp)
    e440:	e1fffd17 	ldw	r7,-12(fp)
    e444:	103ee83a 	callr	r2
    e448:	e0bfff15 	stw	r2,-4(fp)
    e44c:	00000106 	br	e454 <open+0x124>
    e450:	e03fff15 	stw	zero,-4(fp)
    e454:	e0bfff17 	ldw	r2,-4(fp)
    e458:	e0bff715 	stw	r2,-36(fp)
    e45c:	00000206 	br	e468 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    e460:	00bffb44 	movi	r2,-19
    e464:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    e468:	e0bff717 	ldw	r2,-36(fp)
    e46c:	1004403a 	cmpge	r2,r2,zero
    e470:	1000091e 	bne	r2,zero,e498 <open+0x168>
  {
    alt_release_fd (index);  
    e474:	e13ff817 	ldw	r4,-32(fp)
    e478:	000cbc00 	call	cbc0 <alt_release_fd>
    ALT_ERRNO = -status;
    e47c:	000e4b80 	call	e4b8 <alt_get_errno>
    e480:	e0fff717 	ldw	r3,-36(fp)
    e484:	00c7c83a 	sub	r3,zero,r3
    e488:	10c00015 	stw	r3,0(r2)
    return -1;
    e48c:	00bfffc4 	movi	r2,-1
    e490:	e0bffe15 	stw	r2,-8(fp)
    e494:	00000206 	br	e4a0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    e498:	e0bff817 	ldw	r2,-32(fp)
    e49c:	e0bffe15 	stw	r2,-8(fp)
    e4a0:	e0bffe17 	ldw	r2,-8(fp)
}
    e4a4:	e037883a 	mov	sp,fp
    e4a8:	dfc00117 	ldw	ra,4(sp)
    e4ac:	df000017 	ldw	fp,0(sp)
    e4b0:	dec00204 	addi	sp,sp,8
    e4b4:	f800283a 	ret

0000e4b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e4b8:	defffd04 	addi	sp,sp,-12
    e4bc:	dfc00215 	stw	ra,8(sp)
    e4c0:	df000115 	stw	fp,4(sp)
    e4c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    e4c8:	00800074 	movhi	r2,1
    e4cc:	10836704 	addi	r2,r2,3484
    e4d0:	10800017 	ldw	r2,0(r2)
    e4d4:	1005003a 	cmpeq	r2,r2,zero
    e4d8:	1000061e 	bne	r2,zero,e4f4 <alt_get_errno+0x3c>
    e4dc:	00800074 	movhi	r2,1
    e4e0:	10836704 	addi	r2,r2,3484
    e4e4:	10800017 	ldw	r2,0(r2)
    e4e8:	103ee83a 	callr	r2
    e4ec:	e0bfff15 	stw	r2,-4(fp)
    e4f0:	00000306 	br	e500 <alt_get_errno+0x48>
    e4f4:	00800074 	movhi	r2,1
    e4f8:	108a2204 	addi	r2,r2,10376
    e4fc:	e0bfff15 	stw	r2,-4(fp)
    e500:	e0bfff17 	ldw	r2,-4(fp)
}
    e504:	e037883a 	mov	sp,fp
    e508:	dfc00117 	ldw	ra,4(sp)
    e50c:	df000017 	ldw	fp,0(sp)
    e510:	dec00204 	addi	sp,sp,8
    e514:	f800283a 	ret

0000e518 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    e518:	defffa04 	addi	sp,sp,-24
    e51c:	df000515 	stw	fp,20(sp)
    e520:	df000504 	addi	fp,sp,20
    e524:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e528:	0005303a 	rdctl	r2,status
    e52c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e530:	e0fffd17 	ldw	r3,-12(fp)
    e534:	00bfff84 	movi	r2,-2
    e538:	1884703a 	and	r2,r3,r2
    e53c:	1001703a 	wrctl	status,r2
  
  return context;
    e540:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    e544:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    e548:	e0bfff17 	ldw	r2,-4(fp)
    e54c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    e550:	e0bffc17 	ldw	r2,-16(fp)
    e554:	10c00017 	ldw	r3,0(r2)
    e558:	e0bffc17 	ldw	r2,-16(fp)
    e55c:	10800117 	ldw	r2,4(r2)
    e560:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    e564:	e0bffc17 	ldw	r2,-16(fp)
    e568:	10c00117 	ldw	r3,4(r2)
    e56c:	e0bffc17 	ldw	r2,-16(fp)
    e570:	10800017 	ldw	r2,0(r2)
    e574:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    e578:	e0fffc17 	ldw	r3,-16(fp)
    e57c:	e0bffc17 	ldw	r2,-16(fp)
    e580:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    e584:	e0fffc17 	ldw	r3,-16(fp)
    e588:	e0bffc17 	ldw	r2,-16(fp)
    e58c:	18800015 	stw	r2,0(r3)
    e590:	e0bffe17 	ldw	r2,-8(fp)
    e594:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e598:	e0bffb17 	ldw	r2,-20(fp)
    e59c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    e5a0:	e037883a 	mov	sp,fp
    e5a4:	df000017 	ldw	fp,0(sp)
    e5a8:	dec00104 	addi	sp,sp,4
    e5ac:	f800283a 	ret

0000e5b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    e5b0:	defffb04 	addi	sp,sp,-20
    e5b4:	dfc00415 	stw	ra,16(sp)
    e5b8:	df000315 	stw	fp,12(sp)
    e5bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    e5c0:	d0a01017 	ldw	r2,-32704(gp)
    e5c4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    e5c8:	d0a6d117 	ldw	r2,-25788(gp)
    e5cc:	10800044 	addi	r2,r2,1
    e5d0:	d0a6d115 	stw	r2,-25788(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    e5d4:	00003106 	br	e69c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    e5d8:	e0bffe17 	ldw	r2,-8(fp)
    e5dc:	10800017 	ldw	r2,0(r2)
    e5e0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    e5e4:	e0bffe17 	ldw	r2,-8(fp)
    e5e8:	10800403 	ldbu	r2,16(r2)
    e5ec:	10803fcc 	andi	r2,r2,255
    e5f0:	1005003a 	cmpeq	r2,r2,zero
    e5f4:	1000051e 	bne	r2,zero,e60c <alt_tick+0x5c>
    e5f8:	d0a6d117 	ldw	r2,-25788(gp)
    e5fc:	1004c03a 	cmpne	r2,r2,zero
    e600:	1000021e 	bne	r2,zero,e60c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    e604:	e0bffe17 	ldw	r2,-8(fp)
    e608:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    e60c:	e0bffe17 	ldw	r2,-8(fp)
    e610:	10c00217 	ldw	r3,8(r2)
    e614:	d0a6d117 	ldw	r2,-25788(gp)
    e618:	10c01e36 	bltu	r2,r3,e694 <alt_tick+0xe4>
    e61c:	e0bffe17 	ldw	r2,-8(fp)
    e620:	10800403 	ldbu	r2,16(r2)
    e624:	10803fcc 	andi	r2,r2,255
    e628:	1004c03a 	cmpne	r2,r2,zero
    e62c:	1000191e 	bne	r2,zero,e694 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    e630:	e0bffe17 	ldw	r2,-8(fp)
    e634:	10c00317 	ldw	r3,12(r2)
    e638:	e0bffe17 	ldw	r2,-8(fp)
    e63c:	11000517 	ldw	r4,20(r2)
    e640:	183ee83a 	callr	r3
    e644:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    e648:	e0bffd17 	ldw	r2,-12(fp)
    e64c:	1004c03a 	cmpne	r2,r2,zero
    e650:	1000031e 	bne	r2,zero,e660 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    e654:	e13ffe17 	ldw	r4,-8(fp)
    e658:	000e5180 	call	e518 <alt_alarm_stop>
    e65c:	00000d06 	br	e694 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    e660:	e0bffe17 	ldw	r2,-8(fp)
    e664:	10c00217 	ldw	r3,8(r2)
    e668:	e0bffd17 	ldw	r2,-12(fp)
    e66c:	1887883a 	add	r3,r3,r2
    e670:	e0bffe17 	ldw	r2,-8(fp)
    e674:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    e678:	e0bffe17 	ldw	r2,-8(fp)
    e67c:	10c00217 	ldw	r3,8(r2)
    e680:	d0a6d117 	ldw	r2,-25788(gp)
    e684:	1880032e 	bgeu	r3,r2,e694 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    e688:	e0fffe17 	ldw	r3,-8(fp)
    e68c:	00800044 	movi	r2,1
    e690:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    e694:	e0bfff17 	ldw	r2,-4(fp)
    e698:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    e69c:	d0e01004 	addi	r3,gp,-32704
    e6a0:	e0bffe17 	ldw	r2,-8(fp)
    e6a4:	10ffcc1e 	bne	r2,r3,e5d8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    e6a8:	e037883a 	mov	sp,fp
    e6ac:	dfc00117 	ldw	ra,4(sp)
    e6b0:	df000017 	ldw	fp,0(sp)
    e6b4:	dec00204 	addi	sp,sp,8
    e6b8:	f800283a 	ret

0000e6bc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    e6bc:	deffff04 	addi	sp,sp,-4
    e6c0:	df000015 	stw	fp,0(sp)
    e6c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    e6c8:	000170fa 	wrctl	ienable,zero
}
    e6cc:	e037883a 	mov	sp,fp
    e6d0:	df000017 	ldw	fp,0(sp)
    e6d4:	dec00104 	addi	sp,sp,4
    e6d8:	f800283a 	ret

0000e6dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    e6dc:	defff904 	addi	sp,sp,-28
    e6e0:	dfc00615 	stw	ra,24(sp)
    e6e4:	df000515 	stw	fp,20(sp)
    e6e8:	df000504 	addi	fp,sp,20
    e6ec:	e13ffd15 	stw	r4,-12(fp)
    e6f0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    e6f4:	e0bffe17 	ldw	r2,-8(fp)
    e6f8:	10800017 	ldw	r2,0(r2)
    e6fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    e700:	e13ffd17 	ldw	r4,-12(fp)
    e704:	000328c0 	call	328c <strlen>
    e708:	10800044 	addi	r2,r2,1
    e70c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e710:	00000d06 	br	e748 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    e714:	e0bffc17 	ldw	r2,-16(fp)
    e718:	11000217 	ldw	r4,8(r2)
    e71c:	e1bffb17 	ldw	r6,-20(fp)
    e720:	e17ffd17 	ldw	r5,-12(fp)
    e724:	000e9ec0 	call	e9ec <memcmp>
    e728:	1004c03a 	cmpne	r2,r2,zero
    e72c:	1000031e 	bne	r2,zero,e73c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    e730:	e0bffc17 	ldw	r2,-16(fp)
    e734:	e0bfff15 	stw	r2,-4(fp)
    e738:	00000706 	br	e758 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    e73c:	e0bffc17 	ldw	r2,-16(fp)
    e740:	10800017 	ldw	r2,0(r2)
    e744:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e748:	e0fffe17 	ldw	r3,-8(fp)
    e74c:	e0bffc17 	ldw	r2,-16(fp)
    e750:	10fff01e 	bne	r2,r3,e714 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    e754:	e03fff15 	stw	zero,-4(fp)
    e758:	e0bfff17 	ldw	r2,-4(fp)
}
    e75c:	e037883a 	mov	sp,fp
    e760:	dfc00117 	ldw	ra,4(sp)
    e764:	df000017 	ldw	fp,0(sp)
    e768:	dec00204 	addi	sp,sp,8
    e76c:	f800283a 	ret

0000e770 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    e770:	defffa04 	addi	sp,sp,-24
    e774:	dfc00515 	stw	ra,20(sp)
    e778:	df000415 	stw	fp,16(sp)
    e77c:	df000404 	addi	fp,sp,16
    e780:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    e784:	00800074 	movhi	r2,1
    e788:	10836204 	addi	r2,r2,3464
    e78c:	10800017 	ldw	r2,0(r2)
    e790:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e794:	00003306 	br	e864 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    e798:	e0bffd17 	ldw	r2,-12(fp)
    e79c:	11000217 	ldw	r4,8(r2)
    e7a0:	000328c0 	call	328c <strlen>
    e7a4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    e7a8:	e0bffd17 	ldw	r2,-12(fp)
    e7ac:	10c00217 	ldw	r3,8(r2)
    e7b0:	e0bffc17 	ldw	r2,-16(fp)
    e7b4:	1885883a 	add	r2,r3,r2
    e7b8:	10bfffc4 	addi	r2,r2,-1
    e7bc:	10800003 	ldbu	r2,0(r2)
    e7c0:	10803fcc 	andi	r2,r2,255
    e7c4:	1080201c 	xori	r2,r2,128
    e7c8:	10bfe004 	addi	r2,r2,-128
    e7cc:	10800bd8 	cmpnei	r2,r2,47
    e7d0:	1000031e 	bne	r2,zero,e7e0 <alt_find_file+0x70>
    {
      len -= 1;
    e7d4:	e0bffc17 	ldw	r2,-16(fp)
    e7d8:	10bfffc4 	addi	r2,r2,-1
    e7dc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    e7e0:	e0bffc17 	ldw	r2,-16(fp)
    e7e4:	1007883a 	mov	r3,r2
    e7e8:	e0bffe17 	ldw	r2,-8(fp)
    e7ec:	1885883a 	add	r2,r3,r2
    e7f0:	10800003 	ldbu	r2,0(r2)
    e7f4:	10803fcc 	andi	r2,r2,255
    e7f8:	1080201c 	xori	r2,r2,128
    e7fc:	10bfe004 	addi	r2,r2,-128
    e800:	10800be0 	cmpeqi	r2,r2,47
    e804:	10000a1e 	bne	r2,zero,e830 <alt_find_file+0xc0>
    e808:	e0bffc17 	ldw	r2,-16(fp)
    e80c:	1007883a 	mov	r3,r2
    e810:	e0bffe17 	ldw	r2,-8(fp)
    e814:	1885883a 	add	r2,r3,r2
    e818:	10800003 	ldbu	r2,0(r2)
    e81c:	10803fcc 	andi	r2,r2,255
    e820:	1080201c 	xori	r2,r2,128
    e824:	10bfe004 	addi	r2,r2,-128
    e828:	1004c03a 	cmpne	r2,r2,zero
    e82c:	10000a1e 	bne	r2,zero,e858 <alt_find_file+0xe8>
    e830:	e0bffd17 	ldw	r2,-12(fp)
    e834:	11000217 	ldw	r4,8(r2)
    e838:	e1bffc17 	ldw	r6,-16(fp)
    e83c:	e17ffe17 	ldw	r5,-8(fp)
    e840:	000e9ec0 	call	e9ec <memcmp>
    e844:	1004c03a 	cmpne	r2,r2,zero
    e848:	1000031e 	bne	r2,zero,e858 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    e84c:	e0bffd17 	ldw	r2,-12(fp)
    e850:	e0bfff15 	stw	r2,-4(fp)
    e854:	00000806 	br	e878 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    e858:	e0bffd17 	ldw	r2,-12(fp)
    e85c:	10800017 	ldw	r2,0(r2)
    e860:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e864:	00c00074 	movhi	r3,1
    e868:	18c36204 	addi	r3,r3,3464
    e86c:	e0bffd17 	ldw	r2,-12(fp)
    e870:	10ffc91e 	bne	r2,r3,e798 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    e874:	e03fff15 	stw	zero,-4(fp)
    e878:	e0bfff17 	ldw	r2,-4(fp)
}
    e87c:	e037883a 	mov	sp,fp
    e880:	dfc00117 	ldw	ra,4(sp)
    e884:	df000017 	ldw	fp,0(sp)
    e888:	dec00204 	addi	sp,sp,8
    e88c:	f800283a 	ret

0000e890 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    e890:	defffc04 	addi	sp,sp,-16
    e894:	df000315 	stw	fp,12(sp)
    e898:	df000304 	addi	fp,sp,12
    e89c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    e8a0:	00bffa04 	movi	r2,-24
    e8a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e8a8:	e03ffe15 	stw	zero,-8(fp)
    e8ac:	00001e06 	br	e928 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    e8b0:	e0bffe17 	ldw	r2,-8(fp)
    e8b4:	00c00074 	movhi	r3,1
    e8b8:	18fee204 	addi	r3,r3,-1144
    e8bc:	10800324 	muli	r2,r2,12
    e8c0:	10c5883a 	add	r2,r2,r3
    e8c4:	10800017 	ldw	r2,0(r2)
    e8c8:	1004c03a 	cmpne	r2,r2,zero
    e8cc:	1000131e 	bne	r2,zero,e91c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    e8d0:	e0bffe17 	ldw	r2,-8(fp)
    e8d4:	00c00074 	movhi	r3,1
    e8d8:	18fee204 	addi	r3,r3,-1144
    e8dc:	10800324 	muli	r2,r2,12
    e8e0:	10c7883a 	add	r3,r2,r3
    e8e4:	e0bfff17 	ldw	r2,-4(fp)
    e8e8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    e8ec:	00800074 	movhi	r2,1
    e8f0:	10836604 	addi	r2,r2,3480
    e8f4:	10c00017 	ldw	r3,0(r2)
    e8f8:	e0bffe17 	ldw	r2,-8(fp)
    e8fc:	1880040e 	bge	r3,r2,e910 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    e900:	00c00074 	movhi	r3,1
    e904:	18c36604 	addi	r3,r3,3480
    e908:	e0bffe17 	ldw	r2,-8(fp)
    e90c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    e910:	e0bffe17 	ldw	r2,-8(fp)
    e914:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    e918:	00000606 	br	e934 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e91c:	e0bffe17 	ldw	r2,-8(fp)
    e920:	10800044 	addi	r2,r2,1
    e924:	e0bffe15 	stw	r2,-8(fp)
    e928:	e0bffe17 	ldw	r2,-8(fp)
    e92c:	10800810 	cmplti	r2,r2,32
    e930:	103fdf1e 	bne	r2,zero,e8b0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    e934:	e0bffd17 	ldw	r2,-12(fp)
}
    e938:	e037883a 	mov	sp,fp
    e93c:	df000017 	ldw	fp,0(sp)
    e940:	dec00104 	addi	sp,sp,4
    e944:	f800283a 	ret

0000e948 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    e948:	defffb04 	addi	sp,sp,-20
    e94c:	df000415 	stw	fp,16(sp)
    e950:	df000404 	addi	fp,sp,16
    e954:	e13ffe15 	stw	r4,-8(fp)
    e958:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    e95c:	e0bfff17 	ldw	r2,-4(fp)
    e960:	10840070 	cmpltui	r2,r2,4097
    e964:	1000021e 	bne	r2,zero,e970 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    e968:	00840004 	movi	r2,4096
    e96c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    e970:	e0fffe17 	ldw	r3,-8(fp)
    e974:	e0bfff17 	ldw	r2,-4(fp)
    e978:	1885883a 	add	r2,r3,r2
    e97c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e980:	e0bffe17 	ldw	r2,-8(fp)
    e984:	e0bffd15 	stw	r2,-12(fp)
    e988:	00000506 	br	e9a0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    e98c:	e0bffd17 	ldw	r2,-12(fp)
    e990:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e994:	e0bffd17 	ldw	r2,-12(fp)
    e998:	10800804 	addi	r2,r2,32
    e99c:	e0bffd15 	stw	r2,-12(fp)
    e9a0:	e0fffd17 	ldw	r3,-12(fp)
    e9a4:	e0bffc17 	ldw	r2,-16(fp)
    e9a8:	18bff836 	bltu	r3,r2,e98c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    e9ac:	e0bffe17 	ldw	r2,-8(fp)
    e9b0:	108007cc 	andi	r2,r2,31
    e9b4:	1005003a 	cmpeq	r2,r2,zero
    e9b8:	1000021e 	bne	r2,zero,e9c4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    e9bc:	e0bffd17 	ldw	r2,-12(fp)
    e9c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    e9c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    e9c8:	e037883a 	mov	sp,fp
    e9cc:	df000017 	ldw	fp,0(sp)
    e9d0:	dec00104 	addi	sp,sp,4
    e9d4:	f800283a 	ret

0000e9d8 <atexit>:
    e9d8:	200b883a 	mov	r5,r4
    e9dc:	000d883a 	mov	r6,zero
    e9e0:	0009883a 	mov	r4,zero
    e9e4:	000f883a 	mov	r7,zero
    e9e8:	000ea601 	jmpi	ea60 <__register_exitproc>

0000e9ec <memcmp>:
    e9ec:	00c000c4 	movi	r3,3
    e9f0:	1980032e 	bgeu	r3,r6,ea00 <memcmp+0x14>
    e9f4:	2144b03a 	or	r2,r4,r5
    e9f8:	10c4703a 	and	r2,r2,r3
    e9fc:	10000f26 	beq	r2,zero,ea3c <memcmp+0x50>
    ea00:	31ffffc4 	addi	r7,r6,-1
    ea04:	3000061e 	bne	r6,zero,ea20 <memcmp+0x34>
    ea08:	00000a06 	br	ea34 <memcmp+0x48>
    ea0c:	39ffffc4 	addi	r7,r7,-1
    ea10:	00bfffc4 	movi	r2,-1
    ea14:	21000044 	addi	r4,r4,1
    ea18:	29400044 	addi	r5,r5,1
    ea1c:	38800526 	beq	r7,r2,ea34 <memcmp+0x48>
    ea20:	20c00003 	ldbu	r3,0(r4)
    ea24:	28800003 	ldbu	r2,0(r5)
    ea28:	18bff826 	beq	r3,r2,ea0c <memcmp+0x20>
    ea2c:	1885c83a 	sub	r2,r3,r2
    ea30:	f800283a 	ret
    ea34:	0005883a 	mov	r2,zero
    ea38:	f800283a 	ret
    ea3c:	180f883a 	mov	r7,r3
    ea40:	20c00017 	ldw	r3,0(r4)
    ea44:	28800017 	ldw	r2,0(r5)
    ea48:	18bfed1e 	bne	r3,r2,ea00 <memcmp+0x14>
    ea4c:	31bfff04 	addi	r6,r6,-4
    ea50:	21000104 	addi	r4,r4,4
    ea54:	29400104 	addi	r5,r5,4
    ea58:	39bff936 	bltu	r7,r6,ea40 <memcmp+0x54>
    ea5c:	003fe806 	br	ea00 <memcmp+0x14>

0000ea60 <__register_exitproc>:
    ea60:	defffa04 	addi	sp,sp,-24
    ea64:	00800074 	movhi	r2,1
    ea68:	10835d04 	addi	r2,r2,3444
    ea6c:	dc000015 	stw	r16,0(sp)
    ea70:	14000017 	ldw	r16,0(r2)
    ea74:	dd000415 	stw	r20,16(sp)
    ea78:	2829883a 	mov	r20,r5
    ea7c:	81405217 	ldw	r5,328(r16)
    ea80:	dcc00315 	stw	r19,12(sp)
    ea84:	dc800215 	stw	r18,8(sp)
    ea88:	dc400115 	stw	r17,4(sp)
    ea8c:	dfc00515 	stw	ra,20(sp)
    ea90:	2023883a 	mov	r17,r4
    ea94:	3027883a 	mov	r19,r6
    ea98:	3825883a 	mov	r18,r7
    ea9c:	28002526 	beq	r5,zero,eb34 <__register_exitproc+0xd4>
    eaa0:	29000117 	ldw	r4,4(r5)
    eaa4:	008007c4 	movi	r2,31
    eaa8:	11002716 	blt	r2,r4,eb48 <__register_exitproc+0xe8>
    eaac:	8800101e 	bne	r17,zero,eaf0 <__register_exitproc+0x90>
    eab0:	2105883a 	add	r2,r4,r4
    eab4:	1085883a 	add	r2,r2,r2
    eab8:	20c00044 	addi	r3,r4,1
    eabc:	1145883a 	add	r2,r2,r5
    eac0:	0009883a 	mov	r4,zero
    eac4:	15000215 	stw	r20,8(r2)
    eac8:	28c00115 	stw	r3,4(r5)
    eacc:	2005883a 	mov	r2,r4
    ead0:	dfc00517 	ldw	ra,20(sp)
    ead4:	dd000417 	ldw	r20,16(sp)
    ead8:	dcc00317 	ldw	r19,12(sp)
    eadc:	dc800217 	ldw	r18,8(sp)
    eae0:	dc400117 	ldw	r17,4(sp)
    eae4:	dc000017 	ldw	r16,0(sp)
    eae8:	dec00604 	addi	sp,sp,24
    eaec:	f800283a 	ret
    eaf0:	29802204 	addi	r6,r5,136
    eaf4:	00800044 	movi	r2,1
    eaf8:	110e983a 	sll	r7,r2,r4
    eafc:	30c04017 	ldw	r3,256(r6)
    eb00:	2105883a 	add	r2,r4,r4
    eb04:	1085883a 	add	r2,r2,r2
    eb08:	1185883a 	add	r2,r2,r6
    eb0c:	19c6b03a 	or	r3,r3,r7
    eb10:	14802015 	stw	r18,128(r2)
    eb14:	14c00015 	stw	r19,0(r2)
    eb18:	00800084 	movi	r2,2
    eb1c:	30c04015 	stw	r3,256(r6)
    eb20:	88bfe31e 	bne	r17,r2,eab0 <__register_exitproc+0x50>
    eb24:	30804117 	ldw	r2,260(r6)
    eb28:	11c4b03a 	or	r2,r2,r7
    eb2c:	30804115 	stw	r2,260(r6)
    eb30:	003fdf06 	br	eab0 <__register_exitproc+0x50>
    eb34:	00800074 	movhi	r2,1
    eb38:	108b4104 	addi	r2,r2,11524
    eb3c:	100b883a 	mov	r5,r2
    eb40:	80805215 	stw	r2,328(r16)
    eb44:	003fd606 	br	eaa0 <__register_exitproc+0x40>
    eb48:	00800034 	movhi	r2,0
    eb4c:	108a6704 	addi	r2,r2,10652
    eb50:	1000021e 	bne	r2,zero,eb5c <__register_exitproc+0xfc>
    eb54:	013fffc4 	movi	r4,-1
    eb58:	003fdc06 	br	eacc <__register_exitproc+0x6c>
    eb5c:	01006404 	movi	r4,400
    eb60:	103ee83a 	callr	r2
    eb64:	1007883a 	mov	r3,r2
    eb68:	103ffa26 	beq	r2,zero,eb54 <__register_exitproc+0xf4>
    eb6c:	80805217 	ldw	r2,328(r16)
    eb70:	180b883a 	mov	r5,r3
    eb74:	18000115 	stw	zero,4(r3)
    eb78:	18800015 	stw	r2,0(r3)
    eb7c:	80c05215 	stw	r3,328(r16)
    eb80:	18006215 	stw	zero,392(r3)
    eb84:	18006315 	stw	zero,396(r3)
    eb88:	0009883a 	mov	r4,zero
    eb8c:	883fc826 	beq	r17,zero,eab0 <__register_exitproc+0x50>
    eb90:	003fd706 	br	eaf0 <__register_exitproc+0x90>
    eb94:	00000010 	cmplti	zero,zero,0
    eb98:	00000000 	call	0 <__alt_mem_sdram>
    eb9c:	00527a01 	jmpi	527a0 <_gp+0x39a38>
    eba0:	011f7c01 	jmpi	11f7c0 <_gp+0x106a58>
    eba4:	001b0c0b 	ldhu	zero,27696(zero)
    eba8:	00000028 	cmpgeui	zero,zero,0
    ebac:	00000018 	cmpnei	zero,zero,0
    ebb0:	00009e78 	rdprs	zero,zero,633
    ebb4:	000005dc 	xori	zero,zero,23
    ebb8:	400e4400 	call	400e440 <__ram_exceptions_end+0x200e28c>
    ebbc:	92099170 	cmpltui	r8,r18,9797
    ebc0:	95079308 	cmpgei	r20,r18,7756
    ebc4:	97049605 	stb	fp,4696(r18)
    ebc8:	90019f03 	ldbu	zero,1660(r18)
    ebcc:	9c06940a 	0x9c06940a
    ebd0:	00000002 	0x2
    ebd4:	00000028 	cmpgeui	zero,zero,0
    ebd8:	00000044 	movi	zero,1
    ebdc:	0000a454 	movui	zero,657
    ebe0:	000005b0 	cmpltui	zero,zero,22
    ebe4:	3c0e4400 	call	3c0e440 <__ram_exceptions_end+0x1c0e28c>
    ebe8:	92099168 	cmpgeui	r8,r18,9797
    ebec:	95079308 	cmpgei	r20,r18,7756
    ebf0:	9c039705 	stb	r16,3676(r19)
    ebf4:	90019f02 	0x90019f02
    ebf8:	9606940a 	0x9606940a
    ebfc:	00000004 	movi	zero,0
    ec00:	00005364 	muli	zero,zero,333

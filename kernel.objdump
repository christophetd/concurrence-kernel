
kernel.elf:     file format elf32-littlenios2
kernel.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000194

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x00000000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x00000194 paddr 0x00000194 align 2**12
         filesz 0x0000e71c memsz 0x0000e71c flags r-x
    LOAD off    0x000108b0 vaddr 0x0000e8b0 paddr 0x00010348 align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rw-
    LOAD off    0x00012de0 vaddr 0x00011de0 paddr 0x00011de0 align 2**12
         filesz 0x00000000 memsz 0x0000060c flags rw-
    LOAD off    0x00013000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00013000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  00000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e0ac  00000194  00000194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000670  0000e240  0000e240  00010240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a98  0000e8b0  00010348  000108b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000060c  00011de0  00011de0  00012de0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00013020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d38  00000000  00000000  00013048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001752  00000000  00000000  00013d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002477c  00000000  00000000  000154d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008011  00000000  00000000  00039c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000149d6  00000000  00000000  00041c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001da8  00000000  00000000  00056638  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000223f  00000000  00000000  000583e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c56c  00000000  00000000  0005a61f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00066b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00066bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006abbd  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006abc0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006abcc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006abcd  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006abce  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006abd2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006abd6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0006abda  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0006abe5  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0006abf0  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0006abfb  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000018  00000000  00000000  0006ac03  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0005f6a9  00000000  00000000  0006ac1b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
00000194 l    d  .text	00000000 .text
0000e240 l    d  .rodata	00000000 .rodata
0000e8b0 l    d  .rwdata	00000000 .rwdata
00011de0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 kernel.c
00000000 l    df *ABS*	00000000 kernelTest1.c
00000000 l    df *ABS*	00000000 system_m.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001e40 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000e8e8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000293c l     F .text	00000058 __sprint_r
0000e5e2 l     O .rodata	00000010 blanks.3452
0000e5d2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000049a0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
00004b54 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006550 l     F .text	00000058 std
0000665c l     F .text	00000008 __fp_lock
00006664 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0001031c l     O .rwdata	00000004 charset
0000e614 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000e75c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000a040 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b894 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000b8f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b920 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ba54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000bd34 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000be14 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000bf70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000c19c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001033c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000c438 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f2a4 l     O .rwdata	00001060 jtag_uart_0
0000c528 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c768 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000c990 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000d00c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000d330 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000d754 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000d890 l     F .text	000000dc alt_file_locked
0000daf4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000508 g     F .text	000000c8 addLast
00007bcc g     F .text	00000094 _mprec_log10
00007cb8 g     F .text	00000088 __any_on
00009354 g     F .text	00000070 _isatty_r
0000e734 g     O .rodata	00000028 __mprec_tinytens
0000bfd0 g     F .text	0000006c alt_main
000027a4 g     F .text	000000a0 _puts_r
0001215c g     O .bss	00000100 alt_irq
000093c4 g     F .text	00000078 _lseek_r
00001d38 g       .text	00000000 _transfer
00000ebc g     F .text	000000d4 yield
00001c8c g     F .text	0000004c transfer
00010348 g       *ABS*	00000000 __flash_rwdata_start
00001208 g     F .text	00000070 put
0000ab60 g     F .text	00000088 __eqdf2
000123ec g       *ABS*	00000000 __alt_heap_start
0000272c g     F .text	00000044 printf
00001190 g     F .text	0000003c reinitialiser
00008e20 g     F .text	00000068 __sseek
000065b8 g     F .text	000000a4 __sinit
00007290 g     F .text	00000084 _setlocale_r
000066b8 g     F .text	00000068 __sfmoreglue
0000c05c g     F .text	00000020 __malloc_unlock
00001808 g     F .text	00000078 consumer0
00011e68 g     O .bss	00000078 monitors
00007648 g     F .text	000000e0 memmove
00011df0 g     O .bss	00000004 nextProcessId
000066a8 g     F .text	00000010 _cleanup
00007d40 g     F .text	000000bc _Balloc
00012138 g     O .bss	0000000c b2
0000ac70 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000001c __reset
00011de8 g     O .bss	00000004 edge_capture
00000a04 g     F .text	000000b0 createMonitor
00000000 g       *ABS*	00000000 __flash_exceptions_start
000013f0 g     F .text	00000068 displayNumber
000092e0 g     F .text	00000074 _fstat_r
00000400 g     F .text	00000060 init_button
00011e18 g     O .bss	00000004 errno
00011e30 g     O .bss	00000004 alt_argv
00011e04 g     O .bss	00000004 running
00018304 g       *ABS*	00000000 _gp
00011df8 g     O .bss	00000004 nextEventId
0000f124 g     O .rwdata	00000180 alt_fd_list
00011ee0 g     O .bss	00000208 processes
0000dd18 g     F .text	00000094 alt_find_dev
000075a8 g     F .text	000000a0 memcpy
00010304 g     O .rwdata	00000004 readyList
0000669c g     F .text	0000000c _cleanup_r
0000ae08 g     F .text	000000f8 __floatsidf
0000d818 g     F .text	00000078 alt_io_redirect
0000ad80 g     F .text	00000088 __ltdf2
0000e240 g       *ABS*	00000000 __DTOR_END__
00002844 g     F .text	00000014 puts
00007b1c g     F .text	000000b0 __ratio
00011dec g     O .bss	00000004 timer_capture
0000cba8 g     F .text	00000224 altera_avalon_jtag_uart_read
00001fd8 g     F .text	00000014 malloc
00002770 g     F .text	00000034 _printf_r
00001f7c g     F .text	00000008 __udivsi3
0000bc74 g     F .text	000000c0 isatty
0000094c g     F .text	0000003c currentMonitor
0000e644 g     O .rodata	000000c8 __mprec_tens
00012144 g     O .bss	0000000c b1
0000726c g     F .text	00000008 __locale_charset
00000de8 g     F .text	00000048 _notify
000004b8 g     F .text	00000050 init_clock
0000df84 g     F .text	00000090 alt_icache_flush
00011e0c g     O .bss	00000004 __malloc_top_pad
00010318 g     O .rwdata	00000004 __mb_cur_max
00007274 g     F .text	0000000c _localeconv_r
000018f8 g     F .text	00000078 consumer2
00008438 g     F .text	0000003c __i2b
00006c50 g     F .text	0000049c __sfvwrite_r
00002858 g     F .text	00000070 _sbrk_r
00001020 g     F .text	000000e4 attendre
0000943c g     F .text	00000078 _read_r
0000f0f0 g     O .rwdata	0000000c __lc_ctype
00010330 g     O .rwdata	00000004 alt_max_fd
0000b598 g     F .text	00000138 __unpack_d
000091bc g     F .text	00000110 _fclose_r
0000651c g     F .text	00000034 fflush
00011e10 g     O .bss	00000004 __malloc_max_sbrked_mem
0000bab4 g     F .text	000001c0 alt_irq_register
00001a1c g     F .text	000000c0 test1
0000a4d0 g     F .text	00000074 __adddf3
000079fc g     F .text	00000120 __b2d
00009a90 g     F .text	000005b0 __umoddi3
0000be80 g     F .text	000000f0 lseek
0001030c g     O .rwdata	00000004 _global_impure_ptr
000087b4 g     F .text	000005f4 _realloc_r
000123ec g       *ABS*	00000000 __bss_end
0000d65c g     F .text	000000f8 alt_iic_isr_register
0000dbec g     F .text	0000010c alt_tick
000094b4 g     F .text	000005dc __udivdi3
0000e70c g     O .rodata	00000028 __mprec_bigtens
00008694 g     F .text	00000120 __s2b
0000afd8 g     F .text	00000194 __floatunsidf
00011e08 g     O .bss	00000004 nextP
0000791c g     F .text	00000060 __mcmp
00006684 g     F .text	00000018 __fp_lock_all
0000d614 g     F .text	00000048 alt_ic_irq_enabled
00001548 g     F .text	000002c0 producer
00000c00 g     F .text	00000108 exitMonitor
00000e30 g     F .text	00000044 notify
0000db54 g     F .text	00000098 alt_alarm_stop
00001104 g     F .text	0000008c declencher
00011e28 g     O .bss	00000004 alt_irq_active
02000000 g       *ABS*	00000000 __alt_mem_onchip_mem
020000ec g     F .exceptions	000000c8 alt_irq_handler
0000f0fc g     O .rwdata	00000028 alt_dev_null
0000d260 g     F .text	0000001c alt_dcache_flush_all
000077e8 g     F .text	00000070 __hi0bits
0000af00 g     F .text	000000d8 __fixdfsi
00001cd8 g     F .text	00000044 iotransfer
00010348 g       *ABS*	00000000 __ram_rwdata_end
00010328 g     O .rwdata	00000008 alt_dev_list
0000c318 g     F .text	00000120 write
0000e8b0 g       *ABS*	00000000 __ram_rodata_end
0000b980 g     F .text	000000d4 fstat
000011cc g     F .text	0000003c initBuffer
000005d0 g     F .text	00000070 addFirst
00008574 g     F .text	00000120 __pow5mult
00011e1c g     O .bss	00000004 __nlocale_changed
00001f84 g     F .text	00000008 __umodsi3
000123ec g       *ABS*	00000000 end
00000f90 g     F .text	00000090 createEvent
00000758 g     F .text	00000060 head
0000c6a8 g     F .text	000000c0 altera_avalon_jtag_uart_init
00001e34 g       .text	00000000 allowInterrupts
0000e23c g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000d07c g     F .text	00000090 alt_avalon_timer_sc_init
0000b204 g     F .text	00000080 __clzsi2
0000cdcc g     F .text	00000240 altera_avalon_jtag_uart_write
000065a8 g     F .text	00000004 __sfp_lock_acquire
000074c4 g     F .text	000000e4 memchr
00002994 g     F .text	00001eac ___vfprintf_internal_r
0000693c g     F .text	00000314 _free_r
00000d08 g     F .text	000000e0 wait
000049a4 g     F .text	000001b0 __call_exitprocs
00011de0 g     O .bss	00000008 interruptVector
00011e20 g     O .bss	00000004 __mlocale_changed
00001338 g     F .text	0000005c eput
00010314 g     O .rwdata	00000004 __malloc_sbrk_base
00000194 g     F .text	0000003c _start
000007b8 g     F .text	000000dc createProcess
00011e38 g     O .bss	00000004 _alt_tick_rate
00008104 g     F .text	0000014c __lshift
00011e3c g     O .bss	00000004 _alt_nticks
0000c07c g     F .text	00000120 read
0000c4cc g     F .text	0000005c alt_sys_init
0000e09c g     F .text	00000134 __register_exitproc
00008250 g     F .text	000001e8 __multiply
0000ca40 g     F .text	00000074 altera_avalon_jtag_uart_close
0000e8b0 g       *ABS*	00000000 __ram_rwdata_start
0000e240 g       *ABS*	00000000 __ram_rodata_start
00011e40 g     O .bss	00000028 __malloc_current_mallinfo
00011df4 g     O .bss	00000004 nextMonitorId
00007dfc g     F .text	0000017c __d2b
00001e28 g       .text	00000000 maskInterrupts
00001394 g     F .text	0000005c eget
0000c560 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000decc g     F .text	000000b8 alt_get_fd
0000b6d0 g     F .text	000000c8 __fpcmp_parts_d
0000914c g     F .text	00000070 _close_r
000008c0 g     F .text	0000008c currentMonitorID
0000e028 g     F .text	00000074 memcmp
0000c610 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000123ec g       *ABS*	00000000 __alt_stack_base
0000c658 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00004864 g     F .text	0000013c __swsetup_r
0000a908 g     F .text	00000258 __divdf3
00006720 g     F .text	000000f0 __sfp
00007c60 g     F .text	00000058 __copybits
00001880 g     F .text	00000078 consumer1
0000ece8 g     O .rwdata	00000408 __malloc_av_
000065b4 g     F .text	00000004 __sinit_lock_release
0000a544 g     F .text	000003c4 __muldf3
00008f04 g     F .text	00000060 __sread
0000ddac g     F .text	00000120 alt_find_file
0000d27c g     F .text	000000b4 alt_dev_llist_insert
0000c03c g     F .text	00000020 __malloc_lock
0000c25c g     F .text	000000bc sbrk
00006320 g     F .text	000001fc _fflush_r
00009098 g     F .text	000000b4 _calloc_r
00011de0 g       *ABS*	00000000 __bss_start
00007728 g     F .text	00000098 memset
00001b80 g     F .text	000000b0 main
000002a4 g     F .text	000000d8 insertTail
00011e34 g     O .bss	00000004 alt_envp
00011e14 g     O .bss	00000004 __malloc_max_total_mem
0000c5b8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000e8dc g     O .rwdata	0000000c lcdZones
00000460 g     F .text	00000058 handle_timer_interrupts
00000ab4 g     F .text	0000014c enterMonitor
00008e18 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
000092cc g     F .text	00000014 fclose
000006f4 g     F .text	00000064 size
0001225c g     O .bss	00000190 _atexit0
00004d6c g     F .text	000015b4 _dtoa_r
00001fec g     F .text	00000740 _malloc_r
00010334 g     O .rwdata	00000004 alt_errno
000071b4 g     F .text	000000b8 _fwalk
00001ebc g     F .text	00000060 __divsi3
0000e768 g     O .rodata	00000014 __thenan_df
00006810 g     F .text	0000012c _malloc_trim_r
0000e240 g       *ABS*	00000000 __CTOR_END__
00008f64 g     F .text	000000bc strcmp
0000e240 g       *ABS*	00000000 __flash_rodata_start
0000e240 g       *ABS*	00000000 __DTOR_LIST__
0000abe8 g     F .text	00000088 __nedf2
0000c498 g     F .text	00000034 alt_irq_init
0000c1fc g     F .text	00000060 alt_release_fd
0000e77c g     O .rodata	00000100 __clz_tab
00011e24 g     O .bss	00000004 _PathLocale
00001adc g     F .text	000000a4 test2
0000e014 g     F .text	00000014 atexit
00009020 g     F .text	00000078 _write_r
00007314 g     F .text	0000001c setlocale
00001278 g     F .text	0000006c get
00010308 g     O .rwdata	00000004 _impure_ptr
00011e2c g     O .bss	00000004 alt_argc
0000d3f4 g     F .text	00000064 _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
0000797c g     F .text	00000080 __ulp
00008da8 g     F .text	00000040 __isinfd
0000666c g     F .text	00000018 __fp_unlock_all
00000640 g     F .text	000000b4 removeHead
000120e8 g     O .bss	00000050 events
00010320 g     O .rwdata	00000008 alt_fs_list
0000e8b0 g     O .rwdata	0000002c digitCodes
02000020 g       *ABS*	00000000 __ram_exceptions_start
00007280 g     F .text	00000010 localeconv
000001d0 g     F .text	000000d4 removeHeadI
0000d488 g     F .text	00000050 alt_ic_isr_register
000012e4 g     F .text	00000054 initEventBuffer
00010348 g       *ABS*	00000000 _edata
000123ec g       *ABS*	00000000 _end
00001c30 g     F .text	0000005c newProcess
020001b4 g       *ABS*	00000000 __ram_exceptions_end
0000cab4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00011dfc g     O .bss	00000004 dummyMonitor1
0000d574 g     F .text	000000a0 alt_ic_irq_disable
00008e88 g     F .text	0000007c __swrite
00010310 g     O .rwdata	00000004 __malloc_trim_threshold
0000dcf8 g     F .text	00000020 altera_nios2_qsys_irq_init
00012150 g     O .bss	0000000c b0
00001f8c g     F .text	00000038 exit
000070ec g     F .text	000000c8 _fwalk_reent
00007f78 g     F .text	0000018c __mdiff
00001f1c g     F .text	00000060 __modsi3
00011e00 g     O .bss	00000004 dummyMonitor2
02000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
000065ac g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00000988 g     F .text	0000007c start
00000894 g     F .text	0000002c currentProcessId
00008de8 g     F .text	00000030 __isnand
0000b960 g     F .text	00000020 _exit
0000d10c g     F .text	00000154 alt_alarm_start
0000b16c g     F .text	00000098 __muldi3
00007330 g     F .text	00000194 __smakebuf_r
000028c8 g     F .text	00000074 strlen
0000d96c g     F .text	00000188 open
0000acf8 g     F .text	00000088 __gedf2
00001458 g     F .text	000000f0 blinkNumber
00001d1c g       .text	00000000 _createStack
0000d458 g     F .text	00000030 alt_icache_flush_all
00010338 g     O .rwdata	00000004 alt_priority_mask
0000d4d8 g     F .text	0000009c alt_ic_irq_enable
00004840 g     F .text	00000024 __vfprintf_internal
00000e74 g     F .text	00000048 notifyAll
0000a450 g     F .text	00000080 __subdf3
00007858 g     F .text	000000c4 __lo0bits
00010340 g     O .rwdata	00000008 alt_alarm_list
0000d390 g     F .text	00000064 _do_ctors
00001970 g     F .text	000000ac test0
0000037c g     F .text	00000084 handle_button_interrupts
0000b798 g     F .text	000000fc close
0000bd94 g     F .text	00000080 alt_load
0000b284 g     F .text	00000314 __pack_d
00001fc4 g     F .text	00000014 free
000065b0 g     F .text	00000004 __sinit_lock_acquire
00008474 g     F .text	00000100 __multadd
000077c0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 2000014:	08406514 	ori	at,at,404
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__alt_mem_sdram>

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c00074 	movhi	r3,1
 2000134:	18c85704 	addi	r3,r3,8540
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c00074 	movhi	r3,1
 200014c:	18c85704 	addi	r3,r3,8540
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

00000194 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     194:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     19c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1a0:	d6a0c114 	ori	gp,gp,33540
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1a4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1a8:	10877814 	ori	r2,r2,7648

    movhi r3, %hi(__bss_end)
     1ac:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1b0:	18c8fb14 	ori	r3,r3,9196

    beq r2, r3, 1f
     1b4:	10c00326 	beq	r2,r3,1c4 <_start+0x30>

0:
    stw zero, (r2)
     1b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1c0:	10fffd36 	bltu	r2,r3,1b8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1c4:	000bd940 	call	bd94 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1c8:	000bfd00 	call	bfd0 <alt_main>

000001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1cc:	003fff06 	br	1cc <alt_after_alt_main>

000001d0 <removeHeadI>:
} ListElem;

ListElem* interruptVector[2]={NULL,NULL};


Process removeHeadI(int i){
     1d0:	defff904 	addi	sp,sp,-28
     1d4:	dfc00615 	stw	ra,24(sp)
     1d8:	df000515 	stw	fp,20(sp)
     1dc:	df000504 	addi	fp,sp,20
     1e0:	e13ffe15 	stw	r4,-8(fp)
    
    ListElem* removed = interruptVector[i];
     1e4:	e0bffe17 	ldw	r2,-8(fp)
     1e8:	1085883a 	add	r2,r2,r2
     1ec:	1087883a 	add	r3,r2,r2
     1f0:	d0a6b704 	addi	r2,gp,-25892
     1f4:	1885883a 	add	r2,r3,r2
     1f8:	10800017 	ldw	r2,0(r2)
     1fc:	e0bffd15 	stw	r2,-12(fp)
    if(interruptVector[i] != NULL){
     200:	e0bffe17 	ldw	r2,-8(fp)
     204:	1085883a 	add	r2,r2,r2
     208:	1087883a 	add	r3,r2,r2
     20c:	d0a6b704 	addi	r2,gp,-25892
     210:	1885883a 	add	r2,r3,r2
     214:	10800017 	ldw	r2,0(r2)
     218:	1005003a 	cmpeq	r2,r2,zero
     21c:	10000d1e 	bne	r2,zero,254 <removeHeadI+0x84>
        interruptVector[i] = interruptVector[i] -> next;
     220:	e17ffe17 	ldw	r5,-8(fp)
     224:	e0bffe17 	ldw	r2,-8(fp)
     228:	1085883a 	add	r2,r2,r2
     22c:	1087883a 	add	r3,r2,r2
     230:	d0a6b704 	addi	r2,gp,-25892
     234:	1885883a 	add	r2,r3,r2
     238:	10800017 	ldw	r2,0(r2)
     23c:	11000117 	ldw	r4,4(r2)
     240:	2945883a 	add	r2,r5,r5
     244:	1087883a 	add	r3,r2,r2
     248:	d0a6b704 	addi	r2,gp,-25892
     24c:	1885883a 	add	r2,r3,r2
     250:	11000015 	stw	r4,0(r2)
    }
    if(removed != NULL){
     254:	e0bffd17 	ldw	r2,-12(fp)
     258:	1005003a 	cmpeq	r2,r2,zero
     25c:	1000081e 	bne	r2,zero,280 <removeHeadI+0xb0>
        Process result = removed -> p; 
     260:	e0bffd17 	ldw	r2,-12(fp)
     264:	10800017 	ldw	r2,0(r2)
     268:	e0bffc15 	stw	r2,-16(fp)
		free(removed); 
     26c:	e13ffd17 	ldw	r4,-12(fp)
     270:	0001fc40 	call	1fc4 <free>
		return result;
     274:	e0bffc17 	ldw	r2,-16(fp)
     278:	e0bfff15 	stw	r2,-4(fp)
     27c:	00000306 	br	28c <removeHeadI+0xbc>
    }
    else{
        Process result = NULL;
     280:	e03ffb15 	stw	zero,-20(fp)
        return result;
     284:	e0bffb17 	ldw	r2,-20(fp)
     288:	e0bfff15 	stw	r2,-4(fp)
     28c:	e0bfff17 	ldw	r2,-4(fp)
    }  
}
     290:	e037883a 	mov	sp,fp
     294:	dfc00117 	ldw	ra,4(sp)
     298:	df000017 	ldw	fp,0(sp)
     29c:	dec00204 	addi	sp,sp,8
     2a0:	f800283a 	ret

000002a4 <insertTail>:

void insertTail(int i, Process toBeInserted){
     2a4:	defffa04 	addi	sp,sp,-24
     2a8:	dfc00515 	stw	ra,20(sp)
     2ac:	df000415 	stw	fp,16(sp)
     2b0:	df000404 	addi	fp,sp,16
     2b4:	e13ffe15 	stw	r4,-8(fp)
     2b8:	e17fff15 	stw	r5,-4(fp)
    
    ListElem* elem = malloc(sizeof(ListElem));
     2bc:	01000204 	movi	r4,8
     2c0:	0001fd80 	call	1fd8 <malloc>
     2c4:	e0bffd15 	stw	r2,-12(fp)
    elem -> p = toBeInserted;
     2c8:	e0fffd17 	ldw	r3,-12(fp)
     2cc:	e0bfff17 	ldw	r2,-4(fp)
     2d0:	18800015 	stw	r2,0(r3)
    elem -> next = NULL;
     2d4:	e0bffd17 	ldw	r2,-12(fp)
     2d8:	10000115 	stw	zero,4(r2)
    
    ListElem* temp= NULL;
     2dc:	e03ffc15 	stw	zero,-16(fp)
    if(interruptVector[i] == NULL){
     2e0:	e0bffe17 	ldw	r2,-8(fp)
     2e4:	1085883a 	add	r2,r2,r2
     2e8:	1087883a 	add	r3,r2,r2
     2ec:	d0a6b704 	addi	r2,gp,-25892
     2f0:	1885883a 	add	r2,r3,r2
     2f4:	10800017 	ldw	r2,0(r2)
     2f8:	1004c03a 	cmpne	r2,r2,zero
     2fc:	1000081e 	bne	r2,zero,320 <insertTail+0x7c>
        
       interruptVector[i] = elem; 
     300:	e0bffe17 	ldw	r2,-8(fp)
     304:	1085883a 	add	r2,r2,r2
     308:	1087883a 	add	r3,r2,r2
     30c:	d0a6b704 	addi	r2,gp,-25892
     310:	1887883a 	add	r3,r3,r2
     314:	e0bffd17 	ldw	r2,-12(fp)
     318:	18800015 	stw	r2,0(r3)
     31c:	00001206 	br	368 <insertTail+0xc4>
    }
    else{
        
        temp = interruptVector[i];
     320:	e0bffe17 	ldw	r2,-8(fp)
     324:	1085883a 	add	r2,r2,r2
     328:	1087883a 	add	r3,r2,r2
     32c:	d0a6b704 	addi	r2,gp,-25892
     330:	1885883a 	add	r2,r3,r2
     334:	10800017 	ldw	r2,0(r2)
     338:	e0bffc15 	stw	r2,-16(fp)
        while((temp -> next) != NULL){
     33c:	00000306 	br	34c <insertTail+0xa8>
        
            temp = temp -> next;
     340:	e0bffc17 	ldw	r2,-16(fp)
     344:	10800117 	ldw	r2,4(r2)
     348:	e0bffc15 	stw	r2,-16(fp)
       interruptVector[i] = elem; 
    }
    else{
        
        temp = interruptVector[i];
        while((temp -> next) != NULL){
     34c:	e0bffc17 	ldw	r2,-16(fp)
     350:	10800117 	ldw	r2,4(r2)
     354:	1004c03a 	cmpne	r2,r2,zero
     358:	103ff91e 	bne	r2,zero,340 <insertTail+0x9c>
        
            temp = temp -> next;
        }
        temp -> next = elem;  
     35c:	e0fffc17 	ldw	r3,-16(fp)
     360:	e0bffd17 	ldw	r2,-12(fp)
     364:	18800115 	stw	r2,4(r3)
    
    }
    
        
}
     368:	e037883a 	mov	sp,fp
     36c:	dfc00117 	ldw	ra,4(sp)
     370:	df000017 	ldw	fp,0(sp)
     374:	dec00204 	addi	sp,sp,8
     378:	f800283a 	ret

0000037c <handle_button_interrupts>:
/* A variable to hold the value of the button pio edge capture register. */
volatile int edge_capture = 0;


void handle_button_interrupts(void* context, alt_u32 id)
{
     37c:	defffa04 	addi	sp,sp,-24
     380:	dfc00515 	stw	ra,20(sp)
     384:	df000415 	stw	fp,16(sp)
     388:	df000404 	addi	fp,sp,16
     38c:	e13ffe15 	stw	r4,-8(fp)
     390:	e17fff15 	stw	r5,-4(fp)
    
    /* Cast context to edge_capture's type. It is important that this be 
     * declared volatile to avoid unwanted compiler optimization.
     */
    volatile int* edge_capture_ptr = (volatile int*) context;
     394:	e0bffe17 	ldw	r2,-8(fp)
     398:	e0bffd15 	stw	r2,-12(fp)
    
    /* Store the value in the Button's edge capture register in *context. */
    *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
     39c:	00808034 	movhi	r2,512
     3a0:	10940304 	addi	r2,r2,20492
     3a4:	10c00037 	ldwio	r3,0(r2)
     3a8:	e0bffd17 	ldw	r2,-12(fp)
     3ac:	10c00015 	stw	r3,0(r2)
	/* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0xf);
     3b0:	00c08034 	movhi	r3,512
     3b4:	18d40304 	addi	r3,r3,20492
     3b8:	008003c4 	movi	r2,15
     3bc:	18800035 	stwio	r2,0(r3)
    
    /* Read the PIO to delay ISR exit. This is done to prevent a spurious interrupt in systems
     * with high processor -> pio latency and fast interrupts.  */
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
     3c0:	00808034 	movhi	r2,512
     3c4:	10940304 	addi	r2,r2,20492
     3c8:	10800037 	ldwio	r2,0(r2)
    
    Process p2 = removeHeadI(1);
     3cc:	01000044 	movi	r4,1
     3d0:	00001d00 	call	1d0 <removeHeadI>
     3d4:	e0bffc15 	stw	r2,-16(fp)
   
    if(p2 != NULL){
     3d8:	e0bffc17 	ldw	r2,-16(fp)
     3dc:	1005003a 	cmpeq	r2,r2,zero
     3e0:	1000021e 	bne	r2,zero,3ec <handle_button_interrupts+0x70>
        
        transfer(p2);
     3e4:	e13ffc17 	ldw	r4,-16(fp)
     3e8:	0001c8c0 	call	1c8c <transfer>
       
    }
}
     3ec:	e037883a 	mov	sp,fp
     3f0:	dfc00117 	ldw	ra,4(sp)
     3f4:	df000017 	ldw	fp,0(sp)
     3f8:	dec00204 	addi	sp,sp,8
     3fc:	f800283a 	ret

00000400 <init_button>:

/* Initialize the button_pio. */

void init_button()
{
     400:	defffd04 	addi	sp,sp,-12
     404:	dfc00215 	stw	ra,8(sp)
     408:	df000115 	stw	fp,4(sp)
     40c:	df000104 	addi	fp,sp,4
    /* Recast the edge_capture pointer to match the alt_irq_register() function
     * prototype. */
    void* edge_capture_ptr = (void*) &edge_capture;
     410:	d0a6b904 	addi	r2,gp,-25884
     414:	e0bfff15 	stw	r2,-4(fp)
    
    /* Enable all 4 button interrupts. */
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0xf);
     418:	00c08034 	movhi	r3,512
     41c:	18d40204 	addi	r3,r3,20488
     420:	008003c4 	movi	r2,15
     424:	18800035 	stwio	r2,0(r3)
    
    /* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0xf);
     428:	00c08034 	movhi	r3,512
     42c:	18d40304 	addi	r3,r3,20492
     430:	008003c4 	movi	r2,15
     434:	18800035 	stwio	r2,0(r3)
    
    /* Register the interrupt handler. */
    alt_irq_register (BUTTONS_IRQ, edge_capture_ptr, handle_button_interrupts);
     438:	01000084 	movi	r4,2
     43c:	e17fff17 	ldw	r5,-4(fp)
     440:	01800034 	movhi	r6,0
     444:	3180df04 	addi	r6,r6,892
     448:	000bab40 	call	bab4 <alt_irq_register>
}
     44c:	e037883a 	mov	sp,fp
     450:	dfc00117 	ldw	ra,4(sp)
     454:	df000017 	ldw	fp,0(sp)
     458:	dec00204 	addi	sp,sp,8
     45c:	f800283a 	ret

00000460 <handle_timer_interrupts>:

/* A variable to set up context for timer interrupt. */
volatile int timer_capture = 0;

void handle_timer_interrupts(void* context, alt_u32 id)
{
     460:	defffb04 	addi	sp,sp,-20
     464:	dfc00415 	stw	ra,16(sp)
     468:	df000315 	stw	fp,12(sp)
     46c:	df000304 	addi	fp,sp,12
     470:	e13ffe15 	stw	r4,-8(fp)
     474:	e17fff15 	stw	r5,-4(fp)
	/* clear the interrupt */
	IOWR_ALTERA_AVALON_TIMER_STATUS (TIMER_BASE, 0);
     478:	00808034 	movhi	r2,512
     47c:	10942804 	addi	r2,r2,20640
     480:	10000035 	stwio	zero,0(r2)

	Process p2 = removeHeadI(0);
     484:	0009883a 	mov	r4,zero
     488:	00001d00 	call	1d0 <removeHeadI>
     48c:	e0bffd15 	stw	r2,-12(fp)
    if(p2 != NULL){
     490:	e0bffd17 	ldw	r2,-12(fp)
     494:	1005003a 	cmpeq	r2,r2,zero
     498:	1000021e 	bne	r2,zero,4a4 <handle_timer_interrupts+0x44>
        transfer(p2);
     49c:	e13ffd17 	ldw	r4,-12(fp)
     4a0:	0001c8c0 	call	1c8c <transfer>
    }
}
     4a4:	e037883a 	mov	sp,fp
     4a8:	dfc00117 	ldw	ra,4(sp)
     4ac:	df000017 	ldw	fp,0(sp)
     4b0:	dec00204 	addi	sp,sp,8
     4b4:	f800283a 	ret

000004b8 <init_clock>:

void init_clock()
{
     4b8:	defffd04 	addi	sp,sp,-12
     4bc:	dfc00215 	stw	ra,8(sp)
     4c0:	df000115 	stw	fp,4(sp)
     4c4:	df000104 	addi	fp,sp,4
    
  void* timer_capture_ptr = (void*) &timer_capture;  
     4c8:	d0a6ba04 	addi	r2,gp,-25880
     4cc:	e0bfff15 	stw	r2,-4(fp)
  /* set to free running mode */
  IOWR_ALTERA_AVALON_TIMER_CONTROL (TIMER_BASE, 
     4d0:	00c08034 	movhi	r3,512
     4d4:	18d42904 	addi	r3,r3,20644
     4d8:	008001c4 	movi	r2,7
     4dc:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_ITO_MSK  |
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */ 
  alt_irq_register (TIMER_IRQ, timer_capture_ptr, handle_timer_interrupts);  
     4e0:	0009883a 	mov	r4,zero
     4e4:	e17fff17 	ldw	r5,-4(fp)
     4e8:	01800034 	movhi	r6,0
     4ec:	31811804 	addi	r6,r6,1120
     4f0:	000bab40 	call	bab4 <alt_irq_register>
  
}
     4f4:	e037883a 	mov	sp,fp
     4f8:	dfc00117 	ldw	ra,4(sp)
     4fc:	df000017 	ldw	fp,0(sp)
     500:	dec00204 	addi	sp,sp,8
     504:	f800283a 	ret

00000508 <addLast>:
            Utility functions for list manipulation
 ***********************************************************
 ***********************************************************/

// add element to the tail of the list
void addLast(int* list, int processId) {
     508:	defffc04 	addi	sp,sp,-16
     50c:	df000315 	stw	fp,12(sp)
     510:	df000304 	addi	fp,sp,12
     514:	e13ffe15 	stw	r4,-8(fp)
     518:	e17fff15 	stw	r5,-4(fp)

    if (*list == -1){
     51c:	e0bffe17 	ldw	r2,-8(fp)
     520:	10800017 	ldw	r2,0(r2)
     524:	10bfffd8 	cmpnei	r2,r2,-1
     528:	1000041e 	bne	r2,zero,53c <addLast+0x34>
        // list is empty
        *list = processId;
     52c:	e0fffe17 	ldw	r3,-8(fp)
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	18800015 	stw	r2,0(r3)
     538:	00002106 	br	5c0 <addLast+0xb8>
    }
    else {
        int temp = *list;
     53c:	e0bffe17 	ldw	r2,-8(fp)
     540:	10800017 	ldw	r2,0(r2)
     544:	e0bffd15 	stw	r2,-12(fp)
        while (processes[temp].next != -1){
     548:	00000706 	br	568 <addLast+0x60>
            temp = processes[temp].next;
     54c:	e0bffd17 	ldw	r2,-12(fp)
     550:	00c00074 	movhi	r3,1
     554:	18c7b804 	addi	r3,r3,7904
     558:	10800d24 	muli	r2,r2,52
     55c:	10c5883a 	add	r2,r2,r3
     560:	10800017 	ldw	r2,0(r2)
     564:	e0bffd15 	stw	r2,-12(fp)
        // list is empty
        *list = processId;
    }
    else {
        int temp = *list;
        while (processes[temp].next != -1){
     568:	e0bffd17 	ldw	r2,-12(fp)
     56c:	00c00074 	movhi	r3,1
     570:	18c7b804 	addi	r3,r3,7904
     574:	10800d24 	muli	r2,r2,52
     578:	10c5883a 	add	r2,r2,r3
     57c:	10800017 	ldw	r2,0(r2)
     580:	10bfffd8 	cmpnei	r2,r2,-1
     584:	103ff11e 	bne	r2,zero,54c <addLast+0x44>
            temp = processes[temp].next;
        }
        processes[temp].next = processId;
     588:	e0bffd17 	ldw	r2,-12(fp)
     58c:	00c00074 	movhi	r3,1
     590:	18c7b804 	addi	r3,r3,7904
     594:	10800d24 	muli	r2,r2,52
     598:	10c7883a 	add	r3,r2,r3
     59c:	e0bfff17 	ldw	r2,-4(fp)
     5a0:	18800015 	stw	r2,0(r3)
        processes[processId].next = -1;
     5a4:	e0bfff17 	ldw	r2,-4(fp)
     5a8:	00c00074 	movhi	r3,1
     5ac:	18c7b804 	addi	r3,r3,7904
     5b0:	10800d24 	muli	r2,r2,52
     5b4:	10c7883a 	add	r3,r2,r3
     5b8:	00bfffc4 	movi	r2,-1
     5bc:	18800015 	stw	r2,0(r3)
    }

}
     5c0:	e037883a 	mov	sp,fp
     5c4:	df000017 	ldw	fp,0(sp)
     5c8:	dec00104 	addi	sp,sp,4
     5cc:	f800283a 	ret

000005d0 <addFirst>:

// add element to the head of list
void addFirst(int* list, int processId){
     5d0:	defffd04 	addi	sp,sp,-12
     5d4:	df000215 	stw	fp,8(sp)
     5d8:	df000204 	addi	fp,sp,8
     5dc:	e13ffe15 	stw	r4,-8(fp)
     5e0:	e17fff15 	stw	r5,-4(fp)

    if (*list == -1){
     5e4:	e0bffe17 	ldw	r2,-8(fp)
     5e8:	10800017 	ldw	r2,0(r2)
     5ec:	10bfffd8 	cmpnei	r2,r2,-1
     5f0:	1000041e 	bne	r2,zero,604 <addFirst+0x34>
        *list = processId;
     5f4:	e0fffe17 	ldw	r3,-8(fp)
     5f8:	e0bfff17 	ldw	r2,-4(fp)
     5fc:	18800015 	stw	r2,0(r3)
     600:	00000b06 	br	630 <addFirst+0x60>
    }
    else {
        processes[processId].next = *list;
     604:	e13fff17 	ldw	r4,-4(fp)
     608:	e0bffe17 	ldw	r2,-8(fp)
     60c:	11400017 	ldw	r5,0(r2)
     610:	00c00074 	movhi	r3,1
     614:	18c7b804 	addi	r3,r3,7904
     618:	20800d24 	muli	r2,r4,52
     61c:	10c5883a 	add	r2,r2,r3
     620:	11400015 	stw	r5,0(r2)
        *list = processId;
     624:	e0fffe17 	ldw	r3,-8(fp)
     628:	e0bfff17 	ldw	r2,-4(fp)
     62c:	18800015 	stw	r2,0(r3)
    }
}
     630:	e037883a 	mov	sp,fp
     634:	df000017 	ldw	fp,0(sp)
     638:	dec00104 	addi	sp,sp,4
     63c:	f800283a 	ret

00000640 <removeHead>:

// remove element that is head of the list
int removeHead(int* list){
     640:	defffa04 	addi	sp,sp,-24
     644:	dfc00515 	stw	ra,20(sp)
     648:	df000415 	stw	fp,16(sp)
     64c:	df000404 	addi	fp,sp,16
     650:	e13ffe15 	stw	r4,-8(fp)
    if (*list == -1){
     654:	e0bffe17 	ldw	r2,-8(fp)
     658:	10800017 	ldw	r2,0(r2)
     65c:	10bfffd8 	cmpnei	r2,r2,-1
     660:	1000061e 	bne	r2,zero,67c <removeHead+0x3c>
        printf("List is empty in remove head!\n");
     664:	01000074 	movhi	r4,1
     668:	21389004 	addi	r4,r4,-7616
     66c:	00028440 	call	2844 <puts>
        return(-1);
     670:	00bfffc4 	movi	r2,-1
     674:	e0bfff15 	stw	r2,-4(fp)
     678:	00001806 	br	6dc <removeHead+0x9c>
    }
    else {
        int head = *list;
     67c:	e0bffe17 	ldw	r2,-8(fp)
     680:	10800017 	ldw	r2,0(r2)
     684:	e0bffd15 	stw	r2,-12(fp)
        int next = processes[*list].next;
     688:	e0bffe17 	ldw	r2,-8(fp)
     68c:	10800017 	ldw	r2,0(r2)
     690:	00c00074 	movhi	r3,1
     694:	18c7b804 	addi	r3,r3,7904
     698:	10800d24 	muli	r2,r2,52
     69c:	10c5883a 	add	r2,r2,r3
     6a0:	10800017 	ldw	r2,0(r2)
     6a4:	e0bffc15 	stw	r2,-16(fp)
        processes[*list].next = -1;
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	10800017 	ldw	r2,0(r2)
     6b0:	00c00074 	movhi	r3,1
     6b4:	18c7b804 	addi	r3,r3,7904
     6b8:	10800d24 	muli	r2,r2,52
     6bc:	10c7883a 	add	r3,r2,r3
     6c0:	00bfffc4 	movi	r2,-1
     6c4:	18800015 	stw	r2,0(r3)
        *list = next;
     6c8:	e0fffe17 	ldw	r3,-8(fp)
     6cc:	e0bffc17 	ldw	r2,-16(fp)
     6d0:	18800015 	stw	r2,0(r3)
        return head;
     6d4:	e0bffd17 	ldw	r2,-12(fp)
     6d8:	e0bfff15 	stw	r2,-4(fp)
     6dc:	e0bfff17 	ldw	r2,-4(fp)
    }
}
     6e0:	e037883a 	mov	sp,fp
     6e4:	dfc00117 	ldw	ra,4(sp)
     6e8:	df000017 	ldw	fp,0(sp)
     6ec:	dec00204 	addi	sp,sp,8
     6f0:	f800283a 	ret

000006f4 <size>:

int size(int* list) {
     6f4:	defffd04 	addi	sp,sp,-12
     6f8:	df000215 	stw	fp,8(sp)
     6fc:	df000204 	addi	fp,sp,8
     700:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i=0 ; *list != -1 ; i++) {
     704:	e03ffe15 	stw	zero,-8(fp)
     708:	00000a06 	br	734 <size+0x40>
		list = &processes[*list].next;
     70c:	e0bfff17 	ldw	r2,-4(fp)
     710:	10800017 	ldw	r2,0(r2)
     714:	10c00d24 	muli	r3,r2,52
     718:	00800074 	movhi	r2,1
     71c:	1087b804 	addi	r2,r2,7904
     720:	10c5883a 	add	r2,r2,r3
     724:	e0bfff15 	stw	r2,-4(fp)
    }
}

int size(int* list) {
	int i;
	for (i=0 ; *list != -1 ; i++) {
     728:	e0bffe17 	ldw	r2,-8(fp)
     72c:	10800044 	addi	r2,r2,1
     730:	e0bffe15 	stw	r2,-8(fp)
     734:	e0bfff17 	ldw	r2,-4(fp)
     738:	10800017 	ldw	r2,0(r2)
     73c:	10bfffd8 	cmpnei	r2,r2,-1
     740:	103ff21e 	bne	r2,zero,70c <size+0x18>
		list = &processes[*list].next;
	}

	return i;
     744:	e0bffe17 	ldw	r2,-8(fp)
}
     748:	e037883a 	mov	sp,fp
     74c:	df000017 	ldw	fp,0(sp)
     750:	dec00104 	addi	sp,sp,4
     754:	f800283a 	ret

00000758 <head>:

// returns head of the list
int head(int* list){
     758:	defffc04 	addi	sp,sp,-16
     75c:	dfc00315 	stw	ra,12(sp)
     760:	df000215 	stw	fp,8(sp)
     764:	df000204 	addi	fp,sp,8
     768:	e13ffe15 	stw	r4,-8(fp)
    if (*list == -1){
     76c:	e0bffe17 	ldw	r2,-8(fp)
     770:	10800017 	ldw	r2,0(r2)
     774:	10bfffd8 	cmpnei	r2,r2,-1
     778:	1000061e 	bne	r2,zero,794 <head+0x3c>
        printf("List is empty in head!\n");
     77c:	01000074 	movhi	r4,1
     780:	21389804 	addi	r4,r4,-7584
     784:	00028440 	call	2844 <puts>
        return(-1);
     788:	00bfffc4 	movi	r2,-1
     78c:	e0bfff15 	stw	r2,-4(fp)
     790:	00000306 	br	7a0 <head+0x48>
    }
    else {
        return *list;
     794:	e0bffe17 	ldw	r2,-8(fp)
     798:	10800017 	ldw	r2,0(r2)
     79c:	e0bfff15 	stw	r2,-4(fp)
     7a0:	e0bfff17 	ldw	r2,-4(fp)
    }
}
     7a4:	e037883a 	mov	sp,fp
     7a8:	dfc00117 	ldw	ra,4(sp)
     7ac:	df000017 	ldw	fp,0(sp)
     7b0:	dec00204 	addi	sp,sp,8
     7b4:	f800283a 	ret

000007b8 <createProcess>:
 ***********************************************************
                    Kernel functions
 ***********************************************************
 ***********************************************************/

void createProcess (void (*f), int stackSize) {
     7b8:	defffa04 	addi	sp,sp,-24
     7bc:	dfc00515 	stw	ra,20(sp)
     7c0:	df000415 	stw	fp,16(sp)
     7c4:	df000404 	addi	fp,sp,16
     7c8:	e13ffe15 	stw	r4,-8(fp)
     7cc:	e17fff15 	stw	r5,-4(fp)
	if (nextProcessId == MAXPROCESS){
     7d0:	d0a6bb17 	ldw	r2,-25876(gp)
     7d4:	10800298 	cmpnei	r2,r2,10
     7d8:	1000051e 	bne	r2,zero,7f0 <createProcess+0x38>
		printf("Error: Maximum number of processes reached!\n");
     7dc:	01000074 	movhi	r4,1
     7e0:	21389e04 	addi	r4,r4,-7560
     7e4:	00028440 	call	2844 <puts>
		exit(1);
     7e8:	01000044 	movi	r4,1
     7ec:	0001f8c0 	call	1f8c <exit>
	}

	Process process;
	unsigned int* stack = malloc(stackSize);
     7f0:	e13fff17 	ldw	r4,-4(fp)
     7f4:	0001fd80 	call	1fd8 <malloc>
     7f8:	e0bffc15 	stw	r2,-16(fp)
	process = newProcess(f, stack, stackSize);
     7fc:	e13ffe17 	ldw	r4,-8(fp)
     800:	e17ffc17 	ldw	r5,-16(fp)
     804:	e1bfff17 	ldw	r6,-4(fp)
     808:	0001c300 	call	1c30 <newProcess>
     80c:	e0bffd15 	stw	r2,-12(fp)
	processes[nextProcessId].next = -1;
     810:	d0a6bb17 	ldw	r2,-25876(gp)
     814:	00c00074 	movhi	r3,1
     818:	18c7b804 	addi	r3,r3,7904
     81c:	10800d24 	muli	r2,r2,52
     820:	10c7883a 	add	r3,r2,r3
     824:	00bfffc4 	movi	r2,-1
     828:	18800015 	stw	r2,0(r3)
	processes[nextProcessId].p = process;
     82c:	d0a6bb17 	ldw	r2,-25876(gp)
     830:	00c00074 	movhi	r3,1
     834:	18c7b804 	addi	r3,r3,7904
     838:	10800d24 	muli	r2,r2,52
     83c:	10c5883a 	add	r2,r2,r3
     840:	10c00104 	addi	r3,r2,4
     844:	e0bffd17 	ldw	r2,-12(fp)
     848:	18800015 	stw	r2,0(r3)
	processes[nextProcessId].monitorsStackPos = 0;
     84c:	d0a6bb17 	ldw	r2,-25876(gp)
     850:	00c00074 	movhi	r3,1
     854:	18c7b804 	addi	r3,r3,7904
     858:	10800d24 	muli	r2,r2,52
     85c:	10c5883a 	add	r2,r2,r3
     860:	10800c04 	addi	r2,r2,48
     864:	10000015 	stw	zero,0(r2)
	// add process to the list of ready Processes
	addLast(&readyList, nextProcessId);
     868:	d166bb17 	ldw	r5,-25876(gp)
     86c:	d1200004 	addi	r4,gp,-32768
     870:	00005080 	call	508 <addLast>
	nextProcessId++;
     874:	d0a6bb17 	ldw	r2,-25876(gp)
     878:	10800044 	addi	r2,r2,1
     87c:	d0a6bb15 	stw	r2,-25876(gp)
}
     880:	e037883a 	mov	sp,fp
     884:	dfc00117 	ldw	ra,4(sp)
     888:	df000017 	ldw	fp,0(sp)
     88c:	dec00204 	addi	sp,sp,8
     890:	f800283a 	ret

00000894 <currentProcessId>:

inline int currentProcessId(void) {
     894:	defffe04 	addi	sp,sp,-8
     898:	dfc00115 	stw	ra,4(sp)
     89c:	df000015 	stw	fp,0(sp)
     8a0:	d839883a 	mov	fp,sp
	return head(&readyList);
     8a4:	d1200004 	addi	r4,gp,-32768
     8a8:	00007580 	call	758 <head>
}
     8ac:	e037883a 	mov	sp,fp
     8b0:	dfc00117 	ldw	ra,4(sp)
     8b4:	df000017 	ldw	fp,0(sp)
     8b8:	dec00204 	addi	sp,sp,8
     8bc:	f800283a 	ret

000008c0 <currentMonitorID>:

inline int currentMonitorID(void) {
     8c0:	defffd04 	addi	sp,sp,-12
     8c4:	dfc00215 	stw	ra,8(sp)
     8c8:	df000115 	stw	fp,4(sp)
     8cc:	df000104 	addi	fp,sp,4
	printf(" currentMonitorID: currentProcess = %d\n", currentProcessId());
     8d0:	00008940 	call	894 <currentProcessId>
     8d4:	100b883a 	mov	r5,r2
     8d8:	01000074 	movhi	r4,1
     8dc:	2138a904 	addi	r4,r4,-7516
     8e0:	000272c0 	call	272c <printf>
	FLUSH
	const ProcessDescriptor* const process = &processes[currentProcessId()];
     8e4:	00008940 	call	894 <currentProcessId>
     8e8:	10800d24 	muli	r2,r2,52
     8ec:	1007883a 	mov	r3,r2
     8f0:	00800074 	movhi	r2,1
     8f4:	1087b804 	addi	r2,r2,7904
     8f8:	1885883a 	add	r2,r3,r2
     8fc:	e0bfff15 	stw	r2,-4(fp)
	printf(" currentMonitorID: stackPos = %d\n", process->monitorsStackPos);
     900:	e0bfff17 	ldw	r2,-4(fp)
     904:	11400c17 	ldw	r5,48(r2)
     908:	01000074 	movhi	r4,1
     90c:	2138b304 	addi	r4,r4,-7476
     910:	000272c0 	call	272c <printf>
	FLUSH
	return process->monitorsStack[process->monitorsStackPos-1];
     914:	e0bfff17 	ldw	r2,-4(fp)
     918:	10800c17 	ldw	r2,48(r2)
     91c:	10bfffc4 	addi	r2,r2,-1
     920:	e0ffff17 	ldw	r3,-4(fp)
     924:	1085883a 	add	r2,r2,r2
     928:	1085883a 	add	r2,r2,r2
     92c:	10c5883a 	add	r2,r2,r3
     930:	10800204 	addi	r2,r2,8
     934:	10800017 	ldw	r2,0(r2)
}
     938:	e037883a 	mov	sp,fp
     93c:	dfc00117 	ldw	ra,4(sp)
     940:	df000017 	ldw	fp,0(sp)
     944:	dec00204 	addi	sp,sp,8
     948:	f800283a 	ret

0000094c <currentMonitor>:

inline Monitor* currentMonitor(void) {
     94c:	defffe04 	addi	sp,sp,-8
     950:	dfc00115 	stw	ra,4(sp)
     954:	df000015 	stw	fp,0(sp)
     958:	d839883a 	mov	fp,sp
	return &monitors[currentMonitorID()];
     95c:	00008c00 	call	8c0 <currentMonitorID>
     960:	10800324 	muli	r2,r2,12
     964:	1007883a 	mov	r3,r2
     968:	00800074 	movhi	r2,1
     96c:	10879a04 	addi	r2,r2,7784
     970:	1885883a 	add	r2,r3,r2
}
     974:	e037883a 	mov	sp,fp
     978:	dfc00117 	ldw	ra,4(sp)
     97c:	df000017 	ldw	fp,0(sp)
     980:	dec00204 	addi	sp,sp,8
     984:	f800283a 	ret

00000988 <start>:

void start() {
     988:	defffd04 	addi	sp,sp,-12
     98c:	dfc00215 	stw	ra,8(sp)
     990:	df000115 	stw	fp,4(sp)
     994:	df000104 	addi	fp,sp,4
    printf("Starting kernel...\n");
     998:	01000074 	movhi	r4,1
     99c:	2138bc04 	addi	r4,r4,-7440
     9a0:	00028440 	call	2844 <puts>
    if (readyList == -1){
     9a4:	d0a00017 	ldw	r2,-32768(gp)
     9a8:	10bfffd8 	cmpnei	r2,r2,-1
     9ac:	1000051e 	bne	r2,zero,9c4 <start+0x3c>
        printf("Error: No process in the ready list!\n");
     9b0:	01000074 	movhi	r4,1
     9b4:	2138c104 	addi	r4,r4,-7420
     9b8:	00028440 	call	2844 <puts>
        exit(1);
     9bc:	01000044 	movi	r4,1
     9c0:	0001f8c0 	call	1f8c <exit>
    }
    Process process = processes[head(&readyList)].p;
     9c4:	d1200004 	addi	r4,gp,-32768
     9c8:	00007580 	call	758 <head>
     9cc:	00c00074 	movhi	r3,1
     9d0:	18c7b804 	addi	r3,r3,7904
     9d4:	10800d24 	muli	r2,r2,52
     9d8:	10c5883a 	add	r2,r2,r3
     9dc:	10800104 	addi	r2,r2,4
     9e0:	10800017 	ldw	r2,0(r2)
     9e4:	e0bfff15 	stw	r2,-4(fp)
    transfer(process);
     9e8:	e13fff17 	ldw	r4,-4(fp)
     9ec:	0001c8c0 	call	1c8c <transfer>
}
     9f0:	e037883a 	mov	sp,fp
     9f4:	dfc00117 	ldw	ra,4(sp)
     9f8:	df000017 	ldw	fp,0(sp)
     9fc:	dec00204 	addi	sp,sp,8
     a00:	f800283a 	ret

00000a04 <createMonitor>:


int createMonitor() {
     a04:	defffe04 	addi	sp,sp,-8
     a08:	dfc00115 	stw	ra,4(sp)
     a0c:	df000015 	stw	fp,0(sp)
     a10:	d839883a 	mov	fp,sp
	if(nextMonitorId == MAXMONITORS) {
     a14:	d0a6bc17 	ldw	r2,-25872(gp)
     a18:	10800298 	cmpnei	r2,r2,10
     a1c:	1000051e 	bne	r2,zero,a34 <createMonitor+0x30>
		printf("Error: maximum number of monitors reached!\n");
     a20:	01000074 	movhi	r4,1
     a24:	2138cb04 	addi	r4,r4,-7380
     a28:	00028440 	call	2844 <puts>
		exit(1);
     a2c:	01000044 	movi	r4,1
     a30:	0001f8c0 	call	1f8c <exit>
	}

	monitors[nextMonitorId].isOccupied 	= 0;
     a34:	d0a6bc17 	ldw	r2,-25872(gp)
     a38:	00c00074 	movhi	r3,1
     a3c:	18c79a04 	addi	r3,r3,7784
     a40:	10800324 	muli	r2,r2,12
     a44:	10c5883a 	add	r2,r2,r3
     a48:	1000000d 	sth	zero,0(r2)
	monitors[nextMonitorId].readyList	= -1;
     a4c:	d0a6bc17 	ldw	r2,-25872(gp)
     a50:	00c00074 	movhi	r3,1
     a54:	18c79a04 	addi	r3,r3,7784
     a58:	10800324 	muli	r2,r2,12
     a5c:	10c5883a 	add	r2,r2,r3
     a60:	10c00204 	addi	r3,r2,8
     a64:	00bfffc4 	movi	r2,-1
     a68:	18800015 	stw	r2,0(r3)
	monitors[nextMonitorId].waitingList = -1;
     a6c:	d0a6bc17 	ldw	r2,-25872(gp)
     a70:	00c00074 	movhi	r3,1
     a74:	18c79a04 	addi	r3,r3,7784
     a78:	10800324 	muli	r2,r2,12
     a7c:	10c5883a 	add	r2,r2,r3
     a80:	10c00104 	addi	r3,r2,4
     a84:	00bfffc4 	movi	r2,-1
     a88:	18800015 	stw	r2,0(r3)

	return nextMonitorId++;
     a8c:	d0a6bc17 	ldw	r2,-25872(gp)
     a90:	1007883a 	mov	r3,r2
     a94:	10800044 	addi	r2,r2,1
     a98:	d0a6bc15 	stw	r2,-25872(gp)
     a9c:	1805883a 	mov	r2,r3
}
     aa0:	e037883a 	mov	sp,fp
     aa4:	dfc00117 	ldw	ra,4(sp)
     aa8:	df000017 	ldw	fp,0(sp)
     aac:	dec00204 	addi	sp,sp,8
     ab0:	f800283a 	ret

00000ab4 <enterMonitor>:

void enterMonitor(int monitorID) {
     ab4:	defffa04 	addi	sp,sp,-24
     ab8:	dfc00515 	stw	ra,20(sp)
     abc:	df000415 	stw	fp,16(sp)
     ac0:	dc000315 	stw	r16,12(sp)
     ac4:	df000304 	addi	fp,sp,12
     ac8:	e13fff15 	stw	r4,-4(fp)
	printf("#begin enterMonitor\n");
     acc:	01000074 	movhi	r4,1
     ad0:	2138d604 	addi	r4,r4,-7336
     ad4:	00028440 	call	2844 <puts>
	// Waiting on the monitor
	if (monitors[monitorID].isOccupied) {
     ad8:	e0bfff17 	ldw	r2,-4(fp)
     adc:	00c00074 	movhi	r3,1
     ae0:	18c79a04 	addi	r3,r3,7784
     ae4:	10800324 	muli	r2,r2,12
     ae8:	10c5883a 	add	r2,r2,r3
     aec:	1080000b 	ldhu	r2,0(r2)
     af0:	10bfffcc 	andi	r2,r2,65535
     af4:	10a0001c 	xori	r2,r2,32768
     af8:	10a00004 	addi	r2,r2,-32768
     afc:	1005003a 	cmpeq	r2,r2,zero
     b00:	1000141e 	bne	r2,zero,b54 <enterMonitor+0xa0>
		// gives CPU to first process on ready list
		addFirst(&(monitors[monitorID].readyList), removeHead(&readyList));
     b04:	e0bfff17 	ldw	r2,-4(fp)
     b08:	10800324 	muli	r2,r2,12
     b0c:	10c00204 	addi	r3,r2,8
     b10:	00800074 	movhi	r2,1
     b14:	10879a04 	addi	r2,r2,7784
     b18:	18a1883a 	add	r16,r3,r2
     b1c:	d1200004 	addi	r4,gp,-32768
     b20:	00006400 	call	640 <removeHead>
     b24:	100b883a 	mov	r5,r2
     b28:	8009883a 	mov	r4,r16
     b2c:	00005d00 	call	5d0 <addFirst>
		transfer(processes[head(&readyList)].p);
     b30:	d1200004 	addi	r4,gp,-32768
     b34:	00007580 	call	758 <head>
     b38:	00c00074 	movhi	r3,1
     b3c:	18c7b804 	addi	r3,r3,7904
     b40:	10800d24 	muli	r2,r2,52
     b44:	10c5883a 	add	r2,r2,r3
     b48:	10800104 	addi	r2,r2,4
     b4c:	11000017 	ldw	r4,0(r2)
     b50:	0001c8c0 	call	1c8c <transfer>
    }
    // The guy who unfroze us put us on top of ready list and was "occupying" the monitor

    // Actually entering monitor
    // monitor-level stuff
    monitors[monitorID].isOccupied = 1;
     b54:	e0bfff17 	ldw	r2,-4(fp)
     b58:	00c00074 	movhi	r3,1
     b5c:	18c79a04 	addi	r3,r3,7784
     b60:	10800324 	muli	r2,r2,12
     b64:	10c7883a 	add	r3,r2,r3
     b68:	00800044 	movi	r2,1
     b6c:	1880000d 	sth	r2,0(r3)
    ProcessDescriptor* process = &processes[currentProcessId()];
     b70:	00008940 	call	894 <currentProcessId>
     b74:	10800d24 	muli	r2,r2,52
     b78:	1007883a 	mov	r3,r2
     b7c:	00800074 	movhi	r2,1
     b80:	1087b804 	addi	r2,r2,7904
     b84:	1885883a 	add	r2,r3,r2
     b88:	e0bffe15 	stw	r2,-8(fp)
    // process-level stuff
    const int pos = process->monitorsStackPos;
     b8c:	e0bffe17 	ldw	r2,-8(fp)
     b90:	10800c17 	ldw	r2,48(r2)
     b94:	e0bffd15 	stw	r2,-12(fp)
    process->monitorsStack[pos] = monitorID;
     b98:	e0bffd17 	ldw	r2,-12(fp)
     b9c:	e0fffe17 	ldw	r3,-8(fp)
     ba0:	1085883a 	add	r2,r2,r2
     ba4:	1085883a 	add	r2,r2,r2
     ba8:	10c5883a 	add	r2,r2,r3
     bac:	10c00204 	addi	r3,r2,8
     bb0:	e0bfff17 	ldw	r2,-4(fp)
     bb4:	18800015 	stw	r2,0(r3)
	process->monitorsStackPos ++;
     bb8:	e0bffe17 	ldw	r2,-8(fp)
     bbc:	10800c17 	ldw	r2,48(r2)
     bc0:	10c00044 	addi	r3,r2,1
     bc4:	e0bffe17 	ldw	r2,-8(fp)
     bc8:	10c00c15 	stw	r3,48(r2)
	printf("#end enterMonitor, proc: %d, stackPos: %d\n", currentProcessId(), process->monitorsStackPos);
     bcc:	00008940 	call	894 <currentProcessId>
     bd0:	100b883a 	mov	r5,r2
     bd4:	e0bffe17 	ldw	r2,-8(fp)
     bd8:	11800c17 	ldw	r6,48(r2)
     bdc:	01000074 	movhi	r4,1
     be0:	2138db04 	addi	r4,r4,-7316
     be4:	000272c0 	call	272c <printf>
}
     be8:	e037883a 	mov	sp,fp
     bec:	dfc00217 	ldw	ra,8(sp)
     bf0:	df000117 	ldw	fp,4(sp)
     bf4:	dc000017 	ldw	r16,0(sp)
     bf8:	dec00304 	addi	sp,sp,12
     bfc:	f800283a 	ret

00000c00 <exitMonitor>:

void exitMonitor(void) {
     c00:	defffb04 	addi	sp,sp,-20
     c04:	dfc00415 	stw	ra,16(sp)
     c08:	df000315 	stw	fp,12(sp)
     c0c:	df000304 	addi	fp,sp,12
	printf("#begin exitMonitor, stackPos: %d\n", processes[currentProcessId()].monitorsStackPos);
     c10:	00008940 	call	894 <currentProcessId>
     c14:	00c00074 	movhi	r3,1
     c18:	18c7b804 	addi	r3,r3,7904
     c1c:	10800d24 	muli	r2,r2,52
     c20:	10c5883a 	add	r2,r2,r3
     c24:	10800c04 	addi	r2,r2,48
     c28:	11400017 	ldw	r5,0(r2)
     c2c:	01000074 	movhi	r4,1
     c30:	2138e604 	addi	r4,r4,-7272
     c34:	000272c0 	call	272c <printf>
	Monitor* mon = currentMonitor();
     c38:	000094c0 	call	94c <currentMonitor>
     c3c:	e0bfff15 	stw	r2,-4(fp)
	processes[currentProcessId()].monitorsStackPos --;
     c40:	00008940 	call	894 <currentProcessId>
     c44:	100b883a 	mov	r5,r2
     c48:	00c00074 	movhi	r3,1
     c4c:	18c7b804 	addi	r3,r3,7904
     c50:	28800d24 	muli	r2,r5,52
     c54:	10c5883a 	add	r2,r2,r3
     c58:	10800c04 	addi	r2,r2,48
     c5c:	10800017 	ldw	r2,0(r2)
     c60:	113fffc4 	addi	r4,r2,-1
     c64:	00c00074 	movhi	r3,1
     c68:	18c7b804 	addi	r3,r3,7904
     c6c:	28800d24 	muli	r2,r5,52
     c70:	10c5883a 	add	r2,r2,r3
     c74:	10800c04 	addi	r2,r2,48
     c78:	11000015 	stw	r4,0(r2)
	mon->isOccupied = 0;
     c7c:	e0bfff17 	ldw	r2,-4(fp)
     c80:	1000000d 	sth	zero,0(r2)

	// Check ready list for waiting processes
	int* const myList = &(mon->readyList);
     c84:	e0bfff17 	ldw	r2,-4(fp)
     c88:	10800204 	addi	r2,r2,8
     c8c:	e0bffe15 	stw	r2,-8(fp)
	if (*myList != -1) {
     c90:	e0bffe17 	ldw	r2,-8(fp)
     c94:	10800017 	ldw	r2,0(r2)
     c98:	10bfffe0 	cmpeqi	r2,r2,-1
     c9c:	1000121e 	bne	r2,zero,ce8 <exitMonitor+0xe8>
		int nextProcessID = removeHead(myList);
     ca0:	e13ffe17 	ldw	r4,-8(fp)
     ca4:	00006400 	call	640 <removeHead>
     ca8:	e0bffd15 	stw	r2,-12(fp)
		printf(" %d is waiting on this monitor\n", nextProcessID);
     cac:	01000074 	movhi	r4,1
     cb0:	2138ef04 	addi	r4,r4,-7236
     cb4:	e17ffd17 	ldw	r5,-12(fp)
     cb8:	000272c0 	call	272c <printf>
		FLUSH
		// Put the process on the 'global' ready list
		addFirst(&readyList, nextProcessID);
     cbc:	d1200004 	addi	r4,gp,-32768
     cc0:	e17ffd17 	ldw	r5,-12(fp)
     cc4:	00005d00 	call	5d0 <addFirst>
		transfer(processes[nextProcessID].p);
     cc8:	e0bffd17 	ldw	r2,-12(fp)
     ccc:	00c00074 	movhi	r3,1
     cd0:	18c7b804 	addi	r3,r3,7904
     cd4:	10800d24 	muli	r2,r2,52
     cd8:	10c5883a 	add	r2,r2,r3
     cdc:	10800104 	addi	r2,r2,4
     ce0:	11000017 	ldw	r4,0(r2)
     ce4:	0001c8c0 	call	1c8c <transfer>
	}
	// Doesn't do anything after transfer
	printf("#end exitMonitor\n");
     ce8:	01000074 	movhi	r4,1
     cec:	2138f704 	addi	r4,r4,-7204
     cf0:	00028440 	call	2844 <puts>
}
     cf4:	e037883a 	mov	sp,fp
     cf8:	dfc00117 	ldw	ra,4(sp)
     cfc:	df000017 	ldw	fp,0(sp)
     d00:	dec00204 	addi	sp,sp,8
     d04:	f800283a 	ret

00000d08 <wait>:

void wait(void) {
     d08:	defffa04 	addi	sp,sp,-24
     d0c:	dfc00515 	stw	ra,20(sp)
     d10:	df000415 	stw	fp,16(sp)
     d14:	dc000315 	stw	r16,12(sp)
     d18:	df000304 	addi	fp,sp,12
	Monitor* mon = currentMonitor();
     d1c:	000094c0 	call	94c <currentMonitor>
     d20:	e0bfff15 	stw	r2,-4(fp)
	mon->isOccupied = 0;
     d24:	e0bfff17 	ldw	r2,-4(fp)
     d28:	1000000d 	sth	zero,0(r2)

	// Stop current process
	addFirst(&(mon->waitingList), removeHead(&readyList));
     d2c:	e0bfff17 	ldw	r2,-4(fp)
     d30:	14000104 	addi	r16,r2,4
     d34:	d1200004 	addi	r4,gp,-32768
     d38:	00006400 	call	640 <removeHead>
     d3c:	100b883a 	mov	r5,r2
     d40:	8009883a 	mov	r4,r16
     d44:	00005d00 	call	5d0 <addFirst>


	// Find a candidate process to run
	int* const myList = &(mon->readyList);
     d48:	e0bfff17 	ldw	r2,-4(fp)
     d4c:	10800204 	addi	r2,r2,8
     d50:	e0bffe15 	stw	r2,-8(fp)
	// candidate is ready on local monitor
	if (*myList != -1) {
     d54:	e0bffe17 	ldw	r2,-8(fp)
     d58:	10800017 	ldw	r2,0(r2)
     d5c:	10bfffe0 	cmpeqi	r2,r2,-1
     d60:	10000f1e 	bne	r2,zero,da0 <wait+0x98>
		int nextProcessID = removeHead(myList);
     d64:	e13ffe17 	ldw	r4,-8(fp)
     d68:	00006400 	call	640 <removeHead>
     d6c:	e0bffd15 	stw	r2,-12(fp)
		// Put the process on the 'global' ready list
		addFirst(&readyList, nextProcessID);
     d70:	d1200004 	addi	r4,gp,-32768
     d74:	e17ffd17 	ldw	r5,-12(fp)
     d78:	00005d00 	call	5d0 <addFirst>
		transfer(processes[nextProcessID].p);
     d7c:	e0bffd17 	ldw	r2,-12(fp)
     d80:	00c00074 	movhi	r3,1
     d84:	18c7b804 	addi	r3,r3,7904
     d88:	10800d24 	muli	r2,r2,52
     d8c:	10c5883a 	add	r2,r2,r3
     d90:	10800104 	addi	r2,r2,4
     d94:	11000017 	ldw	r4,0(r2)
     d98:	0001c8c0 	call	1c8c <transfer>
     d9c:	00000906 	br	dc4 <wait+0xbc>
	}
	// no candidate on local monitor, pick one in global ready list
	else {
		transfer(processes[head(&readyList)].p);
     da0:	d1200004 	addi	r4,gp,-32768
     da4:	00007580 	call	758 <head>
     da8:	00c00074 	movhi	r3,1
     dac:	18c7b804 	addi	r3,r3,7904
     db0:	10800d24 	muli	r2,r2,52
     db4:	10c5883a 	add	r2,r2,r3
     db8:	10800104 	addi	r2,r2,4
     dbc:	11000017 	ldw	r4,0(r2)
     dc0:	0001c8c0 	call	1c8c <transfer>
	}
	// at this point, the monitor HAS to be free & we have been notified

	// we re-take the monitor
	mon->isOccupied = 1;
     dc4:	e0ffff17 	ldw	r3,-4(fp)
     dc8:	00800044 	movi	r2,1
     dcc:	1880000d 	sth	r2,0(r3)
}
     dd0:	e037883a 	mov	sp,fp
     dd4:	dfc00217 	ldw	ra,8(sp)
     dd8:	df000117 	ldw	fp,4(sp)
     ddc:	dc000017 	ldw	r16,0(sp)
     de0:	dec00304 	addi	sp,sp,12
     de4:	f800283a 	ret

00000de8 <_notify>:

/* private */ void _notify(Monitor* mon) {
     de8:	defffc04 	addi	sp,sp,-16
     dec:	dfc00315 	stw	ra,12(sp)
     df0:	df000215 	stw	fp,8(sp)
     df4:	df000204 	addi	fp,sp,8
     df8:	e13fff15 	stw	r4,-4(fp)
	int notified = removeHead(&(mon->waitingList));
     dfc:	e0bfff17 	ldw	r2,-4(fp)
     e00:	11000104 	addi	r4,r2,4
     e04:	00006400 	call	640 <removeHead>
     e08:	e0bffe15 	stw	r2,-8(fp)
	addFirst(&(mon->readyList), notified);
     e0c:	e0bfff17 	ldw	r2,-4(fp)
     e10:	11000204 	addi	r4,r2,8
     e14:	e17ffe17 	ldw	r5,-8(fp)
     e18:	00005d00 	call	5d0 <addFirst>
}
     e1c:	e037883a 	mov	sp,fp
     e20:	dfc00117 	ldw	ra,4(sp)
     e24:	df000017 	ldw	fp,0(sp)
     e28:	dec00204 	addi	sp,sp,8
     e2c:	f800283a 	ret

00000e30 <notify>:

void notify(void) {
     e30:	defffd04 	addi	sp,sp,-12
     e34:	dfc00215 	stw	ra,8(sp)
     e38:	df000115 	stw	fp,4(sp)
     e3c:	df000104 	addi	fp,sp,4
	Monitor* mon = currentMonitor();
     e40:	000094c0 	call	94c <currentMonitor>
     e44:	e0bfff15 	stw	r2,-4(fp)
	if (mon->waitingList != -1) {
     e48:	e0bfff17 	ldw	r2,-4(fp)
     e4c:	10800117 	ldw	r2,4(r2)
     e50:	10bfffe0 	cmpeqi	r2,r2,-1
     e54:	1000021e 	bne	r2,zero,e60 <notify+0x30>
		_notify(mon);
     e58:	e13fff17 	ldw	r4,-4(fp)
     e5c:	0000de80 	call	de8 <_notify>
	}
}
     e60:	e037883a 	mov	sp,fp
     e64:	dfc00117 	ldw	ra,4(sp)
     e68:	df000017 	ldw	fp,0(sp)
     e6c:	dec00204 	addi	sp,sp,8
     e70:	f800283a 	ret

00000e74 <notifyAll>:

void notifyAll(void) {
     e74:	defffd04 	addi	sp,sp,-12
     e78:	dfc00215 	stw	ra,8(sp)
     e7c:	df000115 	stw	fp,4(sp)
     e80:	df000104 	addi	fp,sp,4
	Monitor* mon = currentMonitor();
     e84:	000094c0 	call	94c <currentMonitor>
     e88:	e0bfff15 	stw	r2,-4(fp)
	while (mon->waitingList != -1) {
     e8c:	00000206 	br	e98 <notifyAll+0x24>
		_notify(mon);
     e90:	e13fff17 	ldw	r4,-4(fp)
     e94:	0000de80 	call	de8 <_notify>
	}
}

void notifyAll(void) {
	Monitor* mon = currentMonitor();
	while (mon->waitingList != -1) {
     e98:	e0bfff17 	ldw	r2,-4(fp)
     e9c:	10800117 	ldw	r2,4(r2)
     ea0:	10bfffd8 	cmpnei	r2,r2,-1
     ea4:	103ffa1e 	bne	r2,zero,e90 <notifyAll+0x1c>
		_notify(mon);
	}
}
     ea8:	e037883a 	mov	sp,fp
     eac:	dfc00117 	ldw	ra,4(sp)
     eb0:	df000017 	ldw	fp,0(sp)
     eb4:	dec00204 	addi	sp,sp,8
     eb8:	f800283a 	ret

00000ebc <yield>:

void yield(void){
     ebc:	defffc04 	addi	sp,sp,-16
     ec0:	dfc00315 	stw	ra,12(sp)
     ec4:	df000215 	stw	fp,8(sp)
     ec8:	df000204 	addi	fp,sp,8
	printf("#yield, stack pos is: %d\n", processes[currentProcessId()].monitorsStackPos);
     ecc:	00008940 	call	894 <currentProcessId>
     ed0:	00c00074 	movhi	r3,1
     ed4:	18c7b804 	addi	r3,r3,7904
     ed8:	10800d24 	muli	r2,r2,52
     edc:	10c5883a 	add	r2,r2,r3
     ee0:	10800c04 	addi	r2,r2,48
     ee4:	11400017 	ldw	r5,0(r2)
     ee8:	01000074 	movhi	r4,1
     eec:	2138fc04 	addi	r4,r4,-7184
     ef0:	000272c0 	call	272c <printf>
    int pId = removeHead(&readyList);
     ef4:	d1200004 	addi	r4,gp,-32768
     ef8:	00006400 	call	640 <removeHead>
     efc:	e0bfff15 	stw	r2,-4(fp)
    addLast(&readyList, pId);
     f00:	d1200004 	addi	r4,gp,-32768
     f04:	e17fff17 	ldw	r5,-4(fp)
     f08:	00005080 	call	508 <addLast>
    printf("process %d yielding to %d\n", pId, head(&readyList));
     f0c:	d1200004 	addi	r4,gp,-32768
     f10:	00007580 	call	758 <head>
     f14:	100d883a 	mov	r6,r2
     f18:	01000074 	movhi	r4,1
     f1c:	21390304 	addi	r4,r4,-7156
     f20:	e17fff17 	ldw	r5,-4(fp)
     f24:	000272c0 	call	272c <printf>
    Process process = processes[head(&readyList)].p;
     f28:	d1200004 	addi	r4,gp,-32768
     f2c:	00007580 	call	758 <head>
     f30:	00c00074 	movhi	r3,1
     f34:	18c7b804 	addi	r3,r3,7904
     f38:	10800d24 	muli	r2,r2,52
     f3c:	10c5883a 	add	r2,r2,r3
     f40:	10800104 	addi	r2,r2,4
     f44:	10800017 	ldw	r2,0(r2)
     f48:	e0bffe15 	stw	r2,-8(fp)
    transfer(process);
     f4c:	e13ffe17 	ldw	r4,-8(fp)
     f50:	0001c8c0 	call	1c8c <transfer>
    printf("#endYield, stack pos is: %d\n", processes[currentProcessId()].monitorsStackPos);
     f54:	00008940 	call	894 <currentProcessId>
     f58:	00c00074 	movhi	r3,1
     f5c:	18c7b804 	addi	r3,r3,7904
     f60:	10800d24 	muli	r2,r2,52
     f64:	10c5883a 	add	r2,r2,r3
     f68:	10800c04 	addi	r2,r2,48
     f6c:	11400017 	ldw	r5,0(r2)
     f70:	01000074 	movhi	r4,1
     f74:	21390a04 	addi	r4,r4,-7128
     f78:	000272c0 	call	272c <printf>
}
     f7c:	e037883a 	mov	sp,fp
     f80:	dfc00117 	ldw	ra,4(sp)
     f84:	df000017 	ldw	fp,0(sp)
     f88:	dec00204 	addi	sp,sp,8
     f8c:	f800283a 	ret

00000f90 <createEvent>:

int createEvent() {
     f90:	defffe04 	addi	sp,sp,-8
     f94:	dfc00115 	stw	ra,4(sp)
     f98:	df000015 	stw	fp,0(sp)
     f9c:	d839883a 	mov	fp,sp
	if(nextEventId == MAXEVENTS) {
     fa0:	d0a6bd17 	ldw	r2,-25868(gp)
     fa4:	10800298 	cmpnei	r2,r2,10
     fa8:	1000051e 	bne	r2,zero,fc0 <createEvent+0x30>
		printf("Error: maximum number of events reached!\n");
     fac:	01000074 	movhi	r4,1
     fb0:	21391204 	addi	r4,r4,-7096
     fb4:	00028440 	call	2844 <puts>
		exit(1);
     fb8:	01000044 	movi	r4,1
     fbc:	0001f8c0 	call	1f8c <exit>
	}
	events[nextEventId].waitingList = -1;
     fc0:	d0a6bd17 	ldw	r2,-25868(gp)
     fc4:	00c00074 	movhi	r3,1
     fc8:	18c83a04 	addi	r3,r3,8424
     fcc:	100490fa 	slli	r2,r2,3
     fd0:	10c7883a 	add	r3,r2,r3
     fd4:	00bfffc4 	movi	r2,-1
     fd8:	18800015 	stw	r2,0(r3)
	events[nextEventId].hasHappened = 0;
     fdc:	d0a6bd17 	ldw	r2,-25868(gp)
     fe0:	00c00074 	movhi	r3,1
     fe4:	18c83a04 	addi	r3,r3,8424
     fe8:	100490fa 	slli	r2,r2,3
     fec:	10c5883a 	add	r2,r2,r3
     ff0:	10800104 	addi	r2,r2,4
     ff4:	1000000d 	sth	zero,0(r2)

	return nextEventId++;
     ff8:	d0a6bd17 	ldw	r2,-25868(gp)
     ffc:	1007883a 	mov	r3,r2
    1000:	10800044 	addi	r2,r2,1
    1004:	d0a6bd15 	stw	r2,-25868(gp)
    1008:	1805883a 	mov	r2,r3
}
    100c:	e037883a 	mov	sp,fp
    1010:	dfc00117 	ldw	ra,4(sp)
    1014:	df000017 	ldw	fp,0(sp)
    1018:	dec00204 	addi	sp,sp,8
    101c:	f800283a 	ret

00001020 <attendre>:

void attendre(int eventID) {
    1020:	defffc04 	addi	sp,sp,-16
    1024:	dfc00315 	stw	ra,12(sp)
    1028:	df000215 	stw	fp,8(sp)
    102c:	dc000115 	stw	r16,4(sp)
    1030:	df000104 	addi	fp,sp,4
    1034:	e13fff15 	stw	r4,-4(fp)
	// Check if called in monitor
	if(processes[currentProcessId()].monitorsStackPos != 0) {
    1038:	00008940 	call	894 <currentProcessId>
    103c:	00c00074 	movhi	r3,1
    1040:	18c7b804 	addi	r3,r3,7904
    1044:	10800d24 	muli	r2,r2,52
    1048:	10c5883a 	add	r2,r2,r3
    104c:	10800c04 	addi	r2,r2,48
    1050:	10800017 	ldw	r2,0(r2)
    1054:	1005003a 	cmpeq	r2,r2,zero
    1058:	1000051e 	bne	r2,zero,1070 <attendre+0x50>
		printf("Error, call to event.attendre() in a monitor");
    105c:	01000074 	movhi	r4,1
    1060:	21391d04 	addi	r4,r4,-7052
    1064:	000272c0 	call	272c <printf>
		exit(1);
    1068:	01000044 	movi	r4,1
    106c:	0001f8c0 	call	1f8c <exit>
	}

	if(!events[eventID].hasHappened) {
    1070:	e0bfff17 	ldw	r2,-4(fp)
    1074:	00c00074 	movhi	r3,1
    1078:	18c83a04 	addi	r3,r3,8424
    107c:	100490fa 	slli	r2,r2,3
    1080:	10c5883a 	add	r2,r2,r3
    1084:	10800104 	addi	r2,r2,4
    1088:	1080000b 	ldhu	r2,0(r2)
    108c:	10bfffcc 	andi	r2,r2,65535
    1090:	10a0001c 	xori	r2,r2,32768
    1094:	10a00004 	addi	r2,r2,-32768
    1098:	1004c03a 	cmpne	r2,r2,zero
    109c:	1000131e 	bne	r2,zero,10ec <attendre+0xcc>
		addFirst(&(events[eventID].waitingList), removeHead(&readyList));
    10a0:	e0bfff17 	ldw	r2,-4(fp)
    10a4:	100690fa 	slli	r3,r2,3
    10a8:	00800074 	movhi	r2,1
    10ac:	10883a04 	addi	r2,r2,8424
    10b0:	18a1883a 	add	r16,r3,r2
    10b4:	d1200004 	addi	r4,gp,-32768
    10b8:	00006400 	call	640 <removeHead>
    10bc:	100b883a 	mov	r5,r2
    10c0:	8009883a 	mov	r4,r16
    10c4:	00005d00 	call	5d0 <addFirst>
		transfer(processes[head(&readyList)].p);
    10c8:	d1200004 	addi	r4,gp,-32768
    10cc:	00007580 	call	758 <head>
    10d0:	00c00074 	movhi	r3,1
    10d4:	18c7b804 	addi	r3,r3,7904
    10d8:	10800d24 	muli	r2,r2,52
    10dc:	10c5883a 	add	r2,r2,r3
    10e0:	10800104 	addi	r2,r2,4
    10e4:	11000017 	ldw	r4,0(r2)
    10e8:	0001c8c0 	call	1c8c <transfer>
	}
}
    10ec:	e037883a 	mov	sp,fp
    10f0:	dfc00217 	ldw	ra,8(sp)
    10f4:	df000117 	ldw	fp,4(sp)
    10f8:	dc000017 	ldw	r16,0(sp)
    10fc:	dec00304 	addi	sp,sp,12
    1100:	f800283a 	ret

00001104 <declencher>:

void declencher(int eventID) {
    1104:	defffc04 	addi	sp,sp,-16
    1108:	dfc00315 	stw	ra,12(sp)
    110c:	df000215 	stw	fp,8(sp)
    1110:	df000204 	addi	fp,sp,8
    1114:	e13fff15 	stw	r4,-4(fp)
	events[eventID].hasHappened = 1;
    1118:	e0bfff17 	ldw	r2,-4(fp)
    111c:	00c00074 	movhi	r3,1
    1120:	18c83a04 	addi	r3,r3,8424
    1124:	100490fa 	slli	r2,r2,3
    1128:	10c5883a 	add	r2,r2,r3
    112c:	10c00104 	addi	r3,r2,4
    1130:	00800044 	movi	r2,1
    1134:	1880000d 	sth	r2,0(r3)

	// If there are process waiting on this event
	int* const list = &events[eventID].waitingList;
    1138:	e0bfff17 	ldw	r2,-4(fp)
    113c:	100690fa 	slli	r3,r2,3
    1140:	00800074 	movhi	r2,1
    1144:	10883a04 	addi	r2,r2,8424
    1148:	10c5883a 	add	r2,r2,r3
    114c:	e0bffe15 	stw	r2,-8(fp)
	while(*list != -1) {
    1150:	00000506 	br	1168 <declencher+0x64>
		addLast(&readyList, removeHead(list));
    1154:	e13ffe17 	ldw	r4,-8(fp)
    1158:	00006400 	call	640 <removeHead>
    115c:	100b883a 	mov	r5,r2
    1160:	d1200004 	addi	r4,gp,-32768
    1164:	00005080 	call	508 <addLast>
void declencher(int eventID) {
	events[eventID].hasHappened = 1;

	// If there are process waiting on this event
	int* const list = &events[eventID].waitingList;
	while(*list != -1) {
    1168:	e0bffe17 	ldw	r2,-8(fp)
    116c:	10800017 	ldw	r2,0(r2)
    1170:	10bfffd8 	cmpnei	r2,r2,-1
    1174:	103ff71e 	bne	r2,zero,1154 <declencher+0x50>
		addLast(&readyList, removeHead(list));
	}
	yield();
    1178:	0000ebc0 	call	ebc <yield>
}
    117c:	e037883a 	mov	sp,fp
    1180:	dfc00117 	ldw	ra,4(sp)
    1184:	df000017 	ldw	fp,0(sp)
    1188:	dec00204 	addi	sp,sp,8
    118c:	f800283a 	ret

00001190 <reinitialiser>:

void reinitialiser(int eventID) {
    1190:	defffe04 	addi	sp,sp,-8
    1194:	df000115 	stw	fp,4(sp)
    1198:	df000104 	addi	fp,sp,4
    119c:	e13fff15 	stw	r4,-4(fp)
	events[eventID].hasHappened = 0;
    11a0:	e0bfff17 	ldw	r2,-4(fp)
    11a4:	00c00074 	movhi	r3,1
    11a8:	18c83a04 	addi	r3,r3,8424
    11ac:	100490fa 	slli	r2,r2,3
    11b0:	10c5883a 	add	r2,r2,r3
    11b4:	10800104 	addi	r2,r2,4
    11b8:	1000000d 	sth	zero,0(r2)
}
    11bc:	e037883a 	mov	sp,fp
    11c0:	df000017 	ldw	fp,0(sp)
    11c4:	dec00104 	addi	sp,sp,4
    11c8:	f800283a 	ret

000011cc <initBuffer>:
	int message;
	int full;
	int monitor;
} Buffer;

void initBuffer(Buffer* b) {
    11cc:	defffd04 	addi	sp,sp,-12
    11d0:	dfc00215 	stw	ra,8(sp)
    11d4:	df000115 	stw	fp,4(sp)
    11d8:	df000104 	addi	fp,sp,4
    11dc:	e13fff15 	stw	r4,-4(fp)
	b->monitor = createMonitor();
    11e0:	0000a040 	call	a04 <createMonitor>
    11e4:	e0ffff17 	ldw	r3,-4(fp)
    11e8:	18800215 	stw	r2,8(r3)
	b->full = 0;
    11ec:	e0bfff17 	ldw	r2,-4(fp)
    11f0:	10000115 	stw	zero,4(r2)
}
    11f4:	e037883a 	mov	sp,fp
    11f8:	dfc00117 	ldw	ra,4(sp)
    11fc:	df000017 	ldw	fp,0(sp)
    1200:	dec00204 	addi	sp,sp,8
    1204:	f800283a 	ret

00001208 <put>:

void put(Buffer* b, int m) {
    1208:	defffc04 	addi	sp,sp,-16
    120c:	dfc00315 	stw	ra,12(sp)
    1210:	df000215 	stw	fp,8(sp)
    1214:	df000204 	addi	fp,sp,8
    1218:	e13ffe15 	stw	r4,-8(fp)
    121c:	e17fff15 	stw	r5,-4(fp)
	enterMonitor(b->monitor);
    1220:	e0bffe17 	ldw	r2,-8(fp)
    1224:	11000217 	ldw	r4,8(r2)
    1228:	0000ab40 	call	ab4 <enterMonitor>
	while(b->full) {
    122c:	00000106 	br	1234 <put+0x2c>
		wait();
    1230:	0000d080 	call	d08 <wait>
	b->full = 0;
}

void put(Buffer* b, int m) {
	enterMonitor(b->monitor);
	while(b->full) {
    1234:	e0bffe17 	ldw	r2,-8(fp)
    1238:	10800117 	ldw	r2,4(r2)
    123c:	1004c03a 	cmpne	r2,r2,zero
    1240:	103ffb1e 	bne	r2,zero,1230 <put+0x28>
		wait();
	}
	b->message = m;
    1244:	e0fffe17 	ldw	r3,-8(fp)
    1248:	e0bfff17 	ldw	r2,-4(fp)
    124c:	18800015 	stw	r2,0(r3)
	b->full = 1;
    1250:	e0fffe17 	ldw	r3,-8(fp)
    1254:	00800044 	movi	r2,1
    1258:	18800115 	stw	r2,4(r3)
	notify();
    125c:	0000e300 	call	e30 <notify>
	exitMonitor();
    1260:	0000c000 	call	c00 <exitMonitor>
	return;
}
    1264:	e037883a 	mov	sp,fp
    1268:	dfc00117 	ldw	ra,4(sp)
    126c:	df000017 	ldw	fp,0(sp)
    1270:	dec00204 	addi	sp,sp,8
    1274:	f800283a 	ret

00001278 <get>:

int get(Buffer*b) {
    1278:	defffc04 	addi	sp,sp,-16
    127c:	dfc00315 	stw	ra,12(sp)
    1280:	df000215 	stw	fp,8(sp)
    1284:	df000204 	addi	fp,sp,8
    1288:	e13fff15 	stw	r4,-4(fp)
	int m;

	enterMonitor(b->monitor);
    128c:	e0bfff17 	ldw	r2,-4(fp)
    1290:	11000217 	ldw	r4,8(r2)
    1294:	0000ab40 	call	ab4 <enterMonitor>
	while(!b->full) {
    1298:	00000106 	br	12a0 <get+0x28>
		wait();
    129c:	0000d080 	call	d08 <wait>

int get(Buffer*b) {
	int m;

	enterMonitor(b->monitor);
	while(!b->full) {
    12a0:	e0bfff17 	ldw	r2,-4(fp)
    12a4:	10800117 	ldw	r2,4(r2)
    12a8:	1005003a 	cmpeq	r2,r2,zero
    12ac:	103ffb1e 	bne	r2,zero,129c <get+0x24>
		wait();
	}
	m = b->message;
    12b0:	e0bfff17 	ldw	r2,-4(fp)
    12b4:	10800017 	ldw	r2,0(r2)
    12b8:	e0bffe15 	stw	r2,-8(fp)
	b->full = 0;
    12bc:	e0bfff17 	ldw	r2,-4(fp)
    12c0:	10000115 	stw	zero,4(r2)
	notifyAll();
    12c4:	0000e740 	call	e74 <notifyAll>
	exitMonitor();
    12c8:	0000c000 	call	c00 <exitMonitor>

	return m;
    12cc:	e0bffe17 	ldw	r2,-8(fp)
}
    12d0:	e037883a 	mov	sp,fp
    12d4:	dfc00117 	ldw	ra,4(sp)
    12d8:	df000017 	ldw	fp,0(sp)
    12dc:	dec00204 	addi	sp,sp,8
    12e0:	f800283a 	ret

000012e4 <initEventBuffer>:
	int message;
	int fullEvent;
	int emptyEvent;
} EventBuffer;

void initEventBuffer(EventBuffer* b) {
    12e4:	defffd04 	addi	sp,sp,-12
    12e8:	dfc00215 	stw	ra,8(sp)
    12ec:	df000115 	stw	fp,4(sp)
    12f0:	df000104 	addi	fp,sp,4
    12f4:	e13fff15 	stw	r4,-4(fp)
	b->emptyEvent = createEvent();
    12f8:	0000f900 	call	f90 <createEvent>
    12fc:	1007883a 	mov	r3,r2
    1300:	e0bfff17 	ldw	r2,-4(fp)
    1304:	10c00215 	stw	r3,8(r2)
	b->fullEvent = createEvent();
    1308:	0000f900 	call	f90 <createEvent>
    130c:	1007883a 	mov	r3,r2
    1310:	e0bfff17 	ldw	r2,-4(fp)
    1314:	10c00115 	stw	r3,4(r2)
	declencher(b->emptyEvent);
    1318:	e0bfff17 	ldw	r2,-4(fp)
    131c:	11000217 	ldw	r4,8(r2)
    1320:	00011040 	call	1104 <declencher>
}
    1324:	e037883a 	mov	sp,fp
    1328:	dfc00117 	ldw	ra,4(sp)
    132c:	df000017 	ldw	fp,0(sp)
    1330:	dec00204 	addi	sp,sp,8
    1334:	f800283a 	ret

00001338 <eput>:

void eput(EventBuffer* b, int m) {
    1338:	defffc04 	addi	sp,sp,-16
    133c:	dfc00315 	stw	ra,12(sp)
    1340:	df000215 	stw	fp,8(sp)
    1344:	df000204 	addi	fp,sp,8
    1348:	e13ffe15 	stw	r4,-8(fp)
    134c:	e17fff15 	stw	r5,-4(fp)
	attendre(b->emptyEvent);
    1350:	e0bffe17 	ldw	r2,-8(fp)
    1354:	11000217 	ldw	r4,8(r2)
    1358:	00010200 	call	1020 <attendre>
	reinitialiser(b->emptyEvent);
    135c:	e0bffe17 	ldw	r2,-8(fp)
    1360:	11000217 	ldw	r4,8(r2)
    1364:	00011900 	call	1190 <reinitialiser>
	b->message = m;
    1368:	e0fffe17 	ldw	r3,-8(fp)
    136c:	e0bfff17 	ldw	r2,-4(fp)
    1370:	18800015 	stw	r2,0(r3)
	declencher(b->fullEvent);
    1374:	e0bffe17 	ldw	r2,-8(fp)
    1378:	11000117 	ldw	r4,4(r2)
    137c:	00011040 	call	1104 <declencher>
}
    1380:	e037883a 	mov	sp,fp
    1384:	dfc00117 	ldw	ra,4(sp)
    1388:	df000017 	ldw	fp,0(sp)
    138c:	dec00204 	addi	sp,sp,8
    1390:	f800283a 	ret

00001394 <eget>:

int eget(EventBuffer *b) {
    1394:	defffc04 	addi	sp,sp,-16
    1398:	dfc00315 	stw	ra,12(sp)
    139c:	df000215 	stw	fp,8(sp)
    13a0:	df000204 	addi	fp,sp,8
    13a4:	e13fff15 	stw	r4,-4(fp)
	int m;
	attendre(b->fullEvent);
    13a8:	e0bfff17 	ldw	r2,-4(fp)
    13ac:	11000117 	ldw	r4,4(r2)
    13b0:	00010200 	call	1020 <attendre>
	reinitialiser(b->fullEvent);
    13b4:	e0bfff17 	ldw	r2,-4(fp)
    13b8:	11000117 	ldw	r4,4(r2)
    13bc:	00011900 	call	1190 <reinitialiser>
	m = b->message;
    13c0:	e0bfff17 	ldw	r2,-4(fp)
    13c4:	10800017 	ldw	r2,0(r2)
    13c8:	e0bffe15 	stw	r2,-8(fp)
	declencher(b->emptyEvent);
    13cc:	e0bfff17 	ldw	r2,-4(fp)
    13d0:	11000217 	ldw	r4,8(r2)
    13d4:	00011040 	call	1104 <declencher>
	return m;
    13d8:	e0bffe17 	ldw	r2,-8(fp)
}
    13dc:	e037883a 	mov	sp,fp
    13e0:	dfc00117 	ldw	ra,4(sp)
    13e4:	df000017 	ldw	fp,0(sp)
    13e8:	dec00204 	addi	sp,sp,8
    13ec:	f800283a 	ret

000013f0 <displayNumber>:
int digitCodes[] = {0x3E223E00, 0x203E2400, 0x2E2A3A00, 0x3E2A2A00, 0x3E080E00,
		0x3A2A2E00, 0x3A2A3E00, 0x3E020200, 0x3E2A3E00, 0x3E2A2E00, 0};
int lcdZones[] = {LED_0_BASE, LED_1_BASE, LED_2_BASE};

/* displays number "no" in LCD zone "zone" */
void displayNumber(int zone, int no) {
    13f0:	defffd04 	addi	sp,sp,-12
    13f4:	df000215 	stw	fp,8(sp)
    13f8:	df000204 	addi	fp,sp,8
    13fc:	e13ffe15 	stw	r4,-8(fp)
    1400:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[zone], digitCodes[no]);
    1404:	e0bffe17 	ldw	r2,-8(fp)
    1408:	00c00074 	movhi	r3,1
    140c:	18fa3704 	addi	r3,r3,-5924
    1410:	1085883a 	add	r2,r2,r2
    1414:	1085883a 	add	r2,r2,r2
    1418:	10c5883a 	add	r2,r2,r3
    141c:	10800017 	ldw	r2,0(r2)
    1420:	1009883a 	mov	r4,r2
    1424:	e0bfff17 	ldw	r2,-4(fp)
    1428:	00c00074 	movhi	r3,1
    142c:	18fa2c04 	addi	r3,r3,-5968
    1430:	1085883a 	add	r2,r2,r2
    1434:	1085883a 	add	r2,r2,r2
    1438:	10c5883a 	add	r2,r2,r3
    143c:	10c00017 	ldw	r3,0(r2)
    1440:	2005883a 	mov	r2,r4
    1444:	10c00035 	stwio	r3,0(r2)
}
    1448:	e037883a 	mov	sp,fp
    144c:	df000017 	ldw	fp,0(sp)
    1450:	dec00104 	addi	sp,sp,4
    1454:	f800283a 	ret

00001458 <blinkNumber>:

/* blinks number "no" in LCD zone "zone" */
void blinkNumber(int zone, int no) {
    1458:	defffb04 	addi	sp,sp,-20
    145c:	df000415 	stw	fp,16(sp)
    1460:	df000404 	addi	fp,sp,16
    1464:	e13ffe15 	stw	r4,-8(fp)
    1468:	e17fff15 	stw	r5,-4(fp)
	int i, j;
	for (i = 0; i < BLINKS; i++) {
    146c:	e03ffd15 	stw	zero,-12(fp)
    1470:	00002e06 	br	152c <blinkNumber+0xd4>
		IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[zone], 0);
    1474:	e0bffe17 	ldw	r2,-8(fp)
    1478:	00c00074 	movhi	r3,1
    147c:	18fa3704 	addi	r3,r3,-5924
    1480:	1085883a 	add	r2,r2,r2
    1484:	1085883a 	add	r2,r2,r2
    1488:	10c5883a 	add	r2,r2,r3
    148c:	10800017 	ldw	r2,0(r2)
    1490:	10000035 	stwio	zero,0(r2)
		for (j = 0; j < PAUSE; j++);
    1494:	e03ffc15 	stw	zero,-16(fp)
    1498:	00000306 	br	14a8 <blinkNumber+0x50>
    149c:	e0bffc17 	ldw	r2,-16(fp)
    14a0:	10800044 	addi	r2,r2,1
    14a4:	e0bffc15 	stw	r2,-16(fp)
    14a8:	e0fffc17 	ldw	r3,-16(fp)
    14ac:	00800234 	movhi	r2,8
    14b0:	10a847c4 	addi	r2,r2,-24289
    14b4:	10fff90e 	bge	r2,r3,149c <blinkNumber+0x44>
		IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[zone], digitCodes[no]);
    14b8:	e0bffe17 	ldw	r2,-8(fp)
    14bc:	00c00074 	movhi	r3,1
    14c0:	18fa3704 	addi	r3,r3,-5924
    14c4:	1085883a 	add	r2,r2,r2
    14c8:	1085883a 	add	r2,r2,r2
    14cc:	10c5883a 	add	r2,r2,r3
    14d0:	10800017 	ldw	r2,0(r2)
    14d4:	1009883a 	mov	r4,r2
    14d8:	e0bfff17 	ldw	r2,-4(fp)
    14dc:	00c00074 	movhi	r3,1
    14e0:	18fa2c04 	addi	r3,r3,-5968
    14e4:	1085883a 	add	r2,r2,r2
    14e8:	1085883a 	add	r2,r2,r2
    14ec:	10c5883a 	add	r2,r2,r3
    14f0:	10c00017 	ldw	r3,0(r2)
    14f4:	2005883a 	mov	r2,r4
    14f8:	10c00035 	stwio	r3,0(r2)
		for (j = 0; j < PAUSE; j++);
    14fc:	e03ffc15 	stw	zero,-16(fp)
    1500:	00000306 	br	1510 <blinkNumber+0xb8>
    1504:	e0bffc17 	ldw	r2,-16(fp)
    1508:	10800044 	addi	r2,r2,1
    150c:	e0bffc15 	stw	r2,-16(fp)
    1510:	e0fffc17 	ldw	r3,-16(fp)
    1514:	00800234 	movhi	r2,8
    1518:	10a847c4 	addi	r2,r2,-24289
    151c:	10fff90e 	bge	r2,r3,1504 <blinkNumber+0xac>
}

/* blinks number "no" in LCD zone "zone" */
void blinkNumber(int zone, int no) {
	int i, j;
	for (i = 0; i < BLINKS; i++) {
    1520:	e0bffd17 	ldw	r2,-12(fp)
    1524:	10800044 	addi	r2,r2,1
    1528:	e0bffd15 	stw	r2,-12(fp)
    152c:	e0bffd17 	ldw	r2,-12(fp)
    1530:	10800110 	cmplti	r2,r2,4
    1534:	103fcf1e 	bne	r2,zero,1474 <blinkNumber+0x1c>
		IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[zone], 0);
		for (j = 0; j < PAUSE; j++);
		IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[zone], digitCodes[no]);
		for (j = 0; j < PAUSE; j++);
	}
}
    1538:	e037883a 	mov	sp,fp
    153c:	df000017 	ldw	fp,0(sp)
    1540:	dec00104 	addi	sp,sp,4
    1544:	f800283a 	ret

00001548 <producer>:

void producer(){
    1548:	defff804 	addi	sp,sp,-32
    154c:	dfc00715 	stw	ra,28(sp)
    1550:	df000615 	stw	fp,24(sp)
    1554:	df000604 	addi	fp,sp,24
	int reg, temp;

	printf("Producer starting...\n");
    1558:	01000074 	movhi	r4,1
    155c:	21392904 	addi	r4,r4,-7004
    1560:	00028440 	call	2844 <puts>

	reg = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
    1564:	00808034 	movhi	r2,512
    1568:	10940304 	addi	r2,r2,20492
    156c:	10800037 	ldwio	r2,0(r2)
    1570:	e0bffb15 	stw	r2,-20(fp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE,reg);
    1574:	00c08034 	movhi	r3,512
    1578:	18d40304 	addi	r3,r3,20492
    157c:	e0bffb17 	ldw	r2,-20(fp)
    1580:	18800035 	stwio	r2,0(r3)

	while(1) {
		enterMonitor(dummyMonitor1);
    1584:	d126be17 	ldw	r4,-25864(gp)
    1588:	0000ab40 	call	ab4 <enterMonitor>
		enterMonitor(dummyMonitor2);
    158c:	d126bf17 	ldw	r4,-25860(gp)
    1590:	0000ab40 	call	ab4 <enterMonitor>
		enterMonitor(dummyMonitor1);
    1594:	d126be17 	ldw	r4,-25864(gp)
    1598:	0000ab40 	call	ab4 <enterMonitor>
		reg = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
    159c:	00808034 	movhi	r2,512
    15a0:	10940304 	addi	r2,r2,20492
    15a4:	10800037 	ldwio	r2,0(r2)
    15a8:	e0bffb15 	stw	r2,-20(fp)
		if (reg != 0) {
    15ac:	e0bffb17 	ldw	r2,-20(fp)
    15b0:	1005003a 	cmpeq	r2,r2,zero
    15b4:	10008f1e 	bne	r2,zero,17f4 <producer+0x2ac>

			/* check button 0 */
			temp = reg;
    15b8:	e0bffb17 	ldw	r2,-20(fp)
    15bc:	e0bffa15 	stw	r2,-24(fp)
			if (temp%2==1) {
    15c0:	e0fffa17 	ldw	r3,-24(fp)
    15c4:	00a00034 	movhi	r2,32768
    15c8:	10800044 	addi	r2,r2,1
    15cc:	1886703a 	and	r3,r3,r2
    15d0:	e0fffc15 	stw	r3,-16(fp)
    15d4:	e0fffc17 	ldw	r3,-16(fp)
    15d8:	1804403a 	cmpge	r2,r3,zero
    15dc:	10000a1e 	bne	r2,zero,1608 <producer+0xc0>
    15e0:	e0bffc17 	ldw	r2,-16(fp)
    15e4:	10bfffc4 	addi	r2,r2,-1
    15e8:	e0bffc15 	stw	r2,-16(fp)
    15ec:	00bfff84 	movi	r2,-2
    15f0:	e0fffc17 	ldw	r3,-16(fp)
    15f4:	1886b03a 	or	r3,r3,r2
    15f8:	e0fffc15 	stw	r3,-16(fp)
    15fc:	e0bffc17 	ldw	r2,-16(fp)
    1600:	10800044 	addi	r2,r2,1
    1604:	e0bffc15 	stw	r2,-16(fp)
    1608:	e0bffc17 	ldw	r2,-16(fp)
    160c:	10800058 	cmpnei	r2,r2,1
    1610:	1000071e 	bne	r2,zero,1630 <producer+0xe8>
				printf("putting to 0\n");
    1614:	01000074 	movhi	r4,1
    1618:	21392f04 	addi	r4,r4,-6980
    161c:	00028440 	call	2844 <puts>
				put(&b0, 0);
    1620:	01000074 	movhi	r4,1
    1624:	21085404 	addi	r4,r4,8528
    1628:	000b883a 	mov	r5,zero
    162c:	00012080 	call	1208 <put>
			}

			/* check button 1 */
			temp = temp >> 1;
    1630:	e0bffa17 	ldw	r2,-24(fp)
    1634:	1005d07a 	srai	r2,r2,1
    1638:	e0bffa15 	stw	r2,-24(fp)
			if (temp%2==1) {
    163c:	e0fffa17 	ldw	r3,-24(fp)
    1640:	00a00034 	movhi	r2,32768
    1644:	10800044 	addi	r2,r2,1
    1648:	1886703a 	and	r3,r3,r2
    164c:	e0fffd15 	stw	r3,-12(fp)
    1650:	e0fffd17 	ldw	r3,-12(fp)
    1654:	1804403a 	cmpge	r2,r3,zero
    1658:	10000a1e 	bne	r2,zero,1684 <producer+0x13c>
    165c:	e0bffd17 	ldw	r2,-12(fp)
    1660:	10bfffc4 	addi	r2,r2,-1
    1664:	e0bffd15 	stw	r2,-12(fp)
    1668:	00bfff84 	movi	r2,-2
    166c:	e0fffd17 	ldw	r3,-12(fp)
    1670:	1886b03a 	or	r3,r3,r2
    1674:	e0fffd15 	stw	r3,-12(fp)
    1678:	e0bffd17 	ldw	r2,-12(fp)
    167c:	10800044 	addi	r2,r2,1
    1680:	e0bffd15 	stw	r2,-12(fp)
    1684:	e0bffd17 	ldw	r2,-12(fp)
    1688:	10800058 	cmpnei	r2,r2,1
    168c:	1000071e 	bne	r2,zero,16ac <producer+0x164>
				printf("putting to 1\n");
    1690:	01000074 	movhi	r4,1
    1694:	21393304 	addi	r4,r4,-6964
    1698:	00028440 	call	2844 <puts>
				put(&b1, 1);
    169c:	01000074 	movhi	r4,1
    16a0:	21085104 	addi	r4,r4,8516
    16a4:	01400044 	movi	r5,1
    16a8:	00012080 	call	1208 <put>
			}

			/* check button 2 */
			temp = temp >> 1;
    16ac:	e0bffa17 	ldw	r2,-24(fp)
    16b0:	1005d07a 	srai	r2,r2,1
    16b4:	e0bffa15 	stw	r2,-24(fp)
			if (temp%2==1) {
    16b8:	e0fffa17 	ldw	r3,-24(fp)
    16bc:	00a00034 	movhi	r2,32768
    16c0:	10800044 	addi	r2,r2,1
    16c4:	1886703a 	and	r3,r3,r2
    16c8:	e0fffe15 	stw	r3,-8(fp)
    16cc:	e0fffe17 	ldw	r3,-8(fp)
    16d0:	1804403a 	cmpge	r2,r3,zero
    16d4:	10000a1e 	bne	r2,zero,1700 <producer+0x1b8>
    16d8:	e0bffe17 	ldw	r2,-8(fp)
    16dc:	10bfffc4 	addi	r2,r2,-1
    16e0:	e0bffe15 	stw	r2,-8(fp)
    16e4:	00bfff84 	movi	r2,-2
    16e8:	e0fffe17 	ldw	r3,-8(fp)
    16ec:	1886b03a 	or	r3,r3,r2
    16f0:	e0fffe15 	stw	r3,-8(fp)
    16f4:	e0bffe17 	ldw	r2,-8(fp)
    16f8:	10800044 	addi	r2,r2,1
    16fc:	e0bffe15 	stw	r2,-8(fp)
    1700:	e0bffe17 	ldw	r2,-8(fp)
    1704:	10800058 	cmpnei	r2,r2,1
    1708:	1000101e 	bne	r2,zero,174c <producer+0x204>
				printf("putting to 2\n");
    170c:	01000074 	movhi	r4,1
    1710:	21393704 	addi	r4,r4,-6948
    1714:	00028440 	call	2844 <puts>
				exitMonitor();
    1718:	0000c000 	call	c00 <exitMonitor>
				exitMonitor();
    171c:	0000c000 	call	c00 <exitMonitor>
				exitMonitor();
    1720:	0000c000 	call	c00 <exitMonitor>
				eput(&b2, 2);
    1724:	01000074 	movhi	r4,1
    1728:	21084e04 	addi	r4,r4,8504
    172c:	01400084 	movi	r5,2
    1730:	00013380 	call	1338 <eput>
				enterMonitor(dummyMonitor1);
    1734:	d126be17 	ldw	r4,-25864(gp)
    1738:	0000ab40 	call	ab4 <enterMonitor>
				enterMonitor(dummyMonitor2);
    173c:	d126bf17 	ldw	r4,-25860(gp)
    1740:	0000ab40 	call	ab4 <enterMonitor>
				enterMonitor(dummyMonitor1);
    1744:	d126be17 	ldw	r4,-25864(gp)
    1748:	0000ab40 	call	ab4 <enterMonitor>
			}

			/* check button 3 -- exit if pressed */
			temp = temp >> 1;
    174c:	e0bffa17 	ldw	r2,-24(fp)
    1750:	1005d07a 	srai	r2,r2,1
    1754:	e0bffa15 	stw	r2,-24(fp)
			if (temp%2==1) {
    1758:	e0fffa17 	ldw	r3,-24(fp)
    175c:	00a00034 	movhi	r2,32768
    1760:	10800044 	addi	r2,r2,1
    1764:	1886703a 	and	r3,r3,r2
    1768:	e0ffff15 	stw	r3,-4(fp)
    176c:	e0ffff17 	ldw	r3,-4(fp)
    1770:	1804403a 	cmpge	r2,r3,zero
    1774:	10000a1e 	bne	r2,zero,17a0 <producer+0x258>
    1778:	e0bfff17 	ldw	r2,-4(fp)
    177c:	10bfffc4 	addi	r2,r2,-1
    1780:	e0bfff15 	stw	r2,-4(fp)
    1784:	00bfff84 	movi	r2,-2
    1788:	e0ffff17 	ldw	r3,-4(fp)
    178c:	1886b03a 	or	r3,r3,r2
    1790:	e0ffff15 	stw	r3,-4(fp)
    1794:	e0bfff17 	ldw	r2,-4(fp)
    1798:	10800044 	addi	r2,r2,1
    179c:	e0bfff15 	stw	r2,-4(fp)
    17a0:	e0bfff17 	ldw	r2,-4(fp)
    17a4:	10800058 	cmpnei	r2,r2,1
    17a8:	10000e1e 	bne	r2,zero,17e4 <producer+0x29c>
				printf("Bye!\n");
    17ac:	01000074 	movhi	r4,1
    17b0:	21393b04 	addi	r4,r4,-6932
    17b4:	00028440 	call	2844 <puts>
				displayNumber(0, 10);
    17b8:	0009883a 	mov	r4,zero
    17bc:	01400284 	movi	r5,10
    17c0:	00013f00 	call	13f0 <displayNumber>
				displayNumber(1, 10);
    17c4:	01000044 	movi	r4,1
    17c8:	01400284 	movi	r5,10
    17cc:	00013f00 	call	13f0 <displayNumber>
				displayNumber(2, 10);
    17d0:	01000084 	movi	r4,2
    17d4:	01400284 	movi	r5,10
    17d8:	00013f00 	call	13f0 <displayNumber>
				exit(0);
    17dc:	0009883a 	mov	r4,zero
    17e0:	0001f8c0 	call	1f8c <exit>
			}

			IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE,reg); /* reset buttons to 0 */
    17e4:	00c08034 	movhi	r3,512
    17e8:	18d40304 	addi	r3,r3,20492
    17ec:	e0bffb17 	ldw	r2,-20(fp)
    17f0:	18800035 	stwio	r2,0(r3)
		}
		exitMonitor();
    17f4:	0000c000 	call	c00 <exitMonitor>
		exitMonitor();
    17f8:	0000c000 	call	c00 <exitMonitor>
		exitMonitor();
    17fc:	0000c000 	call	c00 <exitMonitor>
		yield();
    1800:	0000ebc0 	call	ebc <yield>
	}
    1804:	003f5f06 	br	1584 <producer+0x3c>

00001808 <consumer0>:
}

void consumer0(){
    1808:	defffc04 	addi	sp,sp,-16
    180c:	dfc00315 	stw	ra,12(sp)
    1810:	df000215 	stw	fp,8(sp)
    1814:	df000204 	addi	fp,sp,8
	int counter = 0;
    1818:	e03fff15 	stw	zero,-4(fp)
	int m;

	displayNumber(0, 0);
    181c:	0009883a 	mov	r4,zero
    1820:	000b883a 	mov	r5,zero
    1824:	00013f00 	call	13f0 <displayNumber>
	printf("Consumer 0 starting...\n");
    1828:	01000074 	movhi	r4,1
    182c:	21393d04 	addi	r4,r4,-6924
    1830:	00028440 	call	2844 <puts>
	while(1) {
		m = get(&b0);
    1834:	01000074 	movhi	r4,1
    1838:	21085404 	addi	r4,r4,8528
    183c:	00012780 	call	1278 <get>
    1840:	e0bffe15 	stw	r2,-8(fp)
		printf("consumed from 0\n");
    1844:	01000074 	movhi	r4,1
    1848:	21394304 	addi	r4,r4,-6900
    184c:	00028440 	call	2844 <puts>
		blinkNumber(0, counter);
    1850:	0009883a 	mov	r4,zero
    1854:	e17fff17 	ldw	r5,-4(fp)
    1858:	00014580 	call	1458 <blinkNumber>
		counter = (counter + 1) % 10;
    185c:	e0bfff17 	ldw	r2,-4(fp)
    1860:	11000044 	addi	r4,r2,1
    1864:	01400284 	movi	r5,10
    1868:	0001f1c0 	call	1f1c <__modsi3>
    186c:	e0bfff15 	stw	r2,-4(fp)
	 	displayNumber(0, counter);
    1870:	0009883a 	mov	r4,zero
    1874:	e17fff17 	ldw	r5,-4(fp)
    1878:	00013f00 	call	13f0 <displayNumber>
	}
    187c:	003fed06 	br	1834 <consumer0+0x2c>

00001880 <consumer1>:
}

void consumer1(){
    1880:	defffc04 	addi	sp,sp,-16
    1884:	dfc00315 	stw	ra,12(sp)
    1888:	df000215 	stw	fp,8(sp)
    188c:	df000204 	addi	fp,sp,8
	int counter = 0;
    1890:	e03fff15 	stw	zero,-4(fp)
	int m;

	displayNumber(1, 0);
    1894:	01000044 	movi	r4,1
    1898:	000b883a 	mov	r5,zero
    189c:	00013f00 	call	13f0 <displayNumber>
	printf("Consumer 1 starting...\n");
    18a0:	01000074 	movhi	r4,1
    18a4:	21394704 	addi	r4,r4,-6884
    18a8:	00028440 	call	2844 <puts>
	while(1) {
		m = get(&b1);
    18ac:	01000074 	movhi	r4,1
    18b0:	21085104 	addi	r4,r4,8516
    18b4:	00012780 	call	1278 <get>
    18b8:	e0bffe15 	stw	r2,-8(fp)
		printf("consumed from 1\n");
    18bc:	01000074 	movhi	r4,1
    18c0:	21394d04 	addi	r4,r4,-6860
    18c4:	00028440 	call	2844 <puts>
		blinkNumber(1, counter);
    18c8:	01000044 	movi	r4,1
    18cc:	e17fff17 	ldw	r5,-4(fp)
    18d0:	00014580 	call	1458 <blinkNumber>
		counter = (counter + 1) % 10;
    18d4:	e0bfff17 	ldw	r2,-4(fp)
    18d8:	11000044 	addi	r4,r2,1
    18dc:	01400284 	movi	r5,10
    18e0:	0001f1c0 	call	1f1c <__modsi3>
    18e4:	e0bfff15 	stw	r2,-4(fp)
		displayNumber(1, counter);
    18e8:	01000044 	movi	r4,1
    18ec:	e17fff17 	ldw	r5,-4(fp)
    18f0:	00013f00 	call	13f0 <displayNumber>
	}
    18f4:	003fed06 	br	18ac <consumer1+0x2c>

000018f8 <consumer2>:
}

void consumer2(){
    18f8:	defffc04 	addi	sp,sp,-16
    18fc:	dfc00315 	stw	ra,12(sp)
    1900:	df000215 	stw	fp,8(sp)
    1904:	df000204 	addi	fp,sp,8
	int counter = 0;
    1908:	e03fff15 	stw	zero,-4(fp)
	int m;

	displayNumber(2, 0);
    190c:	01000084 	movi	r4,2
    1910:	000b883a 	mov	r5,zero
    1914:	00013f00 	call	13f0 <displayNumber>
	printf("Consumer 2 starting...\n");
    1918:	01000074 	movhi	r4,1
    191c:	21395104 	addi	r4,r4,-6844
    1920:	00028440 	call	2844 <puts>
	while(1) {
		m = eget(&b2);
    1924:	01000074 	movhi	r4,1
    1928:	21084e04 	addi	r4,r4,8504
    192c:	00013940 	call	1394 <eget>
    1930:	e0bffe15 	stw	r2,-8(fp)
		printf("consumed from 2\n");
    1934:	01000074 	movhi	r4,1
    1938:	21395704 	addi	r4,r4,-6820
    193c:	00028440 	call	2844 <puts>
		blinkNumber(2, counter);
    1940:	01000084 	movi	r4,2
    1944:	e17fff17 	ldw	r5,-4(fp)
    1948:	00014580 	call	1458 <blinkNumber>
		counter = (counter + 1) % 10;
    194c:	e0bfff17 	ldw	r2,-4(fp)
    1950:	11000044 	addi	r4,r2,1
    1954:	01400284 	movi	r5,10
    1958:	0001f1c0 	call	1f1c <__modsi3>
    195c:	e0bfff15 	stw	r2,-4(fp)
		displayNumber(2, counter);
    1960:	01000084 	movi	r4,2
    1964:	e17fff17 	ldw	r5,-4(fp)
    1968:	00013f00 	call	13f0 <displayNumber>
	}
    196c:	003fed06 	br	1924 <consumer2+0x2c>

00001970 <test0>:
}
#define CLEAR(i) IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[i], 0)
#define PRINT(i) IOWR_ALTERA_AVALON_PIO_DATA(lcdZones[i], digitCodes[i])
void test0() {
    1970:	defffd04 	addi	sp,sp,-12
    1974:	dfc00215 	stw	ra,8(sp)
    1978:	df000115 	stw	fp,4(sp)
    197c:	df000104 	addi	fp,sp,4
	int j;
	while (1) {
		enterMonitor(dummyMonitor1);
    1980:	d126be17 	ldw	r4,-25864(gp)
    1984:	0000ab40 	call	ab4 <enterMonitor>
		wait();
    1988:	0000d080 	call	d08 <wait>
		CLEAR(0);
    198c:	00800074 	movhi	r2,1
    1990:	10ba3704 	addi	r2,r2,-5924
    1994:	10800017 	ldw	r2,0(r2)
    1998:	10000035 	stwio	zero,0(r2)
		yield();
    199c:	0000ebc0 	call	ebc <yield>
		for (j = 0; j < PAUSE; j++);
    19a0:	e03fff15 	stw	zero,-4(fp)
    19a4:	00000306 	br	19b4 <test0+0x44>
    19a8:	e0bfff17 	ldw	r2,-4(fp)
    19ac:	10800044 	addi	r2,r2,1
    19b0:	e0bfff15 	stw	r2,-4(fp)
    19b4:	e0ffff17 	ldw	r3,-4(fp)
    19b8:	00800234 	movhi	r2,8
    19bc:	10a847c4 	addi	r2,r2,-24289
    19c0:	10fff90e 	bge	r2,r3,19a8 <test0+0x38>
		wait();
    19c4:	0000d080 	call	d08 <wait>
		PRINT(0);
    19c8:	00800074 	movhi	r2,1
    19cc:	10ba3704 	addi	r2,r2,-5924
    19d0:	10800017 	ldw	r2,0(r2)
    19d4:	1009883a 	mov	r4,r2
    19d8:	00800074 	movhi	r2,1
    19dc:	10ba2c04 	addi	r2,r2,-5968
    19e0:	10c00017 	ldw	r3,0(r2)
    19e4:	2005883a 	mov	r2,r4
    19e8:	10c00035 	stwio	r3,0(r2)
		yield();
    19ec:	0000ebc0 	call	ebc <yield>
		exitMonitor();
    19f0:	0000c000 	call	c00 <exitMonitor>
		for (j = 0; j < PAUSE; j++);
    19f4:	e03fff15 	stw	zero,-4(fp)
    19f8:	00000306 	br	1a08 <test0+0x98>
    19fc:	e0bfff17 	ldw	r2,-4(fp)
    1a00:	10800044 	addi	r2,r2,1
    1a04:	e0bfff15 	stw	r2,-4(fp)
    1a08:	e0ffff17 	ldw	r3,-4(fp)
    1a0c:	00800234 	movhi	r2,8
    1a10:	10a847c4 	addi	r2,r2,-24289
    1a14:	10fff90e 	bge	r2,r3,19fc <test0+0x8c>
	}
    1a18:	003fd906 	br	1980 <test0+0x10>

00001a1c <test1>:
}

void test1() {
    1a1c:	defffd04 	addi	sp,sp,-12
    1a20:	dfc00215 	stw	ra,8(sp)
    1a24:	df000115 	stw	fp,4(sp)
    1a28:	df000104 	addi	fp,sp,4
	int j;
	while (1) {
		enterMonitor(dummyMonitor2);
    1a2c:	d126bf17 	ldw	r4,-25860(gp)
    1a30:	0000ab40 	call	ab4 <enterMonitor>
		enterMonitor(dummyMonitor1);
    1a34:	d126be17 	ldw	r4,-25864(gp)
    1a38:	0000ab40 	call	ab4 <enterMonitor>
		yield();
    1a3c:	0000ebc0 	call	ebc <yield>
		notifyAll();
    1a40:	0000e740 	call	e74 <notifyAll>
		yield();
    1a44:	0000ebc0 	call	ebc <yield>
		CLEAR(1);
    1a48:	00800074 	movhi	r2,1
    1a4c:	10ba3704 	addi	r2,r2,-5924
    1a50:	10800117 	ldw	r2,4(r2)
    1a54:	10000035 	stwio	zero,0(r2)
		yield();
    1a58:	0000ebc0 	call	ebc <yield>
		for (j = 0; j < PAUSE; j++);
    1a5c:	e03fff15 	stw	zero,-4(fp)
    1a60:	00000306 	br	1a70 <test1+0x54>
    1a64:	e0bfff17 	ldw	r2,-4(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bfff15 	stw	r2,-4(fp)
    1a70:	e0ffff17 	ldw	r3,-4(fp)
    1a74:	00800234 	movhi	r2,8
    1a78:	10a847c4 	addi	r2,r2,-24289
    1a7c:	10fff90e 	bge	r2,r3,1a64 <test1+0x48>
		yield();
    1a80:	0000ebc0 	call	ebc <yield>
		PRINT(1);
    1a84:	00800074 	movhi	r2,1
    1a88:	10ba3704 	addi	r2,r2,-5924
    1a8c:	10800117 	ldw	r2,4(r2)
    1a90:	1009883a 	mov	r4,r2
    1a94:	00800074 	movhi	r2,1
    1a98:	10ba2c04 	addi	r2,r2,-5968
    1a9c:	10c00117 	ldw	r3,4(r2)
    1aa0:	2005883a 	mov	r2,r4
    1aa4:	10c00035 	stwio	r3,0(r2)
		yield();
    1aa8:	0000ebc0 	call	ebc <yield>
		exitMonitor();
    1aac:	0000c000 	call	c00 <exitMonitor>
		exitMonitor();
    1ab0:	0000c000 	call	c00 <exitMonitor>
		for (j = 0; j < PAUSE; j++);
    1ab4:	e03fff15 	stw	zero,-4(fp)
    1ab8:	00000306 	br	1ac8 <test1+0xac>
    1abc:	e0bfff17 	ldw	r2,-4(fp)
    1ac0:	10800044 	addi	r2,r2,1
    1ac4:	e0bfff15 	stw	r2,-4(fp)
    1ac8:	e0ffff17 	ldw	r3,-4(fp)
    1acc:	00800234 	movhi	r2,8
    1ad0:	10a847c4 	addi	r2,r2,-24289
    1ad4:	10fff90e 	bge	r2,r3,1abc <test1+0xa0>
	}
    1ad8:	003fd406 	br	1a2c <test1+0x10>

00001adc <test2>:
}

void test2() {
    1adc:	defffd04 	addi	sp,sp,-12
    1ae0:	dfc00215 	stw	ra,8(sp)
    1ae4:	df000115 	stw	fp,4(sp)
    1ae8:	df000104 	addi	fp,sp,4
	int j;
	while (1) {
		enterMonitor(dummyMonitor2);
    1aec:	d126bf17 	ldw	r4,-25860(gp)
    1af0:	0000ab40 	call	ab4 <enterMonitor>
		yield();
    1af4:	0000ebc0 	call	ebc <yield>
		CLEAR(2);
    1af8:	00800074 	movhi	r2,1
    1afc:	10ba3704 	addi	r2,r2,-5924
    1b00:	10800217 	ldw	r2,8(r2)
    1b04:	10000035 	stwio	zero,0(r2)
		for (j = 0; j < PAUSE; j++);
    1b08:	e03fff15 	stw	zero,-4(fp)
    1b0c:	00000306 	br	1b1c <test2+0x40>
    1b10:	e0bfff17 	ldw	r2,-4(fp)
    1b14:	10800044 	addi	r2,r2,1
    1b18:	e0bfff15 	stw	r2,-4(fp)
    1b1c:	e0ffff17 	ldw	r3,-4(fp)
    1b20:	00800234 	movhi	r2,8
    1b24:	10a847c4 	addi	r2,r2,-24289
    1b28:	10fff90e 	bge	r2,r3,1b10 <test2+0x34>
		yield();
    1b2c:	0000ebc0 	call	ebc <yield>
		PRINT(2);
    1b30:	00800074 	movhi	r2,1
    1b34:	10ba3704 	addi	r2,r2,-5924
    1b38:	10800217 	ldw	r2,8(r2)
    1b3c:	1009883a 	mov	r4,r2
    1b40:	00800074 	movhi	r2,1
    1b44:	10ba2c04 	addi	r2,r2,-5968
    1b48:	10c00217 	ldw	r3,8(r2)
    1b4c:	2005883a 	mov	r2,r4
    1b50:	10c00035 	stwio	r3,0(r2)
		exitMonitor();
    1b54:	0000c000 	call	c00 <exitMonitor>
		for (j = 0; j < PAUSE; j++);
    1b58:	e03fff15 	stw	zero,-4(fp)
    1b5c:	00000306 	br	1b6c <test2+0x90>
    1b60:	e0bfff17 	ldw	r2,-4(fp)
    1b64:	10800044 	addi	r2,r2,1
    1b68:	e0bfff15 	stw	r2,-4(fp)
    1b6c:	e0ffff17 	ldw	r3,-4(fp)
    1b70:	00800234 	movhi	r2,8
    1b74:	10a847c4 	addi	r2,r2,-24289
    1b78:	10fff90e 	bge	r2,r3,1b60 <test2+0x84>
	}
    1b7c:	003fdb06 	br	1aec <test2+0x10>

00001b80 <main>:
}

int main() {
    1b80:	defffe04 	addi	sp,sp,-8
    1b84:	dfc00115 	stw	ra,4(sp)
    1b88:	df000015 	stw	fp,0(sp)
    1b8c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LED_COLOR_BASE, LED_COLOR_RESET_VALUE);
    1b90:	00c08034 	movhi	r3,512
    1b94:	18d43c04 	addi	r3,r3,20720
    1b98:	00803ff4 	movhi	r2,255
    1b9c:	18800035 	stwio	r2,0(r3)
	initBuffer(&b0);
    1ba0:	01000074 	movhi	r4,1
    1ba4:	21085404 	addi	r4,r4,8528
    1ba8:	00011cc0 	call	11cc <initBuffer>
	initBuffer(&b1);
    1bac:	01000074 	movhi	r4,1
    1bb0:	21085104 	addi	r4,r4,8516
    1bb4:	00011cc0 	call	11cc <initBuffer>
	initEventBuffer(&b2);
    1bb8:	01000074 	movhi	r4,1
    1bbc:	21084e04 	addi	r4,r4,8504
    1bc0:	00012e40 	call	12e4 <initEventBuffer>
	dummyMonitor1 = createMonitor();
    1bc4:	0000a040 	call	a04 <createMonitor>
    1bc8:	d0a6be15 	stw	r2,-25864(gp)
	dummyMonitor2 = createMonitor();
    1bcc:	0000a040 	call	a04 <createMonitor>
    1bd0:	d0a6bf15 	stw	r2,-25860(gp)

	createProcess(consumer0, STACK_SIZE);
    1bd4:	01000034 	movhi	r4,0
    1bd8:	21060204 	addi	r4,r4,6152
    1bdc:	0149c404 	movi	r5,10000
    1be0:	00007b80 	call	7b8 <createProcess>
	createProcess(consumer1, STACK_SIZE);
    1be4:	01000034 	movhi	r4,0
    1be8:	21062004 	addi	r4,r4,6272
    1bec:	0149c404 	movi	r5,10000
    1bf0:	00007b80 	call	7b8 <createProcess>
	createProcess(consumer2, STACK_SIZE);
    1bf4:	01000034 	movhi	r4,0
    1bf8:	21063e04 	addi	r4,r4,6392
    1bfc:	0149c404 	movi	r5,10000
    1c00:	00007b80 	call	7b8 <createProcess>
	createProcess(producer, STACK_SIZE);
    1c04:	01000034 	movhi	r4,0
    1c08:	21055204 	addi	r4,r4,5448
    1c0c:	0149c404 	movi	r5,10000
    1c10:	00007b80 	call	7b8 <createProcess>

	start();
    1c14:	00009880 	call	988 <start>
	return 0;
    1c18:	0005883a 	mov	r2,zero
}
    1c1c:	e037883a 	mov	sp,fp
    1c20:	dfc00117 	ldw	ra,4(sp)
    1c24:	df000017 	ldw	fp,0(sp)
    1c28:	dec00204 	addi	sp,sp,8
    1c2c:	f800283a 	ret

00001c30 <newProcess>:


Process running = NULL;  // pointer to the current process.
Process nextP = NULL;  // variable used internally to implement transfer and iotransfer procedures

Process newProcess(void (*f), unsigned int* stack, int stackSize){
    1c30:	defff804 	addi	sp,sp,-32
    1c34:	dfc00715 	stw	ra,28(sp)
    1c38:	df000615 	stw	fp,24(sp)
    1c3c:	df000604 	addi	fp,sp,24
    1c40:	e13ffd15 	stw	r4,-12(fp)
    1c44:	e17ffe15 	stw	r5,-8(fp)
    1c48:	e1bfff15 	stw	r6,-4(fp)
    
    unsigned int* newPC = f;
    1c4c:	e0bffd17 	ldw	r2,-12(fp)
    1c50:	e0bffc15 	stw	r2,-16(fp)
    int size = stackSize - 4;
    1c54:	e0bfff17 	ldw	r2,-4(fp)
    1c58:	10bfff04 	addi	r2,r2,-4
    1c5c:	e0bffb15 	stw	r2,-20(fp)
    
    Process process = _createStack(stack,newPC,size);
    1c60:	e13ffe17 	ldw	r4,-8(fp)
    1c64:	e17ffc17 	ldw	r5,-16(fp)
    1c68:	e1bffb17 	ldw	r6,-20(fp)
    1c6c:	0001d1c0 	call	1d1c <_createStack>
    1c70:	e0bffa15 	stw	r2,-24(fp)
    return process;
    1c74:	e0bffa17 	ldw	r2,-24(fp)
}
    1c78:	e037883a 	mov	sp,fp
    1c7c:	dfc00117 	ldw	ra,4(sp)
    1c80:	df000017 	ldw	fp,0(sp)
    1c84:	dec00204 	addi	sp,sp,8
    1c88:	f800283a 	ret

00001c8c <transfer>:

/**
 * Called mainly from interrupt routine.
 * (Except for the first call)
 */
void transfer(Process p){
    1c8c:	defffd04 	addi	sp,sp,-12
    1c90:	dfc00215 	stw	ra,8(sp)
    1c94:	df000115 	stw	fp,4(sp)
    1c98:	df000104 	addi	fp,sp,4
    1c9c:	e13fff15 	stw	r4,-4(fp)
    
    if(running == NULL){
    1ca0:	d0a6c017 	ldw	r2,-25856(gp)
    1ca4:	1004c03a 	cmpne	r2,r2,zero
    1ca8:	1000031e 	bne	r2,zero,1cb8 <transfer+0x2c>
        running = malloc(sizeof(Process));
    1cac:	01000104 	movi	r4,4
    1cb0:	0001fd80 	call	1fd8 <malloc>
    1cb4:	d0a6c015 	stw	r2,-25856(gp)
    }
    nextP = p ;
    1cb8:	e0bfff17 	ldw	r2,-4(fp)
    1cbc:	d0a6c115 	stw	r2,-25852(gp)
    _transfer();
    1cc0:	0001d380 	call	1d38 <_transfer>
   
}
    1cc4:	e037883a 	mov	sp,fp
    1cc8:	dfc00117 	ldw	ra,4(sp)
    1ccc:	df000017 	ldw	fp,0(sp)
    1cd0:	dec00204 	addi	sp,sp,8
    1cd4:	f800283a 	ret

00001cd8 <iotransfer>:

/**
 * Called from kernel thread.
 */
void iotransfer(Process p, int interruptV){
    1cd8:	defffc04 	addi	sp,sp,-16
    1cdc:	dfc00315 	stw	ra,12(sp)
    1ce0:	df000215 	stw	fp,8(sp)
    1ce4:	df000204 	addi	fp,sp,8
    1ce8:	e13ffe15 	stw	r4,-8(fp)
    1cec:	e17fff15 	stw	r5,-4(fp)
    
    insertTail(interruptV, running);
    1cf0:	d166c017 	ldw	r5,-25856(gp)
    1cf4:	e13fff17 	ldw	r4,-4(fp)
    1cf8:	00002a40 	call	2a4 <insertTail>
    nextP = p;
    1cfc:	e0bffe17 	ldw	r2,-8(fp)
    1d00:	d0a6c115 	stw	r2,-25852(gp)
    _transfer();
    1d04:	0001d380 	call	1d38 <_transfer>
   
}
    1d08:	e037883a 	mov	sp,fp
    1d0c:	dfc00117 	ldw	ra,4(sp)
    1d10:	df000017 	ldw	fp,0(sp)
    1d14:	dec00204 	addi	sp,sp,8
    1d18:	f800283a 	ret

00001d1c <_createStack>:
.text
_createStack: #r4 = newSP
			  #r5 = newPC
			  #r6 = stackSize - 4
	   # pointer to the bottom of the stack
	   add r2, r4, r6
    1d1c:	2185883a 	add	r2,r4,r6
	   # init sp with r8
	   addi r8, r2, -100 # sp
    1d20:	123fe704 	addi	r8,r2,-100
	   stw  r5, 0(r8)   # sp[0] = PC
    1d24:	41400015 	stw	r5,0(r8)
	   addi r9, r0, 1
    1d28:	02400044 	movi	r9,1
	   stw  r9, 96(r8)  # sp[24] = status = 1
    1d2c:	42401815 	stw	r9,96(r8)
	   # store sp on the stack bottom
	   stw  r8, 0(r2)
    1d30:	12000015 	stw	r8,0(r2)
	   # return pointer to stack address
	   ret
    1d34:	f800283a 	ret

00001d38 <_transfer>:
 * (eret instruction retores estatus into status register, while jumping at ea)
 */
.global _transfer
.text
_transfer:
	addi sp, sp, -100
    1d38:	deffe704 	addi	sp,sp,-100
	stw ra,  0(sp)
    1d3c:	dfc00015 	stw	ra,0(sp)
    stw fp,  4(sp)
    1d40:	df000115 	stw	fp,4(sp)
    stw r2,  8(sp)
    1d44:	d8800215 	stw	r2,8(sp)
    stw r3,  12(sp)
    1d48:	d8c00315 	stw	r3,12(sp)
    stw r4,  16(sp)
    1d4c:	d9000415 	stw	r4,16(sp)
    stw r5,  20(sp)
    1d50:	d9400515 	stw	r5,20(sp)
    stw r6,  24(sp)
    1d54:	d9800615 	stw	r6,24(sp)
    stw r7,  28(sp)
    1d58:	d9c00715 	stw	r7,28(sp)
    stw r8,  32(sp)
    1d5c:	da000815 	stw	r8,32(sp)
    stw r9,  36(sp)
    1d60:	da400915 	stw	r9,36(sp)
    stw r10, 40(sp)
    1d64:	da800a15 	stw	r10,40(sp)
    stw r11, 44(sp)
    1d68:	dac00b15 	stw	r11,44(sp)
    stw r12, 48(sp)
    1d6c:	db000c15 	stw	r12,48(sp)
    stw r13, 52(sp)
    1d70:	db400d15 	stw	r13,52(sp)
    stw r14, 56(sp)
    1d74:	db800e15 	stw	r14,56(sp)
    stw r15, 60(sp)
    1d78:	dbc00f15 	stw	r15,60(sp)
    stw r16, 64(sp)
    1d7c:	dc001015 	stw	r16,64(sp)
    stw r17, 68(sp)
    1d80:	dc401115 	stw	r17,68(sp)
    stw r18, 72(sp)
    1d84:	dc801215 	stw	r18,72(sp)
    stw r19, 76(sp)
    1d88:	dcc01315 	stw	r19,76(sp)
    stw r20, 80(sp)
    1d8c:	dd001415 	stw	r20,80(sp)
    stw r21, 84(sp)
    1d90:	dd401515 	stw	r21,84(sp)
    stw r22, 88(sp)
    1d94:	dd801615 	stw	r22,88(sp)
    stw r23, 92(sp)
    1d98:	ddc01715 	stw	r23,92(sp)
	# save the current interrupt switch status
    rdctl r2, status
    1d9c:	0005303a 	rdctl	r2,status
    stw   r2, 96(sp)
    1da0:	d8801815 	stw	r2,96(sp)
    # running->sp = sp
    ldw r2, %gprel(running)(gp)
    1da4:	d0a6c017 	ldw	r2,-25856(gp)
    stw sp, (r2)
    1da8:	16c00015 	stw	sp,0(r2)
    # running = nextP
	ldw r2, %gprel(nextP)(gp)
    1dac:	d0a6c117 	ldw	r2,-25852(gp)
	stw r2, %gprel(running)(gp)
    1db0:	d0a6c015 	stw	r2,-25856(gp)
	# set sp to the sp from the nextP
	ldw sp, (r2)
    1db4:	16c00017 	ldw	sp,0(r2)
	# return using bret -> ba
	ldw ba,  0(sp)
    1db8:	df800017 	ldw	r30,0(sp)
    ldw fp,  4(sp)
    1dbc:	df000117 	ldw	fp,4(sp)
    ldw r2,  8(sp)
    1dc0:	d8800217 	ldw	r2,8(sp)
    ldw r3,  12(sp)
    1dc4:	d8c00317 	ldw	r3,12(sp)
    ldw r4,  16(sp)
    1dc8:	d9000417 	ldw	r4,16(sp)
    ldw r5,  20(sp)
    1dcc:	d9400517 	ldw	r5,20(sp)
    ldw r6,  24(sp)
    1dd0:	d9800617 	ldw	r6,24(sp)
    ldw r7,  28(sp)
    1dd4:	d9c00717 	ldw	r7,28(sp)
    ldw r8,  32(sp)
    1dd8:	da000817 	ldw	r8,32(sp)
    ldw r9,  36(sp)
    1ddc:	da400917 	ldw	r9,36(sp)
    ldw r10, 40(sp)
    1de0:	da800a17 	ldw	r10,40(sp)
    ldw r11, 44(sp)
    1de4:	dac00b17 	ldw	r11,44(sp)
    ldw r12, 48(sp)
    1de8:	db000c17 	ldw	r12,48(sp)
    ldw r13, 52(sp)
    1dec:	db400d17 	ldw	r13,52(sp)
    ldw r14, 56(sp)
    1df0:	db800e17 	ldw	r14,56(sp)
    ldw r15, 60(sp)
    1df4:	dbc00f17 	ldw	r15,60(sp)
    ldw r16, 64(sp)
    1df8:	dc001017 	ldw	r16,64(sp)
    ldw r17, 68(sp)
    1dfc:	dc401117 	ldw	r17,68(sp)
    ldw r18, 72(sp)
    1e00:	dc801217 	ldw	r18,72(sp)
    ldw r19, 76(sp)
    1e04:	dcc01317 	ldw	r19,76(sp)
    ldw r20, 80(sp)
    1e08:	dd001417 	ldw	r20,80(sp)
    ldw r21, 84(sp)
    1e0c:	dd401517 	ldw	r21,84(sp)
    ldw r22, 88(sp)
    1e10:	dd801617 	ldw	r22,88(sp)
	# restore interrupt switch status into bstatus
    ldw r23, 96(sp)
    1e14:	ddc01817 	ldw	r23,96(sp)
    wrctl bstatus, r23
    1e18:	b80170ba 	wrctl	bstatus,r23
    ldw r23, 92(sp)
    1e1c:	ddc01717 	ldw	r23,92(sp)

	addi sp, sp, 100
    1e20:	dec01904 	addi	sp,sp,100
	# bret will copy back bstatus into status and go to ba
	bret
    1e24:	f000483a 	bret

00001e28 <maskInterrupts>:


.global maskInterrupts
.text
maskInterrupts:
	addi r9, r0, 0
    1e28:	02400004 	movi	r9,0
	wrctl status, r9
    1e2c:	4801703a 	wrctl	status,r9
	ret
    1e30:	f800283a 	ret

00001e34 <allowInterrupts>:

.global allowInterrupts
.text
allowInterrupts:
	addi r9, r0, 1
    1e34:	02400044 	movi	r9,1
	wrctl status, r9
    1e38:	4801703a 	wrctl	status,r9
	ret
    1e3c:	f800283a 	ret

00001e40 <udivmodsi4>:
    1e40:	29001b2e 	bgeu	r5,r4,1eb0 <udivmodsi4+0x70>
    1e44:	28001a16 	blt	r5,zero,1eb0 <udivmodsi4+0x70>
    1e48:	00800044 	movi	r2,1
    1e4c:	0007883a 	mov	r3,zero
    1e50:	01c007c4 	movi	r7,31
    1e54:	00000306 	br	1e64 <udivmodsi4+0x24>
    1e58:	19c01326 	beq	r3,r7,1ea8 <udivmodsi4+0x68>
    1e5c:	18c00044 	addi	r3,r3,1
    1e60:	28000416 	blt	r5,zero,1e74 <udivmodsi4+0x34>
    1e64:	294b883a 	add	r5,r5,r5
    1e68:	1085883a 	add	r2,r2,r2
    1e6c:	293ffa36 	bltu	r5,r4,1e58 <udivmodsi4+0x18>
    1e70:	10000d26 	beq	r2,zero,1ea8 <udivmodsi4+0x68>
    1e74:	0007883a 	mov	r3,zero
    1e78:	21400236 	bltu	r4,r5,1e84 <udivmodsi4+0x44>
    1e7c:	2149c83a 	sub	r4,r4,r5
    1e80:	1886b03a 	or	r3,r3,r2
    1e84:	1004d07a 	srli	r2,r2,1
    1e88:	280ad07a 	srli	r5,r5,1
    1e8c:	103ffa1e 	bne	r2,zero,1e78 <udivmodsi4+0x38>
    1e90:	30000226 	beq	r6,zero,1e9c <udivmodsi4+0x5c>
    1e94:	2005883a 	mov	r2,r4
    1e98:	f800283a 	ret
    1e9c:	1809883a 	mov	r4,r3
    1ea0:	2005883a 	mov	r2,r4
    1ea4:	f800283a 	ret
    1ea8:	0007883a 	mov	r3,zero
    1eac:	003ff806 	br	1e90 <udivmodsi4+0x50>
    1eb0:	00800044 	movi	r2,1
    1eb4:	0007883a 	mov	r3,zero
    1eb8:	003fef06 	br	1e78 <udivmodsi4+0x38>

00001ebc <__divsi3>:
    1ebc:	defffe04 	addi	sp,sp,-8
    1ec0:	dc000015 	stw	r16,0(sp)
    1ec4:	dfc00115 	stw	ra,4(sp)
    1ec8:	0021883a 	mov	r16,zero
    1ecc:	20000c16 	blt	r4,zero,1f00 <__divsi3+0x44>
    1ed0:	000d883a 	mov	r6,zero
    1ed4:	28000e16 	blt	r5,zero,1f10 <__divsi3+0x54>
    1ed8:	0001e400 	call	1e40 <udivmodsi4>
    1edc:	1007883a 	mov	r3,r2
    1ee0:	8005003a 	cmpeq	r2,r16,zero
    1ee4:	1000011e 	bne	r2,zero,1eec <__divsi3+0x30>
    1ee8:	00c7c83a 	sub	r3,zero,r3
    1eec:	1805883a 	mov	r2,r3
    1ef0:	dfc00117 	ldw	ra,4(sp)
    1ef4:	dc000017 	ldw	r16,0(sp)
    1ef8:	dec00204 	addi	sp,sp,8
    1efc:	f800283a 	ret
    1f00:	0109c83a 	sub	r4,zero,r4
    1f04:	04000044 	movi	r16,1
    1f08:	000d883a 	mov	r6,zero
    1f0c:	283ff20e 	bge	r5,zero,1ed8 <__divsi3+0x1c>
    1f10:	014bc83a 	sub	r5,zero,r5
    1f14:	8021003a 	cmpeq	r16,r16,zero
    1f18:	003fef06 	br	1ed8 <__divsi3+0x1c>

00001f1c <__modsi3>:
    1f1c:	deffff04 	addi	sp,sp,-4
    1f20:	dfc00015 	stw	ra,0(sp)
    1f24:	01800044 	movi	r6,1
    1f28:	2807883a 	mov	r3,r5
    1f2c:	20000416 	blt	r4,zero,1f40 <__modsi3+0x24>
    1f30:	28000c16 	blt	r5,zero,1f64 <__modsi3+0x48>
    1f34:	dfc00017 	ldw	ra,0(sp)
    1f38:	dec00104 	addi	sp,sp,4
    1f3c:	0001e401 	jmpi	1e40 <udivmodsi4>
    1f40:	0109c83a 	sub	r4,zero,r4
    1f44:	28000b16 	blt	r5,zero,1f74 <__modsi3+0x58>
    1f48:	180b883a 	mov	r5,r3
    1f4c:	01800044 	movi	r6,1
    1f50:	0001e400 	call	1e40 <udivmodsi4>
    1f54:	0085c83a 	sub	r2,zero,r2
    1f58:	dfc00017 	ldw	ra,0(sp)
    1f5c:	dec00104 	addi	sp,sp,4
    1f60:	f800283a 	ret
    1f64:	014bc83a 	sub	r5,zero,r5
    1f68:	dfc00017 	ldw	ra,0(sp)
    1f6c:	dec00104 	addi	sp,sp,4
    1f70:	0001e401 	jmpi	1e40 <udivmodsi4>
    1f74:	0147c83a 	sub	r3,zero,r5
    1f78:	003ff306 	br	1f48 <__modsi3+0x2c>

00001f7c <__udivsi3>:
    1f7c:	000d883a 	mov	r6,zero
    1f80:	0001e401 	jmpi	1e40 <udivmodsi4>

00001f84 <__umodsi3>:
    1f84:	01800044 	movi	r6,1
    1f88:	0001e401 	jmpi	1e40 <udivmodsi4>

00001f8c <exit>:
    1f8c:	defffe04 	addi	sp,sp,-8
    1f90:	000b883a 	mov	r5,zero
    1f94:	dc000015 	stw	r16,0(sp)
    1f98:	dfc00115 	stw	ra,4(sp)
    1f9c:	2021883a 	mov	r16,r4
    1fa0:	00049a40 	call	49a4 <__call_exitprocs>
    1fa4:	00800074 	movhi	r2,1
    1fa8:	1080c304 	addi	r2,r2,780
    1fac:	11000017 	ldw	r4,0(r2)
    1fb0:	20800f17 	ldw	r2,60(r4)
    1fb4:	10000126 	beq	r2,zero,1fbc <exit+0x30>
    1fb8:	103ee83a 	callr	r2
    1fbc:	8009883a 	mov	r4,r16
    1fc0:	000b9600 	call	b960 <_exit>

00001fc4 <free>:
    1fc4:	00800074 	movhi	r2,1
    1fc8:	1080c204 	addi	r2,r2,776
    1fcc:	200b883a 	mov	r5,r4
    1fd0:	11000017 	ldw	r4,0(r2)
    1fd4:	000693c1 	jmpi	693c <_free_r>

00001fd8 <malloc>:
    1fd8:	00800074 	movhi	r2,1
    1fdc:	1080c204 	addi	r2,r2,776
    1fe0:	200b883a 	mov	r5,r4
    1fe4:	11000017 	ldw	r4,0(r2)
    1fe8:	0001fec1 	jmpi	1fec <_malloc_r>

00001fec <_malloc_r>:
    1fec:	defff604 	addi	sp,sp,-40
    1ff0:	28c002c4 	addi	r3,r5,11
    1ff4:	00800584 	movi	r2,22
    1ff8:	dc800215 	stw	r18,8(sp)
    1ffc:	dfc00915 	stw	ra,36(sp)
    2000:	df000815 	stw	fp,32(sp)
    2004:	ddc00715 	stw	r23,28(sp)
    2008:	dd800615 	stw	r22,24(sp)
    200c:	dd400515 	stw	r21,20(sp)
    2010:	dd000415 	stw	r20,16(sp)
    2014:	dcc00315 	stw	r19,12(sp)
    2018:	dc400115 	stw	r17,4(sp)
    201c:	dc000015 	stw	r16,0(sp)
    2020:	2025883a 	mov	r18,r4
    2024:	10c01236 	bltu	r2,r3,2070 <_malloc_r+0x84>
    2028:	04400404 	movi	r17,16
    202c:	8940142e 	bgeu	r17,r5,2080 <_malloc_r+0x94>
    2030:	00800304 	movi	r2,12
    2034:	0007883a 	mov	r3,zero
    2038:	90800015 	stw	r2,0(r18)
    203c:	1805883a 	mov	r2,r3
    2040:	dfc00917 	ldw	ra,36(sp)
    2044:	df000817 	ldw	fp,32(sp)
    2048:	ddc00717 	ldw	r23,28(sp)
    204c:	dd800617 	ldw	r22,24(sp)
    2050:	dd400517 	ldw	r21,20(sp)
    2054:	dd000417 	ldw	r20,16(sp)
    2058:	dcc00317 	ldw	r19,12(sp)
    205c:	dc800217 	ldw	r18,8(sp)
    2060:	dc400117 	ldw	r17,4(sp)
    2064:	dc000017 	ldw	r16,0(sp)
    2068:	dec00a04 	addi	sp,sp,40
    206c:	f800283a 	ret
    2070:	00bffe04 	movi	r2,-8
    2074:	18a2703a 	and	r17,r3,r2
    2078:	883fed16 	blt	r17,zero,2030 <_malloc_r+0x44>
    207c:	897fec36 	bltu	r17,r5,2030 <_malloc_r+0x44>
    2080:	9009883a 	mov	r4,r18
    2084:	000c03c0 	call	c03c <__malloc_lock>
    2088:	00807dc4 	movi	r2,503
    208c:	14402b2e 	bgeu	r2,r17,213c <_malloc_r+0x150>
    2090:	8806d27a 	srli	r3,r17,9
    2094:	18003f1e 	bne	r3,zero,2194 <_malloc_r+0x1a8>
    2098:	880cd0fa 	srli	r6,r17,3
    209c:	300490fa 	slli	r2,r6,3
    20a0:	02c00074 	movhi	r11,1
    20a4:	5afb3a04 	addi	r11,r11,-4888
    20a8:	12cb883a 	add	r5,r2,r11
    20ac:	2c000317 	ldw	r16,12(r5)
    20b0:	580f883a 	mov	r7,r11
    20b4:	2c00041e 	bne	r5,r16,20c8 <_malloc_r+0xdc>
    20b8:	00000a06 	br	20e4 <_malloc_r+0xf8>
    20bc:	1800860e 	bge	r3,zero,22d8 <_malloc_r+0x2ec>
    20c0:	84000317 	ldw	r16,12(r16)
    20c4:	2c000726 	beq	r5,r16,20e4 <_malloc_r+0xf8>
    20c8:	80800117 	ldw	r2,4(r16)
    20cc:	00ffff04 	movi	r3,-4
    20d0:	10c8703a 	and	r4,r2,r3
    20d4:	2447c83a 	sub	r3,r4,r17
    20d8:	008003c4 	movi	r2,15
    20dc:	10fff70e 	bge	r2,r3,20bc <_malloc_r+0xd0>
    20e0:	31bfffc4 	addi	r6,r6,-1
    20e4:	32400044 	addi	r9,r6,1
    20e8:	02800074 	movhi	r10,1
    20ec:	52bb3c04 	addi	r10,r10,-4880
    20f0:	54000217 	ldw	r16,8(r10)
    20f4:	8280a026 	beq	r16,r10,2378 <_malloc_r+0x38c>
    20f8:	80800117 	ldw	r2,4(r16)
    20fc:	00ffff04 	movi	r3,-4
    2100:	10ca703a 	and	r5,r2,r3
    2104:	2c4dc83a 	sub	r6,r5,r17
    2108:	008003c4 	movi	r2,15
    210c:	11808316 	blt	r2,r6,231c <_malloc_r+0x330>
    2110:	52800315 	stw	r10,12(r10)
    2114:	52800215 	stw	r10,8(r10)
    2118:	30002916 	blt	r6,zero,21c0 <_malloc_r+0x1d4>
    211c:	8147883a 	add	r3,r16,r5
    2120:	18800117 	ldw	r2,4(r3)
    2124:	9009883a 	mov	r4,r18
    2128:	10800054 	ori	r2,r2,1
    212c:	18800115 	stw	r2,4(r3)
    2130:	000c05c0 	call	c05c <__malloc_unlock>
    2134:	80c00204 	addi	r3,r16,8
    2138:	003fc006 	br	203c <_malloc_r+0x50>
    213c:	02c00074 	movhi	r11,1
    2140:	5afb3a04 	addi	r11,r11,-4888
    2144:	8ac5883a 	add	r2,r17,r11
    2148:	14000317 	ldw	r16,12(r2)
    214c:	580f883a 	mov	r7,r11
    2150:	8806d0fa 	srli	r3,r17,3
    2154:	14006c26 	beq	r2,r16,2308 <_malloc_r+0x31c>
    2158:	80c00117 	ldw	r3,4(r16)
    215c:	00bfff04 	movi	r2,-4
    2160:	81800317 	ldw	r6,12(r16)
    2164:	1886703a 	and	r3,r3,r2
    2168:	80c7883a 	add	r3,r16,r3
    216c:	18800117 	ldw	r2,4(r3)
    2170:	81400217 	ldw	r5,8(r16)
    2174:	9009883a 	mov	r4,r18
    2178:	10800054 	ori	r2,r2,1
    217c:	18800115 	stw	r2,4(r3)
    2180:	31400215 	stw	r5,8(r6)
    2184:	29800315 	stw	r6,12(r5)
    2188:	000c05c0 	call	c05c <__malloc_unlock>
    218c:	80c00204 	addi	r3,r16,8
    2190:	003faa06 	br	203c <_malloc_r+0x50>
    2194:	00800104 	movi	r2,4
    2198:	10c0052e 	bgeu	r2,r3,21b0 <_malloc_r+0x1c4>
    219c:	00800504 	movi	r2,20
    21a0:	10c07836 	bltu	r2,r3,2384 <_malloc_r+0x398>
    21a4:	198016c4 	addi	r6,r3,91
    21a8:	300490fa 	slli	r2,r6,3
    21ac:	003fbc06 	br	20a0 <_malloc_r+0xb4>
    21b0:	8804d1ba 	srli	r2,r17,6
    21b4:	11800e04 	addi	r6,r2,56
    21b8:	300490fa 	slli	r2,r6,3
    21bc:	003fb806 	br	20a0 <_malloc_r+0xb4>
    21c0:	00807fc4 	movi	r2,511
    21c4:	1140bb36 	bltu	r2,r5,24b4 <_malloc_r+0x4c8>
    21c8:	2806d0fa 	srli	r3,r5,3
    21cc:	573ffe04 	addi	fp,r10,-8
    21d0:	00800044 	movi	r2,1
    21d4:	180890fa 	slli	r4,r3,3
    21d8:	1807d0ba 	srai	r3,r3,2
    21dc:	e1c00117 	ldw	r7,4(fp)
    21e0:	5909883a 	add	r4,r11,r4
    21e4:	21400217 	ldw	r5,8(r4)
    21e8:	10c4983a 	sll	r2,r2,r3
    21ec:	81000315 	stw	r4,12(r16)
    21f0:	81400215 	stw	r5,8(r16)
    21f4:	388eb03a 	or	r7,r7,r2
    21f8:	2c000315 	stw	r16,12(r5)
    21fc:	24000215 	stw	r16,8(r4)
    2200:	e1c00115 	stw	r7,4(fp)
    2204:	4807883a 	mov	r3,r9
    2208:	4800cd16 	blt	r9,zero,2540 <_malloc_r+0x554>
    220c:	1807d0ba 	srai	r3,r3,2
    2210:	00800044 	movi	r2,1
    2214:	10c8983a 	sll	r4,r2,r3
    2218:	39004436 	bltu	r7,r4,232c <_malloc_r+0x340>
    221c:	21c4703a 	and	r2,r4,r7
    2220:	10000a1e 	bne	r2,zero,224c <_malloc_r+0x260>
    2224:	2109883a 	add	r4,r4,r4
    2228:	00bfff04 	movi	r2,-4
    222c:	4884703a 	and	r2,r9,r2
    2230:	3906703a 	and	r3,r7,r4
    2234:	12400104 	addi	r9,r2,4
    2238:	1800041e 	bne	r3,zero,224c <_malloc_r+0x260>
    223c:	2109883a 	add	r4,r4,r4
    2240:	3904703a 	and	r2,r7,r4
    2244:	4a400104 	addi	r9,r9,4
    2248:	103ffc26 	beq	r2,zero,223c <_malloc_r+0x250>
    224c:	480490fa 	slli	r2,r9,3
    2250:	4819883a 	mov	r12,r9
    2254:	023fff04 	movi	r8,-4
    2258:	589b883a 	add	r13,r11,r2
    225c:	6807883a 	mov	r3,r13
    2260:	014003c4 	movi	r5,15
    2264:	1c000317 	ldw	r16,12(r3)
    2268:	1c00041e 	bne	r3,r16,227c <_malloc_r+0x290>
    226c:	0000a706 	br	250c <_malloc_r+0x520>
    2270:	3000ab0e 	bge	r6,zero,2520 <_malloc_r+0x534>
    2274:	84000317 	ldw	r16,12(r16)
    2278:	1c00a426 	beq	r3,r16,250c <_malloc_r+0x520>
    227c:	80800117 	ldw	r2,4(r16)
    2280:	1204703a 	and	r2,r2,r8
    2284:	144dc83a 	sub	r6,r2,r17
    2288:	29bff90e 	bge	r5,r6,2270 <_malloc_r+0x284>
    228c:	81000317 	ldw	r4,12(r16)
    2290:	80c00217 	ldw	r3,8(r16)
    2294:	89400054 	ori	r5,r17,1
    2298:	8445883a 	add	r2,r16,r17
    229c:	20c00215 	stw	r3,8(r4)
    22a0:	19000315 	stw	r4,12(r3)
    22a4:	81400115 	stw	r5,4(r16)
    22a8:	1187883a 	add	r3,r2,r6
    22ac:	31000054 	ori	r4,r6,1
    22b0:	50800315 	stw	r2,12(r10)
    22b4:	50800215 	stw	r2,8(r10)
    22b8:	19800015 	stw	r6,0(r3)
    22bc:	11000115 	stw	r4,4(r2)
    22c0:	12800215 	stw	r10,8(r2)
    22c4:	12800315 	stw	r10,12(r2)
    22c8:	9009883a 	mov	r4,r18
    22cc:	000c05c0 	call	c05c <__malloc_unlock>
    22d0:	80c00204 	addi	r3,r16,8
    22d4:	003f5906 	br	203c <_malloc_r+0x50>
    22d8:	8109883a 	add	r4,r16,r4
    22dc:	20800117 	ldw	r2,4(r4)
    22e0:	80c00217 	ldw	r3,8(r16)
    22e4:	81400317 	ldw	r5,12(r16)
    22e8:	10800054 	ori	r2,r2,1
    22ec:	20800115 	stw	r2,4(r4)
    22f0:	28c00215 	stw	r3,8(r5)
    22f4:	19400315 	stw	r5,12(r3)
    22f8:	9009883a 	mov	r4,r18
    22fc:	000c05c0 	call	c05c <__malloc_unlock>
    2300:	80c00204 	addi	r3,r16,8
    2304:	003f4d06 	br	203c <_malloc_r+0x50>
    2308:	80800204 	addi	r2,r16,8
    230c:	14000317 	ldw	r16,12(r2)
    2310:	143f911e 	bne	r2,r16,2158 <_malloc_r+0x16c>
    2314:	1a400084 	addi	r9,r3,2
    2318:	003f7306 	br	20e8 <_malloc_r+0xfc>
    231c:	88c00054 	ori	r3,r17,1
    2320:	8445883a 	add	r2,r16,r17
    2324:	80c00115 	stw	r3,4(r16)
    2328:	003fdf06 	br	22a8 <_malloc_r+0x2bc>
    232c:	e4000217 	ldw	r16,8(fp)
    2330:	00bfff04 	movi	r2,-4
    2334:	80c00117 	ldw	r3,4(r16)
    2338:	802d883a 	mov	r22,r16
    233c:	18aa703a 	and	r21,r3,r2
    2340:	ac401636 	bltu	r21,r17,239c <_malloc_r+0x3b0>
    2344:	ac49c83a 	sub	r4,r21,r17
    2348:	008003c4 	movi	r2,15
    234c:	1100130e 	bge	r2,r4,239c <_malloc_r+0x3b0>
    2350:	88800054 	ori	r2,r17,1
    2354:	8447883a 	add	r3,r16,r17
    2358:	80800115 	stw	r2,4(r16)
    235c:	20800054 	ori	r2,r4,1
    2360:	18800115 	stw	r2,4(r3)
    2364:	e0c00215 	stw	r3,8(fp)
    2368:	9009883a 	mov	r4,r18
    236c:	000c05c0 	call	c05c <__malloc_unlock>
    2370:	80c00204 	addi	r3,r16,8
    2374:	003f3106 	br	203c <_malloc_r+0x50>
    2378:	39c00117 	ldw	r7,4(r7)
    237c:	573ffe04 	addi	fp,r10,-8
    2380:	003fa006 	br	2204 <_malloc_r+0x218>
    2384:	00801504 	movi	r2,84
    2388:	10c06736 	bltu	r2,r3,2528 <_malloc_r+0x53c>
    238c:	8804d33a 	srli	r2,r17,12
    2390:	11801b84 	addi	r6,r2,110
    2394:	300490fa 	slli	r2,r6,3
    2398:	003f4106 	br	20a0 <_malloc_r+0xb4>
    239c:	d0a6c217 	ldw	r2,-25848(gp)
    23a0:	d0e00417 	ldw	r3,-32752(gp)
    23a4:	053fffc4 	movi	r20,-1
    23a8:	10800404 	addi	r2,r2,16
    23ac:	88a7883a 	add	r19,r17,r2
    23b0:	1d000326 	beq	r3,r20,23c0 <_malloc_r+0x3d4>
    23b4:	98c3ffc4 	addi	r3,r19,4095
    23b8:	00bc0004 	movi	r2,-4096
    23bc:	18a6703a 	and	r19,r3,r2
    23c0:	9009883a 	mov	r4,r18
    23c4:	980b883a 	mov	r5,r19
    23c8:	00028580 	call	2858 <_sbrk_r>
    23cc:	1009883a 	mov	r4,r2
    23d0:	15000426 	beq	r2,r20,23e4 <_malloc_r+0x3f8>
    23d4:	854b883a 	add	r5,r16,r21
    23d8:	1029883a 	mov	r20,r2
    23dc:	11405a2e 	bgeu	r2,r5,2548 <_malloc_r+0x55c>
    23e0:	87000c26 	beq	r16,fp,2414 <_malloc_r+0x428>
    23e4:	e4000217 	ldw	r16,8(fp)
    23e8:	80c00117 	ldw	r3,4(r16)
    23ec:	00bfff04 	movi	r2,-4
    23f0:	1884703a 	and	r2,r3,r2
    23f4:	14400336 	bltu	r2,r17,2404 <_malloc_r+0x418>
    23f8:	1449c83a 	sub	r4,r2,r17
    23fc:	008003c4 	movi	r2,15
    2400:	113fd316 	blt	r2,r4,2350 <_malloc_r+0x364>
    2404:	9009883a 	mov	r4,r18
    2408:	000c05c0 	call	c05c <__malloc_unlock>
    240c:	0007883a 	mov	r3,zero
    2410:	003f0a06 	br	203c <_malloc_r+0x50>
    2414:	05c00074 	movhi	r23,1
    2418:	bdc79004 	addi	r23,r23,7744
    241c:	b8800017 	ldw	r2,0(r23)
    2420:	988d883a 	add	r6,r19,r2
    2424:	b9800015 	stw	r6,0(r23)
    2428:	d0e00417 	ldw	r3,-32752(gp)
    242c:	00bfffc4 	movi	r2,-1
    2430:	18808e26 	beq	r3,r2,266c <_malloc_r+0x680>
    2434:	2145c83a 	sub	r2,r4,r5
    2438:	3085883a 	add	r2,r6,r2
    243c:	b8800015 	stw	r2,0(r23)
    2440:	20c001cc 	andi	r3,r4,7
    2444:	18005f1e 	bne	r3,zero,25c4 <_malloc_r+0x5d8>
    2448:	000b883a 	mov	r5,zero
    244c:	a4c5883a 	add	r2,r20,r19
    2450:	1083ffcc 	andi	r2,r2,4095
    2454:	00c40004 	movi	r3,4096
    2458:	1887c83a 	sub	r3,r3,r2
    245c:	28e7883a 	add	r19,r5,r3
    2460:	9009883a 	mov	r4,r18
    2464:	980b883a 	mov	r5,r19
    2468:	00028580 	call	2858 <_sbrk_r>
    246c:	1007883a 	mov	r3,r2
    2470:	00bfffc4 	movi	r2,-1
    2474:	18807a26 	beq	r3,r2,2660 <_malloc_r+0x674>
    2478:	1d05c83a 	sub	r2,r3,r20
    247c:	9885883a 	add	r2,r19,r2
    2480:	10c00054 	ori	r3,r2,1
    2484:	b8800017 	ldw	r2,0(r23)
    2488:	a021883a 	mov	r16,r20
    248c:	a0c00115 	stw	r3,4(r20)
    2490:	9885883a 	add	r2,r19,r2
    2494:	b8800015 	stw	r2,0(r23)
    2498:	e5000215 	stw	r20,8(fp)
    249c:	b7003626 	beq	r22,fp,2578 <_malloc_r+0x58c>
    24a0:	018003c4 	movi	r6,15
    24a4:	35404b36 	bltu	r6,r21,25d4 <_malloc_r+0x5e8>
    24a8:	00800044 	movi	r2,1
    24ac:	a0800115 	stw	r2,4(r20)
    24b0:	003fcd06 	br	23e8 <_malloc_r+0x3fc>
    24b4:	2808d27a 	srli	r4,r5,9
    24b8:	2000371e 	bne	r4,zero,2598 <_malloc_r+0x5ac>
    24bc:	2808d0fa 	srli	r4,r5,3
    24c0:	200690fa 	slli	r3,r4,3
    24c4:	1ad1883a 	add	r8,r3,r11
    24c8:	41800217 	ldw	r6,8(r8)
    24cc:	41805b26 	beq	r8,r6,263c <_malloc_r+0x650>
    24d0:	30800117 	ldw	r2,4(r6)
    24d4:	00ffff04 	movi	r3,-4
    24d8:	10c4703a 	and	r2,r2,r3
    24dc:	2880022e 	bgeu	r5,r2,24e8 <_malloc_r+0x4fc>
    24e0:	31800217 	ldw	r6,8(r6)
    24e4:	41bffa1e 	bne	r8,r6,24d0 <_malloc_r+0x4e4>
    24e8:	32000317 	ldw	r8,12(r6)
    24ec:	39c00117 	ldw	r7,4(r7)
    24f0:	82000315 	stw	r8,12(r16)
    24f4:	81800215 	stw	r6,8(r16)
    24f8:	07000074 	movhi	fp,1
    24fc:	e73b3a04 	addi	fp,fp,-4888
    2500:	34000315 	stw	r16,12(r6)
    2504:	44000215 	stw	r16,8(r8)
    2508:	003f3e06 	br	2204 <_malloc_r+0x218>
    250c:	63000044 	addi	r12,r12,1
    2510:	608000cc 	andi	r2,r12,3
    2514:	10005d26 	beq	r2,zero,268c <_malloc_r+0x6a0>
    2518:	18c00204 	addi	r3,r3,8
    251c:	003f5106 	br	2264 <_malloc_r+0x278>
    2520:	8089883a 	add	r4,r16,r2
    2524:	003f6d06 	br	22dc <_malloc_r+0x2f0>
    2528:	00805504 	movi	r2,340
    252c:	10c02036 	bltu	r2,r3,25b0 <_malloc_r+0x5c4>
    2530:	8804d3fa 	srli	r2,r17,15
    2534:	11801dc4 	addi	r6,r2,119
    2538:	300490fa 	slli	r2,r6,3
    253c:	003ed806 	br	20a0 <_malloc_r+0xb4>
    2540:	48c000c4 	addi	r3,r9,3
    2544:	003f3106 	br	220c <_malloc_r+0x220>
    2548:	05c00074 	movhi	r23,1
    254c:	bdc79004 	addi	r23,r23,7744
    2550:	b8800017 	ldw	r2,0(r23)
    2554:	988d883a 	add	r6,r19,r2
    2558:	b9800015 	stw	r6,0(r23)
    255c:	293fb21e 	bne	r5,r4,2428 <_malloc_r+0x43c>
    2560:	2083ffcc 	andi	r2,r4,4095
    2564:	103fb01e 	bne	r2,zero,2428 <_malloc_r+0x43c>
    2568:	e4000217 	ldw	r16,8(fp)
    256c:	9d45883a 	add	r2,r19,r21
    2570:	10800054 	ori	r2,r2,1
    2574:	80800115 	stw	r2,4(r16)
    2578:	b8c00017 	ldw	r3,0(r23)
    257c:	d0a6c317 	ldw	r2,-25844(gp)
    2580:	10c0012e 	bgeu	r2,r3,2588 <_malloc_r+0x59c>
    2584:	d0e6c315 	stw	r3,-25844(gp)
    2588:	d0a6c417 	ldw	r2,-25840(gp)
    258c:	10ff962e 	bgeu	r2,r3,23e8 <_malloc_r+0x3fc>
    2590:	d0e6c415 	stw	r3,-25840(gp)
    2594:	003f9406 	br	23e8 <_malloc_r+0x3fc>
    2598:	00800104 	movi	r2,4
    259c:	11001e36 	bltu	r2,r4,2618 <_malloc_r+0x62c>
    25a0:	2804d1ba 	srli	r2,r5,6
    25a4:	11000e04 	addi	r4,r2,56
    25a8:	200690fa 	slli	r3,r4,3
    25ac:	003fc506 	br	24c4 <_malloc_r+0x4d8>
    25b0:	00815504 	movi	r2,1364
    25b4:	10c01d2e 	bgeu	r2,r3,262c <_malloc_r+0x640>
    25b8:	01801f84 	movi	r6,126
    25bc:	0080fc04 	movi	r2,1008
    25c0:	003eb706 	br	20a0 <_malloc_r+0xb4>
    25c4:	00800204 	movi	r2,8
    25c8:	10cbc83a 	sub	r5,r2,r3
    25cc:	2169883a 	add	r20,r4,r5
    25d0:	003f9e06 	br	244c <_malloc_r+0x460>
    25d4:	00bffe04 	movi	r2,-8
    25d8:	a93ffd04 	addi	r4,r21,-12
    25dc:	2088703a 	and	r4,r4,r2
    25e0:	b10b883a 	add	r5,r22,r4
    25e4:	00c00144 	movi	r3,5
    25e8:	28c00215 	stw	r3,8(r5)
    25ec:	28c00115 	stw	r3,4(r5)
    25f0:	b0800117 	ldw	r2,4(r22)
    25f4:	1080004c 	andi	r2,r2,1
    25f8:	2084b03a 	or	r2,r4,r2
    25fc:	b0800115 	stw	r2,4(r22)
    2600:	313fdd2e 	bgeu	r6,r4,2578 <_malloc_r+0x58c>
    2604:	b1400204 	addi	r5,r22,8
    2608:	9009883a 	mov	r4,r18
    260c:	000693c0 	call	693c <_free_r>
    2610:	e4000217 	ldw	r16,8(fp)
    2614:	003fd806 	br	2578 <_malloc_r+0x58c>
    2618:	00800504 	movi	r2,20
    261c:	11001536 	bltu	r2,r4,2674 <_malloc_r+0x688>
    2620:	210016c4 	addi	r4,r4,91
    2624:	200690fa 	slli	r3,r4,3
    2628:	003fa606 	br	24c4 <_malloc_r+0x4d8>
    262c:	8804d4ba 	srli	r2,r17,18
    2630:	11801f04 	addi	r6,r2,124
    2634:	300490fa 	slli	r2,r6,3
    2638:	003e9906 	br	20a0 <_malloc_r+0xb4>
    263c:	2009d0ba 	srai	r4,r4,2
    2640:	01400074 	movhi	r5,1
    2644:	297b3a04 	addi	r5,r5,-4888
    2648:	00c00044 	movi	r3,1
    264c:	28800117 	ldw	r2,4(r5)
    2650:	1906983a 	sll	r3,r3,r4
    2654:	10c4b03a 	or	r2,r2,r3
    2658:	28800115 	stw	r2,4(r5)
    265c:	003fa306 	br	24ec <_malloc_r+0x500>
    2660:	0027883a 	mov	r19,zero
    2664:	00c00044 	movi	r3,1
    2668:	003f8606 	br	2484 <_malloc_r+0x498>
    266c:	d1200415 	stw	r4,-32752(gp)
    2670:	003f7306 	br	2440 <_malloc_r+0x454>
    2674:	00801504 	movi	r2,84
    2678:	11001936 	bltu	r2,r4,26e0 <_malloc_r+0x6f4>
    267c:	2804d33a 	srli	r2,r5,12
    2680:	11001b84 	addi	r4,r2,110
    2684:	200690fa 	slli	r3,r4,3
    2688:	003f8e06 	br	24c4 <_malloc_r+0x4d8>
    268c:	480b883a 	mov	r5,r9
    2690:	6807883a 	mov	r3,r13
    2694:	288000cc 	andi	r2,r5,3
    2698:	18fffe04 	addi	r3,r3,-8
    269c:	297fffc4 	addi	r5,r5,-1
    26a0:	10001526 	beq	r2,zero,26f8 <_malloc_r+0x70c>
    26a4:	18800217 	ldw	r2,8(r3)
    26a8:	10fffa26 	beq	r2,r3,2694 <_malloc_r+0x6a8>
    26ac:	2109883a 	add	r4,r4,r4
    26b0:	393f1e36 	bltu	r7,r4,232c <_malloc_r+0x340>
    26b4:	203f1d26 	beq	r4,zero,232c <_malloc_r+0x340>
    26b8:	21c4703a 	and	r2,r4,r7
    26bc:	10000226 	beq	r2,zero,26c8 <_malloc_r+0x6dc>
    26c0:	6013883a 	mov	r9,r12
    26c4:	003ee106 	br	224c <_malloc_r+0x260>
    26c8:	2109883a 	add	r4,r4,r4
    26cc:	3904703a 	and	r2,r7,r4
    26d0:	63000104 	addi	r12,r12,4
    26d4:	103ffc26 	beq	r2,zero,26c8 <_malloc_r+0x6dc>
    26d8:	6013883a 	mov	r9,r12
    26dc:	003edb06 	br	224c <_malloc_r+0x260>
    26e0:	00805504 	movi	r2,340
    26e4:	11000836 	bltu	r2,r4,2708 <_malloc_r+0x71c>
    26e8:	2804d3fa 	srli	r2,r5,15
    26ec:	11001dc4 	addi	r4,r2,119
    26f0:	200690fa 	slli	r3,r4,3
    26f4:	003f7306 	br	24c4 <_malloc_r+0x4d8>
    26f8:	0104303a 	nor	r2,zero,r4
    26fc:	388e703a 	and	r7,r7,r2
    2700:	e1c00115 	stw	r7,4(fp)
    2704:	003fe906 	br	26ac <_malloc_r+0x6c0>
    2708:	00815504 	movi	r2,1364
    270c:	1100032e 	bgeu	r2,r4,271c <_malloc_r+0x730>
    2710:	01001f84 	movi	r4,126
    2714:	00c0fc04 	movi	r3,1008
    2718:	003f6a06 	br	24c4 <_malloc_r+0x4d8>
    271c:	2804d4ba 	srli	r2,r5,18
    2720:	11001f04 	addi	r4,r2,124
    2724:	200690fa 	slli	r3,r4,3
    2728:	003f6606 	br	24c4 <_malloc_r+0x4d8>

0000272c <printf>:
    272c:	defffb04 	addi	sp,sp,-20
    2730:	dfc00115 	stw	ra,4(sp)
    2734:	d9400215 	stw	r5,8(sp)
    2738:	d9800315 	stw	r6,12(sp)
    273c:	d9c00415 	stw	r7,16(sp)
    2740:	00800074 	movhi	r2,1
    2744:	1080c204 	addi	r2,r2,776
    2748:	10c00017 	ldw	r3,0(r2)
    274c:	200b883a 	mov	r5,r4
    2750:	d8800204 	addi	r2,sp,8
    2754:	19000217 	ldw	r4,8(r3)
    2758:	100d883a 	mov	r6,r2
    275c:	d8800015 	stw	r2,0(sp)
    2760:	00048400 	call	4840 <__vfprintf_internal>
    2764:	dfc00117 	ldw	ra,4(sp)
    2768:	dec00504 	addi	sp,sp,20
    276c:	f800283a 	ret

00002770 <_printf_r>:
    2770:	defffc04 	addi	sp,sp,-16
    2774:	dfc00115 	stw	ra,4(sp)
    2778:	d9800215 	stw	r6,8(sp)
    277c:	d9c00315 	stw	r7,12(sp)
    2780:	280d883a 	mov	r6,r5
    2784:	21400217 	ldw	r5,8(r4)
    2788:	d8c00204 	addi	r3,sp,8
    278c:	180f883a 	mov	r7,r3
    2790:	d8c00015 	stw	r3,0(sp)
    2794:	00029940 	call	2994 <___vfprintf_internal_r>
    2798:	dfc00117 	ldw	ra,4(sp)
    279c:	dec00404 	addi	sp,sp,16
    27a0:	f800283a 	ret

000027a4 <_puts_r>:
    27a4:	defff604 	addi	sp,sp,-40
    27a8:	dc400715 	stw	r17,28(sp)
    27ac:	2023883a 	mov	r17,r4
    27b0:	2809883a 	mov	r4,r5
    27b4:	dfc00915 	stw	ra,36(sp)
    27b8:	dcc00815 	stw	r19,32(sp)
    27bc:	2827883a 	mov	r19,r5
    27c0:	00028c80 	call	28c8 <strlen>
    27c4:	89400217 	ldw	r5,8(r17)
    27c8:	00c00074 	movhi	r3,1
    27cc:	18f95c04 	addi	r3,r3,-6800
    27d0:	01c00044 	movi	r7,1
    27d4:	12000044 	addi	r8,r2,1
    27d8:	d8c00515 	stw	r3,20(sp)
    27dc:	d9c00615 	stw	r7,24(sp)
    27e0:	d8c00304 	addi	r3,sp,12
    27e4:	01c00084 	movi	r7,2
    27e8:	8809883a 	mov	r4,r17
    27ec:	d80d883a 	mov	r6,sp
    27f0:	d8c00015 	stw	r3,0(sp)
    27f4:	dcc00315 	stw	r19,12(sp)
    27f8:	da000215 	stw	r8,8(sp)
    27fc:	d9c00115 	stw	r7,4(sp)
    2800:	d8800415 	stw	r2,16(sp)
    2804:	0006c500 	call	6c50 <__sfvwrite_r>
    2808:	00ffffc4 	movi	r3,-1
    280c:	10000626 	beq	r2,zero,2828 <_puts_r+0x84>
    2810:	1805883a 	mov	r2,r3
    2814:	dfc00917 	ldw	ra,36(sp)
    2818:	dcc00817 	ldw	r19,32(sp)
    281c:	dc400717 	ldw	r17,28(sp)
    2820:	dec00a04 	addi	sp,sp,40
    2824:	f800283a 	ret
    2828:	00c00284 	movi	r3,10
    282c:	1805883a 	mov	r2,r3
    2830:	dfc00917 	ldw	ra,36(sp)
    2834:	dcc00817 	ldw	r19,32(sp)
    2838:	dc400717 	ldw	r17,28(sp)
    283c:	dec00a04 	addi	sp,sp,40
    2840:	f800283a 	ret

00002844 <puts>:
    2844:	00800074 	movhi	r2,1
    2848:	1080c204 	addi	r2,r2,776
    284c:	200b883a 	mov	r5,r4
    2850:	11000017 	ldw	r4,0(r2)
    2854:	00027a41 	jmpi	27a4 <_puts_r>

00002858 <_sbrk_r>:
    2858:	defffd04 	addi	sp,sp,-12
    285c:	dc000015 	stw	r16,0(sp)
    2860:	04000074 	movhi	r16,1
    2864:	84078604 	addi	r16,r16,7704
    2868:	dc400115 	stw	r17,4(sp)
    286c:	80000015 	stw	zero,0(r16)
    2870:	2023883a 	mov	r17,r4
    2874:	2809883a 	mov	r4,r5
    2878:	dfc00215 	stw	ra,8(sp)
    287c:	000c25c0 	call	c25c <sbrk>
    2880:	1007883a 	mov	r3,r2
    2884:	00bfffc4 	movi	r2,-1
    2888:	18800626 	beq	r3,r2,28a4 <_sbrk_r+0x4c>
    288c:	1805883a 	mov	r2,r3
    2890:	dfc00217 	ldw	ra,8(sp)
    2894:	dc400117 	ldw	r17,4(sp)
    2898:	dc000017 	ldw	r16,0(sp)
    289c:	dec00304 	addi	sp,sp,12
    28a0:	f800283a 	ret
    28a4:	80800017 	ldw	r2,0(r16)
    28a8:	103ff826 	beq	r2,zero,288c <_sbrk_r+0x34>
    28ac:	88800015 	stw	r2,0(r17)
    28b0:	1805883a 	mov	r2,r3
    28b4:	dfc00217 	ldw	ra,8(sp)
    28b8:	dc400117 	ldw	r17,4(sp)
    28bc:	dc000017 	ldw	r16,0(sp)
    28c0:	dec00304 	addi	sp,sp,12
    28c4:	f800283a 	ret

000028c8 <strlen>:
    28c8:	208000cc 	andi	r2,r4,3
    28cc:	2011883a 	mov	r8,r4
    28d0:	1000161e 	bne	r2,zero,292c <strlen+0x64>
    28d4:	20c00017 	ldw	r3,0(r4)
    28d8:	017fbff4 	movhi	r5,65279
    28dc:	297fbfc4 	addi	r5,r5,-257
    28e0:	01e02074 	movhi	r7,32897
    28e4:	39e02004 	addi	r7,r7,-32640
    28e8:	1945883a 	add	r2,r3,r5
    28ec:	11c4703a 	and	r2,r2,r7
    28f0:	00c6303a 	nor	r3,zero,r3
    28f4:	1886703a 	and	r3,r3,r2
    28f8:	18000c1e 	bne	r3,zero,292c <strlen+0x64>
    28fc:	280d883a 	mov	r6,r5
    2900:	380b883a 	mov	r5,r7
    2904:	21000104 	addi	r4,r4,4
    2908:	20800017 	ldw	r2,0(r4)
    290c:	1187883a 	add	r3,r2,r6
    2910:	1946703a 	and	r3,r3,r5
    2914:	0084303a 	nor	r2,zero,r2
    2918:	10c4703a 	and	r2,r2,r3
    291c:	103ff926 	beq	r2,zero,2904 <strlen+0x3c>
    2920:	20800007 	ldb	r2,0(r4)
    2924:	10000326 	beq	r2,zero,2934 <strlen+0x6c>
    2928:	21000044 	addi	r4,r4,1
    292c:	20800007 	ldb	r2,0(r4)
    2930:	103ffd1e 	bne	r2,zero,2928 <strlen+0x60>
    2934:	2205c83a 	sub	r2,r4,r8
    2938:	f800283a 	ret

0000293c <__sprint_r>:
    293c:	30800217 	ldw	r2,8(r6)
    2940:	defffe04 	addi	sp,sp,-8
    2944:	dc000015 	stw	r16,0(sp)
    2948:	dfc00115 	stw	ra,4(sp)
    294c:	3021883a 	mov	r16,r6
    2950:	0007883a 	mov	r3,zero
    2954:	1000061e 	bne	r2,zero,2970 <__sprint_r+0x34>
    2958:	1805883a 	mov	r2,r3
    295c:	30000115 	stw	zero,4(r6)
    2960:	dfc00117 	ldw	ra,4(sp)
    2964:	dc000017 	ldw	r16,0(sp)
    2968:	dec00204 	addi	sp,sp,8
    296c:	f800283a 	ret
    2970:	0006c500 	call	6c50 <__sfvwrite_r>
    2974:	1007883a 	mov	r3,r2
    2978:	1805883a 	mov	r2,r3
    297c:	80000115 	stw	zero,4(r16)
    2980:	80000215 	stw	zero,8(r16)
    2984:	dfc00117 	ldw	ra,4(sp)
    2988:	dc000017 	ldw	r16,0(sp)
    298c:	dec00204 	addi	sp,sp,8
    2990:	f800283a 	ret

00002994 <___vfprintf_internal_r>:
    2994:	defea404 	addi	sp,sp,-1392
    2998:	dd815815 	stw	r22,1376(sp)
    299c:	dc015215 	stw	r16,1352(sp)
    29a0:	d9c15115 	stw	r7,1348(sp)
    29a4:	dfc15b15 	stw	ra,1388(sp)
    29a8:	df015a15 	stw	fp,1384(sp)
    29ac:	ddc15915 	stw	r23,1380(sp)
    29b0:	dd415715 	stw	r21,1372(sp)
    29b4:	dd015615 	stw	r20,1368(sp)
    29b8:	dcc15515 	stw	r19,1364(sp)
    29bc:	dc815415 	stw	r18,1360(sp)
    29c0:	dc415315 	stw	r17,1356(sp)
    29c4:	282d883a 	mov	r22,r5
    29c8:	3021883a 	mov	r16,r6
    29cc:	d9014f15 	stw	r4,1340(sp)
    29d0:	00072740 	call	7274 <_localeconv_r>
    29d4:	10800017 	ldw	r2,0(r2)
    29d8:	d9c15117 	ldw	r7,1348(sp)
    29dc:	d8814915 	stw	r2,1316(sp)
    29e0:	d8814f17 	ldw	r2,1340(sp)
    29e4:	10000226 	beq	r2,zero,29f0 <___vfprintf_internal_r+0x5c>
    29e8:	10800e17 	ldw	r2,56(r2)
    29ec:	10020d26 	beq	r2,zero,3224 <___vfprintf_internal_r+0x890>
    29f0:	b080030b 	ldhu	r2,12(r22)
    29f4:	1080020c 	andi	r2,r2,8
    29f8:	10020e26 	beq	r2,zero,3234 <___vfprintf_internal_r+0x8a0>
    29fc:	b0800417 	ldw	r2,16(r22)
    2a00:	10020c26 	beq	r2,zero,3234 <___vfprintf_internal_r+0x8a0>
    2a04:	b200030b 	ldhu	r8,12(r22)
    2a08:	00800284 	movi	r2,10
    2a0c:	40c0068c 	andi	r3,r8,26
    2a10:	18802f1e 	bne	r3,r2,2ad0 <___vfprintf_internal_r+0x13c>
    2a14:	b080038f 	ldh	r2,14(r22)
    2a18:	10002d16 	blt	r2,zero,2ad0 <___vfprintf_internal_r+0x13c>
    2a1c:	b240038b 	ldhu	r9,14(r22)
    2a20:	b2800717 	ldw	r10,28(r22)
    2a24:	b2c00917 	ldw	r11,36(r22)
    2a28:	d9014f17 	ldw	r4,1340(sp)
    2a2c:	dc402904 	addi	r17,sp,164
    2a30:	d8804004 	addi	r2,sp,256
    2a34:	00c10004 	movi	r3,1024
    2a38:	423fff4c 	andi	r8,r8,65533
    2a3c:	800d883a 	mov	r6,r16
    2a40:	880b883a 	mov	r5,r17
    2a44:	da002c0d 	sth	r8,176(sp)
    2a48:	da402c8d 	sth	r9,178(sp)
    2a4c:	da803015 	stw	r10,192(sp)
    2a50:	dac03215 	stw	r11,200(sp)
    2a54:	d8802d15 	stw	r2,180(sp)
    2a58:	d8c02e15 	stw	r3,184(sp)
    2a5c:	d8802915 	stw	r2,164(sp)
    2a60:	d8c02b15 	stw	r3,172(sp)
    2a64:	d8002f15 	stw	zero,188(sp)
    2a68:	00029940 	call	2994 <___vfprintf_internal_r>
    2a6c:	d8814b15 	stw	r2,1324(sp)
    2a70:	10000416 	blt	r2,zero,2a84 <___vfprintf_internal_r+0xf0>
    2a74:	d9014f17 	ldw	r4,1340(sp)
    2a78:	880b883a 	mov	r5,r17
    2a7c:	00063200 	call	6320 <_fflush_r>
    2a80:	1002321e 	bne	r2,zero,334c <___vfprintf_internal_r+0x9b8>
    2a84:	d8802c0b 	ldhu	r2,176(sp)
    2a88:	1080100c 	andi	r2,r2,64
    2a8c:	10000326 	beq	r2,zero,2a9c <___vfprintf_internal_r+0x108>
    2a90:	b080030b 	ldhu	r2,12(r22)
    2a94:	10801014 	ori	r2,r2,64
    2a98:	b080030d 	sth	r2,12(r22)
    2a9c:	d8814b17 	ldw	r2,1324(sp)
    2aa0:	dfc15b17 	ldw	ra,1388(sp)
    2aa4:	df015a17 	ldw	fp,1384(sp)
    2aa8:	ddc15917 	ldw	r23,1380(sp)
    2aac:	dd815817 	ldw	r22,1376(sp)
    2ab0:	dd415717 	ldw	r21,1372(sp)
    2ab4:	dd015617 	ldw	r20,1368(sp)
    2ab8:	dcc15517 	ldw	r19,1364(sp)
    2abc:	dc815417 	ldw	r18,1360(sp)
    2ac0:	dc415317 	ldw	r17,1356(sp)
    2ac4:	dc015217 	ldw	r16,1352(sp)
    2ac8:	dec15c04 	addi	sp,sp,1392
    2acc:	f800283a 	ret
    2ad0:	0005883a 	mov	r2,zero
    2ad4:	0007883a 	mov	r3,zero
    2ad8:	dd401904 	addi	r21,sp,100
    2adc:	d8814215 	stw	r2,1288(sp)
    2ae0:	802f883a 	mov	r23,r16
    2ae4:	d8c14315 	stw	r3,1292(sp)
    2ae8:	d8014b15 	stw	zero,1324(sp)
    2aec:	d8014815 	stw	zero,1312(sp)
    2af0:	d8014415 	stw	zero,1296(sp)
    2af4:	d8014715 	stw	zero,1308(sp)
    2af8:	dd400c15 	stw	r21,48(sp)
    2afc:	d8000e15 	stw	zero,56(sp)
    2b00:	d8000d15 	stw	zero,52(sp)
    2b04:	b8800007 	ldb	r2,0(r23)
    2b08:	10001926 	beq	r2,zero,2b70 <___vfprintf_internal_r+0x1dc>
    2b0c:	00c00944 	movi	r3,37
    2b10:	10c01726 	beq	r2,r3,2b70 <___vfprintf_internal_r+0x1dc>
    2b14:	b821883a 	mov	r16,r23
    2b18:	00000106 	br	2b20 <___vfprintf_internal_r+0x18c>
    2b1c:	10c00326 	beq	r2,r3,2b2c <___vfprintf_internal_r+0x198>
    2b20:	84000044 	addi	r16,r16,1
    2b24:	80800007 	ldb	r2,0(r16)
    2b28:	103ffc1e 	bne	r2,zero,2b1c <___vfprintf_internal_r+0x188>
    2b2c:	85e7c83a 	sub	r19,r16,r23
    2b30:	98000e26 	beq	r19,zero,2b6c <___vfprintf_internal_r+0x1d8>
    2b34:	dc800e17 	ldw	r18,56(sp)
    2b38:	dc400d17 	ldw	r17,52(sp)
    2b3c:	008001c4 	movi	r2,7
    2b40:	94e5883a 	add	r18,r18,r19
    2b44:	8c400044 	addi	r17,r17,1
    2b48:	adc00015 	stw	r23,0(r21)
    2b4c:	dc800e15 	stw	r18,56(sp)
    2b50:	acc00115 	stw	r19,4(r21)
    2b54:	dc400d15 	stw	r17,52(sp)
    2b58:	14428b16 	blt	r2,r17,3588 <___vfprintf_internal_r+0xbf4>
    2b5c:	ad400204 	addi	r21,r21,8
    2b60:	d9014b17 	ldw	r4,1324(sp)
    2b64:	24c9883a 	add	r4,r4,r19
    2b68:	d9014b15 	stw	r4,1324(sp)
    2b6c:	802f883a 	mov	r23,r16
    2b70:	b8800007 	ldb	r2,0(r23)
    2b74:	10013c26 	beq	r2,zero,3068 <___vfprintf_internal_r+0x6d4>
    2b78:	bdc00044 	addi	r23,r23,1
    2b7c:	d8000405 	stb	zero,16(sp)
    2b80:	b8c00007 	ldb	r3,0(r23)
    2b84:	04ffffc4 	movi	r19,-1
    2b88:	d8014c15 	stw	zero,1328(sp)
    2b8c:	d8014a15 	stw	zero,1320(sp)
    2b90:	d8c14d15 	stw	r3,1332(sp)
    2b94:	bdc00044 	addi	r23,r23,1
    2b98:	d9414d17 	ldw	r5,1332(sp)
    2b9c:	00801604 	movi	r2,88
    2ba0:	28fff804 	addi	r3,r5,-32
    2ba4:	10c06036 	bltu	r2,r3,2d28 <___vfprintf_internal_r+0x394>
    2ba8:	18c5883a 	add	r2,r3,r3
    2bac:	1085883a 	add	r2,r2,r2
    2bb0:	00c00034 	movhi	r3,0
    2bb4:	18caf104 	addi	r3,r3,11204
    2bb8:	10c5883a 	add	r2,r2,r3
    2bbc:	11000017 	ldw	r4,0(r2)
    2bc0:	2000683a 	jmp	r4
    2bc4:	00003b38 	rdprs	zero,zero,236
    2bc8:	00002d28 	cmpgeui	zero,zero,180
    2bcc:	00002d28 	cmpgeui	zero,zero,180
    2bd0:	00003b24 	muli	zero,zero,236
    2bd4:	00002d28 	cmpgeui	zero,zero,180
    2bd8:	00002d28 	cmpgeui	zero,zero,180
    2bdc:	00002d28 	cmpgeui	zero,zero,180
    2be0:	00002d28 	cmpgeui	zero,zero,180
    2be4:	00002d28 	cmpgeui	zero,zero,180
    2be8:	00002d28 	cmpgeui	zero,zero,180
    2bec:	00003904 	movi	zero,228
    2bf0:	00003b14 	movui	zero,236
    2bf4:	00002d28 	cmpgeui	zero,zero,180
    2bf8:	0000391c 	xori	zero,zero,228
    2bfc:	00003bb0 	cmpltui	zero,zero,238
    2c00:	00002d28 	cmpgeui	zero,zero,180
    2c04:	00003b9c 	xori	zero,zero,238
    2c08:	00003b64 	muli	zero,zero,237
    2c0c:	00003b64 	muli	zero,zero,237
    2c10:	00003b64 	muli	zero,zero,237
    2c14:	00003b64 	muli	zero,zero,237
    2c18:	00003b64 	muli	zero,zero,237
    2c1c:	00003b64 	muli	zero,zero,237
    2c20:	00003b64 	muli	zero,zero,237
    2c24:	00003b64 	muli	zero,zero,237
    2c28:	00003b64 	muli	zero,zero,237
    2c2c:	00002d28 	cmpgeui	zero,zero,180
    2c30:	00002d28 	cmpgeui	zero,zero,180
    2c34:	00002d28 	cmpgeui	zero,zero,180
    2c38:	00002d28 	cmpgeui	zero,zero,180
    2c3c:	00002d28 	cmpgeui	zero,zero,180
    2c40:	00002d28 	cmpgeui	zero,zero,180
    2c44:	00002d28 	cmpgeui	zero,zero,180
    2c48:	00002d28 	cmpgeui	zero,zero,180
    2c4c:	00002d28 	cmpgeui	zero,zero,180
    2c50:	00002d28 	cmpgeui	zero,zero,180
    2c54:	00003380 	call	338 <insertTail+0x94>
    2c58:	000039ec 	andhi	zero,zero,231
    2c5c:	00002d28 	cmpgeui	zero,zero,180
    2c60:	000039ec 	andhi	zero,zero,231
    2c64:	00002d28 	cmpgeui	zero,zero,180
    2c68:	00002d28 	cmpgeui	zero,zero,180
    2c6c:	00002d28 	cmpgeui	zero,zero,180
    2c70:	00002d28 	cmpgeui	zero,zero,180
    2c74:	00003b50 	cmplti	zero,zero,237
    2c78:	00002d28 	cmpgeui	zero,zero,180
    2c7c:	00002d28 	cmpgeui	zero,zero,180
    2c80:	00003434 	movhi	zero,208
    2c84:	00002d28 	cmpgeui	zero,zero,180
    2c88:	00002d28 	cmpgeui	zero,zero,180
    2c8c:	00002d28 	cmpgeui	zero,zero,180
    2c90:	00002d28 	cmpgeui	zero,zero,180
    2c94:	00002d28 	cmpgeui	zero,zero,180
    2c98:	00003480 	call	348 <insertTail+0xa4>
    2c9c:	00002d28 	cmpgeui	zero,zero,180
    2ca0:	00002d28 	cmpgeui	zero,zero,180
    2ca4:	00003aa0 	cmpeqi	zero,zero,234
    2ca8:	00002d28 	cmpgeui	zero,zero,180
    2cac:	00002d28 	cmpgeui	zero,zero,180
    2cb0:	00002d28 	cmpgeui	zero,zero,180
    2cb4:	00002d28 	cmpgeui	zero,zero,180
    2cb8:	00002d28 	cmpgeui	zero,zero,180
    2cbc:	00002d28 	cmpgeui	zero,zero,180
    2cc0:	00002d28 	cmpgeui	zero,zero,180
    2cc4:	00002d28 	cmpgeui	zero,zero,180
    2cc8:	00002d28 	cmpgeui	zero,zero,180
    2ccc:	00002d28 	cmpgeui	zero,zero,180
    2cd0:	00003a74 	movhi	zero,233
    2cd4:	0000338c 	andi	zero,zero,206
    2cd8:	000039ec 	andhi	zero,zero,231
    2cdc:	000039ec 	andhi	zero,zero,231
    2ce0:	000039ec 	andhi	zero,zero,231
    2ce4:	000039d8 	cmpnei	zero,zero,231
    2ce8:	0000338c 	andi	zero,zero,206
    2cec:	00002d28 	cmpgeui	zero,zero,180
    2cf0:	00002d28 	cmpgeui	zero,zero,180
    2cf4:	00003960 	cmpeqi	zero,zero,229
    2cf8:	00002d28 	cmpgeui	zero,zero,180
    2cfc:	00003930 	cmpltui	zero,zero,228
    2d00:	00003440 	call	344 <insertTail+0xa0>
    2d04:	00003990 	cmplti	zero,zero,230
    2d08:	0000397c 	xorhi	zero,zero,229
    2d0c:	00002d28 	cmpgeui	zero,zero,180
    2d10:	00003c0c 	andi	zero,zero,240
    2d14:	00002d28 	cmpgeui	zero,zero,180
    2d18:	0000348c 	andi	zero,zero,210
    2d1c:	00002d28 	cmpgeui	zero,zero,180
    2d20:	00002d28 	cmpgeui	zero,zero,180
    2d24:	00003b04 	movi	zero,236
    2d28:	d9014d17 	ldw	r4,1332(sp)
    2d2c:	2000ce26 	beq	r4,zero,3068 <___vfprintf_internal_r+0x6d4>
    2d30:	01400044 	movi	r5,1
    2d34:	d9800f04 	addi	r6,sp,60
    2d38:	d9c14015 	stw	r7,1280(sp)
    2d3c:	d9414515 	stw	r5,1300(sp)
    2d40:	d9814115 	stw	r6,1284(sp)
    2d44:	280f883a 	mov	r7,r5
    2d48:	d9000f05 	stb	r4,60(sp)
    2d4c:	d8000405 	stb	zero,16(sp)
    2d50:	d8014615 	stw	zero,1304(sp)
    2d54:	d8c14c17 	ldw	r3,1328(sp)
    2d58:	1880008c 	andi	r2,r3,2
    2d5c:	1005003a 	cmpeq	r2,r2,zero
    2d60:	d8815015 	stw	r2,1344(sp)
    2d64:	1000031e 	bne	r2,zero,2d74 <___vfprintf_internal_r+0x3e0>
    2d68:	d9014517 	ldw	r4,1300(sp)
    2d6c:	21000084 	addi	r4,r4,2
    2d70:	d9014515 	stw	r4,1300(sp)
    2d74:	d9414c17 	ldw	r5,1328(sp)
    2d78:	2940210c 	andi	r5,r5,132
    2d7c:	d9414e15 	stw	r5,1336(sp)
    2d80:	28002d1e 	bne	r5,zero,2e38 <___vfprintf_internal_r+0x4a4>
    2d84:	d9814a17 	ldw	r6,1320(sp)
    2d88:	d8814517 	ldw	r2,1300(sp)
    2d8c:	30a1c83a 	sub	r16,r6,r2
    2d90:	0400290e 	bge	zero,r16,2e38 <___vfprintf_internal_r+0x4a4>
    2d94:	00800404 	movi	r2,16
    2d98:	1404580e 	bge	r2,r16,3efc <___vfprintf_internal_r+0x1568>
    2d9c:	dc800e17 	ldw	r18,56(sp)
    2da0:	dc400d17 	ldw	r17,52(sp)
    2da4:	1027883a 	mov	r19,r2
    2da8:	07000074 	movhi	fp,1
    2dac:	e7397884 	addi	fp,fp,-6686
    2db0:	050001c4 	movi	r20,7
    2db4:	00000306 	br	2dc4 <___vfprintf_internal_r+0x430>
    2db8:	843ffc04 	addi	r16,r16,-16
    2dbc:	ad400204 	addi	r21,r21,8
    2dc0:	9c00130e 	bge	r19,r16,2e10 <___vfprintf_internal_r+0x47c>
    2dc4:	94800404 	addi	r18,r18,16
    2dc8:	8c400044 	addi	r17,r17,1
    2dcc:	af000015 	stw	fp,0(r21)
    2dd0:	acc00115 	stw	r19,4(r21)
    2dd4:	dc800e15 	stw	r18,56(sp)
    2dd8:	dc400d15 	stw	r17,52(sp)
    2ddc:	a47ff60e 	bge	r20,r17,2db8 <___vfprintf_internal_r+0x424>
    2de0:	d9014f17 	ldw	r4,1340(sp)
    2de4:	b00b883a 	mov	r5,r22
    2de8:	d9800c04 	addi	r6,sp,48
    2dec:	d9c15115 	stw	r7,1348(sp)
    2df0:	000293c0 	call	293c <__sprint_r>
    2df4:	d9c15117 	ldw	r7,1348(sp)
    2df8:	10009e1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    2dfc:	843ffc04 	addi	r16,r16,-16
    2e00:	dc800e17 	ldw	r18,56(sp)
    2e04:	dc400d17 	ldw	r17,52(sp)
    2e08:	dd401904 	addi	r21,sp,100
    2e0c:	9c3fed16 	blt	r19,r16,2dc4 <___vfprintf_internal_r+0x430>
    2e10:	9425883a 	add	r18,r18,r16
    2e14:	8c400044 	addi	r17,r17,1
    2e18:	008001c4 	movi	r2,7
    2e1c:	af000015 	stw	fp,0(r21)
    2e20:	ac000115 	stw	r16,4(r21)
    2e24:	dc800e15 	stw	r18,56(sp)
    2e28:	dc400d15 	stw	r17,52(sp)
    2e2c:	1441f516 	blt	r2,r17,3604 <___vfprintf_internal_r+0xc70>
    2e30:	ad400204 	addi	r21,r21,8
    2e34:	00000206 	br	2e40 <___vfprintf_internal_r+0x4ac>
    2e38:	dc800e17 	ldw	r18,56(sp)
    2e3c:	dc400d17 	ldw	r17,52(sp)
    2e40:	d8800407 	ldb	r2,16(sp)
    2e44:	10000b26 	beq	r2,zero,2e74 <___vfprintf_internal_r+0x4e0>
    2e48:	00800044 	movi	r2,1
    2e4c:	94800044 	addi	r18,r18,1
    2e50:	8c400044 	addi	r17,r17,1
    2e54:	a8800115 	stw	r2,4(r21)
    2e58:	d8c00404 	addi	r3,sp,16
    2e5c:	008001c4 	movi	r2,7
    2e60:	a8c00015 	stw	r3,0(r21)
    2e64:	dc800e15 	stw	r18,56(sp)
    2e68:	dc400d15 	stw	r17,52(sp)
    2e6c:	1441da16 	blt	r2,r17,35d8 <___vfprintf_internal_r+0xc44>
    2e70:	ad400204 	addi	r21,r21,8
    2e74:	d9015017 	ldw	r4,1344(sp)
    2e78:	20000b1e 	bne	r4,zero,2ea8 <___vfprintf_internal_r+0x514>
    2e7c:	d8800444 	addi	r2,sp,17
    2e80:	94800084 	addi	r18,r18,2
    2e84:	8c400044 	addi	r17,r17,1
    2e88:	a8800015 	stw	r2,0(r21)
    2e8c:	00c00084 	movi	r3,2
    2e90:	008001c4 	movi	r2,7
    2e94:	a8c00115 	stw	r3,4(r21)
    2e98:	dc800e15 	stw	r18,56(sp)
    2e9c:	dc400d15 	stw	r17,52(sp)
    2ea0:	1441c216 	blt	r2,r17,35ac <___vfprintf_internal_r+0xc18>
    2ea4:	ad400204 	addi	r21,r21,8
    2ea8:	d9414e17 	ldw	r5,1336(sp)
    2eac:	00802004 	movi	r2,128
    2eb0:	2880b126 	beq	r5,r2,3178 <___vfprintf_internal_r+0x7e4>
    2eb4:	d8c14617 	ldw	r3,1304(sp)
    2eb8:	19e1c83a 	sub	r16,r3,r7
    2ebc:	0400260e 	bge	zero,r16,2f58 <___vfprintf_internal_r+0x5c4>
    2ec0:	00800404 	movi	r2,16
    2ec4:	1403c90e 	bge	r2,r16,3dec <___vfprintf_internal_r+0x1458>
    2ec8:	1027883a 	mov	r19,r2
    2ecc:	07000074 	movhi	fp,1
    2ed0:	e7397484 	addi	fp,fp,-6702
    2ed4:	050001c4 	movi	r20,7
    2ed8:	00000306 	br	2ee8 <___vfprintf_internal_r+0x554>
    2edc:	843ffc04 	addi	r16,r16,-16
    2ee0:	ad400204 	addi	r21,r21,8
    2ee4:	9c00130e 	bge	r19,r16,2f34 <___vfprintf_internal_r+0x5a0>
    2ee8:	94800404 	addi	r18,r18,16
    2eec:	8c400044 	addi	r17,r17,1
    2ef0:	af000015 	stw	fp,0(r21)
    2ef4:	acc00115 	stw	r19,4(r21)
    2ef8:	dc800e15 	stw	r18,56(sp)
    2efc:	dc400d15 	stw	r17,52(sp)
    2f00:	a47ff60e 	bge	r20,r17,2edc <___vfprintf_internal_r+0x548>
    2f04:	d9014f17 	ldw	r4,1340(sp)
    2f08:	b00b883a 	mov	r5,r22
    2f0c:	d9800c04 	addi	r6,sp,48
    2f10:	d9c15115 	stw	r7,1348(sp)
    2f14:	000293c0 	call	293c <__sprint_r>
    2f18:	d9c15117 	ldw	r7,1348(sp)
    2f1c:	1000551e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    2f20:	843ffc04 	addi	r16,r16,-16
    2f24:	dc800e17 	ldw	r18,56(sp)
    2f28:	dc400d17 	ldw	r17,52(sp)
    2f2c:	dd401904 	addi	r21,sp,100
    2f30:	9c3fed16 	blt	r19,r16,2ee8 <___vfprintf_internal_r+0x554>
    2f34:	9425883a 	add	r18,r18,r16
    2f38:	8c400044 	addi	r17,r17,1
    2f3c:	008001c4 	movi	r2,7
    2f40:	af000015 	stw	fp,0(r21)
    2f44:	ac000115 	stw	r16,4(r21)
    2f48:	dc800e15 	stw	r18,56(sp)
    2f4c:	dc400d15 	stw	r17,52(sp)
    2f50:	14418216 	blt	r2,r17,355c <___vfprintf_internal_r+0xbc8>
    2f54:	ad400204 	addi	r21,r21,8
    2f58:	d9014c17 	ldw	r4,1328(sp)
    2f5c:	2080400c 	andi	r2,r4,256
    2f60:	10004a1e 	bne	r2,zero,308c <___vfprintf_internal_r+0x6f8>
    2f64:	d9414117 	ldw	r5,1284(sp)
    2f68:	91e5883a 	add	r18,r18,r7
    2f6c:	8c400044 	addi	r17,r17,1
    2f70:	008001c4 	movi	r2,7
    2f74:	a9400015 	stw	r5,0(r21)
    2f78:	a9c00115 	stw	r7,4(r21)
    2f7c:	dc800e15 	stw	r18,56(sp)
    2f80:	dc400d15 	stw	r17,52(sp)
    2f84:	14416716 	blt	r2,r17,3524 <___vfprintf_internal_r+0xb90>
    2f88:	a8c00204 	addi	r3,r21,8
    2f8c:	d9814c17 	ldw	r6,1328(sp)
    2f90:	3080010c 	andi	r2,r6,4
    2f94:	10002826 	beq	r2,zero,3038 <___vfprintf_internal_r+0x6a4>
    2f98:	d8814a17 	ldw	r2,1320(sp)
    2f9c:	d9014517 	ldw	r4,1300(sp)
    2fa0:	1121c83a 	sub	r16,r2,r4
    2fa4:	0400240e 	bge	zero,r16,3038 <___vfprintf_internal_r+0x6a4>
    2fa8:	00800404 	movi	r2,16
    2fac:	14044f0e 	bge	r2,r16,40ec <___vfprintf_internal_r+0x1758>
    2fb0:	dc400d17 	ldw	r17,52(sp)
    2fb4:	1027883a 	mov	r19,r2
    2fb8:	07000074 	movhi	fp,1
    2fbc:	e7397884 	addi	fp,fp,-6686
    2fc0:	050001c4 	movi	r20,7
    2fc4:	00000306 	br	2fd4 <___vfprintf_internal_r+0x640>
    2fc8:	843ffc04 	addi	r16,r16,-16
    2fcc:	18c00204 	addi	r3,r3,8
    2fd0:	9c00110e 	bge	r19,r16,3018 <___vfprintf_internal_r+0x684>
    2fd4:	94800404 	addi	r18,r18,16
    2fd8:	8c400044 	addi	r17,r17,1
    2fdc:	1f000015 	stw	fp,0(r3)
    2fe0:	1cc00115 	stw	r19,4(r3)
    2fe4:	dc800e15 	stw	r18,56(sp)
    2fe8:	dc400d15 	stw	r17,52(sp)
    2fec:	a47ff60e 	bge	r20,r17,2fc8 <___vfprintf_internal_r+0x634>
    2ff0:	d9014f17 	ldw	r4,1340(sp)
    2ff4:	b00b883a 	mov	r5,r22
    2ff8:	d9800c04 	addi	r6,sp,48
    2ffc:	000293c0 	call	293c <__sprint_r>
    3000:	10001c1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    3004:	843ffc04 	addi	r16,r16,-16
    3008:	dc800e17 	ldw	r18,56(sp)
    300c:	dc400d17 	ldw	r17,52(sp)
    3010:	d8c01904 	addi	r3,sp,100
    3014:	9c3fef16 	blt	r19,r16,2fd4 <___vfprintf_internal_r+0x640>
    3018:	9425883a 	add	r18,r18,r16
    301c:	8c400044 	addi	r17,r17,1
    3020:	008001c4 	movi	r2,7
    3024:	1f000015 	stw	fp,0(r3)
    3028:	1c000115 	stw	r16,4(r3)
    302c:	dc800e15 	stw	r18,56(sp)
    3030:	dc400d15 	stw	r17,52(sp)
    3034:	1440cb16 	blt	r2,r17,3364 <___vfprintf_internal_r+0x9d0>
    3038:	d8814a17 	ldw	r2,1320(sp)
    303c:	d9414517 	ldw	r5,1300(sp)
    3040:	1140010e 	bge	r2,r5,3048 <___vfprintf_internal_r+0x6b4>
    3044:	2805883a 	mov	r2,r5
    3048:	d9814b17 	ldw	r6,1324(sp)
    304c:	308d883a 	add	r6,r6,r2
    3050:	d9814b15 	stw	r6,1324(sp)
    3054:	90013b1e 	bne	r18,zero,3544 <___vfprintf_internal_r+0xbb0>
    3058:	d9c14017 	ldw	r7,1280(sp)
    305c:	dd401904 	addi	r21,sp,100
    3060:	d8000d15 	stw	zero,52(sp)
    3064:	003ea706 	br	2b04 <___vfprintf_internal_r+0x170>
    3068:	d8800e17 	ldw	r2,56(sp)
    306c:	10053f1e 	bne	r2,zero,456c <___vfprintf_internal_r+0x1bd8>
    3070:	d8000d15 	stw	zero,52(sp)
    3074:	b080030b 	ldhu	r2,12(r22)
    3078:	1080100c 	andi	r2,r2,64
    307c:	103e8726 	beq	r2,zero,2a9c <___vfprintf_internal_r+0x108>
    3080:	00bfffc4 	movi	r2,-1
    3084:	d8814b15 	stw	r2,1324(sp)
    3088:	003e8406 	br	2a9c <___vfprintf_internal_r+0x108>
    308c:	d9814d17 	ldw	r6,1332(sp)
    3090:	00801944 	movi	r2,101
    3094:	11806e16 	blt	r2,r6,3250 <___vfprintf_internal_r+0x8bc>
    3098:	d9414717 	ldw	r5,1308(sp)
    309c:	00c00044 	movi	r3,1
    30a0:	1943430e 	bge	r3,r5,3db0 <___vfprintf_internal_r+0x141c>
    30a4:	d8814117 	ldw	r2,1284(sp)
    30a8:	94800044 	addi	r18,r18,1
    30ac:	8c400044 	addi	r17,r17,1
    30b0:	a8800015 	stw	r2,0(r21)
    30b4:	008001c4 	movi	r2,7
    30b8:	a8c00115 	stw	r3,4(r21)
    30bc:	dc800e15 	stw	r18,56(sp)
    30c0:	dc400d15 	stw	r17,52(sp)
    30c4:	1441ca16 	blt	r2,r17,37f0 <___vfprintf_internal_r+0xe5c>
    30c8:	a8c00204 	addi	r3,r21,8
    30cc:	d9014917 	ldw	r4,1316(sp)
    30d0:	00800044 	movi	r2,1
    30d4:	94800044 	addi	r18,r18,1
    30d8:	8c400044 	addi	r17,r17,1
    30dc:	18800115 	stw	r2,4(r3)
    30e0:	008001c4 	movi	r2,7
    30e4:	19000015 	stw	r4,0(r3)
    30e8:	dc800e15 	stw	r18,56(sp)
    30ec:	dc400d15 	stw	r17,52(sp)
    30f0:	1441b616 	blt	r2,r17,37cc <___vfprintf_internal_r+0xe38>
    30f4:	1cc00204 	addi	r19,r3,8
    30f8:	d9014217 	ldw	r4,1288(sp)
    30fc:	d9414317 	ldw	r5,1292(sp)
    3100:	000d883a 	mov	r6,zero
    3104:	000f883a 	mov	r7,zero
    3108:	000abe80 	call	abe8 <__nedf2>
    310c:	10017426 	beq	r2,zero,36e0 <___vfprintf_internal_r+0xd4c>
    3110:	d9414717 	ldw	r5,1308(sp)
    3114:	d9814117 	ldw	r6,1284(sp)
    3118:	8c400044 	addi	r17,r17,1
    311c:	2c85883a 	add	r2,r5,r18
    3120:	14bfffc4 	addi	r18,r2,-1
    3124:	28bfffc4 	addi	r2,r5,-1
    3128:	30c00044 	addi	r3,r6,1
    312c:	98800115 	stw	r2,4(r19)
    3130:	008001c4 	movi	r2,7
    3134:	98c00015 	stw	r3,0(r19)
    3138:	dc800e15 	stw	r18,56(sp)
    313c:	dc400d15 	stw	r17,52(sp)
    3140:	14418e16 	blt	r2,r17,377c <___vfprintf_internal_r+0xde8>
    3144:	9cc00204 	addi	r19,r19,8
    3148:	d9414817 	ldw	r5,1312(sp)
    314c:	d8800804 	addi	r2,sp,32
    3150:	8c400044 	addi	r17,r17,1
    3154:	9165883a 	add	r18,r18,r5
    3158:	98800015 	stw	r2,0(r19)
    315c:	008001c4 	movi	r2,7
    3160:	99400115 	stw	r5,4(r19)
    3164:	dc800e15 	stw	r18,56(sp)
    3168:	dc400d15 	stw	r17,52(sp)
    316c:	1440ed16 	blt	r2,r17,3524 <___vfprintf_internal_r+0xb90>
    3170:	98c00204 	addi	r3,r19,8
    3174:	003f8506 	br	2f8c <___vfprintf_internal_r+0x5f8>
    3178:	d9814a17 	ldw	r6,1320(sp)
    317c:	d8814517 	ldw	r2,1300(sp)
    3180:	30a1c83a 	sub	r16,r6,r2
    3184:	043f4b0e 	bge	zero,r16,2eb4 <___vfprintf_internal_r+0x520>
    3188:	00800404 	movi	r2,16
    318c:	1404340e 	bge	r2,r16,4260 <___vfprintf_internal_r+0x18cc>
    3190:	1027883a 	mov	r19,r2
    3194:	07000074 	movhi	fp,1
    3198:	e7397484 	addi	fp,fp,-6702
    319c:	050001c4 	movi	r20,7
    31a0:	00000306 	br	31b0 <___vfprintf_internal_r+0x81c>
    31a4:	843ffc04 	addi	r16,r16,-16
    31a8:	ad400204 	addi	r21,r21,8
    31ac:	9c00130e 	bge	r19,r16,31fc <___vfprintf_internal_r+0x868>
    31b0:	94800404 	addi	r18,r18,16
    31b4:	8c400044 	addi	r17,r17,1
    31b8:	af000015 	stw	fp,0(r21)
    31bc:	acc00115 	stw	r19,4(r21)
    31c0:	dc800e15 	stw	r18,56(sp)
    31c4:	dc400d15 	stw	r17,52(sp)
    31c8:	a47ff60e 	bge	r20,r17,31a4 <___vfprintf_internal_r+0x810>
    31cc:	d9014f17 	ldw	r4,1340(sp)
    31d0:	b00b883a 	mov	r5,r22
    31d4:	d9800c04 	addi	r6,sp,48
    31d8:	d9c15115 	stw	r7,1348(sp)
    31dc:	000293c0 	call	293c <__sprint_r>
    31e0:	d9c15117 	ldw	r7,1348(sp)
    31e4:	103fa31e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    31e8:	843ffc04 	addi	r16,r16,-16
    31ec:	dc800e17 	ldw	r18,56(sp)
    31f0:	dc400d17 	ldw	r17,52(sp)
    31f4:	dd401904 	addi	r21,sp,100
    31f8:	9c3fed16 	blt	r19,r16,31b0 <___vfprintf_internal_r+0x81c>
    31fc:	9425883a 	add	r18,r18,r16
    3200:	8c400044 	addi	r17,r17,1
    3204:	008001c4 	movi	r2,7
    3208:	af000015 	stw	fp,0(r21)
    320c:	ac000115 	stw	r16,4(r21)
    3210:	dc800e15 	stw	r18,56(sp)
    3214:	dc400d15 	stw	r17,52(sp)
    3218:	14416116 	blt	r2,r17,37a0 <___vfprintf_internal_r+0xe0c>
    321c:	ad400204 	addi	r21,r21,8
    3220:	003f2406 	br	2eb4 <___vfprintf_internal_r+0x520>
    3224:	d9014f17 	ldw	r4,1340(sp)
    3228:	00065b80 	call	65b8 <__sinit>
    322c:	d9c15117 	ldw	r7,1348(sp)
    3230:	003def06 	br	29f0 <___vfprintf_internal_r+0x5c>
    3234:	d9014f17 	ldw	r4,1340(sp)
    3238:	b00b883a 	mov	r5,r22
    323c:	d9c15115 	stw	r7,1348(sp)
    3240:	00048640 	call	4864 <__swsetup_r>
    3244:	d9c15117 	ldw	r7,1348(sp)
    3248:	103dee26 	beq	r2,zero,2a04 <___vfprintf_internal_r+0x70>
    324c:	003f8c06 	br	3080 <___vfprintf_internal_r+0x6ec>
    3250:	d9014217 	ldw	r4,1288(sp)
    3254:	d9414317 	ldw	r5,1292(sp)
    3258:	000d883a 	mov	r6,zero
    325c:	000f883a 	mov	r7,zero
    3260:	000ab600 	call	ab60 <__eqdf2>
    3264:	1000f21e 	bne	r2,zero,3630 <___vfprintf_internal_r+0xc9c>
    3268:	00800074 	movhi	r2,1
    326c:	10b97404 	addi	r2,r2,-6704
    3270:	94800044 	addi	r18,r18,1
    3274:	8c400044 	addi	r17,r17,1
    3278:	a8800015 	stw	r2,0(r21)
    327c:	00c00044 	movi	r3,1
    3280:	008001c4 	movi	r2,7
    3284:	a8c00115 	stw	r3,4(r21)
    3288:	dc800e15 	stw	r18,56(sp)
    328c:	dc400d15 	stw	r17,52(sp)
    3290:	1442fa16 	blt	r2,r17,3e7c <___vfprintf_internal_r+0x14e8>
    3294:	a8c00204 	addi	r3,r21,8
    3298:	d8800517 	ldw	r2,20(sp)
    329c:	d9014717 	ldw	r4,1308(sp)
    32a0:	11015c0e 	bge	r2,r4,3814 <___vfprintf_internal_r+0xe80>
    32a4:	dc400d17 	ldw	r17,52(sp)
    32a8:	d9814917 	ldw	r6,1316(sp)
    32ac:	00800044 	movi	r2,1
    32b0:	94800044 	addi	r18,r18,1
    32b4:	8c400044 	addi	r17,r17,1
    32b8:	18800115 	stw	r2,4(r3)
    32bc:	008001c4 	movi	r2,7
    32c0:	19800015 	stw	r6,0(r3)
    32c4:	dc800e15 	stw	r18,56(sp)
    32c8:	dc400d15 	stw	r17,52(sp)
    32cc:	14431016 	blt	r2,r17,3f10 <___vfprintf_internal_r+0x157c>
    32d0:	18c00204 	addi	r3,r3,8
    32d4:	d8814717 	ldw	r2,1308(sp)
    32d8:	143fffc4 	addi	r16,r2,-1
    32dc:	043f2b0e 	bge	zero,r16,2f8c <___vfprintf_internal_r+0x5f8>
    32e0:	00800404 	movi	r2,16
    32e4:	1402a20e 	bge	r2,r16,3d70 <___vfprintf_internal_r+0x13dc>
    32e8:	dc400d17 	ldw	r17,52(sp)
    32ec:	1027883a 	mov	r19,r2
    32f0:	07000074 	movhi	fp,1
    32f4:	e7397484 	addi	fp,fp,-6702
    32f8:	050001c4 	movi	r20,7
    32fc:	00000306 	br	330c <___vfprintf_internal_r+0x978>
    3300:	18c00204 	addi	r3,r3,8
    3304:	843ffc04 	addi	r16,r16,-16
    3308:	9c029c0e 	bge	r19,r16,3d7c <___vfprintf_internal_r+0x13e8>
    330c:	94800404 	addi	r18,r18,16
    3310:	8c400044 	addi	r17,r17,1
    3314:	1f000015 	stw	fp,0(r3)
    3318:	1cc00115 	stw	r19,4(r3)
    331c:	dc800e15 	stw	r18,56(sp)
    3320:	dc400d15 	stw	r17,52(sp)
    3324:	a47ff60e 	bge	r20,r17,3300 <___vfprintf_internal_r+0x96c>
    3328:	d9014f17 	ldw	r4,1340(sp)
    332c:	b00b883a 	mov	r5,r22
    3330:	d9800c04 	addi	r6,sp,48
    3334:	000293c0 	call	293c <__sprint_r>
    3338:	103f4e1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    333c:	dc800e17 	ldw	r18,56(sp)
    3340:	dc400d17 	ldw	r17,52(sp)
    3344:	d8c01904 	addi	r3,sp,100
    3348:	003fee06 	br	3304 <___vfprintf_internal_r+0x970>
    334c:	d8802c0b 	ldhu	r2,176(sp)
    3350:	00ffffc4 	movi	r3,-1
    3354:	d8c14b15 	stw	r3,1324(sp)
    3358:	1080100c 	andi	r2,r2,64
    335c:	103dcc1e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0xfc>
    3360:	003dce06 	br	2a9c <___vfprintf_internal_r+0x108>
    3364:	d9014f17 	ldw	r4,1340(sp)
    3368:	b00b883a 	mov	r5,r22
    336c:	d9800c04 	addi	r6,sp,48
    3370:	000293c0 	call	293c <__sprint_r>
    3374:	103f3f1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    3378:	dc800e17 	ldw	r18,56(sp)
    337c:	003f2e06 	br	3038 <___vfprintf_internal_r+0x6a4>
    3380:	d9414c17 	ldw	r5,1328(sp)
    3384:	29400414 	ori	r5,r5,16
    3388:	d9414c15 	stw	r5,1328(sp)
    338c:	d9814c17 	ldw	r6,1328(sp)
    3390:	3080080c 	andi	r2,r6,32
    3394:	10014f1e 	bne	r2,zero,38d4 <___vfprintf_internal_r+0xf40>
    3398:	d8c14c17 	ldw	r3,1328(sp)
    339c:	1880040c 	andi	r2,r3,16
    33a0:	1002ea1e 	bne	r2,zero,3f4c <___vfprintf_internal_r+0x15b8>
    33a4:	d9014c17 	ldw	r4,1328(sp)
    33a8:	2080100c 	andi	r2,r4,64
    33ac:	1002e726 	beq	r2,zero,3f4c <___vfprintf_internal_r+0x15b8>
    33b0:	3880000f 	ldh	r2,0(r7)
    33b4:	39c00104 	addi	r7,r7,4
    33b8:	d9c14015 	stw	r7,1280(sp)
    33bc:	1023d7fa 	srai	r17,r2,31
    33c0:	1021883a 	mov	r16,r2
    33c4:	88037216 	blt	r17,zero,4190 <___vfprintf_internal_r+0x17fc>
    33c8:	01000044 	movi	r4,1
    33cc:	98000416 	blt	r19,zero,33e0 <___vfprintf_internal_r+0xa4c>
    33d0:	d8c14c17 	ldw	r3,1328(sp)
    33d4:	00bfdfc4 	movi	r2,-129
    33d8:	1886703a 	and	r3,r3,r2
    33dc:	d8c14c15 	stw	r3,1328(sp)
    33e0:	8444b03a 	or	r2,r16,r17
    33e4:	1002261e 	bne	r2,zero,3c80 <___vfprintf_internal_r+0x12ec>
    33e8:	9802251e 	bne	r19,zero,3c80 <___vfprintf_internal_r+0x12ec>
    33ec:	20803fcc 	andi	r2,r4,255
    33f0:	10029b26 	beq	r2,zero,3e60 <___vfprintf_internal_r+0x14cc>
    33f4:	d8c01904 	addi	r3,sp,100
    33f8:	dd000f04 	addi	r20,sp,60
    33fc:	d8c14115 	stw	r3,1284(sp)
    3400:	d8c14117 	ldw	r3,1284(sp)
    3404:	dcc14515 	stw	r19,1300(sp)
    3408:	a0c5c83a 	sub	r2,r20,r3
    340c:	11c00a04 	addi	r7,r2,40
    3410:	99c0010e 	bge	r19,r7,3418 <___vfprintf_internal_r+0xa84>
    3414:	d9c14515 	stw	r7,1300(sp)
    3418:	dcc14615 	stw	r19,1304(sp)
    341c:	d8800407 	ldb	r2,16(sp)
    3420:	103e4c26 	beq	r2,zero,2d54 <___vfprintf_internal_r+0x3c0>
    3424:	d8814517 	ldw	r2,1300(sp)
    3428:	10800044 	addi	r2,r2,1
    342c:	d8814515 	stw	r2,1300(sp)
    3430:	003e4806 	br	2d54 <___vfprintf_internal_r+0x3c0>
    3434:	d9814c17 	ldw	r6,1328(sp)
    3438:	31800414 	ori	r6,r6,16
    343c:	d9814c15 	stw	r6,1328(sp)
    3440:	d8c14c17 	ldw	r3,1328(sp)
    3444:	1880080c 	andi	r2,r3,32
    3448:	1001271e 	bne	r2,zero,38e8 <___vfprintf_internal_r+0xf54>
    344c:	d9414c17 	ldw	r5,1328(sp)
    3450:	2880040c 	andi	r2,r5,16
    3454:	1002b61e 	bne	r2,zero,3f30 <___vfprintf_internal_r+0x159c>
    3458:	d9814c17 	ldw	r6,1328(sp)
    345c:	3080100c 	andi	r2,r6,64
    3460:	1002b326 	beq	r2,zero,3f30 <___vfprintf_internal_r+0x159c>
    3464:	3c00000b 	ldhu	r16,0(r7)
    3468:	0009883a 	mov	r4,zero
    346c:	39c00104 	addi	r7,r7,4
    3470:	0023883a 	mov	r17,zero
    3474:	d9c14015 	stw	r7,1280(sp)
    3478:	d8000405 	stb	zero,16(sp)
    347c:	003fd306 	br	33cc <___vfprintf_internal_r+0xa38>
    3480:	d9014c17 	ldw	r4,1328(sp)
    3484:	21000414 	ori	r4,r4,16
    3488:	d9014c15 	stw	r4,1328(sp)
    348c:	d9414c17 	ldw	r5,1328(sp)
    3490:	2880080c 	andi	r2,r5,32
    3494:	1001081e 	bne	r2,zero,38b8 <___vfprintf_internal_r+0xf24>
    3498:	d8c14c17 	ldw	r3,1328(sp)
    349c:	1880040c 	andi	r2,r3,16
    34a0:	1002b01e 	bne	r2,zero,3f64 <___vfprintf_internal_r+0x15d0>
    34a4:	d9014c17 	ldw	r4,1328(sp)
    34a8:	2080100c 	andi	r2,r4,64
    34ac:	1002ad26 	beq	r2,zero,3f64 <___vfprintf_internal_r+0x15d0>
    34b0:	3c00000b 	ldhu	r16,0(r7)
    34b4:	01000044 	movi	r4,1
    34b8:	39c00104 	addi	r7,r7,4
    34bc:	0023883a 	mov	r17,zero
    34c0:	d9c14015 	stw	r7,1280(sp)
    34c4:	d8000405 	stb	zero,16(sp)
    34c8:	003fc006 	br	33cc <___vfprintf_internal_r+0xa38>
    34cc:	d9014f17 	ldw	r4,1340(sp)
    34d0:	b00b883a 	mov	r5,r22
    34d4:	d9800c04 	addi	r6,sp,48
    34d8:	000293c0 	call	293c <__sprint_r>
    34dc:	103ee51e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    34e0:	dc800e17 	ldw	r18,56(sp)
    34e4:	d8c01904 	addi	r3,sp,100
    34e8:	d9814c17 	ldw	r6,1328(sp)
    34ec:	3080004c 	andi	r2,r6,1
    34f0:	1005003a 	cmpeq	r2,r2,zero
    34f4:	103ea51e 	bne	r2,zero,2f8c <___vfprintf_internal_r+0x5f8>
    34f8:	00800044 	movi	r2,1
    34fc:	dc400d17 	ldw	r17,52(sp)
    3500:	18800115 	stw	r2,4(r3)
    3504:	d8814917 	ldw	r2,1316(sp)
    3508:	94800044 	addi	r18,r18,1
    350c:	8c400044 	addi	r17,r17,1
    3510:	18800015 	stw	r2,0(r3)
    3514:	008001c4 	movi	r2,7
    3518:	dc800e15 	stw	r18,56(sp)
    351c:	dc400d15 	stw	r17,52(sp)
    3520:	14421e0e 	bge	r2,r17,3d9c <___vfprintf_internal_r+0x1408>
    3524:	d9014f17 	ldw	r4,1340(sp)
    3528:	b00b883a 	mov	r5,r22
    352c:	d9800c04 	addi	r6,sp,48
    3530:	000293c0 	call	293c <__sprint_r>
    3534:	103ecf1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    3538:	dc800e17 	ldw	r18,56(sp)
    353c:	d8c01904 	addi	r3,sp,100
    3540:	003e9206 	br	2f8c <___vfprintf_internal_r+0x5f8>
    3544:	d9014f17 	ldw	r4,1340(sp)
    3548:	b00b883a 	mov	r5,r22
    354c:	d9800c04 	addi	r6,sp,48
    3550:	000293c0 	call	293c <__sprint_r>
    3554:	103ec026 	beq	r2,zero,3058 <___vfprintf_internal_r+0x6c4>
    3558:	003ec606 	br	3074 <___vfprintf_internal_r+0x6e0>
    355c:	d9014f17 	ldw	r4,1340(sp)
    3560:	b00b883a 	mov	r5,r22
    3564:	d9800c04 	addi	r6,sp,48
    3568:	d9c15115 	stw	r7,1348(sp)
    356c:	000293c0 	call	293c <__sprint_r>
    3570:	d9c15117 	ldw	r7,1348(sp)
    3574:	103ebf1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    3578:	dc800e17 	ldw	r18,56(sp)
    357c:	dc400d17 	ldw	r17,52(sp)
    3580:	dd401904 	addi	r21,sp,100
    3584:	003e7406 	br	2f58 <___vfprintf_internal_r+0x5c4>
    3588:	d9014f17 	ldw	r4,1340(sp)
    358c:	b00b883a 	mov	r5,r22
    3590:	d9800c04 	addi	r6,sp,48
    3594:	d9c15115 	stw	r7,1348(sp)
    3598:	000293c0 	call	293c <__sprint_r>
    359c:	d9c15117 	ldw	r7,1348(sp)
    35a0:	103eb41e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    35a4:	dd401904 	addi	r21,sp,100
    35a8:	003d6d06 	br	2b60 <___vfprintf_internal_r+0x1cc>
    35ac:	d9014f17 	ldw	r4,1340(sp)
    35b0:	b00b883a 	mov	r5,r22
    35b4:	d9800c04 	addi	r6,sp,48
    35b8:	d9c15115 	stw	r7,1348(sp)
    35bc:	000293c0 	call	293c <__sprint_r>
    35c0:	d9c15117 	ldw	r7,1348(sp)
    35c4:	103eab1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    35c8:	dc800e17 	ldw	r18,56(sp)
    35cc:	dc400d17 	ldw	r17,52(sp)
    35d0:	dd401904 	addi	r21,sp,100
    35d4:	003e3406 	br	2ea8 <___vfprintf_internal_r+0x514>
    35d8:	d9014f17 	ldw	r4,1340(sp)
    35dc:	b00b883a 	mov	r5,r22
    35e0:	d9800c04 	addi	r6,sp,48
    35e4:	d9c15115 	stw	r7,1348(sp)
    35e8:	000293c0 	call	293c <__sprint_r>
    35ec:	d9c15117 	ldw	r7,1348(sp)
    35f0:	103ea01e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    35f4:	dc800e17 	ldw	r18,56(sp)
    35f8:	dc400d17 	ldw	r17,52(sp)
    35fc:	dd401904 	addi	r21,sp,100
    3600:	003e1c06 	br	2e74 <___vfprintf_internal_r+0x4e0>
    3604:	d9014f17 	ldw	r4,1340(sp)
    3608:	b00b883a 	mov	r5,r22
    360c:	d9800c04 	addi	r6,sp,48
    3610:	d9c15115 	stw	r7,1348(sp)
    3614:	000293c0 	call	293c <__sprint_r>
    3618:	d9c15117 	ldw	r7,1348(sp)
    361c:	103e951e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    3620:	dc800e17 	ldw	r18,56(sp)
    3624:	dc400d17 	ldw	r17,52(sp)
    3628:	dd401904 	addi	r21,sp,100
    362c:	003e0406 	br	2e40 <___vfprintf_internal_r+0x4ac>
    3630:	d9000517 	ldw	r4,20(sp)
    3634:	0102520e 	bge	zero,r4,3f80 <___vfprintf_internal_r+0x15ec>
    3638:	d9814717 	ldw	r6,1308(sp)
    363c:	21807a16 	blt	r4,r6,3828 <___vfprintf_internal_r+0xe94>
    3640:	d8814117 	ldw	r2,1284(sp)
    3644:	91a5883a 	add	r18,r18,r6
    3648:	8c400044 	addi	r17,r17,1
    364c:	a8800015 	stw	r2,0(r21)
    3650:	008001c4 	movi	r2,7
    3654:	a9800115 	stw	r6,4(r21)
    3658:	dc800e15 	stw	r18,56(sp)
    365c:	dc400d15 	stw	r17,52(sp)
    3660:	1442f616 	blt	r2,r17,423c <___vfprintf_internal_r+0x18a8>
    3664:	a8c00204 	addi	r3,r21,8
    3668:	d9414717 	ldw	r5,1308(sp)
    366c:	2161c83a 	sub	r16,r4,r5
    3670:	043f9d0e 	bge	zero,r16,34e8 <___vfprintf_internal_r+0xb54>
    3674:	00800404 	movi	r2,16
    3678:	1402130e 	bge	r2,r16,3ec8 <___vfprintf_internal_r+0x1534>
    367c:	dc400d17 	ldw	r17,52(sp)
    3680:	1027883a 	mov	r19,r2
    3684:	07000074 	movhi	fp,1
    3688:	e7397484 	addi	fp,fp,-6702
    368c:	050001c4 	movi	r20,7
    3690:	00000306 	br	36a0 <___vfprintf_internal_r+0xd0c>
    3694:	18c00204 	addi	r3,r3,8
    3698:	843ffc04 	addi	r16,r16,-16
    369c:	9c020d0e 	bge	r19,r16,3ed4 <___vfprintf_internal_r+0x1540>
    36a0:	94800404 	addi	r18,r18,16
    36a4:	8c400044 	addi	r17,r17,1
    36a8:	1f000015 	stw	fp,0(r3)
    36ac:	1cc00115 	stw	r19,4(r3)
    36b0:	dc800e15 	stw	r18,56(sp)
    36b4:	dc400d15 	stw	r17,52(sp)
    36b8:	a47ff60e 	bge	r20,r17,3694 <___vfprintf_internal_r+0xd00>
    36bc:	d9014f17 	ldw	r4,1340(sp)
    36c0:	b00b883a 	mov	r5,r22
    36c4:	d9800c04 	addi	r6,sp,48
    36c8:	000293c0 	call	293c <__sprint_r>
    36cc:	103e691e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    36d0:	dc800e17 	ldw	r18,56(sp)
    36d4:	dc400d17 	ldw	r17,52(sp)
    36d8:	d8c01904 	addi	r3,sp,100
    36dc:	003fee06 	br	3698 <___vfprintf_internal_r+0xd04>
    36e0:	d8814717 	ldw	r2,1308(sp)
    36e4:	143fffc4 	addi	r16,r2,-1
    36e8:	043e970e 	bge	zero,r16,3148 <___vfprintf_internal_r+0x7b4>
    36ec:	00800404 	movi	r2,16
    36f0:	1400180e 	bge	r2,r16,3754 <___vfprintf_internal_r+0xdc0>
    36f4:	1029883a 	mov	r20,r2
    36f8:	07000074 	movhi	fp,1
    36fc:	e7397484 	addi	fp,fp,-6702
    3700:	054001c4 	movi	r21,7
    3704:	00000306 	br	3714 <___vfprintf_internal_r+0xd80>
    3708:	9cc00204 	addi	r19,r19,8
    370c:	843ffc04 	addi	r16,r16,-16
    3710:	a400120e 	bge	r20,r16,375c <___vfprintf_internal_r+0xdc8>
    3714:	94800404 	addi	r18,r18,16
    3718:	8c400044 	addi	r17,r17,1
    371c:	9f000015 	stw	fp,0(r19)
    3720:	9d000115 	stw	r20,4(r19)
    3724:	dc800e15 	stw	r18,56(sp)
    3728:	dc400d15 	stw	r17,52(sp)
    372c:	ac7ff60e 	bge	r21,r17,3708 <___vfprintf_internal_r+0xd74>
    3730:	d9014f17 	ldw	r4,1340(sp)
    3734:	b00b883a 	mov	r5,r22
    3738:	d9800c04 	addi	r6,sp,48
    373c:	000293c0 	call	293c <__sprint_r>
    3740:	103e4c1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    3744:	dc800e17 	ldw	r18,56(sp)
    3748:	dc400d17 	ldw	r17,52(sp)
    374c:	dcc01904 	addi	r19,sp,100
    3750:	003fee06 	br	370c <___vfprintf_internal_r+0xd78>
    3754:	07000074 	movhi	fp,1
    3758:	e7397484 	addi	fp,fp,-6702
    375c:	9425883a 	add	r18,r18,r16
    3760:	8c400044 	addi	r17,r17,1
    3764:	008001c4 	movi	r2,7
    3768:	9f000015 	stw	fp,0(r19)
    376c:	9c000115 	stw	r16,4(r19)
    3770:	dc800e15 	stw	r18,56(sp)
    3774:	dc400d15 	stw	r17,52(sp)
    3778:	147e720e 	bge	r2,r17,3144 <___vfprintf_internal_r+0x7b0>
    377c:	d9014f17 	ldw	r4,1340(sp)
    3780:	b00b883a 	mov	r5,r22
    3784:	d9800c04 	addi	r6,sp,48
    3788:	000293c0 	call	293c <__sprint_r>
    378c:	103e391e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    3790:	dc800e17 	ldw	r18,56(sp)
    3794:	dc400d17 	ldw	r17,52(sp)
    3798:	dcc01904 	addi	r19,sp,100
    379c:	003e6a06 	br	3148 <___vfprintf_internal_r+0x7b4>
    37a0:	d9014f17 	ldw	r4,1340(sp)
    37a4:	b00b883a 	mov	r5,r22
    37a8:	d9800c04 	addi	r6,sp,48
    37ac:	d9c15115 	stw	r7,1348(sp)
    37b0:	000293c0 	call	293c <__sprint_r>
    37b4:	d9c15117 	ldw	r7,1348(sp)
    37b8:	103e2e1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    37bc:	dc800e17 	ldw	r18,56(sp)
    37c0:	dc400d17 	ldw	r17,52(sp)
    37c4:	dd401904 	addi	r21,sp,100
    37c8:	003dba06 	br	2eb4 <___vfprintf_internal_r+0x520>
    37cc:	d9014f17 	ldw	r4,1340(sp)
    37d0:	b00b883a 	mov	r5,r22
    37d4:	d9800c04 	addi	r6,sp,48
    37d8:	000293c0 	call	293c <__sprint_r>
    37dc:	103e251e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    37e0:	dc800e17 	ldw	r18,56(sp)
    37e4:	dc400d17 	ldw	r17,52(sp)
    37e8:	dcc01904 	addi	r19,sp,100
    37ec:	003e4206 	br	30f8 <___vfprintf_internal_r+0x764>
    37f0:	d9014f17 	ldw	r4,1340(sp)
    37f4:	b00b883a 	mov	r5,r22
    37f8:	d9800c04 	addi	r6,sp,48
    37fc:	000293c0 	call	293c <__sprint_r>
    3800:	103e1c1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    3804:	dc800e17 	ldw	r18,56(sp)
    3808:	dc400d17 	ldw	r17,52(sp)
    380c:	d8c01904 	addi	r3,sp,100
    3810:	003e2e06 	br	30cc <___vfprintf_internal_r+0x738>
    3814:	d9414c17 	ldw	r5,1328(sp)
    3818:	2880004c 	andi	r2,r5,1
    381c:	1005003a 	cmpeq	r2,r2,zero
    3820:	103dda1e 	bne	r2,zero,2f8c <___vfprintf_internal_r+0x5f8>
    3824:	003e9f06 	br	32a4 <___vfprintf_internal_r+0x910>
    3828:	d8c14117 	ldw	r3,1284(sp)
    382c:	9125883a 	add	r18,r18,r4
    3830:	8c400044 	addi	r17,r17,1
    3834:	008001c4 	movi	r2,7
    3838:	a8c00015 	stw	r3,0(r21)
    383c:	a9000115 	stw	r4,4(r21)
    3840:	dc800e15 	stw	r18,56(sp)
    3844:	dc400d15 	stw	r17,52(sp)
    3848:	14426616 	blt	r2,r17,41e4 <___vfprintf_internal_r+0x1850>
    384c:	a8c00204 	addi	r3,r21,8
    3850:	d9414917 	ldw	r5,1316(sp)
    3854:	00800044 	movi	r2,1
    3858:	94800044 	addi	r18,r18,1
    385c:	8c400044 	addi	r17,r17,1
    3860:	18800115 	stw	r2,4(r3)
    3864:	008001c4 	movi	r2,7
    3868:	19400015 	stw	r5,0(r3)
    386c:	dc800e15 	stw	r18,56(sp)
    3870:	dc400d15 	stw	r17,52(sp)
    3874:	2021883a 	mov	r16,r4
    3878:	14425016 	blt	r2,r17,41bc <___vfprintf_internal_r+0x1828>
    387c:	19400204 	addi	r5,r3,8
    3880:	d9814717 	ldw	r6,1308(sp)
    3884:	8c400044 	addi	r17,r17,1
    3888:	dc400d15 	stw	r17,52(sp)
    388c:	3107c83a 	sub	r3,r6,r4
    3890:	d9014117 	ldw	r4,1284(sp)
    3894:	90e5883a 	add	r18,r18,r3
    3898:	28c00115 	stw	r3,4(r5)
    389c:	8105883a 	add	r2,r16,r4
    38a0:	28800015 	stw	r2,0(r5)
    38a4:	008001c4 	movi	r2,7
    38a8:	dc800e15 	stw	r18,56(sp)
    38ac:	147f1d16 	blt	r2,r17,3524 <___vfprintf_internal_r+0xb90>
    38b0:	28c00204 	addi	r3,r5,8
    38b4:	003db506 	br	2f8c <___vfprintf_internal_r+0x5f8>
    38b8:	3c000017 	ldw	r16,0(r7)
    38bc:	3c400117 	ldw	r17,4(r7)
    38c0:	39800204 	addi	r6,r7,8
    38c4:	01000044 	movi	r4,1
    38c8:	d9814015 	stw	r6,1280(sp)
    38cc:	d8000405 	stb	zero,16(sp)
    38d0:	003ebe06 	br	33cc <___vfprintf_internal_r+0xa38>
    38d4:	3c000017 	ldw	r16,0(r7)
    38d8:	3c400117 	ldw	r17,4(r7)
    38dc:	38800204 	addi	r2,r7,8
    38e0:	d8814015 	stw	r2,1280(sp)
    38e4:	003eb706 	br	33c4 <___vfprintf_internal_r+0xa30>
    38e8:	3c000017 	ldw	r16,0(r7)
    38ec:	3c400117 	ldw	r17,4(r7)
    38f0:	39000204 	addi	r4,r7,8
    38f4:	d9014015 	stw	r4,1280(sp)
    38f8:	0009883a 	mov	r4,zero
    38fc:	d8000405 	stb	zero,16(sp)
    3900:	003eb206 	br	33cc <___vfprintf_internal_r+0xa38>
    3904:	38c00017 	ldw	r3,0(r7)
    3908:	39c00104 	addi	r7,r7,4
    390c:	d8c14a15 	stw	r3,1320(sp)
    3910:	1800d10e 	bge	r3,zero,3c58 <___vfprintf_internal_r+0x12c4>
    3914:	00c7c83a 	sub	r3,zero,r3
    3918:	d8c14a15 	stw	r3,1320(sp)
    391c:	d9014c17 	ldw	r4,1328(sp)
    3920:	b8c00007 	ldb	r3,0(r23)
    3924:	21000114 	ori	r4,r4,4
    3928:	d9014c15 	stw	r4,1328(sp)
    392c:	003c9806 	br	2b90 <___vfprintf_internal_r+0x1fc>
    3930:	d9814c17 	ldw	r6,1328(sp)
    3934:	3080080c 	andi	r2,r6,32
    3938:	1001f026 	beq	r2,zero,40fc <___vfprintf_internal_r+0x1768>
    393c:	d9014b17 	ldw	r4,1324(sp)
    3940:	38800017 	ldw	r2,0(r7)
    3944:	39c00104 	addi	r7,r7,4
    3948:	d9c14015 	stw	r7,1280(sp)
    394c:	2007d7fa 	srai	r3,r4,31
    3950:	d9c14017 	ldw	r7,1280(sp)
    3954:	11000015 	stw	r4,0(r2)
    3958:	10c00115 	stw	r3,4(r2)
    395c:	003c6906 	br	2b04 <___vfprintf_internal_r+0x170>
    3960:	b8c00007 	ldb	r3,0(r23)
    3964:	00801b04 	movi	r2,108
    3968:	18824f26 	beq	r3,r2,42a8 <___vfprintf_internal_r+0x1914>
    396c:	d9414c17 	ldw	r5,1328(sp)
    3970:	29400414 	ori	r5,r5,16
    3974:	d9414c15 	stw	r5,1328(sp)
    3978:	003c8506 	br	2b90 <___vfprintf_internal_r+0x1fc>
    397c:	d9814c17 	ldw	r6,1328(sp)
    3980:	b8c00007 	ldb	r3,0(r23)
    3984:	31800814 	ori	r6,r6,32
    3988:	d9814c15 	stw	r6,1328(sp)
    398c:	003c8006 	br	2b90 <___vfprintf_internal_r+0x1fc>
    3990:	d8814c17 	ldw	r2,1328(sp)
    3994:	3c000017 	ldw	r16,0(r7)
    3998:	00c01e04 	movi	r3,120
    399c:	10800094 	ori	r2,r2,2
    39a0:	d8814c15 	stw	r2,1328(sp)
    39a4:	39c00104 	addi	r7,r7,4
    39a8:	01400074 	movhi	r5,1
    39ac:	29795d04 	addi	r5,r5,-6796
    39b0:	00800c04 	movi	r2,48
    39b4:	0023883a 	mov	r17,zero
    39b8:	01000084 	movi	r4,2
    39bc:	d9c14015 	stw	r7,1280(sp)
    39c0:	d8c14d15 	stw	r3,1332(sp)
    39c4:	d9414415 	stw	r5,1296(sp)
    39c8:	d8800445 	stb	r2,17(sp)
    39cc:	d8c00485 	stb	r3,18(sp)
    39d0:	d8000405 	stb	zero,16(sp)
    39d4:	003e7d06 	br	33cc <___vfprintf_internal_r+0xa38>
    39d8:	d8814c17 	ldw	r2,1328(sp)
    39dc:	b8c00007 	ldb	r3,0(r23)
    39e0:	10801014 	ori	r2,r2,64
    39e4:	d8814c15 	stw	r2,1328(sp)
    39e8:	003c6906 	br	2b90 <___vfprintf_internal_r+0x1fc>
    39ec:	d9414c17 	ldw	r5,1328(sp)
    39f0:	2880020c 	andi	r2,r5,8
    39f4:	1001df26 	beq	r2,zero,4174 <___vfprintf_internal_r+0x17e0>
    39f8:	39800017 	ldw	r6,0(r7)
    39fc:	38800204 	addi	r2,r7,8
    3a00:	d8814015 	stw	r2,1280(sp)
    3a04:	d9814215 	stw	r6,1288(sp)
    3a08:	39c00117 	ldw	r7,4(r7)
    3a0c:	d9c14315 	stw	r7,1292(sp)
    3a10:	d9014217 	ldw	r4,1288(sp)
    3a14:	d9414317 	ldw	r5,1292(sp)
    3a18:	0008da80 	call	8da8 <__isinfd>
    3a1c:	10021726 	beq	r2,zero,427c <___vfprintf_internal_r+0x18e8>
    3a20:	d9014217 	ldw	r4,1288(sp)
    3a24:	d9414317 	ldw	r5,1292(sp)
    3a28:	000d883a 	mov	r6,zero
    3a2c:	000f883a 	mov	r7,zero
    3a30:	000ad800 	call	ad80 <__ltdf2>
    3a34:	1002ca16 	blt	r2,zero,4560 <___vfprintf_internal_r+0x1bcc>
    3a38:	d9414d17 	ldw	r5,1332(sp)
    3a3c:	008011c4 	movi	r2,71
    3a40:	11420a16 	blt	r2,r5,426c <___vfprintf_internal_r+0x18d8>
    3a44:	01800074 	movhi	r6,1
    3a48:	31b96204 	addi	r6,r6,-6776
    3a4c:	d9814115 	stw	r6,1284(sp)
    3a50:	d9014c17 	ldw	r4,1328(sp)
    3a54:	00c000c4 	movi	r3,3
    3a58:	00bfdfc4 	movi	r2,-129
    3a5c:	2088703a 	and	r4,r4,r2
    3a60:	180f883a 	mov	r7,r3
    3a64:	d8c14515 	stw	r3,1300(sp)
    3a68:	d9014c15 	stw	r4,1328(sp)
    3a6c:	d8014615 	stw	zero,1304(sp)
    3a70:	003e6a06 	br	341c <___vfprintf_internal_r+0xa88>
    3a74:	38800017 	ldw	r2,0(r7)
    3a78:	00c00044 	movi	r3,1
    3a7c:	39c00104 	addi	r7,r7,4
    3a80:	d9c14015 	stw	r7,1280(sp)
    3a84:	d9000f04 	addi	r4,sp,60
    3a88:	180f883a 	mov	r7,r3
    3a8c:	d8c14515 	stw	r3,1300(sp)
    3a90:	d9014115 	stw	r4,1284(sp)
    3a94:	d8800f05 	stb	r2,60(sp)
    3a98:	d8000405 	stb	zero,16(sp)
    3a9c:	003cac06 	br	2d50 <___vfprintf_internal_r+0x3bc>
    3aa0:	01400074 	movhi	r5,1
    3aa4:	29796804 	addi	r5,r5,-6752
    3aa8:	d9414415 	stw	r5,1296(sp)
    3aac:	d9814c17 	ldw	r6,1328(sp)
    3ab0:	3080080c 	andi	r2,r6,32
    3ab4:	1000f926 	beq	r2,zero,3e9c <___vfprintf_internal_r+0x1508>
    3ab8:	3c000017 	ldw	r16,0(r7)
    3abc:	3c400117 	ldw	r17,4(r7)
    3ac0:	38800204 	addi	r2,r7,8
    3ac4:	d8814015 	stw	r2,1280(sp)
    3ac8:	d9414c17 	ldw	r5,1328(sp)
    3acc:	2880004c 	andi	r2,r5,1
    3ad0:	1005003a 	cmpeq	r2,r2,zero
    3ad4:	1000b31e 	bne	r2,zero,3da4 <___vfprintf_internal_r+0x1410>
    3ad8:	8444b03a 	or	r2,r16,r17
    3adc:	1000b126 	beq	r2,zero,3da4 <___vfprintf_internal_r+0x1410>
    3ae0:	d9814d17 	ldw	r6,1332(sp)
    3ae4:	29400094 	ori	r5,r5,2
    3ae8:	00800c04 	movi	r2,48
    3aec:	01000084 	movi	r4,2
    3af0:	d9414c15 	stw	r5,1328(sp)
    3af4:	d8800445 	stb	r2,17(sp)
    3af8:	d9800485 	stb	r6,18(sp)
    3afc:	d8000405 	stb	zero,16(sp)
    3b00:	003e3206 	br	33cc <___vfprintf_internal_r+0xa38>
    3b04:	01800074 	movhi	r6,1
    3b08:	31b95d04 	addi	r6,r6,-6796
    3b0c:	d9814415 	stw	r6,1296(sp)
    3b10:	003fe606 	br	3aac <___vfprintf_internal_r+0x1118>
    3b14:	00800ac4 	movi	r2,43
    3b18:	d8800405 	stb	r2,16(sp)
    3b1c:	b8c00007 	ldb	r3,0(r23)
    3b20:	003c1b06 	br	2b90 <___vfprintf_internal_r+0x1fc>
    3b24:	d8814c17 	ldw	r2,1328(sp)
    3b28:	b8c00007 	ldb	r3,0(r23)
    3b2c:	10800054 	ori	r2,r2,1
    3b30:	d8814c15 	stw	r2,1328(sp)
    3b34:	003c1606 	br	2b90 <___vfprintf_internal_r+0x1fc>
    3b38:	d8800407 	ldb	r2,16(sp)
    3b3c:	1000461e 	bne	r2,zero,3c58 <___vfprintf_internal_r+0x12c4>
    3b40:	00800804 	movi	r2,32
    3b44:	d8800405 	stb	r2,16(sp)
    3b48:	b8c00007 	ldb	r3,0(r23)
    3b4c:	003c1006 	br	2b90 <___vfprintf_internal_r+0x1fc>
    3b50:	d9814c17 	ldw	r6,1328(sp)
    3b54:	b8c00007 	ldb	r3,0(r23)
    3b58:	31800214 	ori	r6,r6,8
    3b5c:	d9814c15 	stw	r6,1328(sp)
    3b60:	003c0b06 	br	2b90 <___vfprintf_internal_r+0x1fc>
    3b64:	0007883a 	mov	r3,zero
    3b68:	01000244 	movi	r4,9
    3b6c:	188002a4 	muli	r2,r3,10
    3b70:	b8c00007 	ldb	r3,0(r23)
    3b74:	d9814d17 	ldw	r6,1332(sp)
    3b78:	bdc00044 	addi	r23,r23,1
    3b7c:	d8c14d15 	stw	r3,1332(sp)
    3b80:	d9414d17 	ldw	r5,1332(sp)
    3b84:	3085883a 	add	r2,r6,r2
    3b88:	10fff404 	addi	r3,r2,-48
    3b8c:	28bff404 	addi	r2,r5,-48
    3b90:	20bff62e 	bgeu	r4,r2,3b6c <___vfprintf_internal_r+0x11d8>
    3b94:	d8c14a15 	stw	r3,1320(sp)
    3b98:	003bff06 	br	2b98 <___vfprintf_internal_r+0x204>
    3b9c:	d9414c17 	ldw	r5,1328(sp)
    3ba0:	b8c00007 	ldb	r3,0(r23)
    3ba4:	29402014 	ori	r5,r5,128
    3ba8:	d9414c15 	stw	r5,1328(sp)
    3bac:	003bf806 	br	2b90 <___vfprintf_internal_r+0x1fc>
    3bb0:	b8c00007 	ldb	r3,0(r23)
    3bb4:	00800a84 	movi	r2,42
    3bb8:	bdc00044 	addi	r23,r23,1
    3bbc:	18831526 	beq	r3,r2,4814 <___vfprintf_internal_r+0x1e80>
    3bc0:	d8c14d15 	stw	r3,1332(sp)
    3bc4:	18bff404 	addi	r2,r3,-48
    3bc8:	00c00244 	movi	r3,9
    3bcc:	18827836 	bltu	r3,r2,45b0 <___vfprintf_internal_r+0x1c1c>
    3bd0:	000d883a 	mov	r6,zero
    3bd4:	308002a4 	muli	r2,r6,10
    3bd8:	b9800007 	ldb	r6,0(r23)
    3bdc:	d9414d17 	ldw	r5,1332(sp)
    3be0:	bdc00044 	addi	r23,r23,1
    3be4:	d9814d15 	stw	r6,1332(sp)
    3be8:	d9014d17 	ldw	r4,1332(sp)
    3bec:	1145883a 	add	r2,r2,r5
    3bf0:	11bff404 	addi	r6,r2,-48
    3bf4:	20bff404 	addi	r2,r4,-48
    3bf8:	18bff62e 	bgeu	r3,r2,3bd4 <___vfprintf_internal_r+0x1240>
    3bfc:	3027883a 	mov	r19,r6
    3c00:	303be50e 	bge	r6,zero,2b98 <___vfprintf_internal_r+0x204>
    3c04:	04ffffc4 	movi	r19,-1
    3c08:	003be306 	br	2b98 <___vfprintf_internal_r+0x204>
    3c0c:	d8000405 	stb	zero,16(sp)
    3c10:	39800017 	ldw	r6,0(r7)
    3c14:	39c00104 	addi	r7,r7,4
    3c18:	d9c14015 	stw	r7,1280(sp)
    3c1c:	d9814115 	stw	r6,1284(sp)
    3c20:	3001c926 	beq	r6,zero,4348 <___vfprintf_internal_r+0x19b4>
    3c24:	98000e16 	blt	r19,zero,3c60 <___vfprintf_internal_r+0x12cc>
    3c28:	d9014117 	ldw	r4,1284(sp)
    3c2c:	000b883a 	mov	r5,zero
    3c30:	980d883a 	mov	r6,r19
    3c34:	00074c40 	call	74c4 <memchr>
    3c38:	10025926 	beq	r2,zero,45a0 <___vfprintf_internal_r+0x1c0c>
    3c3c:	d8c14117 	ldw	r3,1284(sp)
    3c40:	10cfc83a 	sub	r7,r2,r3
    3c44:	99c19e16 	blt	r19,r7,42c0 <___vfprintf_internal_r+0x192c>
    3c48:	d9c14515 	stw	r7,1300(sp)
    3c4c:	38000916 	blt	r7,zero,3c74 <___vfprintf_internal_r+0x12e0>
    3c50:	d8014615 	stw	zero,1304(sp)
    3c54:	003df106 	br	341c <___vfprintf_internal_r+0xa88>
    3c58:	b8c00007 	ldb	r3,0(r23)
    3c5c:	003bcc06 	br	2b90 <___vfprintf_internal_r+0x1fc>
    3c60:	d9014117 	ldw	r4,1284(sp)
    3c64:	00028c80 	call	28c8 <strlen>
    3c68:	d8814515 	stw	r2,1300(sp)
    3c6c:	100f883a 	mov	r7,r2
    3c70:	103ff70e 	bge	r2,zero,3c50 <___vfprintf_internal_r+0x12bc>
    3c74:	d8014515 	stw	zero,1300(sp)
    3c78:	d8014615 	stw	zero,1304(sp)
    3c7c:	003de706 	br	341c <___vfprintf_internal_r+0xa88>
    3c80:	20c03fcc 	andi	r3,r4,255
    3c84:	00800044 	movi	r2,1
    3c88:	18802d26 	beq	r3,r2,3d40 <___vfprintf_internal_r+0x13ac>
    3c8c:	18800e36 	bltu	r3,r2,3cc8 <___vfprintf_internal_r+0x1334>
    3c90:	00800084 	movi	r2,2
    3c94:	1880fa26 	beq	r3,r2,4080 <___vfprintf_internal_r+0x16ec>
    3c98:	01000074 	movhi	r4,1
    3c9c:	21396d04 	addi	r4,r4,-6732
    3ca0:	00028c80 	call	28c8 <strlen>
    3ca4:	100f883a 	mov	r7,r2
    3ca8:	dcc14515 	stw	r19,1300(sp)
    3cac:	9880010e 	bge	r19,r2,3cb4 <___vfprintf_internal_r+0x1320>
    3cb0:	d8814515 	stw	r2,1300(sp)
    3cb4:	00800074 	movhi	r2,1
    3cb8:	10b96d04 	addi	r2,r2,-6732
    3cbc:	dcc14615 	stw	r19,1304(sp)
    3cc0:	d8814115 	stw	r2,1284(sp)
    3cc4:	003dd506 	br	341c <___vfprintf_internal_r+0xa88>
    3cc8:	d9401904 	addi	r5,sp,100
    3ccc:	dd000f04 	addi	r20,sp,60
    3cd0:	d9414115 	stw	r5,1284(sp)
    3cd4:	880a977a 	slli	r5,r17,29
    3cd8:	d9814117 	ldw	r6,1284(sp)
    3cdc:	8004d0fa 	srli	r2,r16,3
    3ce0:	8806d0fa 	srli	r3,r17,3
    3ce4:	810001cc 	andi	r4,r16,7
    3ce8:	2884b03a 	or	r2,r5,r2
    3cec:	31bfffc4 	addi	r6,r6,-1
    3cf0:	21000c04 	addi	r4,r4,48
    3cf4:	d9814115 	stw	r6,1284(sp)
    3cf8:	10cab03a 	or	r5,r2,r3
    3cfc:	31000005 	stb	r4,0(r6)
    3d00:	1021883a 	mov	r16,r2
    3d04:	1823883a 	mov	r17,r3
    3d08:	283ff21e 	bne	r5,zero,3cd4 <___vfprintf_internal_r+0x1340>
    3d0c:	d8c14c17 	ldw	r3,1328(sp)
    3d10:	1880004c 	andi	r2,r3,1
    3d14:	1005003a 	cmpeq	r2,r2,zero
    3d18:	103db91e 	bne	r2,zero,3400 <___vfprintf_internal_r+0xa6c>
    3d1c:	20803fcc 	andi	r2,r4,255
    3d20:	1080201c 	xori	r2,r2,128
    3d24:	10bfe004 	addi	r2,r2,-128
    3d28:	00c00c04 	movi	r3,48
    3d2c:	10fdb426 	beq	r2,r3,3400 <___vfprintf_internal_r+0xa6c>
    3d30:	31bfffc4 	addi	r6,r6,-1
    3d34:	d9814115 	stw	r6,1284(sp)
    3d38:	30c00005 	stb	r3,0(r6)
    3d3c:	003db006 	br	3400 <___vfprintf_internal_r+0xa6c>
    3d40:	88800068 	cmpgeui	r2,r17,1
    3d44:	10002c1e 	bne	r2,zero,3df8 <___vfprintf_internal_r+0x1464>
    3d48:	8800021e 	bne	r17,zero,3d54 <___vfprintf_internal_r+0x13c0>
    3d4c:	00800244 	movi	r2,9
    3d50:	14002936 	bltu	r2,r16,3df8 <___vfprintf_internal_r+0x1464>
    3d54:	d90018c4 	addi	r4,sp,99
    3d58:	dd000f04 	addi	r20,sp,60
    3d5c:	d9014115 	stw	r4,1284(sp)
    3d60:	d9014117 	ldw	r4,1284(sp)
    3d64:	80800c04 	addi	r2,r16,48
    3d68:	20800005 	stb	r2,0(r4)
    3d6c:	003da406 	br	3400 <___vfprintf_internal_r+0xa6c>
    3d70:	dc400d17 	ldw	r17,52(sp)
    3d74:	07000074 	movhi	fp,1
    3d78:	e7397484 	addi	fp,fp,-6702
    3d7c:	9425883a 	add	r18,r18,r16
    3d80:	8c400044 	addi	r17,r17,1
    3d84:	008001c4 	movi	r2,7
    3d88:	1f000015 	stw	fp,0(r3)
    3d8c:	1c000115 	stw	r16,4(r3)
    3d90:	dc800e15 	stw	r18,56(sp)
    3d94:	dc400d15 	stw	r17,52(sp)
    3d98:	147de216 	blt	r2,r17,3524 <___vfprintf_internal_r+0xb90>
    3d9c:	18c00204 	addi	r3,r3,8
    3da0:	003c7a06 	br	2f8c <___vfprintf_internal_r+0x5f8>
    3da4:	01000084 	movi	r4,2
    3da8:	d8000405 	stb	zero,16(sp)
    3dac:	003d8706 	br	33cc <___vfprintf_internal_r+0xa38>
    3db0:	d9814c17 	ldw	r6,1328(sp)
    3db4:	30c4703a 	and	r2,r6,r3
    3db8:	1005003a 	cmpeq	r2,r2,zero
    3dbc:	103cb926 	beq	r2,zero,30a4 <___vfprintf_internal_r+0x710>
    3dc0:	d9014117 	ldw	r4,1284(sp)
    3dc4:	94800044 	addi	r18,r18,1
    3dc8:	8c400044 	addi	r17,r17,1
    3dcc:	008001c4 	movi	r2,7
    3dd0:	a9000015 	stw	r4,0(r21)
    3dd4:	a8c00115 	stw	r3,4(r21)
    3dd8:	dc800e15 	stw	r18,56(sp)
    3ddc:	dc400d15 	stw	r17,52(sp)
    3de0:	147e6616 	blt	r2,r17,377c <___vfprintf_internal_r+0xde8>
    3de4:	acc00204 	addi	r19,r21,8
    3de8:	003cd706 	br	3148 <___vfprintf_internal_r+0x7b4>
    3dec:	07000074 	movhi	fp,1
    3df0:	e7397484 	addi	fp,fp,-6702
    3df4:	003c4f06 	br	2f34 <___vfprintf_internal_r+0x5a0>
    3df8:	dd000f04 	addi	r20,sp,60
    3dfc:	dc801904 	addi	r18,sp,100
    3e00:	8009883a 	mov	r4,r16
    3e04:	880b883a 	mov	r5,r17
    3e08:	01800284 	movi	r6,10
    3e0c:	000f883a 	mov	r7,zero
    3e10:	0009a900 	call	9a90 <__umoddi3>
    3e14:	12000c04 	addi	r8,r2,48
    3e18:	94bfffc4 	addi	r18,r18,-1
    3e1c:	8009883a 	mov	r4,r16
    3e20:	880b883a 	mov	r5,r17
    3e24:	01800284 	movi	r6,10
    3e28:	000f883a 	mov	r7,zero
    3e2c:	92000005 	stb	r8,0(r18)
    3e30:	00094b40 	call	94b4 <__udivdi3>
    3e34:	1009883a 	mov	r4,r2
    3e38:	1021883a 	mov	r16,r2
    3e3c:	18800068 	cmpgeui	r2,r3,1
    3e40:	1823883a 	mov	r17,r3
    3e44:	103fee1e 	bne	r2,zero,3e00 <___vfprintf_internal_r+0x146c>
    3e48:	1800021e 	bne	r3,zero,3e54 <___vfprintf_internal_r+0x14c0>
    3e4c:	00800244 	movi	r2,9
    3e50:	113feb36 	bltu	r2,r4,3e00 <___vfprintf_internal_r+0x146c>
    3e54:	94bfffc4 	addi	r18,r18,-1
    3e58:	dc814115 	stw	r18,1284(sp)
    3e5c:	003fc006 	br	3d60 <___vfprintf_internal_r+0x13cc>
    3e60:	d9014c17 	ldw	r4,1328(sp)
    3e64:	2080004c 	andi	r2,r4,1
    3e68:	10009a1e 	bne	r2,zero,40d4 <___vfprintf_internal_r+0x1740>
    3e6c:	d9401904 	addi	r5,sp,100
    3e70:	dd000f04 	addi	r20,sp,60
    3e74:	d9414115 	stw	r5,1284(sp)
    3e78:	003d6106 	br	3400 <___vfprintf_internal_r+0xa6c>
    3e7c:	d9014f17 	ldw	r4,1340(sp)
    3e80:	b00b883a 	mov	r5,r22
    3e84:	d9800c04 	addi	r6,sp,48
    3e88:	000293c0 	call	293c <__sprint_r>
    3e8c:	103c791e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    3e90:	dc800e17 	ldw	r18,56(sp)
    3e94:	d8c01904 	addi	r3,sp,100
    3e98:	003cff06 	br	3298 <___vfprintf_internal_r+0x904>
    3e9c:	d8c14c17 	ldw	r3,1328(sp)
    3ea0:	1880040c 	andi	r2,r3,16
    3ea4:	1000711e 	bne	r2,zero,406c <___vfprintf_internal_r+0x16d8>
    3ea8:	d9014c17 	ldw	r4,1328(sp)
    3eac:	2080100c 	andi	r2,r4,64
    3eb0:	10006e26 	beq	r2,zero,406c <___vfprintf_internal_r+0x16d8>
    3eb4:	3c00000b 	ldhu	r16,0(r7)
    3eb8:	0023883a 	mov	r17,zero
    3ebc:	39c00104 	addi	r7,r7,4
    3ec0:	d9c14015 	stw	r7,1280(sp)
    3ec4:	003f0006 	br	3ac8 <___vfprintf_internal_r+0x1134>
    3ec8:	dc400d17 	ldw	r17,52(sp)
    3ecc:	07000074 	movhi	fp,1
    3ed0:	e7397484 	addi	fp,fp,-6702
    3ed4:	9425883a 	add	r18,r18,r16
    3ed8:	8c400044 	addi	r17,r17,1
    3edc:	008001c4 	movi	r2,7
    3ee0:	1f000015 	stw	fp,0(r3)
    3ee4:	1c000115 	stw	r16,4(r3)
    3ee8:	dc800e15 	stw	r18,56(sp)
    3eec:	dc400d15 	stw	r17,52(sp)
    3ef0:	147d7616 	blt	r2,r17,34cc <___vfprintf_internal_r+0xb38>
    3ef4:	18c00204 	addi	r3,r3,8
    3ef8:	003d7b06 	br	34e8 <___vfprintf_internal_r+0xb54>
    3efc:	dc800e17 	ldw	r18,56(sp)
    3f00:	dc400d17 	ldw	r17,52(sp)
    3f04:	07000074 	movhi	fp,1
    3f08:	e7397884 	addi	fp,fp,-6686
    3f0c:	003bc006 	br	2e10 <___vfprintf_internal_r+0x47c>
    3f10:	d9014f17 	ldw	r4,1340(sp)
    3f14:	b00b883a 	mov	r5,r22
    3f18:	d9800c04 	addi	r6,sp,48
    3f1c:	000293c0 	call	293c <__sprint_r>
    3f20:	103c541e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    3f24:	dc800e17 	ldw	r18,56(sp)
    3f28:	d8c01904 	addi	r3,sp,100
    3f2c:	003ce906 	br	32d4 <___vfprintf_internal_r+0x940>
    3f30:	3c000017 	ldw	r16,0(r7)
    3f34:	0009883a 	mov	r4,zero
    3f38:	39c00104 	addi	r7,r7,4
    3f3c:	0023883a 	mov	r17,zero
    3f40:	d9c14015 	stw	r7,1280(sp)
    3f44:	d8000405 	stb	zero,16(sp)
    3f48:	003d2006 	br	33cc <___vfprintf_internal_r+0xa38>
    3f4c:	38800017 	ldw	r2,0(r7)
    3f50:	39c00104 	addi	r7,r7,4
    3f54:	d9c14015 	stw	r7,1280(sp)
    3f58:	1023d7fa 	srai	r17,r2,31
    3f5c:	1021883a 	mov	r16,r2
    3f60:	003d1806 	br	33c4 <___vfprintf_internal_r+0xa30>
    3f64:	3c000017 	ldw	r16,0(r7)
    3f68:	01000044 	movi	r4,1
    3f6c:	39c00104 	addi	r7,r7,4
    3f70:	0023883a 	mov	r17,zero
    3f74:	d9c14015 	stw	r7,1280(sp)
    3f78:	d8000405 	stb	zero,16(sp)
    3f7c:	003d1306 	br	33cc <___vfprintf_internal_r+0xa38>
    3f80:	00800074 	movhi	r2,1
    3f84:	10b97404 	addi	r2,r2,-6704
    3f88:	94800044 	addi	r18,r18,1
    3f8c:	8c400044 	addi	r17,r17,1
    3f90:	a8800015 	stw	r2,0(r21)
    3f94:	00c00044 	movi	r3,1
    3f98:	008001c4 	movi	r2,7
    3f9c:	a8c00115 	stw	r3,4(r21)
    3fa0:	dc800e15 	stw	r18,56(sp)
    3fa4:	dc400d15 	stw	r17,52(sp)
    3fa8:	1440ca16 	blt	r2,r17,42d4 <___vfprintf_internal_r+0x1940>
    3fac:	a8c00204 	addi	r3,r21,8
    3fb0:	2000061e 	bne	r4,zero,3fcc <___vfprintf_internal_r+0x1638>
    3fb4:	d9414717 	ldw	r5,1308(sp)
    3fb8:	2800041e 	bne	r5,zero,3fcc <___vfprintf_internal_r+0x1638>
    3fbc:	d9814c17 	ldw	r6,1328(sp)
    3fc0:	3080004c 	andi	r2,r6,1
    3fc4:	1005003a 	cmpeq	r2,r2,zero
    3fc8:	103bf01e 	bne	r2,zero,2f8c <___vfprintf_internal_r+0x5f8>
    3fcc:	00800044 	movi	r2,1
    3fd0:	dc400d17 	ldw	r17,52(sp)
    3fd4:	18800115 	stw	r2,4(r3)
    3fd8:	d8814917 	ldw	r2,1316(sp)
    3fdc:	94800044 	addi	r18,r18,1
    3fe0:	8c400044 	addi	r17,r17,1
    3fe4:	18800015 	stw	r2,0(r3)
    3fe8:	008001c4 	movi	r2,7
    3fec:	dc800e15 	stw	r18,56(sp)
    3ff0:	dc400d15 	stw	r17,52(sp)
    3ff4:	1440ca16 	blt	r2,r17,4320 <___vfprintf_internal_r+0x198c>
    3ff8:	18c00204 	addi	r3,r3,8
    3ffc:	0121c83a 	sub	r16,zero,r4
    4000:	0400500e 	bge	zero,r16,4144 <___vfprintf_internal_r+0x17b0>
    4004:	00800404 	movi	r2,16
    4008:	1400800e 	bge	r2,r16,420c <___vfprintf_internal_r+0x1878>
    400c:	1027883a 	mov	r19,r2
    4010:	07000074 	movhi	fp,1
    4014:	e7397484 	addi	fp,fp,-6702
    4018:	050001c4 	movi	r20,7
    401c:	00000306 	br	402c <___vfprintf_internal_r+0x1698>
    4020:	18c00204 	addi	r3,r3,8
    4024:	843ffc04 	addi	r16,r16,-16
    4028:	9c007a0e 	bge	r19,r16,4214 <___vfprintf_internal_r+0x1880>
    402c:	94800404 	addi	r18,r18,16
    4030:	8c400044 	addi	r17,r17,1
    4034:	1f000015 	stw	fp,0(r3)
    4038:	1cc00115 	stw	r19,4(r3)
    403c:	dc800e15 	stw	r18,56(sp)
    4040:	dc400d15 	stw	r17,52(sp)
    4044:	a47ff60e 	bge	r20,r17,4020 <___vfprintf_internal_r+0x168c>
    4048:	d9014f17 	ldw	r4,1340(sp)
    404c:	b00b883a 	mov	r5,r22
    4050:	d9800c04 	addi	r6,sp,48
    4054:	000293c0 	call	293c <__sprint_r>
    4058:	103c061e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    405c:	dc800e17 	ldw	r18,56(sp)
    4060:	dc400d17 	ldw	r17,52(sp)
    4064:	d8c01904 	addi	r3,sp,100
    4068:	003fee06 	br	4024 <___vfprintf_internal_r+0x1690>
    406c:	3c000017 	ldw	r16,0(r7)
    4070:	0023883a 	mov	r17,zero
    4074:	39c00104 	addi	r7,r7,4
    4078:	d9c14015 	stw	r7,1280(sp)
    407c:	003e9206 	br	3ac8 <___vfprintf_internal_r+0x1134>
    4080:	d9401904 	addi	r5,sp,100
    4084:	dd000f04 	addi	r20,sp,60
    4088:	d9414115 	stw	r5,1284(sp)
    408c:	d9814417 	ldw	r6,1296(sp)
    4090:	880a973a 	slli	r5,r17,28
    4094:	8004d13a 	srli	r2,r16,4
    4098:	810003cc 	andi	r4,r16,15
    409c:	3109883a 	add	r4,r6,r4
    40a0:	2884b03a 	or	r2,r5,r2
    40a4:	21400003 	ldbu	r5,0(r4)
    40a8:	d9014117 	ldw	r4,1284(sp)
    40ac:	8806d13a 	srli	r3,r17,4
    40b0:	1021883a 	mov	r16,r2
    40b4:	213fffc4 	addi	r4,r4,-1
    40b8:	d9014115 	stw	r4,1284(sp)
    40bc:	d9814117 	ldw	r6,1284(sp)
    40c0:	10c8b03a 	or	r4,r2,r3
    40c4:	1823883a 	mov	r17,r3
    40c8:	31400005 	stb	r5,0(r6)
    40cc:	203fef1e 	bne	r4,zero,408c <___vfprintf_internal_r+0x16f8>
    40d0:	003ccb06 	br	3400 <___vfprintf_internal_r+0xa6c>
    40d4:	00800c04 	movi	r2,48
    40d8:	d98018c4 	addi	r6,sp,99
    40dc:	dd000f04 	addi	r20,sp,60
    40e0:	d88018c5 	stb	r2,99(sp)
    40e4:	d9814115 	stw	r6,1284(sp)
    40e8:	003cc506 	br	3400 <___vfprintf_internal_r+0xa6c>
    40ec:	dc400d17 	ldw	r17,52(sp)
    40f0:	07000074 	movhi	fp,1
    40f4:	e7397884 	addi	fp,fp,-6686
    40f8:	003bc706 	br	3018 <___vfprintf_internal_r+0x684>
    40fc:	d9414c17 	ldw	r5,1328(sp)
    4100:	2880040c 	andi	r2,r5,16
    4104:	10007c26 	beq	r2,zero,42f8 <___vfprintf_internal_r+0x1964>
    4108:	38800017 	ldw	r2,0(r7)
    410c:	39c00104 	addi	r7,r7,4
    4110:	d9c14015 	stw	r7,1280(sp)
    4114:	d9814b17 	ldw	r6,1324(sp)
    4118:	d9c14017 	ldw	r7,1280(sp)
    411c:	11800015 	stw	r6,0(r2)
    4120:	003a7806 	br	2b04 <___vfprintf_internal_r+0x170>
    4124:	d9014f17 	ldw	r4,1340(sp)
    4128:	b00b883a 	mov	r5,r22
    412c:	d9800c04 	addi	r6,sp,48
    4130:	000293c0 	call	293c <__sprint_r>
    4134:	103bcf1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    4138:	dc800e17 	ldw	r18,56(sp)
    413c:	dc400d17 	ldw	r17,52(sp)
    4140:	d8c01904 	addi	r3,sp,100
    4144:	d9014717 	ldw	r4,1308(sp)
    4148:	d9414117 	ldw	r5,1284(sp)
    414c:	8c400044 	addi	r17,r17,1
    4150:	9125883a 	add	r18,r18,r4
    4154:	008001c4 	movi	r2,7
    4158:	19400015 	stw	r5,0(r3)
    415c:	19000115 	stw	r4,4(r3)
    4160:	dc800e15 	stw	r18,56(sp)
    4164:	dc400d15 	stw	r17,52(sp)
    4168:	147cee16 	blt	r2,r17,3524 <___vfprintf_internal_r+0xb90>
    416c:	18c00204 	addi	r3,r3,8
    4170:	003b8606 	br	2f8c <___vfprintf_internal_r+0x5f8>
    4174:	38c00017 	ldw	r3,0(r7)
    4178:	39000204 	addi	r4,r7,8
    417c:	d9014015 	stw	r4,1280(sp)
    4180:	d8c14215 	stw	r3,1288(sp)
    4184:	39c00117 	ldw	r7,4(r7)
    4188:	d9c14315 	stw	r7,1292(sp)
    418c:	003e2006 	br	3a10 <___vfprintf_internal_r+0x107c>
    4190:	0005883a 	mov	r2,zero
    4194:	1409c83a 	sub	r4,r2,r16
    4198:	1105803a 	cmpltu	r2,r2,r4
    419c:	044bc83a 	sub	r5,zero,r17
    41a0:	2885c83a 	sub	r2,r5,r2
    41a4:	2021883a 	mov	r16,r4
    41a8:	1023883a 	mov	r17,r2
    41ac:	01000044 	movi	r4,1
    41b0:	00800b44 	movi	r2,45
    41b4:	d8800405 	stb	r2,16(sp)
    41b8:	003c8406 	br	33cc <___vfprintf_internal_r+0xa38>
    41bc:	d9014f17 	ldw	r4,1340(sp)
    41c0:	b00b883a 	mov	r5,r22
    41c4:	d9800c04 	addi	r6,sp,48
    41c8:	000293c0 	call	293c <__sprint_r>
    41cc:	103ba91e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    41d0:	dc800e17 	ldw	r18,56(sp)
    41d4:	dc400d17 	ldw	r17,52(sp)
    41d8:	d9000517 	ldw	r4,20(sp)
    41dc:	d9401904 	addi	r5,sp,100
    41e0:	003da706 	br	3880 <___vfprintf_internal_r+0xeec>
    41e4:	d9014f17 	ldw	r4,1340(sp)
    41e8:	b00b883a 	mov	r5,r22
    41ec:	d9800c04 	addi	r6,sp,48
    41f0:	000293c0 	call	293c <__sprint_r>
    41f4:	103b9f1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    41f8:	dc800e17 	ldw	r18,56(sp)
    41fc:	dc400d17 	ldw	r17,52(sp)
    4200:	d9000517 	ldw	r4,20(sp)
    4204:	d8c01904 	addi	r3,sp,100
    4208:	003d9106 	br	3850 <___vfprintf_internal_r+0xebc>
    420c:	07000074 	movhi	fp,1
    4210:	e7397484 	addi	fp,fp,-6702
    4214:	9425883a 	add	r18,r18,r16
    4218:	8c400044 	addi	r17,r17,1
    421c:	008001c4 	movi	r2,7
    4220:	1f000015 	stw	fp,0(r3)
    4224:	1c000115 	stw	r16,4(r3)
    4228:	dc800e15 	stw	r18,56(sp)
    422c:	dc400d15 	stw	r17,52(sp)
    4230:	147fbc16 	blt	r2,r17,4124 <___vfprintf_internal_r+0x1790>
    4234:	18c00204 	addi	r3,r3,8
    4238:	003fc206 	br	4144 <___vfprintf_internal_r+0x17b0>
    423c:	d9014f17 	ldw	r4,1340(sp)
    4240:	b00b883a 	mov	r5,r22
    4244:	d9800c04 	addi	r6,sp,48
    4248:	000293c0 	call	293c <__sprint_r>
    424c:	103b891e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    4250:	dc800e17 	ldw	r18,56(sp)
    4254:	d9000517 	ldw	r4,20(sp)
    4258:	d8c01904 	addi	r3,sp,100
    425c:	003d0206 	br	3668 <___vfprintf_internal_r+0xcd4>
    4260:	07000074 	movhi	fp,1
    4264:	e7397484 	addi	fp,fp,-6702
    4268:	003be406 	br	31fc <___vfprintf_internal_r+0x868>
    426c:	00800074 	movhi	r2,1
    4270:	10b96304 	addi	r2,r2,-6772
    4274:	d8814115 	stw	r2,1284(sp)
    4278:	003df506 	br	3a50 <___vfprintf_internal_r+0x10bc>
    427c:	d9014217 	ldw	r4,1288(sp)
    4280:	d9414317 	ldw	r5,1292(sp)
    4284:	0008de80 	call	8de8 <__isnand>
    4288:	10003926 	beq	r2,zero,4370 <___vfprintf_internal_r+0x19dc>
    428c:	d9414d17 	ldw	r5,1332(sp)
    4290:	008011c4 	movi	r2,71
    4294:	1140ce16 	blt	r2,r5,45d0 <___vfprintf_internal_r+0x1c3c>
    4298:	01800074 	movhi	r6,1
    429c:	31b96404 	addi	r6,r6,-6768
    42a0:	d9814115 	stw	r6,1284(sp)
    42a4:	003dea06 	br	3a50 <___vfprintf_internal_r+0x10bc>
    42a8:	d9014c17 	ldw	r4,1328(sp)
    42ac:	bdc00044 	addi	r23,r23,1
    42b0:	b8c00007 	ldb	r3,0(r23)
    42b4:	21000814 	ori	r4,r4,32
    42b8:	d9014c15 	stw	r4,1328(sp)
    42bc:	003a3406 	br	2b90 <___vfprintf_internal_r+0x1fc>
    42c0:	dcc14515 	stw	r19,1300(sp)
    42c4:	98011016 	blt	r19,zero,4708 <___vfprintf_internal_r+0x1d74>
    42c8:	980f883a 	mov	r7,r19
    42cc:	d8014615 	stw	zero,1304(sp)
    42d0:	003c5206 	br	341c <___vfprintf_internal_r+0xa88>
    42d4:	d9014f17 	ldw	r4,1340(sp)
    42d8:	b00b883a 	mov	r5,r22
    42dc:	d9800c04 	addi	r6,sp,48
    42e0:	000293c0 	call	293c <__sprint_r>
    42e4:	103b631e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    42e8:	dc800e17 	ldw	r18,56(sp)
    42ec:	d9000517 	ldw	r4,20(sp)
    42f0:	d8c01904 	addi	r3,sp,100
    42f4:	003f2e06 	br	3fb0 <___vfprintf_internal_r+0x161c>
    42f8:	d8c14c17 	ldw	r3,1328(sp)
    42fc:	1880100c 	andi	r2,r3,64
    4300:	1000a026 	beq	r2,zero,4584 <___vfprintf_internal_r+0x1bf0>
    4304:	38800017 	ldw	r2,0(r7)
    4308:	39c00104 	addi	r7,r7,4
    430c:	d9c14015 	stw	r7,1280(sp)
    4310:	d9014b17 	ldw	r4,1324(sp)
    4314:	d9c14017 	ldw	r7,1280(sp)
    4318:	1100000d 	sth	r4,0(r2)
    431c:	0039f906 	br	2b04 <___vfprintf_internal_r+0x170>
    4320:	d9014f17 	ldw	r4,1340(sp)
    4324:	b00b883a 	mov	r5,r22
    4328:	d9800c04 	addi	r6,sp,48
    432c:	000293c0 	call	293c <__sprint_r>
    4330:	103b501e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    4334:	dc800e17 	ldw	r18,56(sp)
    4338:	dc400d17 	ldw	r17,52(sp)
    433c:	d9000517 	ldw	r4,20(sp)
    4340:	d8c01904 	addi	r3,sp,100
    4344:	003f2d06 	br	3ffc <___vfprintf_internal_r+0x1668>
    4348:	00800184 	movi	r2,6
    434c:	14c09a36 	bltu	r2,r19,45b8 <___vfprintf_internal_r+0x1c24>
    4350:	dcc14515 	stw	r19,1300(sp)
    4354:	9800010e 	bge	r19,zero,435c <___vfprintf_internal_r+0x19c8>
    4358:	d8014515 	stw	zero,1300(sp)
    435c:	00800074 	movhi	r2,1
    4360:	10b96604 	addi	r2,r2,-6760
    4364:	980f883a 	mov	r7,r19
    4368:	d8814115 	stw	r2,1284(sp)
    436c:	003a7806 	br	2d50 <___vfprintf_internal_r+0x3bc>
    4370:	00bfffc4 	movi	r2,-1
    4374:	9880e226 	beq	r19,r2,4700 <___vfprintf_internal_r+0x1d6c>
    4378:	d9414d17 	ldw	r5,1332(sp)
    437c:	008019c4 	movi	r2,103
    4380:	2880dc26 	beq	r5,r2,46f4 <___vfprintf_internal_r+0x1d60>
    4384:	008011c4 	movi	r2,71
    4388:	2880da26 	beq	r5,r2,46f4 <___vfprintf_internal_r+0x1d60>
    438c:	d9414c17 	ldw	r5,1328(sp)
    4390:	d9014317 	ldw	r4,1292(sp)
    4394:	d9814217 	ldw	r6,1288(sp)
    4398:	29404014 	ori	r5,r5,256
    439c:	d9414c15 	stw	r5,1328(sp)
    43a0:	2000cc16 	blt	r4,zero,46d4 <___vfprintf_internal_r+0x1d40>
    43a4:	3021883a 	mov	r16,r6
    43a8:	2023883a 	mov	r17,r4
    43ac:	0039883a 	mov	fp,zero
    43b0:	d9414d17 	ldw	r5,1332(sp)
    43b4:	00801984 	movi	r2,102
    43b8:	2880b726 	beq	r5,r2,4698 <___vfprintf_internal_r+0x1d04>
    43bc:	00801184 	movi	r2,70
    43c0:	2880b526 	beq	r5,r2,4698 <___vfprintf_internal_r+0x1d04>
    43c4:	00801944 	movi	r2,101
    43c8:	2880c826 	beq	r5,r2,46ec <___vfprintf_internal_r+0x1d58>
    43cc:	00801144 	movi	r2,69
    43d0:	2880c626 	beq	r5,r2,46ec <___vfprintf_internal_r+0x1d58>
    43d4:	9829883a 	mov	r20,r19
    43d8:	d9014f17 	ldw	r4,1340(sp)
    43dc:	d8800504 	addi	r2,sp,20
    43e0:	880d883a 	mov	r6,r17
    43e4:	d8800115 	stw	r2,4(sp)
    43e8:	d8c00604 	addi	r3,sp,24
    43ec:	d8800704 	addi	r2,sp,28
    43f0:	800b883a 	mov	r5,r16
    43f4:	01c00084 	movi	r7,2
    43f8:	d8c00215 	stw	r3,8(sp)
    43fc:	d8800315 	stw	r2,12(sp)
    4400:	dd000015 	stw	r20,0(sp)
    4404:	0004d6c0 	call	4d6c <_dtoa_r>
    4408:	d9814d17 	ldw	r6,1332(sp)
    440c:	d8814115 	stw	r2,1284(sp)
    4410:	008019c4 	movi	r2,103
    4414:	30809526 	beq	r6,r2,466c <___vfprintf_internal_r+0x1cd8>
    4418:	d8c14d17 	ldw	r3,1332(sp)
    441c:	008011c4 	movi	r2,71
    4420:	18809226 	beq	r3,r2,466c <___vfprintf_internal_r+0x1cd8>
    4424:	d9414117 	ldw	r5,1284(sp)
    4428:	d9814d17 	ldw	r6,1332(sp)
    442c:	00801984 	movi	r2,102
    4430:	2d25883a 	add	r18,r5,r20
    4434:	30808626 	beq	r6,r2,4650 <___vfprintf_internal_r+0x1cbc>
    4438:	00801184 	movi	r2,70
    443c:	30808426 	beq	r6,r2,4650 <___vfprintf_internal_r+0x1cbc>
    4440:	000d883a 	mov	r6,zero
    4444:	000f883a 	mov	r7,zero
    4448:	880b883a 	mov	r5,r17
    444c:	8009883a 	mov	r4,r16
    4450:	000ab600 	call	ab60 <__eqdf2>
    4454:	1000751e 	bne	r2,zero,462c <___vfprintf_internal_r+0x1c98>
    4458:	9005883a 	mov	r2,r18
    445c:	dc800715 	stw	r18,28(sp)
    4460:	d9014117 	ldw	r4,1284(sp)
    4464:	d9414d17 	ldw	r5,1332(sp)
    4468:	00c019c4 	movi	r3,103
    446c:	1125c83a 	sub	r18,r2,r4
    4470:	28c06826 	beq	r5,r3,4614 <___vfprintf_internal_r+0x1c80>
    4474:	008011c4 	movi	r2,71
    4478:	28806626 	beq	r5,r2,4614 <___vfprintf_internal_r+0x1c80>
    447c:	d9000517 	ldw	r4,20(sp)
    4480:	d8c14d17 	ldw	r3,1332(sp)
    4484:	00801944 	movi	r2,101
    4488:	10c05516 	blt	r2,r3,45e0 <___vfprintf_internal_r+0x1c4c>
    448c:	213fffc4 	addi	r4,r4,-1
    4490:	d9000515 	stw	r4,20(sp)
    4494:	d8c00805 	stb	r3,32(sp)
    4498:	2021883a 	mov	r16,r4
    449c:	2000c116 	blt	r4,zero,47a4 <___vfprintf_internal_r+0x1e10>
    44a0:	00800ac4 	movi	r2,43
    44a4:	d8800845 	stb	r2,33(sp)
    44a8:	00800244 	movi	r2,9
    44ac:	1400af0e 	bge	r2,r16,476c <___vfprintf_internal_r+0x1dd8>
    44b0:	1027883a 	mov	r19,r2
    44b4:	dc400b84 	addi	r17,sp,46
    44b8:	8009883a 	mov	r4,r16
    44bc:	01400284 	movi	r5,10
    44c0:	0001f1c0 	call	1f1c <__modsi3>
    44c4:	10800c04 	addi	r2,r2,48
    44c8:	8c7fffc4 	addi	r17,r17,-1
    44cc:	8009883a 	mov	r4,r16
    44d0:	01400284 	movi	r5,10
    44d4:	88800005 	stb	r2,0(r17)
    44d8:	0001ebc0 	call	1ebc <__divsi3>
    44dc:	1021883a 	mov	r16,r2
    44e0:	98bff516 	blt	r19,r2,44b8 <___vfprintf_internal_r+0x1b24>
    44e4:	10c00c04 	addi	r3,r2,48
    44e8:	d88009c4 	addi	r2,sp,39
    44ec:	108001c4 	addi	r2,r2,7
    44f0:	897fffc4 	addi	r5,r17,-1
    44f4:	88ffffc5 	stb	r3,-1(r17)
    44f8:	2880a72e 	bgeu	r5,r2,4798 <___vfprintf_internal_r+0x1e04>
    44fc:	1009883a 	mov	r4,r2
    4500:	d9800804 	addi	r6,sp,32
    4504:	d8c00884 	addi	r3,sp,34
    4508:	28800003 	ldbu	r2,0(r5)
    450c:	29400044 	addi	r5,r5,1
    4510:	18800005 	stb	r2,0(r3)
    4514:	18c00044 	addi	r3,r3,1
    4518:	293ffb36 	bltu	r5,r4,4508 <___vfprintf_internal_r+0x1b74>
    451c:	1987c83a 	sub	r3,r3,r6
    4520:	00800044 	movi	r2,1
    4524:	d8c14815 	stw	r3,1312(sp)
    4528:	90cf883a 	add	r7,r18,r3
    452c:	1480960e 	bge	r2,r18,4788 <___vfprintf_internal_r+0x1df4>
    4530:	39c00044 	addi	r7,r7,1
    4534:	d9c14515 	stw	r7,1300(sp)
    4538:	38003416 	blt	r7,zero,460c <___vfprintf_internal_r+0x1c78>
    453c:	e0803fcc 	andi	r2,fp,255
    4540:	1080201c 	xori	r2,r2,128
    4544:	10bfe004 	addi	r2,r2,-128
    4548:	10004e26 	beq	r2,zero,4684 <___vfprintf_internal_r+0x1cf0>
    454c:	00800b44 	movi	r2,45
    4550:	dc814715 	stw	r18,1308(sp)
    4554:	d8014615 	stw	zero,1304(sp)
    4558:	d8800405 	stb	r2,16(sp)
    455c:	003bb106 	br	3424 <___vfprintf_internal_r+0xa90>
    4560:	00800b44 	movi	r2,45
    4564:	d8800405 	stb	r2,16(sp)
    4568:	003d3306 	br	3a38 <___vfprintf_internal_r+0x10a4>
    456c:	d9014f17 	ldw	r4,1340(sp)
    4570:	b00b883a 	mov	r5,r22
    4574:	d9800c04 	addi	r6,sp,48
    4578:	000293c0 	call	293c <__sprint_r>
    457c:	103abd1e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x6e0>
    4580:	003abb06 	br	3070 <___vfprintf_internal_r+0x6dc>
    4584:	38800017 	ldw	r2,0(r7)
    4588:	39c00104 	addi	r7,r7,4
    458c:	d9c14015 	stw	r7,1280(sp)
    4590:	d9414b17 	ldw	r5,1324(sp)
    4594:	d9c14017 	ldw	r7,1280(sp)
    4598:	11400015 	stw	r5,0(r2)
    459c:	00395906 	br	2b04 <___vfprintf_internal_r+0x170>
    45a0:	980f883a 	mov	r7,r19
    45a4:	dcc14515 	stw	r19,1300(sp)
    45a8:	d8014615 	stw	zero,1304(sp)
    45ac:	003b9b06 	br	341c <___vfprintf_internal_r+0xa88>
    45b0:	0027883a 	mov	r19,zero
    45b4:	00397806 	br	2b98 <___vfprintf_internal_r+0x204>
    45b8:	00c00074 	movhi	r3,1
    45bc:	18f96604 	addi	r3,r3,-6760
    45c0:	100f883a 	mov	r7,r2
    45c4:	d8814515 	stw	r2,1300(sp)
    45c8:	d8c14115 	stw	r3,1284(sp)
    45cc:	0039e006 	br	2d50 <___vfprintf_internal_r+0x3bc>
    45d0:	00800074 	movhi	r2,1
    45d4:	10b96504 	addi	r2,r2,-6764
    45d8:	d8814115 	stw	r2,1284(sp)
    45dc:	003d1c06 	br	3a50 <___vfprintf_internal_r+0x10bc>
    45e0:	d9414d17 	ldw	r5,1332(sp)
    45e4:	00801984 	movi	r2,102
    45e8:	28804926 	beq	r5,r2,4710 <___vfprintf_internal_r+0x1d7c>
    45ec:	200f883a 	mov	r7,r4
    45f0:	24805716 	blt	r4,r18,4750 <___vfprintf_internal_r+0x1dbc>
    45f4:	d9414c17 	ldw	r5,1328(sp)
    45f8:	2880004c 	andi	r2,r5,1
    45fc:	10000126 	beq	r2,zero,4604 <___vfprintf_internal_r+0x1c70>
    4600:	21c00044 	addi	r7,r4,1
    4604:	d9c14515 	stw	r7,1300(sp)
    4608:	383fcc0e 	bge	r7,zero,453c <___vfprintf_internal_r+0x1ba8>
    460c:	d8014515 	stw	zero,1300(sp)
    4610:	003fca06 	br	453c <___vfprintf_internal_r+0x1ba8>
    4614:	d9000517 	ldw	r4,20(sp)
    4618:	00bfff04 	movi	r2,-4
    461c:	1100480e 	bge	r2,r4,4740 <___vfprintf_internal_r+0x1dac>
    4620:	99004716 	blt	r19,r4,4740 <___vfprintf_internal_r+0x1dac>
    4624:	d8c14d15 	stw	r3,1332(sp)
    4628:	003ff006 	br	45ec <___vfprintf_internal_r+0x1c58>
    462c:	d8800717 	ldw	r2,28(sp)
    4630:	14bf8b2e 	bgeu	r2,r18,4460 <___vfprintf_internal_r+0x1acc>
    4634:	9007883a 	mov	r3,r18
    4638:	01000c04 	movi	r4,48
    463c:	11000005 	stb	r4,0(r2)
    4640:	10800044 	addi	r2,r2,1
    4644:	d8800715 	stw	r2,28(sp)
    4648:	18bffc1e 	bne	r3,r2,463c <___vfprintf_internal_r+0x1ca8>
    464c:	003f8406 	br	4460 <___vfprintf_internal_r+0x1acc>
    4650:	d8814117 	ldw	r2,1284(sp)
    4654:	10c00007 	ldb	r3,0(r2)
    4658:	00800c04 	movi	r2,48
    465c:	18805b26 	beq	r3,r2,47cc <___vfprintf_internal_r+0x1e38>
    4660:	d9000517 	ldw	r4,20(sp)
    4664:	9125883a 	add	r18,r18,r4
    4668:	003f7506 	br	4440 <___vfprintf_internal_r+0x1aac>
    466c:	d9014c17 	ldw	r4,1328(sp)
    4670:	2080004c 	andi	r2,r4,1
    4674:	1005003a 	cmpeq	r2,r2,zero
    4678:	103f6a26 	beq	r2,zero,4424 <___vfprintf_internal_r+0x1a90>
    467c:	d8800717 	ldw	r2,28(sp)
    4680:	003f7706 	br	4460 <___vfprintf_internal_r+0x1acc>
    4684:	d9c14515 	stw	r7,1300(sp)
    4688:	38004d16 	blt	r7,zero,47c0 <___vfprintf_internal_r+0x1e2c>
    468c:	dc814715 	stw	r18,1308(sp)
    4690:	d8014615 	stw	zero,1304(sp)
    4694:	003b6106 	br	341c <___vfprintf_internal_r+0xa88>
    4698:	d9014f17 	ldw	r4,1340(sp)
    469c:	d8800504 	addi	r2,sp,20
    46a0:	d8800115 	stw	r2,4(sp)
    46a4:	d8c00604 	addi	r3,sp,24
    46a8:	d8800704 	addi	r2,sp,28
    46ac:	800b883a 	mov	r5,r16
    46b0:	880d883a 	mov	r6,r17
    46b4:	01c000c4 	movi	r7,3
    46b8:	d8c00215 	stw	r3,8(sp)
    46bc:	d8800315 	stw	r2,12(sp)
    46c0:	dcc00015 	stw	r19,0(sp)
    46c4:	9829883a 	mov	r20,r19
    46c8:	0004d6c0 	call	4d6c <_dtoa_r>
    46cc:	d8814115 	stw	r2,1284(sp)
    46d0:	003f5106 	br	4418 <___vfprintf_internal_r+0x1a84>
    46d4:	d8c14217 	ldw	r3,1288(sp)
    46d8:	d9014317 	ldw	r4,1292(sp)
    46dc:	07000b44 	movi	fp,45
    46e0:	1821883a 	mov	r16,r3
    46e4:	2460003c 	xorhi	r17,r4,32768
    46e8:	003f3106 	br	43b0 <___vfprintf_internal_r+0x1a1c>
    46ec:	9d000044 	addi	r20,r19,1
    46f0:	003f3906 	br	43d8 <___vfprintf_internal_r+0x1a44>
    46f4:	983f251e 	bne	r19,zero,438c <___vfprintf_internal_r+0x19f8>
    46f8:	04c00044 	movi	r19,1
    46fc:	003f2306 	br	438c <___vfprintf_internal_r+0x19f8>
    4700:	04c00184 	movi	r19,6
    4704:	003f2106 	br	438c <___vfprintf_internal_r+0x19f8>
    4708:	d8014515 	stw	zero,1300(sp)
    470c:	003eee06 	br	42c8 <___vfprintf_internal_r+0x1934>
    4710:	200f883a 	mov	r7,r4
    4714:	0100370e 	bge	zero,r4,47f4 <___vfprintf_internal_r+0x1e60>
    4718:	9800031e 	bne	r19,zero,4728 <___vfprintf_internal_r+0x1d94>
    471c:	d9814c17 	ldw	r6,1328(sp)
    4720:	3080004c 	andi	r2,r6,1
    4724:	103fb726 	beq	r2,zero,4604 <___vfprintf_internal_r+0x1c70>
    4728:	20800044 	addi	r2,r4,1
    472c:	98a7883a 	add	r19,r19,r2
    4730:	dcc14515 	stw	r19,1300(sp)
    4734:	980f883a 	mov	r7,r19
    4738:	983f800e 	bge	r19,zero,453c <___vfprintf_internal_r+0x1ba8>
    473c:	003fb306 	br	460c <___vfprintf_internal_r+0x1c78>
    4740:	d9814d17 	ldw	r6,1332(sp)
    4744:	31bfff84 	addi	r6,r6,-2
    4748:	d9814d15 	stw	r6,1332(sp)
    474c:	003f4c06 	br	4480 <___vfprintf_internal_r+0x1aec>
    4750:	0100180e 	bge	zero,r4,47b4 <___vfprintf_internal_r+0x1e20>
    4754:	00800044 	movi	r2,1
    4758:	1485883a 	add	r2,r2,r18
    475c:	d8814515 	stw	r2,1300(sp)
    4760:	100f883a 	mov	r7,r2
    4764:	103f750e 	bge	r2,zero,453c <___vfprintf_internal_r+0x1ba8>
    4768:	003fa806 	br	460c <___vfprintf_internal_r+0x1c78>
    476c:	80c00c04 	addi	r3,r16,48
    4770:	00800c04 	movi	r2,48
    4774:	d8c008c5 	stb	r3,35(sp)
    4778:	d9800804 	addi	r6,sp,32
    477c:	d8c00904 	addi	r3,sp,36
    4780:	d8800885 	stb	r2,34(sp)
    4784:	003f6506 	br	451c <___vfprintf_internal_r+0x1b88>
    4788:	d9014c17 	ldw	r4,1328(sp)
    478c:	2084703a 	and	r2,r4,r2
    4790:	103f9c26 	beq	r2,zero,4604 <___vfprintf_internal_r+0x1c70>
    4794:	003f6606 	br	4530 <___vfprintf_internal_r+0x1b9c>
    4798:	d9800804 	addi	r6,sp,32
    479c:	d8c00884 	addi	r3,sp,34
    47a0:	003f5e06 	br	451c <___vfprintf_internal_r+0x1b88>
    47a4:	00800b44 	movi	r2,45
    47a8:	0121c83a 	sub	r16,zero,r4
    47ac:	d8800845 	stb	r2,33(sp)
    47b0:	003f3d06 	br	44a8 <___vfprintf_internal_r+0x1b14>
    47b4:	00800084 	movi	r2,2
    47b8:	1105c83a 	sub	r2,r2,r4
    47bc:	003fe606 	br	4758 <___vfprintf_internal_r+0x1dc4>
    47c0:	d8014515 	stw	zero,1300(sp)
    47c4:	dc814715 	stw	r18,1308(sp)
    47c8:	003fb106 	br	4690 <___vfprintf_internal_r+0x1cfc>
    47cc:	000d883a 	mov	r6,zero
    47d0:	000f883a 	mov	r7,zero
    47d4:	8009883a 	mov	r4,r16
    47d8:	880b883a 	mov	r5,r17
    47dc:	000abe80 	call	abe8 <__nedf2>
    47e0:	103f9f26 	beq	r2,zero,4660 <___vfprintf_internal_r+0x1ccc>
    47e4:	00800044 	movi	r2,1
    47e8:	1509c83a 	sub	r4,r2,r20
    47ec:	d9000515 	stw	r4,20(sp)
    47f0:	003f9b06 	br	4660 <___vfprintf_internal_r+0x1ccc>
    47f4:	98000d1e 	bne	r19,zero,482c <___vfprintf_internal_r+0x1e98>
    47f8:	d8c14c17 	ldw	r3,1328(sp)
    47fc:	1880004c 	andi	r2,r3,1
    4800:	10000a1e 	bne	r2,zero,482c <___vfprintf_internal_r+0x1e98>
    4804:	01000044 	movi	r4,1
    4808:	200f883a 	mov	r7,r4
    480c:	d9014515 	stw	r4,1300(sp)
    4810:	003f4a06 	br	453c <___vfprintf_internal_r+0x1ba8>
    4814:	3cc00017 	ldw	r19,0(r7)
    4818:	39c00104 	addi	r7,r7,4
    481c:	983d0e0e 	bge	r19,zero,3c58 <___vfprintf_internal_r+0x12c4>
    4820:	b8c00007 	ldb	r3,0(r23)
    4824:	04ffffc4 	movi	r19,-1
    4828:	0038d906 	br	2b90 <___vfprintf_internal_r+0x1fc>
    482c:	9cc00084 	addi	r19,r19,2
    4830:	dcc14515 	stw	r19,1300(sp)
    4834:	980f883a 	mov	r7,r19
    4838:	983f400e 	bge	r19,zero,453c <___vfprintf_internal_r+0x1ba8>
    483c:	003f7306 	br	460c <___vfprintf_internal_r+0x1c78>

00004840 <__vfprintf_internal>:
    4840:	00800074 	movhi	r2,1
    4844:	1080c204 	addi	r2,r2,776
    4848:	2013883a 	mov	r9,r4
    484c:	11000017 	ldw	r4,0(r2)
    4850:	2805883a 	mov	r2,r5
    4854:	300f883a 	mov	r7,r6
    4858:	480b883a 	mov	r5,r9
    485c:	100d883a 	mov	r6,r2
    4860:	00029941 	jmpi	2994 <___vfprintf_internal_r>

00004864 <__swsetup_r>:
    4864:	00800074 	movhi	r2,1
    4868:	1080c204 	addi	r2,r2,776
    486c:	10c00017 	ldw	r3,0(r2)
    4870:	defffd04 	addi	sp,sp,-12
    4874:	dc400115 	stw	r17,4(sp)
    4878:	dc000015 	stw	r16,0(sp)
    487c:	dfc00215 	stw	ra,8(sp)
    4880:	2023883a 	mov	r17,r4
    4884:	2821883a 	mov	r16,r5
    4888:	18000226 	beq	r3,zero,4894 <__swsetup_r+0x30>
    488c:	18800e17 	ldw	r2,56(r3)
    4890:	10001f26 	beq	r2,zero,4910 <__swsetup_r+0xac>
    4894:	8100030b 	ldhu	r4,12(r16)
    4898:	2080020c 	andi	r2,r4,8
    489c:	10002826 	beq	r2,zero,4940 <__swsetup_r+0xdc>
    48a0:	81400417 	ldw	r5,16(r16)
    48a4:	28001d26 	beq	r5,zero,491c <__swsetup_r+0xb8>
    48a8:	2080004c 	andi	r2,r4,1
    48ac:	1005003a 	cmpeq	r2,r2,zero
    48b0:	10000b26 	beq	r2,zero,48e0 <__swsetup_r+0x7c>
    48b4:	2080008c 	andi	r2,r4,2
    48b8:	10001226 	beq	r2,zero,4904 <__swsetup_r+0xa0>
    48bc:	0005883a 	mov	r2,zero
    48c0:	80800215 	stw	r2,8(r16)
    48c4:	28000b26 	beq	r5,zero,48f4 <__swsetup_r+0x90>
    48c8:	0005883a 	mov	r2,zero
    48cc:	dfc00217 	ldw	ra,8(sp)
    48d0:	dc400117 	ldw	r17,4(sp)
    48d4:	dc000017 	ldw	r16,0(sp)
    48d8:	dec00304 	addi	sp,sp,12
    48dc:	f800283a 	ret
    48e0:	80800517 	ldw	r2,20(r16)
    48e4:	80000215 	stw	zero,8(r16)
    48e8:	0085c83a 	sub	r2,zero,r2
    48ec:	80800615 	stw	r2,24(r16)
    48f0:	283ff51e 	bne	r5,zero,48c8 <__swsetup_r+0x64>
    48f4:	2080200c 	andi	r2,r4,128
    48f8:	103ff326 	beq	r2,zero,48c8 <__swsetup_r+0x64>
    48fc:	00bfffc4 	movi	r2,-1
    4900:	003ff206 	br	48cc <__swsetup_r+0x68>
    4904:	80800517 	ldw	r2,20(r16)
    4908:	80800215 	stw	r2,8(r16)
    490c:	003fed06 	br	48c4 <__swsetup_r+0x60>
    4910:	1809883a 	mov	r4,r3
    4914:	00065b80 	call	65b8 <__sinit>
    4918:	003fde06 	br	4894 <__swsetup_r+0x30>
    491c:	20c0a00c 	andi	r3,r4,640
    4920:	00808004 	movi	r2,512
    4924:	18bfe026 	beq	r3,r2,48a8 <__swsetup_r+0x44>
    4928:	8809883a 	mov	r4,r17
    492c:	800b883a 	mov	r5,r16
    4930:	00073300 	call	7330 <__smakebuf_r>
    4934:	8100030b 	ldhu	r4,12(r16)
    4938:	81400417 	ldw	r5,16(r16)
    493c:	003fda06 	br	48a8 <__swsetup_r+0x44>
    4940:	2080040c 	andi	r2,r4,16
    4944:	103fed26 	beq	r2,zero,48fc <__swsetup_r+0x98>
    4948:	2080010c 	andi	r2,r4,4
    494c:	10001226 	beq	r2,zero,4998 <__swsetup_r+0x134>
    4950:	81400c17 	ldw	r5,48(r16)
    4954:	28000526 	beq	r5,zero,496c <__swsetup_r+0x108>
    4958:	80801004 	addi	r2,r16,64
    495c:	28800226 	beq	r5,r2,4968 <__swsetup_r+0x104>
    4960:	8809883a 	mov	r4,r17
    4964:	000693c0 	call	693c <_free_r>
    4968:	80000c15 	stw	zero,48(r16)
    496c:	8080030b 	ldhu	r2,12(r16)
    4970:	81400417 	ldw	r5,16(r16)
    4974:	80000115 	stw	zero,4(r16)
    4978:	10bff6cc 	andi	r2,r2,65499
    497c:	8080030d 	sth	r2,12(r16)
    4980:	81400015 	stw	r5,0(r16)
    4984:	8080030b 	ldhu	r2,12(r16)
    4988:	10800214 	ori	r2,r2,8
    498c:	113fffcc 	andi	r4,r2,65535
    4990:	8080030d 	sth	r2,12(r16)
    4994:	003fc306 	br	48a4 <__swsetup_r+0x40>
    4998:	81400417 	ldw	r5,16(r16)
    499c:	003ff906 	br	4984 <__swsetup_r+0x120>

000049a0 <register_fini>:
    49a0:	f800283a 	ret

000049a4 <__call_exitprocs>:
    49a4:	00800074 	movhi	r2,1
    49a8:	1080c304 	addi	r2,r2,780
    49ac:	10800017 	ldw	r2,0(r2)
    49b0:	defff304 	addi	sp,sp,-52
    49b4:	df000b15 	stw	fp,44(sp)
    49b8:	d8800115 	stw	r2,4(sp)
    49bc:	00800034 	movhi	r2,0
    49c0:	1087f104 	addi	r2,r2,8132
    49c4:	1005003a 	cmpeq	r2,r2,zero
    49c8:	d8800215 	stw	r2,8(sp)
    49cc:	d8800117 	ldw	r2,4(sp)
    49d0:	dd400815 	stw	r21,32(sp)
    49d4:	dd000715 	stw	r20,28(sp)
    49d8:	10805204 	addi	r2,r2,328
    49dc:	dfc00c15 	stw	ra,48(sp)
    49e0:	ddc00a15 	stw	r23,40(sp)
    49e4:	dd800915 	stw	r22,36(sp)
    49e8:	dcc00615 	stw	r19,24(sp)
    49ec:	dc800515 	stw	r18,20(sp)
    49f0:	dc400415 	stw	r17,16(sp)
    49f4:	dc000315 	stw	r16,12(sp)
    49f8:	282b883a 	mov	r21,r5
    49fc:	2039883a 	mov	fp,r4
    4a00:	d8800015 	stw	r2,0(sp)
    4a04:	2829003a 	cmpeq	r20,r5,zero
    4a08:	d8800117 	ldw	r2,4(sp)
    4a0c:	14405217 	ldw	r17,328(r2)
    4a10:	88001026 	beq	r17,zero,4a54 <__call_exitprocs+0xb0>
    4a14:	ddc00017 	ldw	r23,0(sp)
    4a18:	88800117 	ldw	r2,4(r17)
    4a1c:	8c802204 	addi	r18,r17,136
    4a20:	143fffc4 	addi	r16,r2,-1
    4a24:	80000916 	blt	r16,zero,4a4c <__call_exitprocs+0xa8>
    4a28:	05bfffc4 	movi	r22,-1
    4a2c:	a000151e 	bne	r20,zero,4a84 <__call_exitprocs+0xe0>
    4a30:	8409883a 	add	r4,r16,r16
    4a34:	2105883a 	add	r2,r4,r4
    4a38:	1485883a 	add	r2,r2,r18
    4a3c:	10c02017 	ldw	r3,128(r2)
    4a40:	a8c01126 	beq	r21,r3,4a88 <__call_exitprocs+0xe4>
    4a44:	843fffc4 	addi	r16,r16,-1
    4a48:	85bff81e 	bne	r16,r22,4a2c <__call_exitprocs+0x88>
    4a4c:	d8800217 	ldw	r2,8(sp)
    4a50:	10003126 	beq	r2,zero,4b18 <__call_exitprocs+0x174>
    4a54:	dfc00c17 	ldw	ra,48(sp)
    4a58:	df000b17 	ldw	fp,44(sp)
    4a5c:	ddc00a17 	ldw	r23,40(sp)
    4a60:	dd800917 	ldw	r22,36(sp)
    4a64:	dd400817 	ldw	r21,32(sp)
    4a68:	dd000717 	ldw	r20,28(sp)
    4a6c:	dcc00617 	ldw	r19,24(sp)
    4a70:	dc800517 	ldw	r18,20(sp)
    4a74:	dc400417 	ldw	r17,16(sp)
    4a78:	dc000317 	ldw	r16,12(sp)
    4a7c:	dec00d04 	addi	sp,sp,52
    4a80:	f800283a 	ret
    4a84:	8409883a 	add	r4,r16,r16
    4a88:	88c00117 	ldw	r3,4(r17)
    4a8c:	2105883a 	add	r2,r4,r4
    4a90:	1445883a 	add	r2,r2,r17
    4a94:	18ffffc4 	addi	r3,r3,-1
    4a98:	11800217 	ldw	r6,8(r2)
    4a9c:	1c001526 	beq	r3,r16,4af4 <__call_exitprocs+0x150>
    4aa0:	10000215 	stw	zero,8(r2)
    4aa4:	303fe726 	beq	r6,zero,4a44 <__call_exitprocs+0xa0>
    4aa8:	00c00044 	movi	r3,1
    4aac:	1c06983a 	sll	r3,r3,r16
    4ab0:	90804017 	ldw	r2,256(r18)
    4ab4:	8cc00117 	ldw	r19,4(r17)
    4ab8:	1884703a 	and	r2,r3,r2
    4abc:	10001426 	beq	r2,zero,4b10 <__call_exitprocs+0x16c>
    4ac0:	90804117 	ldw	r2,260(r18)
    4ac4:	1884703a 	and	r2,r3,r2
    4ac8:	10000c1e 	bne	r2,zero,4afc <__call_exitprocs+0x158>
    4acc:	2105883a 	add	r2,r4,r4
    4ad0:	1485883a 	add	r2,r2,r18
    4ad4:	11400017 	ldw	r5,0(r2)
    4ad8:	e009883a 	mov	r4,fp
    4adc:	303ee83a 	callr	r6
    4ae0:	88800117 	ldw	r2,4(r17)
    4ae4:	98bfc81e 	bne	r19,r2,4a08 <__call_exitprocs+0x64>
    4ae8:	b8800017 	ldw	r2,0(r23)
    4aec:	147fd526 	beq	r2,r17,4a44 <__call_exitprocs+0xa0>
    4af0:	003fc506 	br	4a08 <__call_exitprocs+0x64>
    4af4:	8c000115 	stw	r16,4(r17)
    4af8:	003fea06 	br	4aa4 <__call_exitprocs+0x100>
    4afc:	2105883a 	add	r2,r4,r4
    4b00:	1485883a 	add	r2,r2,r18
    4b04:	11000017 	ldw	r4,0(r2)
    4b08:	303ee83a 	callr	r6
    4b0c:	003ff406 	br	4ae0 <__call_exitprocs+0x13c>
    4b10:	303ee83a 	callr	r6
    4b14:	003ff206 	br	4ae0 <__call_exitprocs+0x13c>
    4b18:	88800117 	ldw	r2,4(r17)
    4b1c:	1000081e 	bne	r2,zero,4b40 <__call_exitprocs+0x19c>
    4b20:	89000017 	ldw	r4,0(r17)
    4b24:	20000726 	beq	r4,zero,4b44 <__call_exitprocs+0x1a0>
    4b28:	b9000015 	stw	r4,0(r23)
    4b2c:	8809883a 	mov	r4,r17
    4b30:	0001fc40 	call	1fc4 <free>
    4b34:	bc400017 	ldw	r17,0(r23)
    4b38:	883fb71e 	bne	r17,zero,4a18 <__call_exitprocs+0x74>
    4b3c:	003fc506 	br	4a54 <__call_exitprocs+0xb0>
    4b40:	89000017 	ldw	r4,0(r17)
    4b44:	882f883a 	mov	r23,r17
    4b48:	2023883a 	mov	r17,r4
    4b4c:	883fb21e 	bne	r17,zero,4a18 <__call_exitprocs+0x74>
    4b50:	003fc006 	br	4a54 <__call_exitprocs+0xb0>

00004b54 <quorem>:
    4b54:	28c00417 	ldw	r3,16(r5)
    4b58:	20800417 	ldw	r2,16(r4)
    4b5c:	defff604 	addi	sp,sp,-40
    4b60:	ddc00715 	stw	r23,28(sp)
    4b64:	dd400515 	stw	r21,20(sp)
    4b68:	dfc00915 	stw	ra,36(sp)
    4b6c:	df000815 	stw	fp,32(sp)
    4b70:	dd800615 	stw	r22,24(sp)
    4b74:	dd000415 	stw	r20,16(sp)
    4b78:	dcc00315 	stw	r19,12(sp)
    4b7c:	dc800215 	stw	r18,8(sp)
    4b80:	dc400115 	stw	r17,4(sp)
    4b84:	dc000015 	stw	r16,0(sp)
    4b88:	202f883a 	mov	r23,r4
    4b8c:	282b883a 	mov	r21,r5
    4b90:	10c07416 	blt	r2,r3,4d64 <quorem+0x210>
    4b94:	1c7fffc4 	addi	r17,r3,-1
    4b98:	8c45883a 	add	r2,r17,r17
    4b9c:	1085883a 	add	r2,r2,r2
    4ba0:	2c000504 	addi	r16,r5,20
    4ba4:	24c00504 	addi	r19,r4,20
    4ba8:	14ed883a 	add	r22,r2,r19
    4bac:	80a5883a 	add	r18,r16,r2
    4bb0:	b7000017 	ldw	fp,0(r22)
    4bb4:	91400017 	ldw	r5,0(r18)
    4bb8:	e009883a 	mov	r4,fp
    4bbc:	29400044 	addi	r5,r5,1
    4bc0:	0001f7c0 	call	1f7c <__udivsi3>
    4bc4:	1029883a 	mov	r20,r2
    4bc8:	10003c1e 	bne	r2,zero,4cbc <quorem+0x168>
    4bcc:	a80b883a 	mov	r5,r21
    4bd0:	b809883a 	mov	r4,r23
    4bd4:	000791c0 	call	791c <__mcmp>
    4bd8:	10002b16 	blt	r2,zero,4c88 <quorem+0x134>
    4bdc:	a5000044 	addi	r20,r20,1
    4be0:	980f883a 	mov	r7,r19
    4be4:	0011883a 	mov	r8,zero
    4be8:	0009883a 	mov	r4,zero
    4bec:	81400017 	ldw	r5,0(r16)
    4bf0:	38c00017 	ldw	r3,0(r7)
    4bf4:	84000104 	addi	r16,r16,4
    4bf8:	28bfffcc 	andi	r2,r5,65535
    4bfc:	2085883a 	add	r2,r4,r2
    4c00:	11bfffcc 	andi	r6,r2,65535
    4c04:	193fffcc 	andi	r4,r3,65535
    4c08:	1004d43a 	srli	r2,r2,16
    4c0c:	280ad43a 	srli	r5,r5,16
    4c10:	2189c83a 	sub	r4,r4,r6
    4c14:	2209883a 	add	r4,r4,r8
    4c18:	1806d43a 	srli	r3,r3,16
    4c1c:	288b883a 	add	r5,r5,r2
    4c20:	200dd43a 	srai	r6,r4,16
    4c24:	28bfffcc 	andi	r2,r5,65535
    4c28:	1887c83a 	sub	r3,r3,r2
    4c2c:	1987883a 	add	r3,r3,r6
    4c30:	3900000d 	sth	r4,0(r7)
    4c34:	38c0008d 	sth	r3,2(r7)
    4c38:	2808d43a 	srli	r4,r5,16
    4c3c:	39c00104 	addi	r7,r7,4
    4c40:	1811d43a 	srai	r8,r3,16
    4c44:	943fe92e 	bgeu	r18,r16,4bec <quorem+0x98>
    4c48:	8c45883a 	add	r2,r17,r17
    4c4c:	1085883a 	add	r2,r2,r2
    4c50:	9885883a 	add	r2,r19,r2
    4c54:	10c00017 	ldw	r3,0(r2)
    4c58:	18000b1e 	bne	r3,zero,4c88 <quorem+0x134>
    4c5c:	113fff04 	addi	r4,r2,-4
    4c60:	9900082e 	bgeu	r19,r4,4c84 <quorem+0x130>
    4c64:	10bfff17 	ldw	r2,-4(r2)
    4c68:	10000326 	beq	r2,zero,4c78 <quorem+0x124>
    4c6c:	00000506 	br	4c84 <quorem+0x130>
    4c70:	20800017 	ldw	r2,0(r4)
    4c74:	1000031e 	bne	r2,zero,4c84 <quorem+0x130>
    4c78:	213fff04 	addi	r4,r4,-4
    4c7c:	8c7fffc4 	addi	r17,r17,-1
    4c80:	993ffb36 	bltu	r19,r4,4c70 <quorem+0x11c>
    4c84:	bc400415 	stw	r17,16(r23)
    4c88:	a005883a 	mov	r2,r20
    4c8c:	dfc00917 	ldw	ra,36(sp)
    4c90:	df000817 	ldw	fp,32(sp)
    4c94:	ddc00717 	ldw	r23,28(sp)
    4c98:	dd800617 	ldw	r22,24(sp)
    4c9c:	dd400517 	ldw	r21,20(sp)
    4ca0:	dd000417 	ldw	r20,16(sp)
    4ca4:	dcc00317 	ldw	r19,12(sp)
    4ca8:	dc800217 	ldw	r18,8(sp)
    4cac:	dc400117 	ldw	r17,4(sp)
    4cb0:	dc000017 	ldw	r16,0(sp)
    4cb4:	dec00a04 	addi	sp,sp,40
    4cb8:	f800283a 	ret
    4cbc:	980f883a 	mov	r7,r19
    4cc0:	8011883a 	mov	r8,r16
    4cc4:	0013883a 	mov	r9,zero
    4cc8:	000d883a 	mov	r6,zero
    4ccc:	40c00017 	ldw	r3,0(r8)
    4cd0:	39000017 	ldw	r4,0(r7)
    4cd4:	42000104 	addi	r8,r8,4
    4cd8:	18bfffcc 	andi	r2,r3,65535
    4cdc:	a085383a 	mul	r2,r20,r2
    4ce0:	1806d43a 	srli	r3,r3,16
    4ce4:	217fffcc 	andi	r5,r4,65535
    4ce8:	3085883a 	add	r2,r6,r2
    4cec:	11bfffcc 	andi	r6,r2,65535
    4cf0:	a0c7383a 	mul	r3,r20,r3
    4cf4:	1004d43a 	srli	r2,r2,16
    4cf8:	298bc83a 	sub	r5,r5,r6
    4cfc:	2a4b883a 	add	r5,r5,r9
    4d00:	2008d43a 	srli	r4,r4,16
    4d04:	1887883a 	add	r3,r3,r2
    4d08:	280dd43a 	srai	r6,r5,16
    4d0c:	18bfffcc 	andi	r2,r3,65535
    4d10:	2089c83a 	sub	r4,r4,r2
    4d14:	2189883a 	add	r4,r4,r6
    4d18:	3900008d 	sth	r4,2(r7)
    4d1c:	3940000d 	sth	r5,0(r7)
    4d20:	180cd43a 	srli	r6,r3,16
    4d24:	39c00104 	addi	r7,r7,4
    4d28:	2013d43a 	srai	r9,r4,16
    4d2c:	923fe72e 	bgeu	r18,r8,4ccc <quorem+0x178>
    4d30:	e03fa61e 	bne	fp,zero,4bcc <quorem+0x78>
    4d34:	b0ffff04 	addi	r3,r22,-4
    4d38:	98c0082e 	bgeu	r19,r3,4d5c <quorem+0x208>
    4d3c:	b0bfff17 	ldw	r2,-4(r22)
    4d40:	10000326 	beq	r2,zero,4d50 <quorem+0x1fc>
    4d44:	00000506 	br	4d5c <quorem+0x208>
    4d48:	18800017 	ldw	r2,0(r3)
    4d4c:	1000031e 	bne	r2,zero,4d5c <quorem+0x208>
    4d50:	18ffff04 	addi	r3,r3,-4
    4d54:	8c7fffc4 	addi	r17,r17,-1
    4d58:	98fffb36 	bltu	r19,r3,4d48 <quorem+0x1f4>
    4d5c:	bc400415 	stw	r17,16(r23)
    4d60:	003f9a06 	br	4bcc <quorem+0x78>
    4d64:	0005883a 	mov	r2,zero
    4d68:	003fc806 	br	4c8c <quorem+0x138>

00004d6c <_dtoa_r>:
    4d6c:	22001017 	ldw	r8,64(r4)
    4d70:	deffda04 	addi	sp,sp,-152
    4d74:	dd402115 	stw	r21,132(sp)
    4d78:	dd002015 	stw	r20,128(sp)
    4d7c:	dc801e15 	stw	r18,120(sp)
    4d80:	dc401d15 	stw	r17,116(sp)
    4d84:	dfc02515 	stw	ra,148(sp)
    4d88:	df002415 	stw	fp,144(sp)
    4d8c:	ddc02315 	stw	r23,140(sp)
    4d90:	dd802215 	stw	r22,136(sp)
    4d94:	dcc01f15 	stw	r19,124(sp)
    4d98:	dc001c15 	stw	r16,112(sp)
    4d9c:	d9001615 	stw	r4,88(sp)
    4da0:	3023883a 	mov	r17,r6
    4da4:	2829883a 	mov	r20,r5
    4da8:	d9c01715 	stw	r7,92(sp)
    4dac:	dc802817 	ldw	r18,160(sp)
    4db0:	302b883a 	mov	r21,r6
    4db4:	40000a26 	beq	r8,zero,4de0 <_dtoa_r+0x74>
    4db8:	20801117 	ldw	r2,68(r4)
    4dbc:	400b883a 	mov	r5,r8
    4dc0:	40800115 	stw	r2,4(r8)
    4dc4:	20c01117 	ldw	r3,68(r4)
    4dc8:	00800044 	movi	r2,1
    4dcc:	10c4983a 	sll	r2,r2,r3
    4dd0:	40800215 	stw	r2,8(r8)
    4dd4:	00077c00 	call	77c0 <_Bfree>
    4dd8:	d8c01617 	ldw	r3,88(sp)
    4ddc:	18001015 	stw	zero,64(r3)
    4de0:	8800a316 	blt	r17,zero,5070 <_dtoa_r+0x304>
    4de4:	90000015 	stw	zero,0(r18)
    4de8:	a8dffc2c 	andhi	r3,r21,32752
    4dec:	009ffc34 	movhi	r2,32752
    4df0:	18809126 	beq	r3,r2,5038 <_dtoa_r+0x2cc>
    4df4:	000d883a 	mov	r6,zero
    4df8:	000f883a 	mov	r7,zero
    4dfc:	a009883a 	mov	r4,r20
    4e00:	a80b883a 	mov	r5,r21
    4e04:	dd001215 	stw	r20,72(sp)
    4e08:	dd401315 	stw	r21,76(sp)
    4e0c:	000abe80 	call	abe8 <__nedf2>
    4e10:	1000171e 	bne	r2,zero,4e70 <_dtoa_r+0x104>
    4e14:	d9802717 	ldw	r6,156(sp)
    4e18:	00800044 	movi	r2,1
    4e1c:	30800015 	stw	r2,0(r6)
    4e20:	d8802917 	ldw	r2,164(sp)
    4e24:	10029b26 	beq	r2,zero,5894 <_dtoa_r+0xb28>
    4e28:	d9002917 	ldw	r4,164(sp)
    4e2c:	00800074 	movhi	r2,1
    4e30:	10b97444 	addi	r2,r2,-6703
    4e34:	10ffffc4 	addi	r3,r2,-1
    4e38:	20800015 	stw	r2,0(r4)
    4e3c:	1805883a 	mov	r2,r3
    4e40:	dfc02517 	ldw	ra,148(sp)
    4e44:	df002417 	ldw	fp,144(sp)
    4e48:	ddc02317 	ldw	r23,140(sp)
    4e4c:	dd802217 	ldw	r22,136(sp)
    4e50:	dd402117 	ldw	r21,132(sp)
    4e54:	dd002017 	ldw	r20,128(sp)
    4e58:	dcc01f17 	ldw	r19,124(sp)
    4e5c:	dc801e17 	ldw	r18,120(sp)
    4e60:	dc401d17 	ldw	r17,116(sp)
    4e64:	dc001c17 	ldw	r16,112(sp)
    4e68:	dec02604 	addi	sp,sp,152
    4e6c:	f800283a 	ret
    4e70:	d9001617 	ldw	r4,88(sp)
    4e74:	d9401217 	ldw	r5,72(sp)
    4e78:	d8800104 	addi	r2,sp,4
    4e7c:	a80d883a 	mov	r6,r21
    4e80:	d9c00204 	addi	r7,sp,8
    4e84:	d8800015 	stw	r2,0(sp)
    4e88:	0007dfc0 	call	7dfc <__d2b>
    4e8c:	d8800715 	stw	r2,28(sp)
    4e90:	a804d53a 	srli	r2,r21,20
    4e94:	1101ffcc 	andi	r4,r2,2047
    4e98:	20008626 	beq	r4,zero,50b4 <_dtoa_r+0x348>
    4e9c:	d8c01217 	ldw	r3,72(sp)
    4ea0:	00800434 	movhi	r2,16
    4ea4:	10bfffc4 	addi	r2,r2,-1
    4ea8:	ddc00117 	ldw	r23,4(sp)
    4eac:	a884703a 	and	r2,r21,r2
    4eb0:	1811883a 	mov	r8,r3
    4eb4:	124ffc34 	orhi	r9,r2,16368
    4eb8:	25bf0044 	addi	r22,r4,-1023
    4ebc:	d8000815 	stw	zero,32(sp)
    4ec0:	0005883a 	mov	r2,zero
    4ec4:	00cffe34 	movhi	r3,16376
    4ec8:	480b883a 	mov	r5,r9
    4ecc:	4009883a 	mov	r4,r8
    4ed0:	180f883a 	mov	r7,r3
    4ed4:	100d883a 	mov	r6,r2
    4ed8:	000a4500 	call	a450 <__subdf3>
    4edc:	0218dbf4 	movhi	r8,25455
    4ee0:	4210d844 	addi	r8,r8,17249
    4ee4:	024ff4f4 	movhi	r9,16339
    4ee8:	4a61e9c4 	addi	r9,r9,-30809
    4eec:	480f883a 	mov	r7,r9
    4ef0:	400d883a 	mov	r6,r8
    4ef4:	180b883a 	mov	r5,r3
    4ef8:	1009883a 	mov	r4,r2
    4efc:	000a5440 	call	a544 <__muldf3>
    4f00:	0222d874 	movhi	r8,35681
    4f04:	42322cc4 	addi	r8,r8,-14157
    4f08:	024ff1f4 	movhi	r9,16327
    4f0c:	4a628a04 	addi	r9,r9,-30168
    4f10:	480f883a 	mov	r7,r9
    4f14:	400d883a 	mov	r6,r8
    4f18:	180b883a 	mov	r5,r3
    4f1c:	1009883a 	mov	r4,r2
    4f20:	000a4d00 	call	a4d0 <__adddf3>
    4f24:	b009883a 	mov	r4,r22
    4f28:	1021883a 	mov	r16,r2
    4f2c:	1823883a 	mov	r17,r3
    4f30:	000ae080 	call	ae08 <__floatsidf>
    4f34:	021427f4 	movhi	r8,20639
    4f38:	421e7ec4 	addi	r8,r8,31227
    4f3c:	024ff4f4 	movhi	r9,16339
    4f40:	4a5104c4 	addi	r9,r9,17427
    4f44:	480f883a 	mov	r7,r9
    4f48:	400d883a 	mov	r6,r8
    4f4c:	180b883a 	mov	r5,r3
    4f50:	1009883a 	mov	r4,r2
    4f54:	000a5440 	call	a544 <__muldf3>
    4f58:	180f883a 	mov	r7,r3
    4f5c:	880b883a 	mov	r5,r17
    4f60:	100d883a 	mov	r6,r2
    4f64:	8009883a 	mov	r4,r16
    4f68:	000a4d00 	call	a4d0 <__adddf3>
    4f6c:	1009883a 	mov	r4,r2
    4f70:	180b883a 	mov	r5,r3
    4f74:	1021883a 	mov	r16,r2
    4f78:	1823883a 	mov	r17,r3
    4f7c:	000af000 	call	af00 <__fixdfsi>
    4f80:	000d883a 	mov	r6,zero
    4f84:	000f883a 	mov	r7,zero
    4f88:	8009883a 	mov	r4,r16
    4f8c:	880b883a 	mov	r5,r17
    4f90:	d8800d15 	stw	r2,52(sp)
    4f94:	000ad800 	call	ad80 <__ltdf2>
    4f98:	10031716 	blt	r2,zero,5bf8 <_dtoa_r+0xe8c>
    4f9c:	d8c00d17 	ldw	r3,52(sp)
    4fa0:	00800584 	movi	r2,22
    4fa4:	10c1482e 	bgeu	r2,r3,54c8 <_dtoa_r+0x75c>
    4fa8:	01000044 	movi	r4,1
    4fac:	d9000c15 	stw	r4,48(sp)
    4fb0:	bd85c83a 	sub	r2,r23,r22
    4fb4:	11bfffc4 	addi	r6,r2,-1
    4fb8:	30030b16 	blt	r6,zero,5be8 <_dtoa_r+0xe7c>
    4fbc:	d9800a15 	stw	r6,40(sp)
    4fc0:	d8001115 	stw	zero,68(sp)
    4fc4:	d8c00d17 	ldw	r3,52(sp)
    4fc8:	1802ff16 	blt	r3,zero,5bc8 <_dtoa_r+0xe5c>
    4fcc:	d9000a17 	ldw	r4,40(sp)
    4fd0:	d8c00915 	stw	r3,36(sp)
    4fd4:	d8001015 	stw	zero,64(sp)
    4fd8:	20c9883a 	add	r4,r4,r3
    4fdc:	d9000a15 	stw	r4,40(sp)
    4fe0:	d9001717 	ldw	r4,92(sp)
    4fe4:	00800244 	movi	r2,9
    4fe8:	11004636 	bltu	r2,r4,5104 <_dtoa_r+0x398>
    4fec:	00800144 	movi	r2,5
    4ff0:	11020416 	blt	r2,r4,5804 <_dtoa_r+0xa98>
    4ff4:	04400044 	movi	r17,1
    4ff8:	d8c01717 	ldw	r3,92(sp)
    4ffc:	00800144 	movi	r2,5
    5000:	10c1ed36 	bltu	r2,r3,57b8 <_dtoa_r+0xa4c>
    5004:	18c5883a 	add	r2,r3,r3
    5008:	1085883a 	add	r2,r2,r2
    500c:	00c00034 	movhi	r3,0
    5010:	18d40804 	addi	r3,r3,20512
    5014:	10c5883a 	add	r2,r2,r3
    5018:	11000017 	ldw	r4,0(r2)
    501c:	2000683a 	jmp	r4
    5020:	0000510c 	andi	zero,zero,324
    5024:	0000510c 	andi	zero,zero,324
    5028:	00005b0c 	andi	zero,zero,364
    502c:	00005ae4 	muli	zero,zero,363
    5030:	00005b28 	cmpgeui	zero,zero,364
    5034:	00005b34 	movhi	zero,364
    5038:	d9002717 	ldw	r4,156(sp)
    503c:	0089c3c4 	movi	r2,9999
    5040:	20800015 	stw	r2,0(r4)
    5044:	a0001026 	beq	r20,zero,5088 <_dtoa_r+0x31c>
    5048:	00c00074 	movhi	r3,1
    504c:	18f98004 	addi	r3,r3,-6656
    5050:	d9802917 	ldw	r6,164(sp)
    5054:	303f7926 	beq	r6,zero,4e3c <_dtoa_r+0xd0>
    5058:	188000c7 	ldb	r2,3(r3)
    505c:	190000c4 	addi	r4,r3,3
    5060:	1000101e 	bne	r2,zero,50a4 <_dtoa_r+0x338>
    5064:	d8802917 	ldw	r2,164(sp)
    5068:	11000015 	stw	r4,0(r2)
    506c:	003f7306 	br	4e3c <_dtoa_r+0xd0>
    5070:	00a00034 	movhi	r2,32768
    5074:	10bfffc4 	addi	r2,r2,-1
    5078:	00c00044 	movi	r3,1
    507c:	88aa703a 	and	r21,r17,r2
    5080:	90c00015 	stw	r3,0(r18)
    5084:	003f5806 	br	4de8 <_dtoa_r+0x7c>
    5088:	00800434 	movhi	r2,16
    508c:	10bfffc4 	addi	r2,r2,-1
    5090:	a884703a 	and	r2,r21,r2
    5094:	103fec1e 	bne	r2,zero,5048 <_dtoa_r+0x2dc>
    5098:	00c00074 	movhi	r3,1
    509c:	18f97d04 	addi	r3,r3,-6668
    50a0:	003feb06 	br	5050 <_dtoa_r+0x2e4>
    50a4:	d8802917 	ldw	r2,164(sp)
    50a8:	19000204 	addi	r4,r3,8
    50ac:	11000015 	stw	r4,0(r2)
    50b0:	003f6206 	br	4e3c <_dtoa_r+0xd0>
    50b4:	ddc00117 	ldw	r23,4(sp)
    50b8:	d8800217 	ldw	r2,8(sp)
    50bc:	01000804 	movi	r4,32
    50c0:	b8c10c84 	addi	r3,r23,1074
    50c4:	18a3883a 	add	r17,r3,r2
    50c8:	2441b80e 	bge	r4,r17,57ac <_dtoa_r+0xa40>
    50cc:	00c01004 	movi	r3,64
    50d0:	1c47c83a 	sub	r3,r3,r17
    50d4:	88bff804 	addi	r2,r17,-32
    50d8:	a8c6983a 	sll	r3,r21,r3
    50dc:	a084d83a 	srl	r2,r20,r2
    50e0:	1888b03a 	or	r4,r3,r2
    50e4:	000afd80 	call	afd8 <__floatunsidf>
    50e8:	1011883a 	mov	r8,r2
    50ec:	00bf8434 	movhi	r2,65040
    50f0:	01000044 	movi	r4,1
    50f4:	10d3883a 	add	r9,r2,r3
    50f8:	8dbef344 	addi	r22,r17,-1075
    50fc:	d9000815 	stw	r4,32(sp)
    5100:	003f6f06 	br	4ec0 <_dtoa_r+0x154>
    5104:	d8001715 	stw	zero,92(sp)
    5108:	04400044 	movi	r17,1
    510c:	00bfffc4 	movi	r2,-1
    5110:	00c00044 	movi	r3,1
    5114:	d8800e15 	stw	r2,56(sp)
    5118:	d8002615 	stw	zero,152(sp)
    511c:	d8800f15 	stw	r2,60(sp)
    5120:	d8c00b15 	stw	r3,44(sp)
    5124:	1021883a 	mov	r16,r2
    5128:	d8801617 	ldw	r2,88(sp)
    512c:	10001115 	stw	zero,68(r2)
    5130:	d8801617 	ldw	r2,88(sp)
    5134:	11401117 	ldw	r5,68(r2)
    5138:	1009883a 	mov	r4,r2
    513c:	0007d400 	call	7d40 <_Balloc>
    5140:	d8c01617 	ldw	r3,88(sp)
    5144:	d8800515 	stw	r2,20(sp)
    5148:	18801015 	stw	r2,64(r3)
    514c:	00800384 	movi	r2,14
    5150:	14006836 	bltu	r2,r16,52f4 <_dtoa_r+0x588>
    5154:	8805003a 	cmpeq	r2,r17,zero
    5158:	1000661e 	bne	r2,zero,52f4 <_dtoa_r+0x588>
    515c:	d9000d17 	ldw	r4,52(sp)
    5160:	0102300e 	bge	zero,r4,5a24 <_dtoa_r+0xcb8>
    5164:	208003cc 	andi	r2,r4,15
    5168:	100490fa 	slli	r2,r2,3
    516c:	2025d13a 	srai	r18,r4,4
    5170:	00c00074 	movhi	r3,1
    5174:	18f99104 	addi	r3,r3,-6588
    5178:	10c5883a 	add	r2,r2,r3
    517c:	90c0040c 	andi	r3,r18,16
    5180:	14000017 	ldw	r16,0(r2)
    5184:	14400117 	ldw	r17,4(r2)
    5188:	18036a1e 	bne	r3,zero,5f34 <_dtoa_r+0x11c8>
    518c:	05800084 	movi	r22,2
    5190:	90001026 	beq	r18,zero,51d4 <_dtoa_r+0x468>
    5194:	04c00074 	movhi	r19,1
    5198:	9cf9c304 	addi	r19,r19,-6388
    519c:	9080004c 	andi	r2,r18,1
    51a0:	1005003a 	cmpeq	r2,r2,zero
    51a4:	1000081e 	bne	r2,zero,51c8 <_dtoa_r+0x45c>
    51a8:	99800017 	ldw	r6,0(r19)
    51ac:	99c00117 	ldw	r7,4(r19)
    51b0:	880b883a 	mov	r5,r17
    51b4:	8009883a 	mov	r4,r16
    51b8:	000a5440 	call	a544 <__muldf3>
    51bc:	1021883a 	mov	r16,r2
    51c0:	b5800044 	addi	r22,r22,1
    51c4:	1823883a 	mov	r17,r3
    51c8:	9025d07a 	srai	r18,r18,1
    51cc:	9cc00204 	addi	r19,r19,8
    51d0:	903ff21e 	bne	r18,zero,519c <_dtoa_r+0x430>
    51d4:	a80b883a 	mov	r5,r21
    51d8:	a009883a 	mov	r4,r20
    51dc:	880f883a 	mov	r7,r17
    51e0:	800d883a 	mov	r6,r16
    51e4:	000a9080 	call	a908 <__divdf3>
    51e8:	1029883a 	mov	r20,r2
    51ec:	182b883a 	mov	r21,r3
    51f0:	d8c00c17 	ldw	r3,48(sp)
    51f4:	1805003a 	cmpeq	r2,r3,zero
    51f8:	1000081e 	bne	r2,zero,521c <_dtoa_r+0x4b0>
    51fc:	0005883a 	mov	r2,zero
    5200:	00cffc34 	movhi	r3,16368
    5204:	180f883a 	mov	r7,r3
    5208:	a009883a 	mov	r4,r20
    520c:	a80b883a 	mov	r5,r21
    5210:	100d883a 	mov	r6,r2
    5214:	000ad800 	call	ad80 <__ltdf2>
    5218:	1003fe16 	blt	r2,zero,6214 <_dtoa_r+0x14a8>
    521c:	b009883a 	mov	r4,r22
    5220:	000ae080 	call	ae08 <__floatsidf>
    5224:	180b883a 	mov	r5,r3
    5228:	1009883a 	mov	r4,r2
    522c:	a00d883a 	mov	r6,r20
    5230:	a80f883a 	mov	r7,r21
    5234:	000a5440 	call	a544 <__muldf3>
    5238:	0011883a 	mov	r8,zero
    523c:	02500734 	movhi	r9,16412
    5240:	1009883a 	mov	r4,r2
    5244:	180b883a 	mov	r5,r3
    5248:	480f883a 	mov	r7,r9
    524c:	400d883a 	mov	r6,r8
    5250:	000a4d00 	call	a4d0 <__adddf3>
    5254:	d9000f17 	ldw	r4,60(sp)
    5258:	102d883a 	mov	r22,r2
    525c:	00bf3034 	movhi	r2,64704
    5260:	18b9883a 	add	fp,r3,r2
    5264:	e02f883a 	mov	r23,fp
    5268:	20028f1e 	bne	r4,zero,5ca8 <_dtoa_r+0xf3c>
    526c:	0005883a 	mov	r2,zero
    5270:	00d00534 	movhi	r3,16404
    5274:	a009883a 	mov	r4,r20
    5278:	a80b883a 	mov	r5,r21
    527c:	180f883a 	mov	r7,r3
    5280:	100d883a 	mov	r6,r2
    5284:	000a4500 	call	a450 <__subdf3>
    5288:	1009883a 	mov	r4,r2
    528c:	e00f883a 	mov	r7,fp
    5290:	180b883a 	mov	r5,r3
    5294:	b00d883a 	mov	r6,r22
    5298:	1025883a 	mov	r18,r2
    529c:	1827883a 	mov	r19,r3
    52a0:	000ac700 	call	ac70 <__gtdf2>
    52a4:	00834f16 	blt	zero,r2,5fe4 <_dtoa_r+0x1278>
    52a8:	e0e0003c 	xorhi	r3,fp,32768
    52ac:	9009883a 	mov	r4,r18
    52b0:	980b883a 	mov	r5,r19
    52b4:	180f883a 	mov	r7,r3
    52b8:	b00d883a 	mov	r6,r22
    52bc:	000ad800 	call	ad80 <__ltdf2>
    52c0:	1000080e 	bge	r2,zero,52e4 <_dtoa_r+0x578>
    52c4:	0027883a 	mov	r19,zero
    52c8:	0025883a 	mov	r18,zero
    52cc:	d8802617 	ldw	r2,152(sp)
    52d0:	df000517 	ldw	fp,20(sp)
    52d4:	d8000615 	stw	zero,24(sp)
    52d8:	0084303a 	nor	r2,zero,r2
    52dc:	d8800d15 	stw	r2,52(sp)
    52e0:	00019b06 	br	5950 <_dtoa_r+0xbe4>
    52e4:	d9801217 	ldw	r6,72(sp)
    52e8:	d8801317 	ldw	r2,76(sp)
    52ec:	3029883a 	mov	r20,r6
    52f0:	102b883a 	mov	r21,r2
    52f4:	d8c00217 	ldw	r3,8(sp)
    52f8:	18008516 	blt	r3,zero,5510 <_dtoa_r+0x7a4>
    52fc:	d9000d17 	ldw	r4,52(sp)
    5300:	00800384 	movi	r2,14
    5304:	11008216 	blt	r2,r4,5510 <_dtoa_r+0x7a4>
    5308:	200490fa 	slli	r2,r4,3
    530c:	d9802617 	ldw	r6,152(sp)
    5310:	00c00074 	movhi	r3,1
    5314:	18f99104 	addi	r3,r3,-6588
    5318:	10c5883a 	add	r2,r2,r3
    531c:	14800017 	ldw	r18,0(r2)
    5320:	14c00117 	ldw	r19,4(r2)
    5324:	30031e16 	blt	r6,zero,5fa0 <_dtoa_r+0x1234>
    5328:	d9000517 	ldw	r4,20(sp)
    532c:	d8c00f17 	ldw	r3,60(sp)
    5330:	a823883a 	mov	r17,r21
    5334:	a021883a 	mov	r16,r20
    5338:	192b883a 	add	r21,r3,r4
    533c:	2039883a 	mov	fp,r4
    5340:	00000f06 	br	5380 <_dtoa_r+0x614>
    5344:	0005883a 	mov	r2,zero
    5348:	00d00934 	movhi	r3,16420
    534c:	5009883a 	mov	r4,r10
    5350:	580b883a 	mov	r5,r11
    5354:	180f883a 	mov	r7,r3
    5358:	100d883a 	mov	r6,r2
    535c:	000a5440 	call	a544 <__muldf3>
    5360:	180b883a 	mov	r5,r3
    5364:	000d883a 	mov	r6,zero
    5368:	000f883a 	mov	r7,zero
    536c:	1009883a 	mov	r4,r2
    5370:	1021883a 	mov	r16,r2
    5374:	1823883a 	mov	r17,r3
    5378:	000abe80 	call	abe8 <__nedf2>
    537c:	10004526 	beq	r2,zero,5494 <_dtoa_r+0x728>
    5380:	900d883a 	mov	r6,r18
    5384:	980f883a 	mov	r7,r19
    5388:	8009883a 	mov	r4,r16
    538c:	880b883a 	mov	r5,r17
    5390:	000a9080 	call	a908 <__divdf3>
    5394:	180b883a 	mov	r5,r3
    5398:	1009883a 	mov	r4,r2
    539c:	000af000 	call	af00 <__fixdfsi>
    53a0:	1009883a 	mov	r4,r2
    53a4:	1029883a 	mov	r20,r2
    53a8:	000ae080 	call	ae08 <__floatsidf>
    53ac:	180f883a 	mov	r7,r3
    53b0:	9009883a 	mov	r4,r18
    53b4:	980b883a 	mov	r5,r19
    53b8:	100d883a 	mov	r6,r2
    53bc:	000a5440 	call	a544 <__muldf3>
    53c0:	180f883a 	mov	r7,r3
    53c4:	880b883a 	mov	r5,r17
    53c8:	8009883a 	mov	r4,r16
    53cc:	100d883a 	mov	r6,r2
    53d0:	000a4500 	call	a450 <__subdf3>
    53d4:	1015883a 	mov	r10,r2
    53d8:	a0800c04 	addi	r2,r20,48
    53dc:	e0800005 	stb	r2,0(fp)
    53e0:	e7000044 	addi	fp,fp,1
    53e4:	1817883a 	mov	r11,r3
    53e8:	e57fd61e 	bne	fp,r21,5344 <_dtoa_r+0x5d8>
    53ec:	500d883a 	mov	r6,r10
    53f0:	180f883a 	mov	r7,r3
    53f4:	5009883a 	mov	r4,r10
    53f8:	180b883a 	mov	r5,r3
    53fc:	000a4d00 	call	a4d0 <__adddf3>
    5400:	100d883a 	mov	r6,r2
    5404:	9009883a 	mov	r4,r18
    5408:	980b883a 	mov	r5,r19
    540c:	180f883a 	mov	r7,r3
    5410:	1021883a 	mov	r16,r2
    5414:	1823883a 	mov	r17,r3
    5418:	000ad800 	call	ad80 <__ltdf2>
    541c:	10000816 	blt	r2,zero,5440 <_dtoa_r+0x6d4>
    5420:	980b883a 	mov	r5,r19
    5424:	800d883a 	mov	r6,r16
    5428:	880f883a 	mov	r7,r17
    542c:	9009883a 	mov	r4,r18
    5430:	000ab600 	call	ab60 <__eqdf2>
    5434:	1000171e 	bne	r2,zero,5494 <_dtoa_r+0x728>
    5438:	a080004c 	andi	r2,r20,1
    543c:	10001526 	beq	r2,zero,5494 <_dtoa_r+0x728>
    5440:	d8800d17 	ldw	r2,52(sp)
    5444:	d8800415 	stw	r2,16(sp)
    5448:	e009883a 	mov	r4,fp
    544c:	213fffc4 	addi	r4,r4,-1
    5450:	20c00007 	ldb	r3,0(r4)
    5454:	00800e44 	movi	r2,57
    5458:	1880081e 	bne	r3,r2,547c <_dtoa_r+0x710>
    545c:	d8800517 	ldw	r2,20(sp)
    5460:	113ffa1e 	bne	r2,r4,544c <_dtoa_r+0x6e0>
    5464:	d8c00417 	ldw	r3,16(sp)
    5468:	d9800517 	ldw	r6,20(sp)
    546c:	00800c04 	movi	r2,48
    5470:	18c00044 	addi	r3,r3,1
    5474:	d8c00415 	stw	r3,16(sp)
    5478:	30800005 	stb	r2,0(r6)
    547c:	20800003 	ldbu	r2,0(r4)
    5480:	d8c00417 	ldw	r3,16(sp)
    5484:	27000044 	addi	fp,r4,1
    5488:	10800044 	addi	r2,r2,1
    548c:	d8c00d15 	stw	r3,52(sp)
    5490:	20800005 	stb	r2,0(r4)
    5494:	d9001617 	ldw	r4,88(sp)
    5498:	d9400717 	ldw	r5,28(sp)
    549c:	00077c00 	call	77c0 <_Bfree>
    54a0:	e0000005 	stb	zero,0(fp)
    54a4:	d9800d17 	ldw	r6,52(sp)
    54a8:	d8c02717 	ldw	r3,156(sp)
    54ac:	d9002917 	ldw	r4,164(sp)
    54b0:	30800044 	addi	r2,r6,1
    54b4:	18800015 	stw	r2,0(r3)
    54b8:	20029c26 	beq	r4,zero,5f2c <_dtoa_r+0x11c0>
    54bc:	d8c00517 	ldw	r3,20(sp)
    54c0:	27000015 	stw	fp,0(r4)
    54c4:	003e5d06 	br	4e3c <_dtoa_r+0xd0>
    54c8:	d9800d17 	ldw	r6,52(sp)
    54cc:	00c00074 	movhi	r3,1
    54d0:	18f99104 	addi	r3,r3,-6588
    54d4:	d9001217 	ldw	r4,72(sp)
    54d8:	300490fa 	slli	r2,r6,3
    54dc:	d9401317 	ldw	r5,76(sp)
    54e0:	10c5883a 	add	r2,r2,r3
    54e4:	12000017 	ldw	r8,0(r2)
    54e8:	12400117 	ldw	r9,4(r2)
    54ec:	400d883a 	mov	r6,r8
    54f0:	480f883a 	mov	r7,r9
    54f4:	000ad800 	call	ad80 <__ltdf2>
    54f8:	1000030e 	bge	r2,zero,5508 <_dtoa_r+0x79c>
    54fc:	d8800d17 	ldw	r2,52(sp)
    5500:	10bfffc4 	addi	r2,r2,-1
    5504:	d8800d15 	stw	r2,52(sp)
    5508:	d8000c15 	stw	zero,48(sp)
    550c:	003ea806 	br	4fb0 <_dtoa_r+0x244>
    5510:	d9000b17 	ldw	r4,44(sp)
    5514:	202cc03a 	cmpne	r22,r4,zero
    5518:	b000c71e 	bne	r22,zero,5838 <_dtoa_r+0xacc>
    551c:	dc001117 	ldw	r16,68(sp)
    5520:	dc801017 	ldw	r18,64(sp)
    5524:	0027883a 	mov	r19,zero
    5528:	04000b0e 	bge	zero,r16,5558 <_dtoa_r+0x7ec>
    552c:	d8c00a17 	ldw	r3,40(sp)
    5530:	00c0090e 	bge	zero,r3,5558 <_dtoa_r+0x7ec>
    5534:	8005883a 	mov	r2,r16
    5538:	1c011316 	blt	r3,r16,5988 <_dtoa_r+0xc1c>
    553c:	d9000a17 	ldw	r4,40(sp)
    5540:	d9801117 	ldw	r6,68(sp)
    5544:	80a1c83a 	sub	r16,r16,r2
    5548:	2089c83a 	sub	r4,r4,r2
    554c:	308dc83a 	sub	r6,r6,r2
    5550:	d9000a15 	stw	r4,40(sp)
    5554:	d9801115 	stw	r6,68(sp)
    5558:	d8801017 	ldw	r2,64(sp)
    555c:	0080150e 	bge	zero,r2,55b4 <_dtoa_r+0x848>
    5560:	d8c00b17 	ldw	r3,44(sp)
    5564:	1805003a 	cmpeq	r2,r3,zero
    5568:	1001c91e 	bne	r2,zero,5c90 <_dtoa_r+0xf24>
    556c:	04800e0e 	bge	zero,r18,55a8 <_dtoa_r+0x83c>
    5570:	d9001617 	ldw	r4,88(sp)
    5574:	980b883a 	mov	r5,r19
    5578:	900d883a 	mov	r6,r18
    557c:	00085740 	call	8574 <__pow5mult>
    5580:	d9001617 	ldw	r4,88(sp)
    5584:	d9800717 	ldw	r6,28(sp)
    5588:	100b883a 	mov	r5,r2
    558c:	1027883a 	mov	r19,r2
    5590:	00082500 	call	8250 <__multiply>
    5594:	d9001617 	ldw	r4,88(sp)
    5598:	d9400717 	ldw	r5,28(sp)
    559c:	1023883a 	mov	r17,r2
    55a0:	00077c00 	call	77c0 <_Bfree>
    55a4:	dc400715 	stw	r17,28(sp)
    55a8:	d9001017 	ldw	r4,64(sp)
    55ac:	248dc83a 	sub	r6,r4,r18
    55b0:	30010e1e 	bne	r6,zero,59ec <_dtoa_r+0xc80>
    55b4:	d9001617 	ldw	r4,88(sp)
    55b8:	04400044 	movi	r17,1
    55bc:	880b883a 	mov	r5,r17
    55c0:	00084380 	call	8438 <__i2b>
    55c4:	d9800917 	ldw	r6,36(sp)
    55c8:	1025883a 	mov	r18,r2
    55cc:	0180040e 	bge	zero,r6,55e0 <_dtoa_r+0x874>
    55d0:	d9001617 	ldw	r4,88(sp)
    55d4:	100b883a 	mov	r5,r2
    55d8:	00085740 	call	8574 <__pow5mult>
    55dc:	1025883a 	mov	r18,r2
    55e0:	d8801717 	ldw	r2,92(sp)
    55e4:	8880f30e 	bge	r17,r2,59b4 <_dtoa_r+0xc48>
    55e8:	0023883a 	mov	r17,zero
    55ec:	d9800917 	ldw	r6,36(sp)
    55f0:	30019e1e 	bne	r6,zero,5c6c <_dtoa_r+0xf00>
    55f4:	00c00044 	movi	r3,1
    55f8:	d9000a17 	ldw	r4,40(sp)
    55fc:	20c5883a 	add	r2,r4,r3
    5600:	10c007cc 	andi	r3,r2,31
    5604:	1800841e 	bne	r3,zero,5818 <_dtoa_r+0xaac>
    5608:	00800704 	movi	r2,28
    560c:	d9000a17 	ldw	r4,40(sp)
    5610:	d9801117 	ldw	r6,68(sp)
    5614:	80a1883a 	add	r16,r16,r2
    5618:	2089883a 	add	r4,r4,r2
    561c:	308d883a 	add	r6,r6,r2
    5620:	d9000a15 	stw	r4,40(sp)
    5624:	d9801115 	stw	r6,68(sp)
    5628:	d8801117 	ldw	r2,68(sp)
    562c:	0080050e 	bge	zero,r2,5644 <_dtoa_r+0x8d8>
    5630:	d9400717 	ldw	r5,28(sp)
    5634:	d9001617 	ldw	r4,88(sp)
    5638:	100d883a 	mov	r6,r2
    563c:	00081040 	call	8104 <__lshift>
    5640:	d8800715 	stw	r2,28(sp)
    5644:	d8c00a17 	ldw	r3,40(sp)
    5648:	00c0050e 	bge	zero,r3,5660 <_dtoa_r+0x8f4>
    564c:	d9001617 	ldw	r4,88(sp)
    5650:	900b883a 	mov	r5,r18
    5654:	180d883a 	mov	r6,r3
    5658:	00081040 	call	8104 <__lshift>
    565c:	1025883a 	mov	r18,r2
    5660:	d9000c17 	ldw	r4,48(sp)
    5664:	2005003a 	cmpeq	r2,r4,zero
    5668:	10016f26 	beq	r2,zero,5c28 <_dtoa_r+0xebc>
    566c:	d9000f17 	ldw	r4,60(sp)
    5670:	0102170e 	bge	zero,r4,5ed0 <_dtoa_r+0x1164>
    5674:	d9800b17 	ldw	r6,44(sp)
    5678:	3005003a 	cmpeq	r2,r6,zero
    567c:	1000881e 	bne	r2,zero,58a0 <_dtoa_r+0xb34>
    5680:	0400050e 	bge	zero,r16,5698 <_dtoa_r+0x92c>
    5684:	d9001617 	ldw	r4,88(sp)
    5688:	980b883a 	mov	r5,r19
    568c:	800d883a 	mov	r6,r16
    5690:	00081040 	call	8104 <__lshift>
    5694:	1027883a 	mov	r19,r2
    5698:	8804c03a 	cmpne	r2,r17,zero
    569c:	1002541e 	bne	r2,zero,5ff0 <_dtoa_r+0x1284>
    56a0:	980b883a 	mov	r5,r19
    56a4:	dd800517 	ldw	r22,20(sp)
    56a8:	dcc00615 	stw	r19,24(sp)
    56ac:	a700004c 	andi	fp,r20,1
    56b0:	2827883a 	mov	r19,r5
    56b4:	d9000717 	ldw	r4,28(sp)
    56b8:	900b883a 	mov	r5,r18
    56bc:	0004b540 	call	4b54 <quorem>
    56c0:	d9000717 	ldw	r4,28(sp)
    56c4:	d9400617 	ldw	r5,24(sp)
    56c8:	1023883a 	mov	r17,r2
    56cc:	8dc00c04 	addi	r23,r17,48
    56d0:	000791c0 	call	791c <__mcmp>
    56d4:	d9001617 	ldw	r4,88(sp)
    56d8:	900b883a 	mov	r5,r18
    56dc:	980d883a 	mov	r6,r19
    56e0:	1029883a 	mov	r20,r2
    56e4:	0007f780 	call	7f78 <__mdiff>
    56e8:	102b883a 	mov	r21,r2
    56ec:	10800317 	ldw	r2,12(r2)
    56f0:	1001281e 	bne	r2,zero,5b94 <_dtoa_r+0xe28>
    56f4:	d9000717 	ldw	r4,28(sp)
    56f8:	a80b883a 	mov	r5,r21
    56fc:	000791c0 	call	791c <__mcmp>
    5700:	d9001617 	ldw	r4,88(sp)
    5704:	1021883a 	mov	r16,r2
    5708:	a80b883a 	mov	r5,r21
    570c:	00077c00 	call	77c0 <_Bfree>
    5710:	8000041e 	bne	r16,zero,5724 <_dtoa_r+0x9b8>
    5714:	d8801717 	ldw	r2,92(sp)
    5718:	1000021e 	bne	r2,zero,5724 <_dtoa_r+0x9b8>
    571c:	e004c03a 	cmpne	r2,fp,zero
    5720:	10011726 	beq	r2,zero,5b80 <_dtoa_r+0xe14>
    5724:	a0010616 	blt	r20,zero,5b40 <_dtoa_r+0xdd4>
    5728:	a000041e 	bne	r20,zero,573c <_dtoa_r+0x9d0>
    572c:	d8c01717 	ldw	r3,92(sp)
    5730:	1800021e 	bne	r3,zero,573c <_dtoa_r+0x9d0>
    5734:	e004c03a 	cmpne	r2,fp,zero
    5738:	10010126 	beq	r2,zero,5b40 <_dtoa_r+0xdd4>
    573c:	04023d16 	blt	zero,r16,6034 <_dtoa_r+0x12c8>
    5740:	b5c00005 	stb	r23,0(r22)
    5744:	d9800517 	ldw	r6,20(sp)
    5748:	d9000f17 	ldw	r4,60(sp)
    574c:	b5800044 	addi	r22,r22,1
    5750:	3105883a 	add	r2,r6,r4
    5754:	b0806526 	beq	r22,r2,58ec <_dtoa_r+0xb80>
    5758:	d9400717 	ldw	r5,28(sp)
    575c:	d9001617 	ldw	r4,88(sp)
    5760:	01800284 	movi	r6,10
    5764:	000f883a 	mov	r7,zero
    5768:	00084740 	call	8474 <__multadd>
    576c:	d8800715 	stw	r2,28(sp)
    5770:	d8800617 	ldw	r2,24(sp)
    5774:	14c10c26 	beq	r2,r19,5ba8 <_dtoa_r+0xe3c>
    5778:	d9400617 	ldw	r5,24(sp)
    577c:	d9001617 	ldw	r4,88(sp)
    5780:	01800284 	movi	r6,10
    5784:	000f883a 	mov	r7,zero
    5788:	00084740 	call	8474 <__multadd>
    578c:	d9001617 	ldw	r4,88(sp)
    5790:	980b883a 	mov	r5,r19
    5794:	01800284 	movi	r6,10
    5798:	000f883a 	mov	r7,zero
    579c:	d8800615 	stw	r2,24(sp)
    57a0:	00084740 	call	8474 <__multadd>
    57a4:	1027883a 	mov	r19,r2
    57a8:	003fc206 	br	56b4 <_dtoa_r+0x948>
    57ac:	2445c83a 	sub	r2,r4,r17
    57b0:	a088983a 	sll	r4,r20,r2
    57b4:	003e4b06 	br	50e4 <_dtoa_r+0x378>
    57b8:	01bfffc4 	movi	r6,-1
    57bc:	00800044 	movi	r2,1
    57c0:	d9800e15 	stw	r6,56(sp)
    57c4:	d9800f15 	stw	r6,60(sp)
    57c8:	d8800b15 	stw	r2,44(sp)
    57cc:	d8c01617 	ldw	r3,88(sp)
    57d0:	008005c4 	movi	r2,23
    57d4:	18001115 	stw	zero,68(r3)
    57d8:	1580082e 	bgeu	r2,r22,57fc <_dtoa_r+0xa90>
    57dc:	00c00104 	movi	r3,4
    57e0:	0009883a 	mov	r4,zero
    57e4:	18c7883a 	add	r3,r3,r3
    57e8:	18800504 	addi	r2,r3,20
    57ec:	21000044 	addi	r4,r4,1
    57f0:	b0bffc2e 	bgeu	r22,r2,57e4 <_dtoa_r+0xa78>
    57f4:	d9801617 	ldw	r6,88(sp)
    57f8:	31001115 	stw	r4,68(r6)
    57fc:	dc000f17 	ldw	r16,60(sp)
    5800:	003e4b06 	br	5130 <_dtoa_r+0x3c4>
    5804:	d9801717 	ldw	r6,92(sp)
    5808:	0023883a 	mov	r17,zero
    580c:	31bfff04 	addi	r6,r6,-4
    5810:	d9801715 	stw	r6,92(sp)
    5814:	003df806 	br	4ff8 <_dtoa_r+0x28c>
    5818:	00800804 	movi	r2,32
    581c:	10c9c83a 	sub	r4,r2,r3
    5820:	00c00104 	movi	r3,4
    5824:	19005a16 	blt	r3,r4,5990 <_dtoa_r+0xc24>
    5828:	008000c4 	movi	r2,3
    582c:	113f7e16 	blt	r2,r4,5628 <_dtoa_r+0x8bc>
    5830:	20800704 	addi	r2,r4,28
    5834:	003f7506 	br	560c <_dtoa_r+0x8a0>
    5838:	d9801717 	ldw	r6,92(sp)
    583c:	00800044 	movi	r2,1
    5840:	1180a10e 	bge	r2,r6,5ac8 <_dtoa_r+0xd5c>
    5844:	d9800f17 	ldw	r6,60(sp)
    5848:	d8c01017 	ldw	r3,64(sp)
    584c:	30bfffc4 	addi	r2,r6,-1
    5850:	1881c616 	blt	r3,r2,5f6c <_dtoa_r+0x1200>
    5854:	18a5c83a 	sub	r18,r3,r2
    5858:	d8800f17 	ldw	r2,60(sp)
    585c:	10026216 	blt	r2,zero,61e8 <_dtoa_r+0x147c>
    5860:	dc001117 	ldw	r16,68(sp)
    5864:	1007883a 	mov	r3,r2
    5868:	d9800a17 	ldw	r6,40(sp)
    586c:	d8801117 	ldw	r2,68(sp)
    5870:	d9001617 	ldw	r4,88(sp)
    5874:	30cd883a 	add	r6,r6,r3
    5878:	10c5883a 	add	r2,r2,r3
    587c:	01400044 	movi	r5,1
    5880:	d9800a15 	stw	r6,40(sp)
    5884:	d8801115 	stw	r2,68(sp)
    5888:	00084380 	call	8438 <__i2b>
    588c:	1027883a 	mov	r19,r2
    5890:	003f2506 	br	5528 <_dtoa_r+0x7bc>
    5894:	00c00074 	movhi	r3,1
    5898:	18f97404 	addi	r3,r3,-6704
    589c:	003d6706 	br	4e3c <_dtoa_r+0xd0>
    58a0:	dd800517 	ldw	r22,20(sp)
    58a4:	04000044 	movi	r16,1
    58a8:	00000706 	br	58c8 <_dtoa_r+0xb5c>
    58ac:	d9400717 	ldw	r5,28(sp)
    58b0:	d9001617 	ldw	r4,88(sp)
    58b4:	01800284 	movi	r6,10
    58b8:	000f883a 	mov	r7,zero
    58bc:	00084740 	call	8474 <__multadd>
    58c0:	d8800715 	stw	r2,28(sp)
    58c4:	84000044 	addi	r16,r16,1
    58c8:	d9000717 	ldw	r4,28(sp)
    58cc:	900b883a 	mov	r5,r18
    58d0:	0004b540 	call	4b54 <quorem>
    58d4:	15c00c04 	addi	r23,r2,48
    58d8:	b5c00005 	stb	r23,0(r22)
    58dc:	d8c00f17 	ldw	r3,60(sp)
    58e0:	b5800044 	addi	r22,r22,1
    58e4:	80fff116 	blt	r16,r3,58ac <_dtoa_r+0xb40>
    58e8:	d8000615 	stw	zero,24(sp)
    58ec:	d9400717 	ldw	r5,28(sp)
    58f0:	d9001617 	ldw	r4,88(sp)
    58f4:	01800044 	movi	r6,1
    58f8:	00081040 	call	8104 <__lshift>
    58fc:	1009883a 	mov	r4,r2
    5900:	900b883a 	mov	r5,r18
    5904:	d8800715 	stw	r2,28(sp)
    5908:	000791c0 	call	791c <__mcmp>
    590c:	00803c0e 	bge	zero,r2,5a00 <_dtoa_r+0xc94>
    5910:	b009883a 	mov	r4,r22
    5914:	213fffc4 	addi	r4,r4,-1
    5918:	21400003 	ldbu	r5,0(r4)
    591c:	00800e44 	movi	r2,57
    5920:	28c03fcc 	andi	r3,r5,255
    5924:	18c0201c 	xori	r3,r3,128
    5928:	18ffe004 	addi	r3,r3,-128
    592c:	1881981e 	bne	r3,r2,5f90 <_dtoa_r+0x1224>
    5930:	d9800517 	ldw	r6,20(sp)
    5934:	21bff71e 	bne	r4,r6,5914 <_dtoa_r+0xba8>
    5938:	d8800d17 	ldw	r2,52(sp)
    593c:	37000044 	addi	fp,r6,1
    5940:	10800044 	addi	r2,r2,1
    5944:	d8800d15 	stw	r2,52(sp)
    5948:	00800c44 	movi	r2,49
    594c:	30800005 	stb	r2,0(r6)
    5950:	d9001617 	ldw	r4,88(sp)
    5954:	900b883a 	mov	r5,r18
    5958:	00077c00 	call	77c0 <_Bfree>
    595c:	983ecd26 	beq	r19,zero,5494 <_dtoa_r+0x728>
    5960:	d8c00617 	ldw	r3,24(sp)
    5964:	18000426 	beq	r3,zero,5978 <_dtoa_r+0xc0c>
    5968:	1cc00326 	beq	r3,r19,5978 <_dtoa_r+0xc0c>
    596c:	d9001617 	ldw	r4,88(sp)
    5970:	180b883a 	mov	r5,r3
    5974:	00077c00 	call	77c0 <_Bfree>
    5978:	d9001617 	ldw	r4,88(sp)
    597c:	980b883a 	mov	r5,r19
    5980:	00077c00 	call	77c0 <_Bfree>
    5984:	003ec306 	br	5494 <_dtoa_r+0x728>
    5988:	1805883a 	mov	r2,r3
    598c:	003eeb06 	br	553c <_dtoa_r+0x7d0>
    5990:	d9800a17 	ldw	r6,40(sp)
    5994:	d8c01117 	ldw	r3,68(sp)
    5998:	20bfff04 	addi	r2,r4,-4
    599c:	308d883a 	add	r6,r6,r2
    59a0:	1887883a 	add	r3,r3,r2
    59a4:	80a1883a 	add	r16,r16,r2
    59a8:	d9800a15 	stw	r6,40(sp)
    59ac:	d8c01115 	stw	r3,68(sp)
    59b0:	003f1d06 	br	5628 <_dtoa_r+0x8bc>
    59b4:	a03f0c1e 	bne	r20,zero,55e8 <_dtoa_r+0x87c>
    59b8:	00800434 	movhi	r2,16
    59bc:	10bfffc4 	addi	r2,r2,-1
    59c0:	a884703a 	and	r2,r21,r2
    59c4:	103f081e 	bne	r2,zero,55e8 <_dtoa_r+0x87c>
    59c8:	a89ffc2c 	andhi	r2,r21,32752
    59cc:	103f0626 	beq	r2,zero,55e8 <_dtoa_r+0x87c>
    59d0:	d8c01117 	ldw	r3,68(sp)
    59d4:	d9000a17 	ldw	r4,40(sp)
    59d8:	18c00044 	addi	r3,r3,1
    59dc:	21000044 	addi	r4,r4,1
    59e0:	d8c01115 	stw	r3,68(sp)
    59e4:	d9000a15 	stw	r4,40(sp)
    59e8:	003f0006 	br	55ec <_dtoa_r+0x880>
    59ec:	d9400717 	ldw	r5,28(sp)
    59f0:	d9001617 	ldw	r4,88(sp)
    59f4:	00085740 	call	8574 <__pow5mult>
    59f8:	d8800715 	stw	r2,28(sp)
    59fc:	003eed06 	br	55b4 <_dtoa_r+0x848>
    5a00:	1000021e 	bne	r2,zero,5a0c <_dtoa_r+0xca0>
    5a04:	b880004c 	andi	r2,r23,1
    5a08:	103fc11e 	bne	r2,zero,5910 <_dtoa_r+0xba4>
    5a0c:	b5bfffc4 	addi	r22,r22,-1
    5a10:	b0c00007 	ldb	r3,0(r22)
    5a14:	00800c04 	movi	r2,48
    5a18:	18bffc26 	beq	r3,r2,5a0c <_dtoa_r+0xca0>
    5a1c:	b7000044 	addi	fp,r22,1
    5a20:	003fcb06 	br	5950 <_dtoa_r+0xbe4>
    5a24:	d9800d17 	ldw	r6,52(sp)
    5a28:	018fc83a 	sub	r7,zero,r6
    5a2c:	3801f726 	beq	r7,zero,620c <_dtoa_r+0x14a0>
    5a30:	398003cc 	andi	r6,r7,15
    5a34:	300c90fa 	slli	r6,r6,3
    5a38:	01400074 	movhi	r5,1
    5a3c:	29799104 	addi	r5,r5,-6588
    5a40:	d9001217 	ldw	r4,72(sp)
    5a44:	314d883a 	add	r6,r6,r5
    5a48:	30c00117 	ldw	r3,4(r6)
    5a4c:	30800017 	ldw	r2,0(r6)
    5a50:	d9401317 	ldw	r5,76(sp)
    5a54:	3821d13a 	srai	r16,r7,4
    5a58:	100d883a 	mov	r6,r2
    5a5c:	180f883a 	mov	r7,r3
    5a60:	000a5440 	call	a544 <__muldf3>
    5a64:	1011883a 	mov	r8,r2
    5a68:	1813883a 	mov	r9,r3
    5a6c:	1029883a 	mov	r20,r2
    5a70:	182b883a 	mov	r21,r3
    5a74:	8001e526 	beq	r16,zero,620c <_dtoa_r+0x14a0>
    5a78:	05800084 	movi	r22,2
    5a7c:	04400074 	movhi	r17,1
    5a80:	8c79c304 	addi	r17,r17,-6388
    5a84:	8080004c 	andi	r2,r16,1
    5a88:	1005003a 	cmpeq	r2,r2,zero
    5a8c:	1000081e 	bne	r2,zero,5ab0 <_dtoa_r+0xd44>
    5a90:	89800017 	ldw	r6,0(r17)
    5a94:	89c00117 	ldw	r7,4(r17)
    5a98:	480b883a 	mov	r5,r9
    5a9c:	4009883a 	mov	r4,r8
    5aa0:	000a5440 	call	a544 <__muldf3>
    5aa4:	1011883a 	mov	r8,r2
    5aa8:	b5800044 	addi	r22,r22,1
    5aac:	1813883a 	mov	r9,r3
    5ab0:	8021d07a 	srai	r16,r16,1
    5ab4:	8c400204 	addi	r17,r17,8
    5ab8:	803ff21e 	bne	r16,zero,5a84 <_dtoa_r+0xd18>
    5abc:	4029883a 	mov	r20,r8
    5ac0:	482b883a 	mov	r21,r9
    5ac4:	003dca06 	br	51f0 <_dtoa_r+0x484>
    5ac8:	d9000817 	ldw	r4,32(sp)
    5acc:	2005003a 	cmpeq	r2,r4,zero
    5ad0:	1001f61e 	bne	r2,zero,62ac <_dtoa_r+0x1540>
    5ad4:	dc001117 	ldw	r16,68(sp)
    5ad8:	dc801017 	ldw	r18,64(sp)
    5adc:	18c10cc4 	addi	r3,r3,1075
    5ae0:	003f6106 	br	5868 <_dtoa_r+0xafc>
    5ae4:	d8000b15 	stw	zero,44(sp)
    5ae8:	d9802617 	ldw	r6,152(sp)
    5aec:	d8c00d17 	ldw	r3,52(sp)
    5af0:	30800044 	addi	r2,r6,1
    5af4:	18ad883a 	add	r22,r3,r2
    5af8:	b13fffc4 	addi	r4,r22,-1
    5afc:	d9000e15 	stw	r4,56(sp)
    5b00:	0581f60e 	bge	zero,r22,62dc <_dtoa_r+0x1570>
    5b04:	dd800f15 	stw	r22,60(sp)
    5b08:	003f3006 	br	57cc <_dtoa_r+0xa60>
    5b0c:	d8000b15 	stw	zero,44(sp)
    5b10:	d9002617 	ldw	r4,152(sp)
    5b14:	0101eb0e 	bge	zero,r4,62c4 <_dtoa_r+0x1558>
    5b18:	202d883a 	mov	r22,r4
    5b1c:	d9000e15 	stw	r4,56(sp)
    5b20:	d9000f15 	stw	r4,60(sp)
    5b24:	003f2906 	br	57cc <_dtoa_r+0xa60>
    5b28:	01800044 	movi	r6,1
    5b2c:	d9800b15 	stw	r6,44(sp)
    5b30:	003ff706 	br	5b10 <_dtoa_r+0xda4>
    5b34:	01000044 	movi	r4,1
    5b38:	d9000b15 	stw	r4,44(sp)
    5b3c:	003fea06 	br	5ae8 <_dtoa_r+0xd7c>
    5b40:	04000c0e 	bge	zero,r16,5b74 <_dtoa_r+0xe08>
    5b44:	d9400717 	ldw	r5,28(sp)
    5b48:	d9001617 	ldw	r4,88(sp)
    5b4c:	01800044 	movi	r6,1
    5b50:	00081040 	call	8104 <__lshift>
    5b54:	1009883a 	mov	r4,r2
    5b58:	900b883a 	mov	r5,r18
    5b5c:	d8800715 	stw	r2,28(sp)
    5b60:	000791c0 	call	791c <__mcmp>
    5b64:	0081e00e 	bge	zero,r2,62e8 <_dtoa_r+0x157c>
    5b68:	bdc00044 	addi	r23,r23,1
    5b6c:	00800e84 	movi	r2,58
    5b70:	b881a226 	beq	r23,r2,61fc <_dtoa_r+0x1490>
    5b74:	b7000044 	addi	fp,r22,1
    5b78:	b5c00005 	stb	r23,0(r22)
    5b7c:	003f7406 	br	5950 <_dtoa_r+0xbe4>
    5b80:	00800e44 	movi	r2,57
    5b84:	b8819d26 	beq	r23,r2,61fc <_dtoa_r+0x1490>
    5b88:	053ffa0e 	bge	zero,r20,5b74 <_dtoa_r+0xe08>
    5b8c:	8dc00c44 	addi	r23,r17,49
    5b90:	003ff806 	br	5b74 <_dtoa_r+0xe08>
    5b94:	d9001617 	ldw	r4,88(sp)
    5b98:	a80b883a 	mov	r5,r21
    5b9c:	04000044 	movi	r16,1
    5ba0:	00077c00 	call	77c0 <_Bfree>
    5ba4:	003edf06 	br	5724 <_dtoa_r+0x9b8>
    5ba8:	d9001617 	ldw	r4,88(sp)
    5bac:	980b883a 	mov	r5,r19
    5bb0:	01800284 	movi	r6,10
    5bb4:	000f883a 	mov	r7,zero
    5bb8:	00084740 	call	8474 <__multadd>
    5bbc:	1027883a 	mov	r19,r2
    5bc0:	d8800615 	stw	r2,24(sp)
    5bc4:	003ebb06 	br	56b4 <_dtoa_r+0x948>
    5bc8:	d9801117 	ldw	r6,68(sp)
    5bcc:	d8800d17 	ldw	r2,52(sp)
    5bd0:	d8000915 	stw	zero,36(sp)
    5bd4:	308dc83a 	sub	r6,r6,r2
    5bd8:	0087c83a 	sub	r3,zero,r2
    5bdc:	d9801115 	stw	r6,68(sp)
    5be0:	d8c01015 	stw	r3,64(sp)
    5be4:	003cfe06 	br	4fe0 <_dtoa_r+0x274>
    5be8:	018dc83a 	sub	r6,zero,r6
    5bec:	d9801115 	stw	r6,68(sp)
    5bf0:	d8000a15 	stw	zero,40(sp)
    5bf4:	003cf306 	br	4fc4 <_dtoa_r+0x258>
    5bf8:	d9000d17 	ldw	r4,52(sp)
    5bfc:	000ae080 	call	ae08 <__floatsidf>
    5c00:	880b883a 	mov	r5,r17
    5c04:	8009883a 	mov	r4,r16
    5c08:	180f883a 	mov	r7,r3
    5c0c:	100d883a 	mov	r6,r2
    5c10:	000abe80 	call	abe8 <__nedf2>
    5c14:	103ce126 	beq	r2,zero,4f9c <_dtoa_r+0x230>
    5c18:	d9800d17 	ldw	r6,52(sp)
    5c1c:	31bfffc4 	addi	r6,r6,-1
    5c20:	d9800d15 	stw	r6,52(sp)
    5c24:	003cdd06 	br	4f9c <_dtoa_r+0x230>
    5c28:	d9000717 	ldw	r4,28(sp)
    5c2c:	900b883a 	mov	r5,r18
    5c30:	000791c0 	call	791c <__mcmp>
    5c34:	103e8d0e 	bge	r2,zero,566c <_dtoa_r+0x900>
    5c38:	d9400717 	ldw	r5,28(sp)
    5c3c:	d9001617 	ldw	r4,88(sp)
    5c40:	01800284 	movi	r6,10
    5c44:	000f883a 	mov	r7,zero
    5c48:	00084740 	call	8474 <__multadd>
    5c4c:	d9800d17 	ldw	r6,52(sp)
    5c50:	d8800715 	stw	r2,28(sp)
    5c54:	31bfffc4 	addi	r6,r6,-1
    5c58:	d9800d15 	stw	r6,52(sp)
    5c5c:	b001a71e 	bne	r22,zero,62fc <_dtoa_r+0x1590>
    5c60:	d8800e17 	ldw	r2,56(sp)
    5c64:	d8800f15 	stw	r2,60(sp)
    5c68:	003e8006 	br	566c <_dtoa_r+0x900>
    5c6c:	90800417 	ldw	r2,16(r18)
    5c70:	1085883a 	add	r2,r2,r2
    5c74:	1085883a 	add	r2,r2,r2
    5c78:	1485883a 	add	r2,r2,r18
    5c7c:	11000417 	ldw	r4,16(r2)
    5c80:	00077e80 	call	77e8 <__hi0bits>
    5c84:	00c00804 	movi	r3,32
    5c88:	1887c83a 	sub	r3,r3,r2
    5c8c:	003e5a06 	br	55f8 <_dtoa_r+0x88c>
    5c90:	d9400717 	ldw	r5,28(sp)
    5c94:	d9801017 	ldw	r6,64(sp)
    5c98:	d9001617 	ldw	r4,88(sp)
    5c9c:	00085740 	call	8574 <__pow5mult>
    5ca0:	d8800715 	stw	r2,28(sp)
    5ca4:	003e4306 	br	55b4 <_dtoa_r+0x848>
    5ca8:	d9800f17 	ldw	r6,60(sp)
    5cac:	d8800d17 	ldw	r2,52(sp)
    5cb0:	d9800315 	stw	r6,12(sp)
    5cb4:	d8800415 	stw	r2,16(sp)
    5cb8:	d8c00b17 	ldw	r3,44(sp)
    5cbc:	1805003a 	cmpeq	r2,r3,zero
    5cc0:	1000e21e 	bne	r2,zero,604c <_dtoa_r+0x12e0>
    5cc4:	d9000317 	ldw	r4,12(sp)
    5cc8:	0005883a 	mov	r2,zero
    5ccc:	00cff834 	movhi	r3,16352
    5cd0:	200c90fa 	slli	r6,r4,3
    5cd4:	01000074 	movhi	r4,1
    5cd8:	21399104 	addi	r4,r4,-6588
    5cdc:	180b883a 	mov	r5,r3
    5ce0:	310d883a 	add	r6,r6,r4
    5ce4:	327fff17 	ldw	r9,-4(r6)
    5ce8:	323ffe17 	ldw	r8,-8(r6)
    5cec:	1009883a 	mov	r4,r2
    5cf0:	480f883a 	mov	r7,r9
    5cf4:	400d883a 	mov	r6,r8
    5cf8:	000a9080 	call	a908 <__divdf3>
    5cfc:	180b883a 	mov	r5,r3
    5d00:	b00d883a 	mov	r6,r22
    5d04:	b80f883a 	mov	r7,r23
    5d08:	1009883a 	mov	r4,r2
    5d0c:	000a4500 	call	a450 <__subdf3>
    5d10:	a80b883a 	mov	r5,r21
    5d14:	a009883a 	mov	r4,r20
    5d18:	d8c01915 	stw	r3,100(sp)
    5d1c:	d8801815 	stw	r2,96(sp)
    5d20:	000af000 	call	af00 <__fixdfsi>
    5d24:	1009883a 	mov	r4,r2
    5d28:	1027883a 	mov	r19,r2
    5d2c:	000ae080 	call	ae08 <__floatsidf>
    5d30:	a80b883a 	mov	r5,r21
    5d34:	a009883a 	mov	r4,r20
    5d38:	180f883a 	mov	r7,r3
    5d3c:	100d883a 	mov	r6,r2
    5d40:	000a4500 	call	a450 <__subdf3>
    5d44:	d9801817 	ldw	r6,96(sp)
    5d48:	1823883a 	mov	r17,r3
    5d4c:	d8801415 	stw	r2,80(sp)
    5d50:	302d883a 	mov	r22,r6
    5d54:	d9800517 	ldw	r6,20(sp)
    5d58:	9cc00c04 	addi	r19,r19,48
    5d5c:	dc401515 	stw	r17,84(sp)
    5d60:	d8c01917 	ldw	r3,100(sp)
    5d64:	34c00005 	stb	r19,0(r6)
    5d68:	d8800517 	ldw	r2,20(sp)
    5d6c:	d9401917 	ldw	r5,100(sp)
    5d70:	d9801417 	ldw	r6,80(sp)
    5d74:	b009883a 	mov	r4,r22
    5d78:	880f883a 	mov	r7,r17
    5d7c:	182f883a 	mov	r23,r3
    5d80:	17000044 	addi	fp,r2,1
    5d84:	000ac700 	call	ac70 <__gtdf2>
    5d88:	00804e16 	blt	zero,r2,5ec4 <_dtoa_r+0x1158>
    5d8c:	d9801417 	ldw	r6,80(sp)
    5d90:	0005883a 	mov	r2,zero
    5d94:	00cffc34 	movhi	r3,16368
    5d98:	180b883a 	mov	r5,r3
    5d9c:	880f883a 	mov	r7,r17
    5da0:	1009883a 	mov	r4,r2
    5da4:	000a4500 	call	a450 <__subdf3>
    5da8:	d9401917 	ldw	r5,100(sp)
    5dac:	180f883a 	mov	r7,r3
    5db0:	b009883a 	mov	r4,r22
    5db4:	100d883a 	mov	r6,r2
    5db8:	000ac700 	call	ac70 <__gtdf2>
    5dbc:	00bda216 	blt	zero,r2,5448 <_dtoa_r+0x6dc>
    5dc0:	d8c00317 	ldw	r3,12(sp)
    5dc4:	00800044 	movi	r2,1
    5dc8:	10c01216 	blt	r2,r3,5e14 <_dtoa_r+0x10a8>
    5dcc:	003d4506 	br	52e4 <_dtoa_r+0x578>
    5dd0:	d9801417 	ldw	r6,80(sp)
    5dd4:	0005883a 	mov	r2,zero
    5dd8:	00cffc34 	movhi	r3,16368
    5ddc:	180b883a 	mov	r5,r3
    5de0:	880f883a 	mov	r7,r17
    5de4:	1009883a 	mov	r4,r2
    5de8:	000a4500 	call	a450 <__subdf3>
    5dec:	d9c01b17 	ldw	r7,108(sp)
    5df0:	180b883a 	mov	r5,r3
    5df4:	1009883a 	mov	r4,r2
    5df8:	b00d883a 	mov	r6,r22
    5dfc:	000ad800 	call	ad80 <__ltdf2>
    5e00:	103d9116 	blt	r2,zero,5448 <_dtoa_r+0x6dc>
    5e04:	d9800517 	ldw	r6,20(sp)
    5e08:	d9000317 	ldw	r4,12(sp)
    5e0c:	3105883a 	add	r2,r6,r4
    5e10:	e0bd3426 	beq	fp,r2,52e4 <_dtoa_r+0x578>
    5e14:	04500934 	movhi	r17,16420
    5e18:	0021883a 	mov	r16,zero
    5e1c:	b80b883a 	mov	r5,r23
    5e20:	b009883a 	mov	r4,r22
    5e24:	800d883a 	mov	r6,r16
    5e28:	880f883a 	mov	r7,r17
    5e2c:	000a5440 	call	a544 <__muldf3>
    5e30:	d9401517 	ldw	r5,84(sp)
    5e34:	d9001417 	ldw	r4,80(sp)
    5e38:	880f883a 	mov	r7,r17
    5e3c:	000d883a 	mov	r6,zero
    5e40:	d8801a15 	stw	r2,104(sp)
    5e44:	d8c01b15 	stw	r3,108(sp)
    5e48:	000a5440 	call	a544 <__muldf3>
    5e4c:	180b883a 	mov	r5,r3
    5e50:	1009883a 	mov	r4,r2
    5e54:	1823883a 	mov	r17,r3
    5e58:	1021883a 	mov	r16,r2
    5e5c:	000af000 	call	af00 <__fixdfsi>
    5e60:	1009883a 	mov	r4,r2
    5e64:	102b883a 	mov	r21,r2
    5e68:	000ae080 	call	ae08 <__floatsidf>
    5e6c:	880b883a 	mov	r5,r17
    5e70:	8009883a 	mov	r4,r16
    5e74:	180f883a 	mov	r7,r3
    5e78:	100d883a 	mov	r6,r2
    5e7c:	000a4500 	call	a450 <__subdf3>
    5e80:	1021883a 	mov	r16,r2
    5e84:	d9001b17 	ldw	r4,108(sp)
    5e88:	1823883a 	mov	r17,r3
    5e8c:	dc001415 	stw	r16,80(sp)
    5e90:	ad400c04 	addi	r21,r21,48
    5e94:	dc401515 	stw	r17,84(sp)
    5e98:	d8801a17 	ldw	r2,104(sp)
    5e9c:	e5400005 	stb	r21,0(fp)
    5ea0:	202f883a 	mov	r23,r4
    5ea4:	d9c01b17 	ldw	r7,108(sp)
    5ea8:	d9001417 	ldw	r4,80(sp)
    5eac:	880b883a 	mov	r5,r17
    5eb0:	100d883a 	mov	r6,r2
    5eb4:	102d883a 	mov	r22,r2
    5eb8:	e7000044 	addi	fp,fp,1
    5ebc:	000ad800 	call	ad80 <__ltdf2>
    5ec0:	103fc30e 	bge	r2,zero,5dd0 <_dtoa_r+0x1064>
    5ec4:	d9000417 	ldw	r4,16(sp)
    5ec8:	d9000d15 	stw	r4,52(sp)
    5ecc:	003d7106 	br	5494 <_dtoa_r+0x728>
    5ed0:	d9801717 	ldw	r6,92(sp)
    5ed4:	00800084 	movi	r2,2
    5ed8:	11bde60e 	bge	r2,r6,5674 <_dtoa_r+0x908>
    5edc:	203cfb1e 	bne	r4,zero,52cc <_dtoa_r+0x560>
    5ee0:	d9001617 	ldw	r4,88(sp)
    5ee4:	900b883a 	mov	r5,r18
    5ee8:	01800144 	movi	r6,5
    5eec:	000f883a 	mov	r7,zero
    5ef0:	00084740 	call	8474 <__multadd>
    5ef4:	d9000717 	ldw	r4,28(sp)
    5ef8:	100b883a 	mov	r5,r2
    5efc:	1025883a 	mov	r18,r2
    5f00:	000791c0 	call	791c <__mcmp>
    5f04:	00bcf10e 	bge	zero,r2,52cc <_dtoa_r+0x560>
    5f08:	d8c00d17 	ldw	r3,52(sp)
    5f0c:	d9000517 	ldw	r4,20(sp)
    5f10:	d8000615 	stw	zero,24(sp)
    5f14:	18c00044 	addi	r3,r3,1
    5f18:	d8c00d15 	stw	r3,52(sp)
    5f1c:	00800c44 	movi	r2,49
    5f20:	27000044 	addi	fp,r4,1
    5f24:	20800005 	stb	r2,0(r4)
    5f28:	003e8906 	br	5950 <_dtoa_r+0xbe4>
    5f2c:	d8c00517 	ldw	r3,20(sp)
    5f30:	003bc206 	br	4e3c <_dtoa_r+0xd0>
    5f34:	01800074 	movhi	r6,1
    5f38:	31b9c304 	addi	r6,r6,-6388
    5f3c:	30c00917 	ldw	r3,36(r6)
    5f40:	30800817 	ldw	r2,32(r6)
    5f44:	d9001217 	ldw	r4,72(sp)
    5f48:	d9401317 	ldw	r5,76(sp)
    5f4c:	180f883a 	mov	r7,r3
    5f50:	100d883a 	mov	r6,r2
    5f54:	000a9080 	call	a908 <__divdf3>
    5f58:	948003cc 	andi	r18,r18,15
    5f5c:	058000c4 	movi	r22,3
    5f60:	1029883a 	mov	r20,r2
    5f64:	182b883a 	mov	r21,r3
    5f68:	003c8906 	br	5190 <_dtoa_r+0x424>
    5f6c:	d9001017 	ldw	r4,64(sp)
    5f70:	d9800917 	ldw	r6,36(sp)
    5f74:	0025883a 	mov	r18,zero
    5f78:	1105c83a 	sub	r2,r2,r4
    5f7c:	2089883a 	add	r4,r4,r2
    5f80:	308d883a 	add	r6,r6,r2
    5f84:	d9001015 	stw	r4,64(sp)
    5f88:	d9800915 	stw	r6,36(sp)
    5f8c:	003e3206 	br	5858 <_dtoa_r+0xaec>
    5f90:	28800044 	addi	r2,r5,1
    5f94:	27000044 	addi	fp,r4,1
    5f98:	20800005 	stb	r2,0(r4)
    5f9c:	003e6c06 	br	5950 <_dtoa_r+0xbe4>
    5fa0:	d8800f17 	ldw	r2,60(sp)
    5fa4:	00bce016 	blt	zero,r2,5328 <_dtoa_r+0x5bc>
    5fa8:	d9800f17 	ldw	r6,60(sp)
    5fac:	303cc51e 	bne	r6,zero,52c4 <_dtoa_r+0x558>
    5fb0:	0005883a 	mov	r2,zero
    5fb4:	00d00534 	movhi	r3,16404
    5fb8:	980b883a 	mov	r5,r19
    5fbc:	180f883a 	mov	r7,r3
    5fc0:	9009883a 	mov	r4,r18
    5fc4:	100d883a 	mov	r6,r2
    5fc8:	000a5440 	call	a544 <__muldf3>
    5fcc:	180b883a 	mov	r5,r3
    5fd0:	a80f883a 	mov	r7,r21
    5fd4:	1009883a 	mov	r4,r2
    5fd8:	a00d883a 	mov	r6,r20
    5fdc:	000acf80 	call	acf8 <__gedf2>
    5fe0:	103cb80e 	bge	r2,zero,52c4 <_dtoa_r+0x558>
    5fe4:	0027883a 	mov	r19,zero
    5fe8:	0025883a 	mov	r18,zero
    5fec:	003fc606 	br	5f08 <_dtoa_r+0x119c>
    5ff0:	99400117 	ldw	r5,4(r19)
    5ff4:	d9001617 	ldw	r4,88(sp)
    5ff8:	0007d400 	call	7d40 <_Balloc>
    5ffc:	99800417 	ldw	r6,16(r19)
    6000:	11000304 	addi	r4,r2,12
    6004:	99400304 	addi	r5,r19,12
    6008:	318d883a 	add	r6,r6,r6
    600c:	318d883a 	add	r6,r6,r6
    6010:	31800204 	addi	r6,r6,8
    6014:	1023883a 	mov	r17,r2
    6018:	00075a80 	call	75a8 <memcpy>
    601c:	d9001617 	ldw	r4,88(sp)
    6020:	880b883a 	mov	r5,r17
    6024:	01800044 	movi	r6,1
    6028:	00081040 	call	8104 <__lshift>
    602c:	100b883a 	mov	r5,r2
    6030:	003d9c06 	br	56a4 <_dtoa_r+0x938>
    6034:	00800e44 	movi	r2,57
    6038:	b8807026 	beq	r23,r2,61fc <_dtoa_r+0x1490>
    603c:	b8800044 	addi	r2,r23,1
    6040:	b7000044 	addi	fp,r22,1
    6044:	b0800005 	stb	r2,0(r22)
    6048:	003e4106 	br	5950 <_dtoa_r+0xbe4>
    604c:	d8800317 	ldw	r2,12(sp)
    6050:	01800074 	movhi	r6,1
    6054:	31b99104 	addi	r6,r6,-6588
    6058:	b009883a 	mov	r4,r22
    605c:	100e90fa 	slli	r7,r2,3
    6060:	b80b883a 	mov	r5,r23
    6064:	398f883a 	add	r7,r7,r6
    6068:	38bffe17 	ldw	r2,-8(r7)
    606c:	d9800517 	ldw	r6,20(sp)
    6070:	38ffff17 	ldw	r3,-4(r7)
    6074:	37000044 	addi	fp,r6,1
    6078:	180f883a 	mov	r7,r3
    607c:	100d883a 	mov	r6,r2
    6080:	000a5440 	call	a544 <__muldf3>
    6084:	a80b883a 	mov	r5,r21
    6088:	a009883a 	mov	r4,r20
    608c:	182f883a 	mov	r23,r3
    6090:	102d883a 	mov	r22,r2
    6094:	000af000 	call	af00 <__fixdfsi>
    6098:	1009883a 	mov	r4,r2
    609c:	1027883a 	mov	r19,r2
    60a0:	000ae080 	call	ae08 <__floatsidf>
    60a4:	a80b883a 	mov	r5,r21
    60a8:	a009883a 	mov	r4,r20
    60ac:	180f883a 	mov	r7,r3
    60b0:	100d883a 	mov	r6,r2
    60b4:	000a4500 	call	a450 <__subdf3>
    60b8:	180b883a 	mov	r5,r3
    60bc:	d8c00517 	ldw	r3,20(sp)
    60c0:	9cc00c04 	addi	r19,r19,48
    60c4:	1009883a 	mov	r4,r2
    60c8:	1cc00005 	stb	r19,0(r3)
    60cc:	2021883a 	mov	r16,r4
    60d0:	d9000317 	ldw	r4,12(sp)
    60d4:	00800044 	movi	r2,1
    60d8:	2823883a 	mov	r17,r5
    60dc:	20802226 	beq	r4,r2,6168 <_dtoa_r+0x13fc>
    60e0:	1029883a 	mov	r20,r2
    60e4:	0005883a 	mov	r2,zero
    60e8:	00d00934 	movhi	r3,16420
    60ec:	180f883a 	mov	r7,r3
    60f0:	100d883a 	mov	r6,r2
    60f4:	880b883a 	mov	r5,r17
    60f8:	8009883a 	mov	r4,r16
    60fc:	000a5440 	call	a544 <__muldf3>
    6100:	180b883a 	mov	r5,r3
    6104:	1009883a 	mov	r4,r2
    6108:	1823883a 	mov	r17,r3
    610c:	1021883a 	mov	r16,r2
    6110:	000af000 	call	af00 <__fixdfsi>
    6114:	1009883a 	mov	r4,r2
    6118:	102b883a 	mov	r21,r2
    611c:	000ae080 	call	ae08 <__floatsidf>
    6120:	880b883a 	mov	r5,r17
    6124:	8009883a 	mov	r4,r16
    6128:	180f883a 	mov	r7,r3
    612c:	100d883a 	mov	r6,r2
    6130:	000a4500 	call	a450 <__subdf3>
    6134:	180b883a 	mov	r5,r3
    6138:	d8c00517 	ldw	r3,20(sp)
    613c:	1009883a 	mov	r4,r2
    6140:	ad400c04 	addi	r21,r21,48
    6144:	1d05883a 	add	r2,r3,r20
    6148:	15400005 	stb	r21,0(r2)
    614c:	2021883a 	mov	r16,r4
    6150:	d9000317 	ldw	r4,12(sp)
    6154:	a5000044 	addi	r20,r20,1
    6158:	2823883a 	mov	r17,r5
    615c:	a13fe11e 	bne	r20,r4,60e4 <_dtoa_r+0x1378>
    6160:	e505883a 	add	r2,fp,r20
    6164:	173fffc4 	addi	fp,r2,-1
    6168:	0025883a 	mov	r18,zero
    616c:	04cff834 	movhi	r19,16352
    6170:	b009883a 	mov	r4,r22
    6174:	b80b883a 	mov	r5,r23
    6178:	900d883a 	mov	r6,r18
    617c:	980f883a 	mov	r7,r19
    6180:	000a4d00 	call	a4d0 <__adddf3>
    6184:	180b883a 	mov	r5,r3
    6188:	1009883a 	mov	r4,r2
    618c:	800d883a 	mov	r6,r16
    6190:	880f883a 	mov	r7,r17
    6194:	000ad800 	call	ad80 <__ltdf2>
    6198:	103cab16 	blt	r2,zero,5448 <_dtoa_r+0x6dc>
    619c:	0009883a 	mov	r4,zero
    61a0:	980b883a 	mov	r5,r19
    61a4:	b80f883a 	mov	r7,r23
    61a8:	b00d883a 	mov	r6,r22
    61ac:	000a4500 	call	a450 <__subdf3>
    61b0:	180b883a 	mov	r5,r3
    61b4:	880f883a 	mov	r7,r17
    61b8:	1009883a 	mov	r4,r2
    61bc:	800d883a 	mov	r6,r16
    61c0:	000ac700 	call	ac70 <__gtdf2>
    61c4:	00bc470e 	bge	zero,r2,52e4 <_dtoa_r+0x578>
    61c8:	00c00c04 	movi	r3,48
    61cc:	e73fffc4 	addi	fp,fp,-1
    61d0:	e0800007 	ldb	r2,0(fp)
    61d4:	10fffd26 	beq	r2,r3,61cc <_dtoa_r+0x1460>
    61d8:	d9800417 	ldw	r6,16(sp)
    61dc:	e7000044 	addi	fp,fp,1
    61e0:	d9800d15 	stw	r6,52(sp)
    61e4:	003cab06 	br	5494 <_dtoa_r+0x728>
    61e8:	d8c00f17 	ldw	r3,60(sp)
    61ec:	d9001117 	ldw	r4,68(sp)
    61f0:	20e1c83a 	sub	r16,r4,r3
    61f4:	0007883a 	mov	r3,zero
    61f8:	003d9b06 	br	5868 <_dtoa_r+0xafc>
    61fc:	00800e44 	movi	r2,57
    6200:	b0800005 	stb	r2,0(r22)
    6204:	b5800044 	addi	r22,r22,1
    6208:	003dc106 	br	5910 <_dtoa_r+0xba4>
    620c:	05800084 	movi	r22,2
    6210:	003bf706 	br	51f0 <_dtoa_r+0x484>
    6214:	d9000f17 	ldw	r4,60(sp)
    6218:	013c000e 	bge	zero,r4,521c <_dtoa_r+0x4b0>
    621c:	d9800e17 	ldw	r6,56(sp)
    6220:	01bc300e 	bge	zero,r6,52e4 <_dtoa_r+0x578>
    6224:	0005883a 	mov	r2,zero
    6228:	00d00934 	movhi	r3,16420
    622c:	a80b883a 	mov	r5,r21
    6230:	180f883a 	mov	r7,r3
    6234:	a009883a 	mov	r4,r20
    6238:	100d883a 	mov	r6,r2
    623c:	000a5440 	call	a544 <__muldf3>
    6240:	b1000044 	addi	r4,r22,1
    6244:	1021883a 	mov	r16,r2
    6248:	1823883a 	mov	r17,r3
    624c:	000ae080 	call	ae08 <__floatsidf>
    6250:	880b883a 	mov	r5,r17
    6254:	8009883a 	mov	r4,r16
    6258:	180f883a 	mov	r7,r3
    625c:	100d883a 	mov	r6,r2
    6260:	000a5440 	call	a544 <__muldf3>
    6264:	0011883a 	mov	r8,zero
    6268:	02500734 	movhi	r9,16412
    626c:	180b883a 	mov	r5,r3
    6270:	480f883a 	mov	r7,r9
    6274:	1009883a 	mov	r4,r2
    6278:	400d883a 	mov	r6,r8
    627c:	000a4d00 	call	a4d0 <__adddf3>
    6280:	102d883a 	mov	r22,r2
    6284:	00bf3034 	movhi	r2,64704
    6288:	10ef883a 	add	r23,r2,r3
    628c:	d8800d17 	ldw	r2,52(sp)
    6290:	d8c00e17 	ldw	r3,56(sp)
    6294:	8029883a 	mov	r20,r16
    6298:	10bfffc4 	addi	r2,r2,-1
    629c:	882b883a 	mov	r21,r17
    62a0:	d8800415 	stw	r2,16(sp)
    62a4:	d8c00315 	stw	r3,12(sp)
    62a8:	003e8306 	br	5cb8 <_dtoa_r+0xf4c>
    62ac:	d8800117 	ldw	r2,4(sp)
    62b0:	dc001117 	ldw	r16,68(sp)
    62b4:	dc801017 	ldw	r18,64(sp)
    62b8:	00c00d84 	movi	r3,54
    62bc:	1887c83a 	sub	r3,r3,r2
    62c0:	003d6906 	br	5868 <_dtoa_r+0xafc>
    62c4:	01800044 	movi	r6,1
    62c8:	3021883a 	mov	r16,r6
    62cc:	d9800f15 	stw	r6,60(sp)
    62d0:	d9802615 	stw	r6,152(sp)
    62d4:	d9800e15 	stw	r6,56(sp)
    62d8:	003b9306 	br	5128 <_dtoa_r+0x3bc>
    62dc:	b021883a 	mov	r16,r22
    62e0:	dd800f15 	stw	r22,60(sp)
    62e4:	003b9006 	br	5128 <_dtoa_r+0x3bc>
    62e8:	103e221e 	bne	r2,zero,5b74 <_dtoa_r+0xe08>
    62ec:	b880004c 	andi	r2,r23,1
    62f0:	1005003a 	cmpeq	r2,r2,zero
    62f4:	103e1f1e 	bne	r2,zero,5b74 <_dtoa_r+0xe08>
    62f8:	003e1b06 	br	5b68 <_dtoa_r+0xdfc>
    62fc:	d9001617 	ldw	r4,88(sp)
    6300:	980b883a 	mov	r5,r19
    6304:	01800284 	movi	r6,10
    6308:	000f883a 	mov	r7,zero
    630c:	00084740 	call	8474 <__multadd>
    6310:	d8c00e17 	ldw	r3,56(sp)
    6314:	1027883a 	mov	r19,r2
    6318:	d8c00f15 	stw	r3,60(sp)
    631c:	003cd306 	br	566c <_dtoa_r+0x900>

00006320 <_fflush_r>:
    6320:	defffb04 	addi	sp,sp,-20
    6324:	dcc00315 	stw	r19,12(sp)
    6328:	dc800215 	stw	r18,8(sp)
    632c:	dfc00415 	stw	ra,16(sp)
    6330:	dc400115 	stw	r17,4(sp)
    6334:	dc000015 	stw	r16,0(sp)
    6338:	2027883a 	mov	r19,r4
    633c:	2825883a 	mov	r18,r5
    6340:	20000226 	beq	r4,zero,634c <_fflush_r+0x2c>
    6344:	20800e17 	ldw	r2,56(r4)
    6348:	10005626 	beq	r2,zero,64a4 <_fflush_r+0x184>
    634c:	9100030b 	ldhu	r4,12(r18)
    6350:	20ffffcc 	andi	r3,r4,65535
    6354:	18e0001c 	xori	r3,r3,32768
    6358:	18e00004 	addi	r3,r3,-32768
    635c:	1880020c 	andi	r2,r3,8
    6360:	1000261e 	bne	r2,zero,63fc <_fflush_r+0xdc>
    6364:	90c00117 	ldw	r3,4(r18)
    6368:	20820014 	ori	r2,r4,2048
    636c:	9080030d 	sth	r2,12(r18)
    6370:	1009883a 	mov	r4,r2
    6374:	00c0400e 	bge	zero,r3,6478 <_fflush_r+0x158>
    6378:	92000a17 	ldw	r8,40(r18)
    637c:	40004026 	beq	r8,zero,6480 <_fflush_r+0x160>
    6380:	2084000c 	andi	r2,r4,4096
    6384:	10005326 	beq	r2,zero,64d4 <_fflush_r+0x1b4>
    6388:	94001417 	ldw	r16,80(r18)
    638c:	9080030b 	ldhu	r2,12(r18)
    6390:	1080010c 	andi	r2,r2,4
    6394:	1000481e 	bne	r2,zero,64b8 <_fflush_r+0x198>
    6398:	91400717 	ldw	r5,28(r18)
    639c:	9809883a 	mov	r4,r19
    63a0:	800d883a 	mov	r6,r16
    63a4:	000f883a 	mov	r7,zero
    63a8:	403ee83a 	callr	r8
    63ac:	8080261e 	bne	r16,r2,6448 <_fflush_r+0x128>
    63b0:	9080030b 	ldhu	r2,12(r18)
    63b4:	91000417 	ldw	r4,16(r18)
    63b8:	90000115 	stw	zero,4(r18)
    63bc:	10bdffcc 	andi	r2,r2,63487
    63c0:	10ffffcc 	andi	r3,r2,65535
    63c4:	18c4000c 	andi	r3,r3,4096
    63c8:	9080030d 	sth	r2,12(r18)
    63cc:	91000015 	stw	r4,0(r18)
    63d0:	18002b26 	beq	r3,zero,6480 <_fflush_r+0x160>
    63d4:	0007883a 	mov	r3,zero
    63d8:	1805883a 	mov	r2,r3
    63dc:	94001415 	stw	r16,80(r18)
    63e0:	dfc00417 	ldw	ra,16(sp)
    63e4:	dcc00317 	ldw	r19,12(sp)
    63e8:	dc800217 	ldw	r18,8(sp)
    63ec:	dc400117 	ldw	r17,4(sp)
    63f0:	dc000017 	ldw	r16,0(sp)
    63f4:	dec00504 	addi	sp,sp,20
    63f8:	f800283a 	ret
    63fc:	94400417 	ldw	r17,16(r18)
    6400:	88001f26 	beq	r17,zero,6480 <_fflush_r+0x160>
    6404:	90800017 	ldw	r2,0(r18)
    6408:	18c000cc 	andi	r3,r3,3
    640c:	94400015 	stw	r17,0(r18)
    6410:	1461c83a 	sub	r16,r2,r17
    6414:	18002526 	beq	r3,zero,64ac <_fflush_r+0x18c>
    6418:	0005883a 	mov	r2,zero
    641c:	90800215 	stw	r2,8(r18)
    6420:	0400170e 	bge	zero,r16,6480 <_fflush_r+0x160>
    6424:	90c00917 	ldw	r3,36(r18)
    6428:	91400717 	ldw	r5,28(r18)
    642c:	880d883a 	mov	r6,r17
    6430:	800f883a 	mov	r7,r16
    6434:	9809883a 	mov	r4,r19
    6438:	183ee83a 	callr	r3
    643c:	88a3883a 	add	r17,r17,r2
    6440:	80a1c83a 	sub	r16,r16,r2
    6444:	00bff616 	blt	zero,r2,6420 <_fflush_r+0x100>
    6448:	9080030b 	ldhu	r2,12(r18)
    644c:	00ffffc4 	movi	r3,-1
    6450:	10801014 	ori	r2,r2,64
    6454:	9080030d 	sth	r2,12(r18)
    6458:	1805883a 	mov	r2,r3
    645c:	dfc00417 	ldw	ra,16(sp)
    6460:	dcc00317 	ldw	r19,12(sp)
    6464:	dc800217 	ldw	r18,8(sp)
    6468:	dc400117 	ldw	r17,4(sp)
    646c:	dc000017 	ldw	r16,0(sp)
    6470:	dec00504 	addi	sp,sp,20
    6474:	f800283a 	ret
    6478:	90800f17 	ldw	r2,60(r18)
    647c:	00bfbe16 	blt	zero,r2,6378 <_fflush_r+0x58>
    6480:	0007883a 	mov	r3,zero
    6484:	1805883a 	mov	r2,r3
    6488:	dfc00417 	ldw	ra,16(sp)
    648c:	dcc00317 	ldw	r19,12(sp)
    6490:	dc800217 	ldw	r18,8(sp)
    6494:	dc400117 	ldw	r17,4(sp)
    6498:	dc000017 	ldw	r16,0(sp)
    649c:	dec00504 	addi	sp,sp,20
    64a0:	f800283a 	ret
    64a4:	00065b80 	call	65b8 <__sinit>
    64a8:	003fa806 	br	634c <_fflush_r+0x2c>
    64ac:	90800517 	ldw	r2,20(r18)
    64b0:	90800215 	stw	r2,8(r18)
    64b4:	003fda06 	br	6420 <_fflush_r+0x100>
    64b8:	90800117 	ldw	r2,4(r18)
    64bc:	90c00c17 	ldw	r3,48(r18)
    64c0:	80a1c83a 	sub	r16,r16,r2
    64c4:	183fb426 	beq	r3,zero,6398 <_fflush_r+0x78>
    64c8:	90800f17 	ldw	r2,60(r18)
    64cc:	80a1c83a 	sub	r16,r16,r2
    64d0:	003fb106 	br	6398 <_fflush_r+0x78>
    64d4:	91400717 	ldw	r5,28(r18)
    64d8:	9809883a 	mov	r4,r19
    64dc:	000d883a 	mov	r6,zero
    64e0:	01c00044 	movi	r7,1
    64e4:	403ee83a 	callr	r8
    64e8:	1021883a 	mov	r16,r2
    64ec:	00bfffc4 	movi	r2,-1
    64f0:	80800226 	beq	r16,r2,64fc <_fflush_r+0x1dc>
    64f4:	92000a17 	ldw	r8,40(r18)
    64f8:	003fa406 	br	638c <_fflush_r+0x6c>
    64fc:	98c00017 	ldw	r3,0(r19)
    6500:	00800744 	movi	r2,29
    6504:	18bfde26 	beq	r3,r2,6480 <_fflush_r+0x160>
    6508:	9080030b 	ldhu	r2,12(r18)
    650c:	8007883a 	mov	r3,r16
    6510:	10801014 	ori	r2,r2,64
    6514:	9080030d 	sth	r2,12(r18)
    6518:	003fcf06 	br	6458 <_fflush_r+0x138>

0000651c <fflush>:
    651c:	01400034 	movhi	r5,0
    6520:	2958c804 	addi	r5,r5,25376
    6524:	2007883a 	mov	r3,r4
    6528:	20000526 	beq	r4,zero,6540 <fflush+0x24>
    652c:	00800074 	movhi	r2,1
    6530:	1080c204 	addi	r2,r2,776
    6534:	11000017 	ldw	r4,0(r2)
    6538:	180b883a 	mov	r5,r3
    653c:	00063201 	jmpi	6320 <_fflush_r>
    6540:	00800074 	movhi	r2,1
    6544:	1080c304 	addi	r2,r2,780
    6548:	11000017 	ldw	r4,0(r2)
    654c:	00070ec1 	jmpi	70ec <_fwalk_reent>

00006550 <std>:
    6550:	00800074 	movhi	r2,1
    6554:	10a38604 	addi	r2,r2,-29160
    6558:	20800b15 	stw	r2,44(r4)
    655c:	00800074 	movhi	r2,1
    6560:	10a3c104 	addi	r2,r2,-28924
    6564:	20800815 	stw	r2,32(r4)
    6568:	00c00074 	movhi	r3,1
    656c:	18e3a204 	addi	r3,r3,-29048
    6570:	00800074 	movhi	r2,1
    6574:	10a38804 	addi	r2,r2,-29152
    6578:	2140030d 	sth	r5,12(r4)
    657c:	2180038d 	sth	r6,14(r4)
    6580:	20c00915 	stw	r3,36(r4)
    6584:	20800a15 	stw	r2,40(r4)
    6588:	20000015 	stw	zero,0(r4)
    658c:	20000115 	stw	zero,4(r4)
    6590:	20000215 	stw	zero,8(r4)
    6594:	20000415 	stw	zero,16(r4)
    6598:	20000515 	stw	zero,20(r4)
    659c:	20000615 	stw	zero,24(r4)
    65a0:	21000715 	stw	r4,28(r4)
    65a4:	f800283a 	ret

000065a8 <__sfp_lock_acquire>:
    65a8:	f800283a 	ret

000065ac <__sfp_lock_release>:
    65ac:	f800283a 	ret

000065b0 <__sinit_lock_acquire>:
    65b0:	f800283a 	ret

000065b4 <__sinit_lock_release>:
    65b4:	f800283a 	ret

000065b8 <__sinit>:
    65b8:	20800e17 	ldw	r2,56(r4)
    65bc:	defffd04 	addi	sp,sp,-12
    65c0:	dc400115 	stw	r17,4(sp)
    65c4:	dc000015 	stw	r16,0(sp)
    65c8:	dfc00215 	stw	ra,8(sp)
    65cc:	04400044 	movi	r17,1
    65d0:	01400104 	movi	r5,4
    65d4:	000d883a 	mov	r6,zero
    65d8:	2021883a 	mov	r16,r4
    65dc:	2200bb04 	addi	r8,r4,748
    65e0:	200f883a 	mov	r7,r4
    65e4:	10000526 	beq	r2,zero,65fc <__sinit+0x44>
    65e8:	dfc00217 	ldw	ra,8(sp)
    65ec:	dc400117 	ldw	r17,4(sp)
    65f0:	dc000017 	ldw	r16,0(sp)
    65f4:	dec00304 	addi	sp,sp,12
    65f8:	f800283a 	ret
    65fc:	21000117 	ldw	r4,4(r4)
    6600:	00800034 	movhi	r2,0
    6604:	1099a704 	addi	r2,r2,26268
    6608:	00c000c4 	movi	r3,3
    660c:	80800f15 	stw	r2,60(r16)
    6610:	80c0b915 	stw	r3,740(r16)
    6614:	8200ba15 	stw	r8,744(r16)
    6618:	84400e15 	stw	r17,56(r16)
    661c:	8000b815 	stw	zero,736(r16)
    6620:	00065500 	call	6550 <std>
    6624:	81000217 	ldw	r4,8(r16)
    6628:	880d883a 	mov	r6,r17
    662c:	800f883a 	mov	r7,r16
    6630:	01400284 	movi	r5,10
    6634:	00065500 	call	6550 <std>
    6638:	81000317 	ldw	r4,12(r16)
    663c:	800f883a 	mov	r7,r16
    6640:	01400484 	movi	r5,18
    6644:	01800084 	movi	r6,2
    6648:	dfc00217 	ldw	ra,8(sp)
    664c:	dc400117 	ldw	r17,4(sp)
    6650:	dc000017 	ldw	r16,0(sp)
    6654:	dec00304 	addi	sp,sp,12
    6658:	00065501 	jmpi	6550 <std>

0000665c <__fp_lock>:
    665c:	0005883a 	mov	r2,zero
    6660:	f800283a 	ret

00006664 <__fp_unlock>:
    6664:	0005883a 	mov	r2,zero
    6668:	f800283a 	ret

0000666c <__fp_unlock_all>:
    666c:	00800074 	movhi	r2,1
    6670:	1080c204 	addi	r2,r2,776
    6674:	11000017 	ldw	r4,0(r2)
    6678:	01400034 	movhi	r5,0
    667c:	29599904 	addi	r5,r5,26212
    6680:	00071b41 	jmpi	71b4 <_fwalk>

00006684 <__fp_lock_all>:
    6684:	00800074 	movhi	r2,1
    6688:	1080c204 	addi	r2,r2,776
    668c:	11000017 	ldw	r4,0(r2)
    6690:	01400034 	movhi	r5,0
    6694:	29599704 	addi	r5,r5,26204
    6698:	00071b41 	jmpi	71b4 <_fwalk>

0000669c <_cleanup_r>:
    669c:	01400074 	movhi	r5,1
    66a0:	2964b304 	addi	r5,r5,-27956
    66a4:	00071b41 	jmpi	71b4 <_fwalk>

000066a8 <_cleanup>:
    66a8:	00800074 	movhi	r2,1
    66ac:	1080c304 	addi	r2,r2,780
    66b0:	11000017 	ldw	r4,0(r2)
    66b4:	000669c1 	jmpi	669c <_cleanup_r>

000066b8 <__sfmoreglue>:
    66b8:	defffc04 	addi	sp,sp,-16
    66bc:	dc400115 	stw	r17,4(sp)
    66c0:	2c401724 	muli	r17,r5,92
    66c4:	dc800215 	stw	r18,8(sp)
    66c8:	2825883a 	mov	r18,r5
    66cc:	89400304 	addi	r5,r17,12
    66d0:	dc000015 	stw	r16,0(sp)
    66d4:	dfc00315 	stw	ra,12(sp)
    66d8:	0001fec0 	call	1fec <_malloc_r>
    66dc:	0021883a 	mov	r16,zero
    66e0:	880d883a 	mov	r6,r17
    66e4:	000b883a 	mov	r5,zero
    66e8:	10000626 	beq	r2,zero,6704 <__sfmoreglue+0x4c>
    66ec:	11000304 	addi	r4,r2,12
    66f0:	14800115 	stw	r18,4(r2)
    66f4:	10000015 	stw	zero,0(r2)
    66f8:	11000215 	stw	r4,8(r2)
    66fc:	1021883a 	mov	r16,r2
    6700:	00077280 	call	7728 <memset>
    6704:	8005883a 	mov	r2,r16
    6708:	dfc00317 	ldw	ra,12(sp)
    670c:	dc800217 	ldw	r18,8(sp)
    6710:	dc400117 	ldw	r17,4(sp)
    6714:	dc000017 	ldw	r16,0(sp)
    6718:	dec00404 	addi	sp,sp,16
    671c:	f800283a 	ret

00006720 <__sfp>:
    6720:	defffd04 	addi	sp,sp,-12
    6724:	00800074 	movhi	r2,1
    6728:	1080c304 	addi	r2,r2,780
    672c:	dc000015 	stw	r16,0(sp)
    6730:	14000017 	ldw	r16,0(r2)
    6734:	dc400115 	stw	r17,4(sp)
    6738:	dfc00215 	stw	ra,8(sp)
    673c:	80800e17 	ldw	r2,56(r16)
    6740:	2023883a 	mov	r17,r4
    6744:	10002626 	beq	r2,zero,67e0 <__sfp+0xc0>
    6748:	8400b804 	addi	r16,r16,736
    674c:	80800117 	ldw	r2,4(r16)
    6750:	81000217 	ldw	r4,8(r16)
    6754:	10ffffc4 	addi	r3,r2,-1
    6758:	18000916 	blt	r3,zero,6780 <__sfp+0x60>
    675c:	2080030f 	ldh	r2,12(r4)
    6760:	10000b26 	beq	r2,zero,6790 <__sfp+0x70>
    6764:	017fffc4 	movi	r5,-1
    6768:	00000206 	br	6774 <__sfp+0x54>
    676c:	2080030f 	ldh	r2,12(r4)
    6770:	10000726 	beq	r2,zero,6790 <__sfp+0x70>
    6774:	18ffffc4 	addi	r3,r3,-1
    6778:	21001704 	addi	r4,r4,92
    677c:	197ffb1e 	bne	r3,r5,676c <__sfp+0x4c>
    6780:	80800017 	ldw	r2,0(r16)
    6784:	10001926 	beq	r2,zero,67ec <__sfp+0xcc>
    6788:	1021883a 	mov	r16,r2
    678c:	003fef06 	br	674c <__sfp+0x2c>
    6790:	00bfffc4 	movi	r2,-1
    6794:	00c00044 	movi	r3,1
    6798:	2080038d 	sth	r2,14(r4)
    679c:	20c0030d 	sth	r3,12(r4)
    67a0:	20000015 	stw	zero,0(r4)
    67a4:	20000215 	stw	zero,8(r4)
    67a8:	20000115 	stw	zero,4(r4)
    67ac:	20000415 	stw	zero,16(r4)
    67b0:	20000515 	stw	zero,20(r4)
    67b4:	20000615 	stw	zero,24(r4)
    67b8:	20000c15 	stw	zero,48(r4)
    67bc:	20000d15 	stw	zero,52(r4)
    67c0:	20001115 	stw	zero,68(r4)
    67c4:	20001215 	stw	zero,72(r4)
    67c8:	2005883a 	mov	r2,r4
    67cc:	dfc00217 	ldw	ra,8(sp)
    67d0:	dc400117 	ldw	r17,4(sp)
    67d4:	dc000017 	ldw	r16,0(sp)
    67d8:	dec00304 	addi	sp,sp,12
    67dc:	f800283a 	ret
    67e0:	8009883a 	mov	r4,r16
    67e4:	00065b80 	call	65b8 <__sinit>
    67e8:	003fd706 	br	6748 <__sfp+0x28>
    67ec:	8809883a 	mov	r4,r17
    67f0:	01400104 	movi	r5,4
    67f4:	00066b80 	call	66b8 <__sfmoreglue>
    67f8:	80800015 	stw	r2,0(r16)
    67fc:	103fe21e 	bne	r2,zero,6788 <__sfp+0x68>
    6800:	00800304 	movi	r2,12
    6804:	0009883a 	mov	r4,zero
    6808:	88800015 	stw	r2,0(r17)
    680c:	003fee06 	br	67c8 <__sfp+0xa8>

00006810 <_malloc_trim_r>:
    6810:	defffb04 	addi	sp,sp,-20
    6814:	dcc00315 	stw	r19,12(sp)
    6818:	04c00074 	movhi	r19,1
    681c:	9cfb3a04 	addi	r19,r19,-4888
    6820:	dc800215 	stw	r18,8(sp)
    6824:	dc400115 	stw	r17,4(sp)
    6828:	dc000015 	stw	r16,0(sp)
    682c:	2823883a 	mov	r17,r5
    6830:	2025883a 	mov	r18,r4
    6834:	dfc00415 	stw	ra,16(sp)
    6838:	000c03c0 	call	c03c <__malloc_lock>
    683c:	98800217 	ldw	r2,8(r19)
    6840:	9009883a 	mov	r4,r18
    6844:	000b883a 	mov	r5,zero
    6848:	10c00117 	ldw	r3,4(r2)
    684c:	00bfff04 	movi	r2,-4
    6850:	18a0703a 	and	r16,r3,r2
    6854:	8463c83a 	sub	r17,r16,r17
    6858:	8c43fbc4 	addi	r17,r17,4079
    685c:	8822d33a 	srli	r17,r17,12
    6860:	0083ffc4 	movi	r2,4095
    6864:	8c7fffc4 	addi	r17,r17,-1
    6868:	8822933a 	slli	r17,r17,12
    686c:	1440060e 	bge	r2,r17,6888 <_malloc_trim_r+0x78>
    6870:	00028580 	call	2858 <_sbrk_r>
    6874:	98c00217 	ldw	r3,8(r19)
    6878:	9009883a 	mov	r4,r18
    687c:	044bc83a 	sub	r5,zero,r17
    6880:	80c7883a 	add	r3,r16,r3
    6884:	10c00926 	beq	r2,r3,68ac <_malloc_trim_r+0x9c>
    6888:	000c05c0 	call	c05c <__malloc_unlock>
    688c:	0005883a 	mov	r2,zero
    6890:	dfc00417 	ldw	ra,16(sp)
    6894:	dcc00317 	ldw	r19,12(sp)
    6898:	dc800217 	ldw	r18,8(sp)
    689c:	dc400117 	ldw	r17,4(sp)
    68a0:	dc000017 	ldw	r16,0(sp)
    68a4:	dec00504 	addi	sp,sp,20
    68a8:	f800283a 	ret
    68ac:	9009883a 	mov	r4,r18
    68b0:	00028580 	call	2858 <_sbrk_r>
    68b4:	844dc83a 	sub	r6,r16,r17
    68b8:	00ffffc4 	movi	r3,-1
    68bc:	9009883a 	mov	r4,r18
    68c0:	000b883a 	mov	r5,zero
    68c4:	01c00074 	movhi	r7,1
    68c8:	39c79004 	addi	r7,r7,7744
    68cc:	31800054 	ori	r6,r6,1
    68d0:	10c00926 	beq	r2,r3,68f8 <_malloc_trim_r+0xe8>
    68d4:	38800017 	ldw	r2,0(r7)
    68d8:	98c00217 	ldw	r3,8(r19)
    68dc:	9009883a 	mov	r4,r18
    68e0:	1445c83a 	sub	r2,r2,r17
    68e4:	38800015 	stw	r2,0(r7)
    68e8:	19800115 	stw	r6,4(r3)
    68ec:	000c05c0 	call	c05c <__malloc_unlock>
    68f0:	00800044 	movi	r2,1
    68f4:	003fe606 	br	6890 <_malloc_trim_r+0x80>
    68f8:	00028580 	call	2858 <_sbrk_r>
    68fc:	99800217 	ldw	r6,8(r19)
    6900:	100f883a 	mov	r7,r2
    6904:	9009883a 	mov	r4,r18
    6908:	1187c83a 	sub	r3,r2,r6
    690c:	008003c4 	movi	r2,15
    6910:	19400054 	ori	r5,r3,1
    6914:	10ffdc0e 	bge	r2,r3,6888 <_malloc_trim_r+0x78>
    6918:	00800074 	movhi	r2,1
    691c:	1080c504 	addi	r2,r2,788
    6920:	10c00017 	ldw	r3,0(r2)
    6924:	00800074 	movhi	r2,1
    6928:	10879004 	addi	r2,r2,7744
    692c:	31400115 	stw	r5,4(r6)
    6930:	38c7c83a 	sub	r3,r7,r3
    6934:	10c00015 	stw	r3,0(r2)
    6938:	003fd306 	br	6888 <_malloc_trim_r+0x78>

0000693c <_free_r>:
    693c:	defffd04 	addi	sp,sp,-12
    6940:	dc400115 	stw	r17,4(sp)
    6944:	dc000015 	stw	r16,0(sp)
    6948:	dfc00215 	stw	ra,8(sp)
    694c:	2821883a 	mov	r16,r5
    6950:	2023883a 	mov	r17,r4
    6954:	28005a26 	beq	r5,zero,6ac0 <_free_r+0x184>
    6958:	000c03c0 	call	c03c <__malloc_lock>
    695c:	823ffe04 	addi	r8,r16,-8
    6960:	41400117 	ldw	r5,4(r8)
    6964:	00bfff84 	movi	r2,-2
    6968:	02800074 	movhi	r10,1
    696c:	52bb3a04 	addi	r10,r10,-4888
    6970:	288e703a 	and	r7,r5,r2
    6974:	41cd883a 	add	r6,r8,r7
    6978:	30c00117 	ldw	r3,4(r6)
    697c:	51000217 	ldw	r4,8(r10)
    6980:	00bfff04 	movi	r2,-4
    6984:	1892703a 	and	r9,r3,r2
    6988:	5017883a 	mov	r11,r10
    698c:	31006726 	beq	r6,r4,6b2c <_free_r+0x1f0>
    6990:	2880004c 	andi	r2,r5,1
    6994:	1005003a 	cmpeq	r2,r2,zero
    6998:	32400115 	stw	r9,4(r6)
    699c:	10001a1e 	bne	r2,zero,6a08 <_free_r+0xcc>
    69a0:	000b883a 	mov	r5,zero
    69a4:	3247883a 	add	r3,r6,r9
    69a8:	18800117 	ldw	r2,4(r3)
    69ac:	1080004c 	andi	r2,r2,1
    69b0:	1000231e 	bne	r2,zero,6a40 <_free_r+0x104>
    69b4:	280ac03a 	cmpne	r5,r5,zero
    69b8:	3a4f883a 	add	r7,r7,r9
    69bc:	2800451e 	bne	r5,zero,6ad4 <_free_r+0x198>
    69c0:	31000217 	ldw	r4,8(r6)
    69c4:	00800074 	movhi	r2,1
    69c8:	10bb3c04 	addi	r2,r2,-4880
    69cc:	20807b26 	beq	r4,r2,6bbc <_free_r+0x280>
    69d0:	30800317 	ldw	r2,12(r6)
    69d4:	3a07883a 	add	r3,r7,r8
    69d8:	19c00015 	stw	r7,0(r3)
    69dc:	11000215 	stw	r4,8(r2)
    69e0:	20800315 	stw	r2,12(r4)
    69e4:	38800054 	ori	r2,r7,1
    69e8:	40800115 	stw	r2,4(r8)
    69ec:	28001a26 	beq	r5,zero,6a58 <_free_r+0x11c>
    69f0:	8809883a 	mov	r4,r17
    69f4:	dfc00217 	ldw	ra,8(sp)
    69f8:	dc400117 	ldw	r17,4(sp)
    69fc:	dc000017 	ldw	r16,0(sp)
    6a00:	dec00304 	addi	sp,sp,12
    6a04:	000c05c1 	jmpi	c05c <__malloc_unlock>
    6a08:	80bffe17 	ldw	r2,-8(r16)
    6a0c:	50c00204 	addi	r3,r10,8
    6a10:	4091c83a 	sub	r8,r8,r2
    6a14:	41000217 	ldw	r4,8(r8)
    6a18:	388f883a 	add	r7,r7,r2
    6a1c:	20c06126 	beq	r4,r3,6ba4 <_free_r+0x268>
    6a20:	40800317 	ldw	r2,12(r8)
    6a24:	3247883a 	add	r3,r6,r9
    6a28:	000b883a 	mov	r5,zero
    6a2c:	11000215 	stw	r4,8(r2)
    6a30:	20800315 	stw	r2,12(r4)
    6a34:	18800117 	ldw	r2,4(r3)
    6a38:	1080004c 	andi	r2,r2,1
    6a3c:	103fdd26 	beq	r2,zero,69b4 <_free_r+0x78>
    6a40:	38800054 	ori	r2,r7,1
    6a44:	3a07883a 	add	r3,r7,r8
    6a48:	280ac03a 	cmpne	r5,r5,zero
    6a4c:	40800115 	stw	r2,4(r8)
    6a50:	19c00015 	stw	r7,0(r3)
    6a54:	283fe61e 	bne	r5,zero,69f0 <_free_r+0xb4>
    6a58:	00807fc4 	movi	r2,511
    6a5c:	11c01f2e 	bgeu	r2,r7,6adc <_free_r+0x1a0>
    6a60:	3806d27a 	srli	r3,r7,9
    6a64:	1800481e 	bne	r3,zero,6b88 <_free_r+0x24c>
    6a68:	3804d0fa 	srli	r2,r7,3
    6a6c:	100690fa 	slli	r3,r2,3
    6a70:	1acd883a 	add	r6,r3,r11
    6a74:	31400217 	ldw	r5,8(r6)
    6a78:	31405926 	beq	r6,r5,6be0 <_free_r+0x2a4>
    6a7c:	28800117 	ldw	r2,4(r5)
    6a80:	00ffff04 	movi	r3,-4
    6a84:	10c4703a 	and	r2,r2,r3
    6a88:	3880022e 	bgeu	r7,r2,6a94 <_free_r+0x158>
    6a8c:	29400217 	ldw	r5,8(r5)
    6a90:	317ffa1e 	bne	r6,r5,6a7c <_free_r+0x140>
    6a94:	29800317 	ldw	r6,12(r5)
    6a98:	41800315 	stw	r6,12(r8)
    6a9c:	41400215 	stw	r5,8(r8)
    6aa0:	8809883a 	mov	r4,r17
    6aa4:	2a000315 	stw	r8,12(r5)
    6aa8:	32000215 	stw	r8,8(r6)
    6aac:	dfc00217 	ldw	ra,8(sp)
    6ab0:	dc400117 	ldw	r17,4(sp)
    6ab4:	dc000017 	ldw	r16,0(sp)
    6ab8:	dec00304 	addi	sp,sp,12
    6abc:	000c05c1 	jmpi	c05c <__malloc_unlock>
    6ac0:	dfc00217 	ldw	ra,8(sp)
    6ac4:	dc400117 	ldw	r17,4(sp)
    6ac8:	dc000017 	ldw	r16,0(sp)
    6acc:	dec00304 	addi	sp,sp,12
    6ad0:	f800283a 	ret
    6ad4:	31000217 	ldw	r4,8(r6)
    6ad8:	003fbd06 	br	69d0 <_free_r+0x94>
    6adc:	3806d0fa 	srli	r3,r7,3
    6ae0:	00800044 	movi	r2,1
    6ae4:	51400117 	ldw	r5,4(r10)
    6ae8:	180890fa 	slli	r4,r3,3
    6aec:	1807d0ba 	srai	r3,r3,2
    6af0:	22c9883a 	add	r4,r4,r11
    6af4:	21800217 	ldw	r6,8(r4)
    6af8:	10c4983a 	sll	r2,r2,r3
    6afc:	41000315 	stw	r4,12(r8)
    6b00:	41800215 	stw	r6,8(r8)
    6b04:	288ab03a 	or	r5,r5,r2
    6b08:	22000215 	stw	r8,8(r4)
    6b0c:	8809883a 	mov	r4,r17
    6b10:	51400115 	stw	r5,4(r10)
    6b14:	32000315 	stw	r8,12(r6)
    6b18:	dfc00217 	ldw	ra,8(sp)
    6b1c:	dc400117 	ldw	r17,4(sp)
    6b20:	dc000017 	ldw	r16,0(sp)
    6b24:	dec00304 	addi	sp,sp,12
    6b28:	000c05c1 	jmpi	c05c <__malloc_unlock>
    6b2c:	2880004c 	andi	r2,r5,1
    6b30:	3a4d883a 	add	r6,r7,r9
    6b34:	1000071e 	bne	r2,zero,6b54 <_free_r+0x218>
    6b38:	80bffe17 	ldw	r2,-8(r16)
    6b3c:	4091c83a 	sub	r8,r8,r2
    6b40:	41000317 	ldw	r4,12(r8)
    6b44:	40c00217 	ldw	r3,8(r8)
    6b48:	308d883a 	add	r6,r6,r2
    6b4c:	20c00215 	stw	r3,8(r4)
    6b50:	19000315 	stw	r4,12(r3)
    6b54:	00800074 	movhi	r2,1
    6b58:	1080c404 	addi	r2,r2,784
    6b5c:	11000017 	ldw	r4,0(r2)
    6b60:	30c00054 	ori	r3,r6,1
    6b64:	52000215 	stw	r8,8(r10)
    6b68:	40c00115 	stw	r3,4(r8)
    6b6c:	313fa036 	bltu	r6,r4,69f0 <_free_r+0xb4>
    6b70:	00800074 	movhi	r2,1
    6b74:	10878304 	addi	r2,r2,7692
    6b78:	11400017 	ldw	r5,0(r2)
    6b7c:	8809883a 	mov	r4,r17
    6b80:	00068100 	call	6810 <_malloc_trim_r>
    6b84:	003f9a06 	br	69f0 <_free_r+0xb4>
    6b88:	00800104 	movi	r2,4
    6b8c:	10c0072e 	bgeu	r2,r3,6bac <_free_r+0x270>
    6b90:	00800504 	movi	r2,20
    6b94:	10c01936 	bltu	r2,r3,6bfc <_free_r+0x2c0>
    6b98:	188016c4 	addi	r2,r3,91
    6b9c:	100690fa 	slli	r3,r2,3
    6ba0:	003fb306 	br	6a70 <_free_r+0x134>
    6ba4:	01400044 	movi	r5,1
    6ba8:	003f7e06 	br	69a4 <_free_r+0x68>
    6bac:	3804d1ba 	srli	r2,r7,6
    6bb0:	10800e04 	addi	r2,r2,56
    6bb4:	100690fa 	slli	r3,r2,3
    6bb8:	003fad06 	br	6a70 <_free_r+0x134>
    6bbc:	22000315 	stw	r8,12(r4)
    6bc0:	22000215 	stw	r8,8(r4)
    6bc4:	3a05883a 	add	r2,r7,r8
    6bc8:	38c00054 	ori	r3,r7,1
    6bcc:	11c00015 	stw	r7,0(r2)
    6bd0:	41000215 	stw	r4,8(r8)
    6bd4:	40c00115 	stw	r3,4(r8)
    6bd8:	41000315 	stw	r4,12(r8)
    6bdc:	003f8406 	br	69f0 <_free_r+0xb4>
    6be0:	1005d0ba 	srai	r2,r2,2
    6be4:	00c00044 	movi	r3,1
    6be8:	51000117 	ldw	r4,4(r10)
    6bec:	1886983a 	sll	r3,r3,r2
    6bf0:	20c8b03a 	or	r4,r4,r3
    6bf4:	51000115 	stw	r4,4(r10)
    6bf8:	003fa706 	br	6a98 <_free_r+0x15c>
    6bfc:	00801504 	movi	r2,84
    6c00:	10c00436 	bltu	r2,r3,6c14 <_free_r+0x2d8>
    6c04:	3804d33a 	srli	r2,r7,12
    6c08:	10801b84 	addi	r2,r2,110
    6c0c:	100690fa 	slli	r3,r2,3
    6c10:	003f9706 	br	6a70 <_free_r+0x134>
    6c14:	00805504 	movi	r2,340
    6c18:	10c00436 	bltu	r2,r3,6c2c <_free_r+0x2f0>
    6c1c:	3804d3fa 	srli	r2,r7,15
    6c20:	10801dc4 	addi	r2,r2,119
    6c24:	100690fa 	slli	r3,r2,3
    6c28:	003f9106 	br	6a70 <_free_r+0x134>
    6c2c:	00815504 	movi	r2,1364
    6c30:	10c0032e 	bgeu	r2,r3,6c40 <_free_r+0x304>
    6c34:	00801f84 	movi	r2,126
    6c38:	00c0fc04 	movi	r3,1008
    6c3c:	003f8c06 	br	6a70 <_free_r+0x134>
    6c40:	3804d4ba 	srli	r2,r7,18
    6c44:	10801f04 	addi	r2,r2,124
    6c48:	100690fa 	slli	r3,r2,3
    6c4c:	003f8806 	br	6a70 <_free_r+0x134>

00006c50 <__sfvwrite_r>:
    6c50:	30800217 	ldw	r2,8(r6)
    6c54:	defff504 	addi	sp,sp,-44
    6c58:	df000915 	stw	fp,36(sp)
    6c5c:	dd800715 	stw	r22,28(sp)
    6c60:	dc800315 	stw	r18,12(sp)
    6c64:	dfc00a15 	stw	ra,40(sp)
    6c68:	ddc00815 	stw	r23,32(sp)
    6c6c:	dd400615 	stw	r21,24(sp)
    6c70:	dd000515 	stw	r20,20(sp)
    6c74:	dcc00415 	stw	r19,16(sp)
    6c78:	dc400215 	stw	r17,8(sp)
    6c7c:	dc000115 	stw	r16,4(sp)
    6c80:	302d883a 	mov	r22,r6
    6c84:	2039883a 	mov	fp,r4
    6c88:	2825883a 	mov	r18,r5
    6c8c:	10001c26 	beq	r2,zero,6d00 <__sfvwrite_r+0xb0>
    6c90:	29c0030b 	ldhu	r7,12(r5)
    6c94:	3880020c 	andi	r2,r7,8
    6c98:	10002726 	beq	r2,zero,6d38 <__sfvwrite_r+0xe8>
    6c9c:	28800417 	ldw	r2,16(r5)
    6ca0:	10002526 	beq	r2,zero,6d38 <__sfvwrite_r+0xe8>
    6ca4:	3880008c 	andi	r2,r7,2
    6ca8:	b5400017 	ldw	r21,0(r22)
    6cac:	10002826 	beq	r2,zero,6d50 <__sfvwrite_r+0x100>
    6cb0:	0021883a 	mov	r16,zero
    6cb4:	0023883a 	mov	r17,zero
    6cb8:	880d883a 	mov	r6,r17
    6cbc:	e009883a 	mov	r4,fp
    6cc0:	00810004 	movi	r2,1024
    6cc4:	80006e26 	beq	r16,zero,6e80 <__sfvwrite_r+0x230>
    6cc8:	800f883a 	mov	r7,r16
    6ccc:	91400717 	ldw	r5,28(r18)
    6cd0:	1400012e 	bgeu	r2,r16,6cd8 <__sfvwrite_r+0x88>
    6cd4:	100f883a 	mov	r7,r2
    6cd8:	90c00917 	ldw	r3,36(r18)
    6cdc:	183ee83a 	callr	r3
    6ce0:	1007883a 	mov	r3,r2
    6ce4:	80a1c83a 	sub	r16,r16,r2
    6ce8:	88a3883a 	add	r17,r17,r2
    6cec:	00806d0e 	bge	zero,r2,6ea4 <__sfvwrite_r+0x254>
    6cf0:	b0800217 	ldw	r2,8(r22)
    6cf4:	10c5c83a 	sub	r2,r2,r3
    6cf8:	b0800215 	stw	r2,8(r22)
    6cfc:	103fee1e 	bne	r2,zero,6cb8 <__sfvwrite_r+0x68>
    6d00:	0009883a 	mov	r4,zero
    6d04:	2005883a 	mov	r2,r4
    6d08:	dfc00a17 	ldw	ra,40(sp)
    6d0c:	df000917 	ldw	fp,36(sp)
    6d10:	ddc00817 	ldw	r23,32(sp)
    6d14:	dd800717 	ldw	r22,28(sp)
    6d18:	dd400617 	ldw	r21,24(sp)
    6d1c:	dd000517 	ldw	r20,20(sp)
    6d20:	dcc00417 	ldw	r19,16(sp)
    6d24:	dc800317 	ldw	r18,12(sp)
    6d28:	dc400217 	ldw	r17,8(sp)
    6d2c:	dc000117 	ldw	r16,4(sp)
    6d30:	dec00b04 	addi	sp,sp,44
    6d34:	f800283a 	ret
    6d38:	00048640 	call	4864 <__swsetup_r>
    6d3c:	1000e41e 	bne	r2,zero,70d0 <__sfvwrite_r+0x480>
    6d40:	91c0030b 	ldhu	r7,12(r18)
    6d44:	b5400017 	ldw	r21,0(r22)
    6d48:	3880008c 	andi	r2,r7,2
    6d4c:	103fd81e 	bne	r2,zero,6cb0 <__sfvwrite_r+0x60>
    6d50:	3880004c 	andi	r2,r7,1
    6d54:	1005003a 	cmpeq	r2,r2,zero
    6d58:	10005726 	beq	r2,zero,6eb8 <__sfvwrite_r+0x268>
    6d5c:	0029883a 	mov	r20,zero
    6d60:	002f883a 	mov	r23,zero
    6d64:	a0004226 	beq	r20,zero,6e70 <__sfvwrite_r+0x220>
    6d68:	3880800c 	andi	r2,r7,512
    6d6c:	94000217 	ldw	r16,8(r18)
    6d70:	10008b26 	beq	r2,zero,6fa0 <__sfvwrite_r+0x350>
    6d74:	800d883a 	mov	r6,r16
    6d78:	a400a536 	bltu	r20,r16,7010 <__sfvwrite_r+0x3c0>
    6d7c:	3881200c 	andi	r2,r7,1152
    6d80:	10002726 	beq	r2,zero,6e20 <__sfvwrite_r+0x1d0>
    6d84:	90800517 	ldw	r2,20(r18)
    6d88:	92000417 	ldw	r8,16(r18)
    6d8c:	91400017 	ldw	r5,0(r18)
    6d90:	1087883a 	add	r3,r2,r2
    6d94:	1887883a 	add	r3,r3,r2
    6d98:	1808d7fa 	srli	r4,r3,31
    6d9c:	2a21c83a 	sub	r16,r5,r8
    6da0:	80800044 	addi	r2,r16,1
    6da4:	20c9883a 	add	r4,r4,r3
    6da8:	2027d07a 	srai	r19,r4,1
    6dac:	a085883a 	add	r2,r20,r2
    6db0:	980d883a 	mov	r6,r19
    6db4:	9880022e 	bgeu	r19,r2,6dc0 <__sfvwrite_r+0x170>
    6db8:	1027883a 	mov	r19,r2
    6dbc:	100d883a 	mov	r6,r2
    6dc0:	3881000c 	andi	r2,r7,1024
    6dc4:	1000b826 	beq	r2,zero,70a8 <__sfvwrite_r+0x458>
    6dc8:	300b883a 	mov	r5,r6
    6dcc:	e009883a 	mov	r4,fp
    6dd0:	0001fec0 	call	1fec <_malloc_r>
    6dd4:	10003126 	beq	r2,zero,6e9c <__sfvwrite_r+0x24c>
    6dd8:	91400417 	ldw	r5,16(r18)
    6ddc:	1009883a 	mov	r4,r2
    6de0:	800d883a 	mov	r6,r16
    6de4:	1023883a 	mov	r17,r2
    6de8:	00075a80 	call	75a8 <memcpy>
    6dec:	90c0030b 	ldhu	r3,12(r18)
    6df0:	00beffc4 	movi	r2,-1025
    6df4:	1886703a 	and	r3,r3,r2
    6df8:	18c02014 	ori	r3,r3,128
    6dfc:	90c0030d 	sth	r3,12(r18)
    6e00:	9c07c83a 	sub	r3,r19,r16
    6e04:	8c05883a 	add	r2,r17,r16
    6e08:	a00d883a 	mov	r6,r20
    6e0c:	a021883a 	mov	r16,r20
    6e10:	90800015 	stw	r2,0(r18)
    6e14:	90c00215 	stw	r3,8(r18)
    6e18:	94400415 	stw	r17,16(r18)
    6e1c:	94c00515 	stw	r19,20(r18)
    6e20:	91000017 	ldw	r4,0(r18)
    6e24:	b80b883a 	mov	r5,r23
    6e28:	a023883a 	mov	r17,r20
    6e2c:	00076480 	call	7648 <memmove>
    6e30:	90c00217 	ldw	r3,8(r18)
    6e34:	90800017 	ldw	r2,0(r18)
    6e38:	a027883a 	mov	r19,r20
    6e3c:	1c07c83a 	sub	r3,r3,r16
    6e40:	1405883a 	add	r2,r2,r16
    6e44:	90c00215 	stw	r3,8(r18)
    6e48:	a021883a 	mov	r16,r20
    6e4c:	90800015 	stw	r2,0(r18)
    6e50:	b0800217 	ldw	r2,8(r22)
    6e54:	1405c83a 	sub	r2,r2,r16
    6e58:	b0800215 	stw	r2,8(r22)
    6e5c:	103fa826 	beq	r2,zero,6d00 <__sfvwrite_r+0xb0>
    6e60:	a469c83a 	sub	r20,r20,r17
    6e64:	91c0030b 	ldhu	r7,12(r18)
    6e68:	bcef883a 	add	r23,r23,r19
    6e6c:	a03fbe1e 	bne	r20,zero,6d68 <__sfvwrite_r+0x118>
    6e70:	adc00017 	ldw	r23,0(r21)
    6e74:	ad000117 	ldw	r20,4(r21)
    6e78:	ad400204 	addi	r21,r21,8
    6e7c:	003fb906 	br	6d64 <__sfvwrite_r+0x114>
    6e80:	ac400017 	ldw	r17,0(r21)
    6e84:	ac000117 	ldw	r16,4(r21)
    6e88:	ad400204 	addi	r21,r21,8
    6e8c:	003f8a06 	br	6cb8 <__sfvwrite_r+0x68>
    6e90:	91400417 	ldw	r5,16(r18)
    6e94:	e009883a 	mov	r4,fp
    6e98:	000693c0 	call	693c <_free_r>
    6e9c:	00800304 	movi	r2,12
    6ea0:	e0800015 	stw	r2,0(fp)
    6ea4:	9080030b 	ldhu	r2,12(r18)
    6ea8:	013fffc4 	movi	r4,-1
    6eac:	10801014 	ori	r2,r2,64
    6eb0:	9080030d 	sth	r2,12(r18)
    6eb4:	003f9306 	br	6d04 <__sfvwrite_r+0xb4>
    6eb8:	0027883a 	mov	r19,zero
    6ebc:	002f883a 	mov	r23,zero
    6ec0:	d8000015 	stw	zero,0(sp)
    6ec4:	0029883a 	mov	r20,zero
    6ec8:	98001e26 	beq	r19,zero,6f44 <__sfvwrite_r+0x2f4>
    6ecc:	d8c00017 	ldw	r3,0(sp)
    6ed0:	1804c03a 	cmpne	r2,r3,zero
    6ed4:	10005e26 	beq	r2,zero,7050 <__sfvwrite_r+0x400>
    6ed8:	9821883a 	mov	r16,r19
    6edc:	a4c0012e 	bgeu	r20,r19,6ee4 <__sfvwrite_r+0x294>
    6ee0:	a021883a 	mov	r16,r20
    6ee4:	91000017 	ldw	r4,0(r18)
    6ee8:	90800417 	ldw	r2,16(r18)
    6eec:	91800217 	ldw	r6,8(r18)
    6ef0:	91c00517 	ldw	r7,20(r18)
    6ef4:	1100022e 	bgeu	r2,r4,6f00 <__sfvwrite_r+0x2b0>
    6ef8:	31e3883a 	add	r17,r6,r7
    6efc:	8c001616 	blt	r17,r16,6f58 <__sfvwrite_r+0x308>
    6f00:	81c03816 	blt	r16,r7,6fe4 <__sfvwrite_r+0x394>
    6f04:	90c00917 	ldw	r3,36(r18)
    6f08:	91400717 	ldw	r5,28(r18)
    6f0c:	e009883a 	mov	r4,fp
    6f10:	b80d883a 	mov	r6,r23
    6f14:	183ee83a 	callr	r3
    6f18:	1023883a 	mov	r17,r2
    6f1c:	00bfe10e 	bge	zero,r2,6ea4 <__sfvwrite_r+0x254>
    6f20:	a469c83a 	sub	r20,r20,r17
    6f24:	a0001826 	beq	r20,zero,6f88 <__sfvwrite_r+0x338>
    6f28:	b0800217 	ldw	r2,8(r22)
    6f2c:	1445c83a 	sub	r2,r2,r17
    6f30:	b0800215 	stw	r2,8(r22)
    6f34:	103f7226 	beq	r2,zero,6d00 <__sfvwrite_r+0xb0>
    6f38:	9c67c83a 	sub	r19,r19,r17
    6f3c:	bc6f883a 	add	r23,r23,r17
    6f40:	983fe21e 	bne	r19,zero,6ecc <__sfvwrite_r+0x27c>
    6f44:	adc00017 	ldw	r23,0(r21)
    6f48:	acc00117 	ldw	r19,4(r21)
    6f4c:	ad400204 	addi	r21,r21,8
    6f50:	d8000015 	stw	zero,0(sp)
    6f54:	003fdc06 	br	6ec8 <__sfvwrite_r+0x278>
    6f58:	b80b883a 	mov	r5,r23
    6f5c:	880d883a 	mov	r6,r17
    6f60:	00076480 	call	7648 <memmove>
    6f64:	90c00017 	ldw	r3,0(r18)
    6f68:	e009883a 	mov	r4,fp
    6f6c:	900b883a 	mov	r5,r18
    6f70:	1c47883a 	add	r3,r3,r17
    6f74:	90c00015 	stw	r3,0(r18)
    6f78:	00063200 	call	6320 <_fflush_r>
    6f7c:	103fc91e 	bne	r2,zero,6ea4 <__sfvwrite_r+0x254>
    6f80:	a469c83a 	sub	r20,r20,r17
    6f84:	a03fe81e 	bne	r20,zero,6f28 <__sfvwrite_r+0x2d8>
    6f88:	e009883a 	mov	r4,fp
    6f8c:	900b883a 	mov	r5,r18
    6f90:	00063200 	call	6320 <_fflush_r>
    6f94:	103fc31e 	bne	r2,zero,6ea4 <__sfvwrite_r+0x254>
    6f98:	d8000015 	stw	zero,0(sp)
    6f9c:	003fe206 	br	6f28 <__sfvwrite_r+0x2d8>
    6fa0:	91000017 	ldw	r4,0(r18)
    6fa4:	90800417 	ldw	r2,16(r18)
    6fa8:	1100022e 	bgeu	r2,r4,6fb4 <__sfvwrite_r+0x364>
    6fac:	8023883a 	mov	r17,r16
    6fb0:	85003136 	bltu	r16,r20,7078 <__sfvwrite_r+0x428>
    6fb4:	91c00517 	ldw	r7,20(r18)
    6fb8:	a1c01836 	bltu	r20,r7,701c <__sfvwrite_r+0x3cc>
    6fbc:	90c00917 	ldw	r3,36(r18)
    6fc0:	91400717 	ldw	r5,28(r18)
    6fc4:	e009883a 	mov	r4,fp
    6fc8:	b80d883a 	mov	r6,r23
    6fcc:	183ee83a 	callr	r3
    6fd0:	1021883a 	mov	r16,r2
    6fd4:	00bfb30e 	bge	zero,r2,6ea4 <__sfvwrite_r+0x254>
    6fd8:	1023883a 	mov	r17,r2
    6fdc:	1027883a 	mov	r19,r2
    6fe0:	003f9b06 	br	6e50 <__sfvwrite_r+0x200>
    6fe4:	b80b883a 	mov	r5,r23
    6fe8:	800d883a 	mov	r6,r16
    6fec:	00076480 	call	7648 <memmove>
    6ff0:	90c00217 	ldw	r3,8(r18)
    6ff4:	90800017 	ldw	r2,0(r18)
    6ff8:	8023883a 	mov	r17,r16
    6ffc:	1c07c83a 	sub	r3,r3,r16
    7000:	1405883a 	add	r2,r2,r16
    7004:	90c00215 	stw	r3,8(r18)
    7008:	90800015 	stw	r2,0(r18)
    700c:	003fc406 	br	6f20 <__sfvwrite_r+0x2d0>
    7010:	a00d883a 	mov	r6,r20
    7014:	a021883a 	mov	r16,r20
    7018:	003f8106 	br	6e20 <__sfvwrite_r+0x1d0>
    701c:	b80b883a 	mov	r5,r23
    7020:	a00d883a 	mov	r6,r20
    7024:	00076480 	call	7648 <memmove>
    7028:	90c00217 	ldw	r3,8(r18)
    702c:	90800017 	ldw	r2,0(r18)
    7030:	a021883a 	mov	r16,r20
    7034:	1d07c83a 	sub	r3,r3,r20
    7038:	1505883a 	add	r2,r2,r20
    703c:	a023883a 	mov	r17,r20
    7040:	a027883a 	mov	r19,r20
    7044:	90c00215 	stw	r3,8(r18)
    7048:	90800015 	stw	r2,0(r18)
    704c:	003f8006 	br	6e50 <__sfvwrite_r+0x200>
    7050:	b809883a 	mov	r4,r23
    7054:	01400284 	movi	r5,10
    7058:	980d883a 	mov	r6,r19
    705c:	00074c40 	call	74c4 <memchr>
    7060:	10001726 	beq	r2,zero,70c0 <__sfvwrite_r+0x470>
    7064:	15c5c83a 	sub	r2,r2,r23
    7068:	15000044 	addi	r20,r2,1
    706c:	00800044 	movi	r2,1
    7070:	d8800015 	stw	r2,0(sp)
    7074:	003f9806 	br	6ed8 <__sfvwrite_r+0x288>
    7078:	b80b883a 	mov	r5,r23
    707c:	800d883a 	mov	r6,r16
    7080:	00076480 	call	7648 <memmove>
    7084:	90c00017 	ldw	r3,0(r18)
    7088:	e009883a 	mov	r4,fp
    708c:	900b883a 	mov	r5,r18
    7090:	1c07883a 	add	r3,r3,r16
    7094:	90c00015 	stw	r3,0(r18)
    7098:	8027883a 	mov	r19,r16
    709c:	00063200 	call	6320 <_fflush_r>
    70a0:	103f6b26 	beq	r2,zero,6e50 <__sfvwrite_r+0x200>
    70a4:	003f7f06 	br	6ea4 <__sfvwrite_r+0x254>
    70a8:	400b883a 	mov	r5,r8
    70ac:	e009883a 	mov	r4,fp
    70b0:	00087b40 	call	87b4 <_realloc_r>
    70b4:	103f7626 	beq	r2,zero,6e90 <__sfvwrite_r+0x240>
    70b8:	1023883a 	mov	r17,r2
    70bc:	003f5006 	br	6e00 <__sfvwrite_r+0x1b0>
    70c0:	00c00044 	movi	r3,1
    70c4:	9d000044 	addi	r20,r19,1
    70c8:	d8c00015 	stw	r3,0(sp)
    70cc:	003f8206 	br	6ed8 <__sfvwrite_r+0x288>
    70d0:	9080030b 	ldhu	r2,12(r18)
    70d4:	00c00244 	movi	r3,9
    70d8:	013fffc4 	movi	r4,-1
    70dc:	10801014 	ori	r2,r2,64
    70e0:	9080030d 	sth	r2,12(r18)
    70e4:	e0c00015 	stw	r3,0(fp)
    70e8:	003f0606 	br	6d04 <__sfvwrite_r+0xb4>

000070ec <_fwalk_reent>:
    70ec:	defff704 	addi	sp,sp,-36
    70f0:	dcc00315 	stw	r19,12(sp)
    70f4:	24c0b804 	addi	r19,r4,736
    70f8:	dd800615 	stw	r22,24(sp)
    70fc:	dd400515 	stw	r21,20(sp)
    7100:	dfc00815 	stw	ra,32(sp)
    7104:	ddc00715 	stw	r23,28(sp)
    7108:	dd000415 	stw	r20,16(sp)
    710c:	dc800215 	stw	r18,8(sp)
    7110:	dc400115 	stw	r17,4(sp)
    7114:	dc000015 	stw	r16,0(sp)
    7118:	202b883a 	mov	r21,r4
    711c:	282d883a 	mov	r22,r5
    7120:	00065a80 	call	65a8 <__sfp_lock_acquire>
    7124:	98002126 	beq	r19,zero,71ac <_fwalk_reent+0xc0>
    7128:	002f883a 	mov	r23,zero
    712c:	9c800117 	ldw	r18,4(r19)
    7130:	9c000217 	ldw	r16,8(r19)
    7134:	90bfffc4 	addi	r2,r18,-1
    7138:	10000d16 	blt	r2,zero,7170 <_fwalk_reent+0x84>
    713c:	0023883a 	mov	r17,zero
    7140:	053fffc4 	movi	r20,-1
    7144:	8080030f 	ldh	r2,12(r16)
    7148:	8c400044 	addi	r17,r17,1
    714c:	10000626 	beq	r2,zero,7168 <_fwalk_reent+0x7c>
    7150:	8080038f 	ldh	r2,14(r16)
    7154:	800b883a 	mov	r5,r16
    7158:	a809883a 	mov	r4,r21
    715c:	15000226 	beq	r2,r20,7168 <_fwalk_reent+0x7c>
    7160:	b03ee83a 	callr	r22
    7164:	b8aeb03a 	or	r23,r23,r2
    7168:	84001704 	addi	r16,r16,92
    716c:	947ff51e 	bne	r18,r17,7144 <_fwalk_reent+0x58>
    7170:	9cc00017 	ldw	r19,0(r19)
    7174:	983fed1e 	bne	r19,zero,712c <_fwalk_reent+0x40>
    7178:	00065ac0 	call	65ac <__sfp_lock_release>
    717c:	b805883a 	mov	r2,r23
    7180:	dfc00817 	ldw	ra,32(sp)
    7184:	ddc00717 	ldw	r23,28(sp)
    7188:	dd800617 	ldw	r22,24(sp)
    718c:	dd400517 	ldw	r21,20(sp)
    7190:	dd000417 	ldw	r20,16(sp)
    7194:	dcc00317 	ldw	r19,12(sp)
    7198:	dc800217 	ldw	r18,8(sp)
    719c:	dc400117 	ldw	r17,4(sp)
    71a0:	dc000017 	ldw	r16,0(sp)
    71a4:	dec00904 	addi	sp,sp,36
    71a8:	f800283a 	ret
    71ac:	002f883a 	mov	r23,zero
    71b0:	003ff106 	br	7178 <_fwalk_reent+0x8c>

000071b4 <_fwalk>:
    71b4:	defff804 	addi	sp,sp,-32
    71b8:	dcc00315 	stw	r19,12(sp)
    71bc:	24c0b804 	addi	r19,r4,736
    71c0:	dd400515 	stw	r21,20(sp)
    71c4:	dfc00715 	stw	ra,28(sp)
    71c8:	dd800615 	stw	r22,24(sp)
    71cc:	dd000415 	stw	r20,16(sp)
    71d0:	dc800215 	stw	r18,8(sp)
    71d4:	dc400115 	stw	r17,4(sp)
    71d8:	dc000015 	stw	r16,0(sp)
    71dc:	282b883a 	mov	r21,r5
    71e0:	00065a80 	call	65a8 <__sfp_lock_acquire>
    71e4:	98001f26 	beq	r19,zero,7264 <_fwalk+0xb0>
    71e8:	002d883a 	mov	r22,zero
    71ec:	9c800117 	ldw	r18,4(r19)
    71f0:	9c000217 	ldw	r16,8(r19)
    71f4:	90bfffc4 	addi	r2,r18,-1
    71f8:	10000c16 	blt	r2,zero,722c <_fwalk+0x78>
    71fc:	0023883a 	mov	r17,zero
    7200:	053fffc4 	movi	r20,-1
    7204:	8080030f 	ldh	r2,12(r16)
    7208:	8c400044 	addi	r17,r17,1
    720c:	10000526 	beq	r2,zero,7224 <_fwalk+0x70>
    7210:	8080038f 	ldh	r2,14(r16)
    7214:	8009883a 	mov	r4,r16
    7218:	15000226 	beq	r2,r20,7224 <_fwalk+0x70>
    721c:	a83ee83a 	callr	r21
    7220:	b0acb03a 	or	r22,r22,r2
    7224:	84001704 	addi	r16,r16,92
    7228:	947ff61e 	bne	r18,r17,7204 <_fwalk+0x50>
    722c:	9cc00017 	ldw	r19,0(r19)
    7230:	983fee1e 	bne	r19,zero,71ec <_fwalk+0x38>
    7234:	00065ac0 	call	65ac <__sfp_lock_release>
    7238:	b005883a 	mov	r2,r22
    723c:	dfc00717 	ldw	ra,28(sp)
    7240:	dd800617 	ldw	r22,24(sp)
    7244:	dd400517 	ldw	r21,20(sp)
    7248:	dd000417 	ldw	r20,16(sp)
    724c:	dcc00317 	ldw	r19,12(sp)
    7250:	dc800217 	ldw	r18,8(sp)
    7254:	dc400117 	ldw	r17,4(sp)
    7258:	dc000017 	ldw	r16,0(sp)
    725c:	dec00804 	addi	sp,sp,32
    7260:	f800283a 	ret
    7264:	002d883a 	mov	r22,zero
    7268:	003ff206 	br	7234 <_fwalk+0x80>

0000726c <__locale_charset>:
    726c:	d0a00617 	ldw	r2,-32744(gp)
    7270:	f800283a 	ret

00007274 <_localeconv_r>:
    7274:	00800074 	movhi	r2,1
    7278:	10b98504 	addi	r2,r2,-6636
    727c:	f800283a 	ret

00007280 <localeconv>:
    7280:	00800074 	movhi	r2,1
    7284:	1080c204 	addi	r2,r2,776
    7288:	11000017 	ldw	r4,0(r2)
    728c:	00072741 	jmpi	7274 <_localeconv_r>

00007290 <_setlocale_r>:
    7290:	defffc04 	addi	sp,sp,-16
    7294:	00c00074 	movhi	r3,1
    7298:	18f95b04 	addi	r3,r3,-6804
    729c:	dc800215 	stw	r18,8(sp)
    72a0:	dc400115 	stw	r17,4(sp)
    72a4:	dc000015 	stw	r16,0(sp)
    72a8:	2023883a 	mov	r17,r4
    72ac:	2825883a 	mov	r18,r5
    72b0:	dfc00315 	stw	ra,12(sp)
    72b4:	3021883a 	mov	r16,r6
    72b8:	3009883a 	mov	r4,r6
    72bc:	180b883a 	mov	r5,r3
    72c0:	30000926 	beq	r6,zero,72e8 <_setlocale_r+0x58>
    72c4:	0008f640 	call	8f64 <strcmp>
    72c8:	8009883a 	mov	r4,r16
    72cc:	01400074 	movhi	r5,1
    72d0:	29796c04 	addi	r5,r5,-6736
    72d4:	10000b1e 	bne	r2,zero,7304 <_setlocale_r+0x74>
    72d8:	8c000d15 	stw	r16,52(r17)
    72dc:	8c800c15 	stw	r18,48(r17)
    72e0:	00c00074 	movhi	r3,1
    72e4:	18f95b04 	addi	r3,r3,-6804
    72e8:	1805883a 	mov	r2,r3
    72ec:	dfc00317 	ldw	ra,12(sp)
    72f0:	dc800217 	ldw	r18,8(sp)
    72f4:	dc400117 	ldw	r17,4(sp)
    72f8:	dc000017 	ldw	r16,0(sp)
    72fc:	dec00404 	addi	sp,sp,16
    7300:	f800283a 	ret
    7304:	0008f640 	call	8f64 <strcmp>
    7308:	0007883a 	mov	r3,zero
    730c:	103ff226 	beq	r2,zero,72d8 <_setlocale_r+0x48>
    7310:	003ff506 	br	72e8 <_setlocale_r+0x58>

00007314 <setlocale>:
    7314:	01800074 	movhi	r6,1
    7318:	3180c204 	addi	r6,r6,776
    731c:	2007883a 	mov	r3,r4
    7320:	31000017 	ldw	r4,0(r6)
    7324:	280d883a 	mov	r6,r5
    7328:	180b883a 	mov	r5,r3
    732c:	00072901 	jmpi	7290 <_setlocale_r>

00007330 <__smakebuf_r>:
    7330:	2880030b 	ldhu	r2,12(r5)
    7334:	deffed04 	addi	sp,sp,-76
    7338:	dc401015 	stw	r17,64(sp)
    733c:	1080008c 	andi	r2,r2,2
    7340:	dc000f15 	stw	r16,60(sp)
    7344:	dfc01215 	stw	ra,72(sp)
    7348:	dc801115 	stw	r18,68(sp)
    734c:	2821883a 	mov	r16,r5
    7350:	2023883a 	mov	r17,r4
    7354:	10000b26 	beq	r2,zero,7384 <__smakebuf_r+0x54>
    7358:	28c010c4 	addi	r3,r5,67
    735c:	00800044 	movi	r2,1
    7360:	28800515 	stw	r2,20(r5)
    7364:	28c00415 	stw	r3,16(r5)
    7368:	28c00015 	stw	r3,0(r5)
    736c:	dfc01217 	ldw	ra,72(sp)
    7370:	dc801117 	ldw	r18,68(sp)
    7374:	dc401017 	ldw	r17,64(sp)
    7378:	dc000f17 	ldw	r16,60(sp)
    737c:	dec01304 	addi	sp,sp,76
    7380:	f800283a 	ret
    7384:	2940038f 	ldh	r5,14(r5)
    7388:	28002116 	blt	r5,zero,7410 <__smakebuf_r+0xe0>
    738c:	d80d883a 	mov	r6,sp
    7390:	00092e00 	call	92e0 <_fstat_r>
    7394:	10001e16 	blt	r2,zero,7410 <__smakebuf_r+0xe0>
    7398:	d8800117 	ldw	r2,4(sp)
    739c:	00e00014 	movui	r3,32768
    73a0:	113c000c 	andi	r4,r2,61440
    73a4:	20c03126 	beq	r4,r3,746c <__smakebuf_r+0x13c>
    73a8:	8080030b 	ldhu	r2,12(r16)
    73ac:	00c80004 	movi	r3,8192
    73b0:	10820014 	ori	r2,r2,2048
    73b4:	8080030d 	sth	r2,12(r16)
    73b8:	20c01e26 	beq	r4,r3,7434 <__smakebuf_r+0x104>
    73bc:	04810004 	movi	r18,1024
    73c0:	8809883a 	mov	r4,r17
    73c4:	900b883a 	mov	r5,r18
    73c8:	0001fec0 	call	1fec <_malloc_r>
    73cc:	1009883a 	mov	r4,r2
    73d0:	10003126 	beq	r2,zero,7498 <__smakebuf_r+0x168>
    73d4:	80c0030b 	ldhu	r3,12(r16)
    73d8:	00800034 	movhi	r2,0
    73dc:	1099a704 	addi	r2,r2,26268
    73e0:	88800f15 	stw	r2,60(r17)
    73e4:	18c02014 	ori	r3,r3,128
    73e8:	84800515 	stw	r18,20(r16)
    73ec:	80c0030d 	sth	r3,12(r16)
    73f0:	81000415 	stw	r4,16(r16)
    73f4:	81000015 	stw	r4,0(r16)
    73f8:	dfc01217 	ldw	ra,72(sp)
    73fc:	dc801117 	ldw	r18,68(sp)
    7400:	dc401017 	ldw	r17,64(sp)
    7404:	dc000f17 	ldw	r16,60(sp)
    7408:	dec01304 	addi	sp,sp,76
    740c:	f800283a 	ret
    7410:	80c0030b 	ldhu	r3,12(r16)
    7414:	1880200c 	andi	r2,r3,128
    7418:	10000426 	beq	r2,zero,742c <__smakebuf_r+0xfc>
    741c:	04801004 	movi	r18,64
    7420:	18820014 	ori	r2,r3,2048
    7424:	8080030d 	sth	r2,12(r16)
    7428:	003fe506 	br	73c0 <__smakebuf_r+0x90>
    742c:	04810004 	movi	r18,1024
    7430:	003ffb06 	br	7420 <__smakebuf_r+0xf0>
    7434:	8140038f 	ldh	r5,14(r16)
    7438:	8809883a 	mov	r4,r17
    743c:	00093540 	call	9354 <_isatty_r>
    7440:	103fde26 	beq	r2,zero,73bc <__smakebuf_r+0x8c>
    7444:	8080030b 	ldhu	r2,12(r16)
    7448:	80c010c4 	addi	r3,r16,67
    744c:	04810004 	movi	r18,1024
    7450:	10800054 	ori	r2,r2,1
    7454:	8080030d 	sth	r2,12(r16)
    7458:	00800044 	movi	r2,1
    745c:	80c00415 	stw	r3,16(r16)
    7460:	80800515 	stw	r2,20(r16)
    7464:	80c00015 	stw	r3,0(r16)
    7468:	003fd506 	br	73c0 <__smakebuf_r+0x90>
    746c:	80c00a17 	ldw	r3,40(r16)
    7470:	00800074 	movhi	r2,1
    7474:	10a38804 	addi	r2,r2,-29152
    7478:	18bfcb1e 	bne	r3,r2,73a8 <__smakebuf_r+0x78>
    747c:	8080030b 	ldhu	r2,12(r16)
    7480:	00c10004 	movi	r3,1024
    7484:	1825883a 	mov	r18,r3
    7488:	10c4b03a 	or	r2,r2,r3
    748c:	8080030d 	sth	r2,12(r16)
    7490:	80c01315 	stw	r3,76(r16)
    7494:	003fca06 	br	73c0 <__smakebuf_r+0x90>
    7498:	8100030b 	ldhu	r4,12(r16)
    749c:	2080800c 	andi	r2,r4,512
    74a0:	103fb21e 	bne	r2,zero,736c <__smakebuf_r+0x3c>
    74a4:	80c010c4 	addi	r3,r16,67
    74a8:	21000094 	ori	r4,r4,2
    74ac:	00800044 	movi	r2,1
    74b0:	80800515 	stw	r2,20(r16)
    74b4:	8100030d 	sth	r4,12(r16)
    74b8:	80c00415 	stw	r3,16(r16)
    74bc:	80c00015 	stw	r3,0(r16)
    74c0:	003faa06 	br	736c <__smakebuf_r+0x3c>

000074c4 <memchr>:
    74c4:	008000c4 	movi	r2,3
    74c8:	29403fcc 	andi	r5,r5,255
    74cc:	2007883a 	mov	r3,r4
    74d0:	1180022e 	bgeu	r2,r6,74dc <memchr+0x18>
    74d4:	2084703a 	and	r2,r4,r2
    74d8:	10000b26 	beq	r2,zero,7508 <memchr+0x44>
    74dc:	313fffc4 	addi	r4,r6,-1
    74e0:	3000051e 	bne	r6,zero,74f8 <memchr+0x34>
    74e4:	00002c06 	br	7598 <memchr+0xd4>
    74e8:	213fffc4 	addi	r4,r4,-1
    74ec:	00bfffc4 	movi	r2,-1
    74f0:	18c00044 	addi	r3,r3,1
    74f4:	20802826 	beq	r4,r2,7598 <memchr+0xd4>
    74f8:	18800003 	ldbu	r2,0(r3)
    74fc:	28bffa1e 	bne	r5,r2,74e8 <memchr+0x24>
    7500:	1805883a 	mov	r2,r3
    7504:	f800283a 	ret
    7508:	0011883a 	mov	r8,zero
    750c:	0007883a 	mov	r3,zero
    7510:	01c00104 	movi	r7,4
    7514:	4004923a 	slli	r2,r8,8
    7518:	18c00044 	addi	r3,r3,1
    751c:	1151883a 	add	r8,r2,r5
    7520:	19fffc1e 	bne	r3,r7,7514 <memchr+0x50>
    7524:	02bfbff4 	movhi	r10,65279
    7528:	52bfbfc4 	addi	r10,r10,-257
    752c:	02602074 	movhi	r9,32897
    7530:	4a602004 	addi	r9,r9,-32640
    7534:	02c000c4 	movi	r11,3
    7538:	20800017 	ldw	r2,0(r4)
    753c:	31bfff04 	addi	r6,r6,-4
    7540:	200f883a 	mov	r7,r4
    7544:	1204f03a 	xor	r2,r2,r8
    7548:	1287883a 	add	r3,r2,r10
    754c:	1a46703a 	and	r3,r3,r9
    7550:	0084303a 	nor	r2,zero,r2
    7554:	10c4703a 	and	r2,r2,r3
    7558:	10000b26 	beq	r2,zero,7588 <memchr+0xc4>
    755c:	20800003 	ldbu	r2,0(r4)
    7560:	28800f26 	beq	r5,r2,75a0 <memchr+0xdc>
    7564:	20800043 	ldbu	r2,1(r4)
    7568:	21c00044 	addi	r7,r4,1
    756c:	28800c26 	beq	r5,r2,75a0 <memchr+0xdc>
    7570:	20800083 	ldbu	r2,2(r4)
    7574:	21c00084 	addi	r7,r4,2
    7578:	28800926 	beq	r5,r2,75a0 <memchr+0xdc>
    757c:	208000c3 	ldbu	r2,3(r4)
    7580:	21c000c4 	addi	r7,r4,3
    7584:	28800626 	beq	r5,r2,75a0 <memchr+0xdc>
    7588:	21000104 	addi	r4,r4,4
    758c:	59bfea36 	bltu	r11,r6,7538 <memchr+0x74>
    7590:	2007883a 	mov	r3,r4
    7594:	003fd106 	br	74dc <memchr+0x18>
    7598:	0005883a 	mov	r2,zero
    759c:	f800283a 	ret
    75a0:	3805883a 	mov	r2,r7
    75a4:	f800283a 	ret

000075a8 <memcpy>:
    75a8:	01c003c4 	movi	r7,15
    75ac:	2007883a 	mov	r3,r4
    75b0:	3980032e 	bgeu	r7,r6,75c0 <memcpy+0x18>
    75b4:	2904b03a 	or	r2,r5,r4
    75b8:	108000cc 	andi	r2,r2,3
    75bc:	10000926 	beq	r2,zero,75e4 <memcpy+0x3c>
    75c0:	30000626 	beq	r6,zero,75dc <memcpy+0x34>
    75c4:	30cd883a 	add	r6,r6,r3
    75c8:	28800003 	ldbu	r2,0(r5)
    75cc:	29400044 	addi	r5,r5,1
    75d0:	18800005 	stb	r2,0(r3)
    75d4:	18c00044 	addi	r3,r3,1
    75d8:	30fffb1e 	bne	r6,r3,75c8 <memcpy+0x20>
    75dc:	2005883a 	mov	r2,r4
    75e0:	f800283a 	ret
    75e4:	3811883a 	mov	r8,r7
    75e8:	200f883a 	mov	r7,r4
    75ec:	28c00017 	ldw	r3,0(r5)
    75f0:	31bffc04 	addi	r6,r6,-16
    75f4:	38c00015 	stw	r3,0(r7)
    75f8:	28800117 	ldw	r2,4(r5)
    75fc:	38800115 	stw	r2,4(r7)
    7600:	28c00217 	ldw	r3,8(r5)
    7604:	38c00215 	stw	r3,8(r7)
    7608:	28800317 	ldw	r2,12(r5)
    760c:	29400404 	addi	r5,r5,16
    7610:	38800315 	stw	r2,12(r7)
    7614:	39c00404 	addi	r7,r7,16
    7618:	41bff436 	bltu	r8,r6,75ec <memcpy+0x44>
    761c:	008000c4 	movi	r2,3
    7620:	1180072e 	bgeu	r2,r6,7640 <memcpy+0x98>
    7624:	1007883a 	mov	r3,r2
    7628:	28800017 	ldw	r2,0(r5)
    762c:	31bfff04 	addi	r6,r6,-4
    7630:	29400104 	addi	r5,r5,4
    7634:	38800015 	stw	r2,0(r7)
    7638:	39c00104 	addi	r7,r7,4
    763c:	19bffa36 	bltu	r3,r6,7628 <memcpy+0x80>
    7640:	3807883a 	mov	r3,r7
    7644:	003fde06 	br	75c0 <memcpy+0x18>

00007648 <memmove>:
    7648:	2807883a 	mov	r3,r5
    764c:	2011883a 	mov	r8,r4
    7650:	29000c2e 	bgeu	r5,r4,7684 <memmove+0x3c>
    7654:	298f883a 	add	r7,r5,r6
    7658:	21c00a2e 	bgeu	r4,r7,7684 <memmove+0x3c>
    765c:	30000726 	beq	r6,zero,767c <memmove+0x34>
    7660:	2187883a 	add	r3,r4,r6
    7664:	198dc83a 	sub	r6,r3,r6
    7668:	39ffffc4 	addi	r7,r7,-1
    766c:	38800003 	ldbu	r2,0(r7)
    7670:	18ffffc4 	addi	r3,r3,-1
    7674:	18800005 	stb	r2,0(r3)
    7678:	19bffb1e 	bne	r3,r6,7668 <memmove+0x20>
    767c:	2005883a 	mov	r2,r4
    7680:	f800283a 	ret
    7684:	01c003c4 	movi	r7,15
    7688:	39800a36 	bltu	r7,r6,76b4 <memmove+0x6c>
    768c:	303ffb26 	beq	r6,zero,767c <memmove+0x34>
    7690:	400f883a 	mov	r7,r8
    7694:	320d883a 	add	r6,r6,r8
    7698:	28800003 	ldbu	r2,0(r5)
    769c:	29400044 	addi	r5,r5,1
    76a0:	38800005 	stb	r2,0(r7)
    76a4:	39c00044 	addi	r7,r7,1
    76a8:	39bffb1e 	bne	r7,r6,7698 <memmove+0x50>
    76ac:	2005883a 	mov	r2,r4
    76b0:	f800283a 	ret
    76b4:	1904b03a 	or	r2,r3,r4
    76b8:	108000cc 	andi	r2,r2,3
    76bc:	103ff31e 	bne	r2,zero,768c <memmove+0x44>
    76c0:	3811883a 	mov	r8,r7
    76c4:	180b883a 	mov	r5,r3
    76c8:	200f883a 	mov	r7,r4
    76cc:	28c00017 	ldw	r3,0(r5)
    76d0:	31bffc04 	addi	r6,r6,-16
    76d4:	38c00015 	stw	r3,0(r7)
    76d8:	28800117 	ldw	r2,4(r5)
    76dc:	38800115 	stw	r2,4(r7)
    76e0:	28c00217 	ldw	r3,8(r5)
    76e4:	38c00215 	stw	r3,8(r7)
    76e8:	28800317 	ldw	r2,12(r5)
    76ec:	29400404 	addi	r5,r5,16
    76f0:	38800315 	stw	r2,12(r7)
    76f4:	39c00404 	addi	r7,r7,16
    76f8:	41bff436 	bltu	r8,r6,76cc <memmove+0x84>
    76fc:	008000c4 	movi	r2,3
    7700:	1180072e 	bgeu	r2,r6,7720 <memmove+0xd8>
    7704:	1007883a 	mov	r3,r2
    7708:	28800017 	ldw	r2,0(r5)
    770c:	31bfff04 	addi	r6,r6,-4
    7710:	29400104 	addi	r5,r5,4
    7714:	38800015 	stw	r2,0(r7)
    7718:	39c00104 	addi	r7,r7,4
    771c:	19bffa36 	bltu	r3,r6,7708 <memmove+0xc0>
    7720:	3811883a 	mov	r8,r7
    7724:	003fd906 	br	768c <memmove+0x44>

00007728 <memset>:
    7728:	008000c4 	movi	r2,3
    772c:	29403fcc 	andi	r5,r5,255
    7730:	2007883a 	mov	r3,r4
    7734:	1180022e 	bgeu	r2,r6,7740 <memset+0x18>
    7738:	2084703a 	and	r2,r4,r2
    773c:	10000826 	beq	r2,zero,7760 <memset+0x38>
    7740:	30000526 	beq	r6,zero,7758 <memset+0x30>
    7744:	2805883a 	mov	r2,r5
    7748:	30cd883a 	add	r6,r6,r3
    774c:	18800005 	stb	r2,0(r3)
    7750:	18c00044 	addi	r3,r3,1
    7754:	19bffd1e 	bne	r3,r6,774c <memset+0x24>
    7758:	2005883a 	mov	r2,r4
    775c:	f800283a 	ret
    7760:	2804923a 	slli	r2,r5,8
    7764:	020003c4 	movi	r8,15
    7768:	200f883a 	mov	r7,r4
    776c:	2884b03a 	or	r2,r5,r2
    7770:	1006943a 	slli	r3,r2,16
    7774:	10c6b03a 	or	r3,r2,r3
    7778:	41800a2e 	bgeu	r8,r6,77a4 <memset+0x7c>
    777c:	4005883a 	mov	r2,r8
    7780:	31bffc04 	addi	r6,r6,-16
    7784:	38c00015 	stw	r3,0(r7)
    7788:	38c00115 	stw	r3,4(r7)
    778c:	38c00215 	stw	r3,8(r7)
    7790:	38c00315 	stw	r3,12(r7)
    7794:	39c00404 	addi	r7,r7,16
    7798:	11bff936 	bltu	r2,r6,7780 <memset+0x58>
    779c:	008000c4 	movi	r2,3
    77a0:	1180052e 	bgeu	r2,r6,77b8 <memset+0x90>
    77a4:	31bfff04 	addi	r6,r6,-4
    77a8:	008000c4 	movi	r2,3
    77ac:	38c00015 	stw	r3,0(r7)
    77b0:	39c00104 	addi	r7,r7,4
    77b4:	11bffb36 	bltu	r2,r6,77a4 <memset+0x7c>
    77b8:	3807883a 	mov	r3,r7
    77bc:	003fe006 	br	7740 <memset+0x18>

000077c0 <_Bfree>:
    77c0:	28000826 	beq	r5,zero,77e4 <_Bfree+0x24>
    77c4:	28800117 	ldw	r2,4(r5)
    77c8:	21001317 	ldw	r4,76(r4)
    77cc:	1085883a 	add	r2,r2,r2
    77d0:	1085883a 	add	r2,r2,r2
    77d4:	1105883a 	add	r2,r2,r4
    77d8:	10c00017 	ldw	r3,0(r2)
    77dc:	28c00015 	stw	r3,0(r5)
    77e0:	11400015 	stw	r5,0(r2)
    77e4:	f800283a 	ret

000077e8 <__hi0bits>:
    77e8:	20bfffec 	andhi	r2,r4,65535
    77ec:	10001426 	beq	r2,zero,7840 <__hi0bits+0x58>
    77f0:	0007883a 	mov	r3,zero
    77f4:	20bfc02c 	andhi	r2,r4,65280
    77f8:	1000021e 	bne	r2,zero,7804 <__hi0bits+0x1c>
    77fc:	2008923a 	slli	r4,r4,8
    7800:	18c00204 	addi	r3,r3,8
    7804:	20bc002c 	andhi	r2,r4,61440
    7808:	1000021e 	bne	r2,zero,7814 <__hi0bits+0x2c>
    780c:	2008913a 	slli	r4,r4,4
    7810:	18c00104 	addi	r3,r3,4
    7814:	20b0002c 	andhi	r2,r4,49152
    7818:	1000031e 	bne	r2,zero,7828 <__hi0bits+0x40>
    781c:	2105883a 	add	r2,r4,r4
    7820:	18c00084 	addi	r3,r3,2
    7824:	1089883a 	add	r4,r2,r2
    7828:	20000316 	blt	r4,zero,7838 <__hi0bits+0x50>
    782c:	2090002c 	andhi	r2,r4,16384
    7830:	10000626 	beq	r2,zero,784c <__hi0bits+0x64>
    7834:	18c00044 	addi	r3,r3,1
    7838:	1805883a 	mov	r2,r3
    783c:	f800283a 	ret
    7840:	2008943a 	slli	r4,r4,16
    7844:	00c00404 	movi	r3,16
    7848:	003fea06 	br	77f4 <__hi0bits+0xc>
    784c:	00c00804 	movi	r3,32
    7850:	1805883a 	mov	r2,r3
    7854:	f800283a 	ret

00007858 <__lo0bits>:
    7858:	20c00017 	ldw	r3,0(r4)
    785c:	188001cc 	andi	r2,r3,7
    7860:	10000a26 	beq	r2,zero,788c <__lo0bits+0x34>
    7864:	1880004c 	andi	r2,r3,1
    7868:	1005003a 	cmpeq	r2,r2,zero
    786c:	10002126 	beq	r2,zero,78f4 <__lo0bits+0x9c>
    7870:	1880008c 	andi	r2,r3,2
    7874:	1000251e 	bne	r2,zero,790c <__lo0bits+0xb4>
    7878:	1804d0ba 	srli	r2,r3,2
    787c:	01400084 	movi	r5,2
    7880:	20800015 	stw	r2,0(r4)
    7884:	2805883a 	mov	r2,r5
    7888:	f800283a 	ret
    788c:	18bfffcc 	andi	r2,r3,65535
    7890:	10001526 	beq	r2,zero,78e8 <__lo0bits+0x90>
    7894:	000b883a 	mov	r5,zero
    7898:	18803fcc 	andi	r2,r3,255
    789c:	1000021e 	bne	r2,zero,78a8 <__lo0bits+0x50>
    78a0:	1806d23a 	srli	r3,r3,8
    78a4:	29400204 	addi	r5,r5,8
    78a8:	188003cc 	andi	r2,r3,15
    78ac:	1000021e 	bne	r2,zero,78b8 <__lo0bits+0x60>
    78b0:	1806d13a 	srli	r3,r3,4
    78b4:	29400104 	addi	r5,r5,4
    78b8:	188000cc 	andi	r2,r3,3
    78bc:	1000021e 	bne	r2,zero,78c8 <__lo0bits+0x70>
    78c0:	1806d0ba 	srli	r3,r3,2
    78c4:	29400084 	addi	r5,r5,2
    78c8:	1880004c 	andi	r2,r3,1
    78cc:	1000031e 	bne	r2,zero,78dc <__lo0bits+0x84>
    78d0:	1806d07a 	srli	r3,r3,1
    78d4:	18000a26 	beq	r3,zero,7900 <__lo0bits+0xa8>
    78d8:	29400044 	addi	r5,r5,1
    78dc:	2805883a 	mov	r2,r5
    78e0:	20c00015 	stw	r3,0(r4)
    78e4:	f800283a 	ret
    78e8:	1806d43a 	srli	r3,r3,16
    78ec:	01400404 	movi	r5,16
    78f0:	003fe906 	br	7898 <__lo0bits+0x40>
    78f4:	000b883a 	mov	r5,zero
    78f8:	2805883a 	mov	r2,r5
    78fc:	f800283a 	ret
    7900:	01400804 	movi	r5,32
    7904:	2805883a 	mov	r2,r5
    7908:	f800283a 	ret
    790c:	1804d07a 	srli	r2,r3,1
    7910:	01400044 	movi	r5,1
    7914:	20800015 	stw	r2,0(r4)
    7918:	003fda06 	br	7884 <__lo0bits+0x2c>

0000791c <__mcmp>:
    791c:	20800417 	ldw	r2,16(r4)
    7920:	28c00417 	ldw	r3,16(r5)
    7924:	10cfc83a 	sub	r7,r2,r3
    7928:	38000c1e 	bne	r7,zero,795c <__mcmp+0x40>
    792c:	18c5883a 	add	r2,r3,r3
    7930:	1085883a 	add	r2,r2,r2
    7934:	10c00504 	addi	r3,r2,20
    7938:	21000504 	addi	r4,r4,20
    793c:	28cb883a 	add	r5,r5,r3
    7940:	2085883a 	add	r2,r4,r2
    7944:	10bfff04 	addi	r2,r2,-4
    7948:	297fff04 	addi	r5,r5,-4
    794c:	11800017 	ldw	r6,0(r2)
    7950:	28c00017 	ldw	r3,0(r5)
    7954:	30c0031e 	bne	r6,r3,7964 <__mcmp+0x48>
    7958:	20bffa36 	bltu	r4,r2,7944 <__mcmp+0x28>
    795c:	3805883a 	mov	r2,r7
    7960:	f800283a 	ret
    7964:	30c00336 	bltu	r6,r3,7974 <__mcmp+0x58>
    7968:	01c00044 	movi	r7,1
    796c:	3805883a 	mov	r2,r7
    7970:	f800283a 	ret
    7974:	01ffffc4 	movi	r7,-1
    7978:	003ff806 	br	795c <__mcmp+0x40>

0000797c <__ulp>:
    797c:	295ffc2c 	andhi	r5,r5,32752
    7980:	013f3034 	movhi	r4,64704
    7984:	290b883a 	add	r5,r5,r4
    7988:	0145c83a 	sub	r2,zero,r5
    798c:	1007d53a 	srai	r3,r2,20
    7990:	000d883a 	mov	r6,zero
    7994:	0140040e 	bge	zero,r5,79a8 <__ulp+0x2c>
    7998:	280f883a 	mov	r7,r5
    799c:	3807883a 	mov	r3,r7
    79a0:	3005883a 	mov	r2,r6
    79a4:	f800283a 	ret
    79a8:	008004c4 	movi	r2,19
    79ac:	193ffb04 	addi	r4,r3,-20
    79b0:	10c00c0e 	bge	r2,r3,79e4 <__ulp+0x68>
    79b4:	008007c4 	movi	r2,31
    79b8:	1107c83a 	sub	r3,r2,r4
    79bc:	00800784 	movi	r2,30
    79c0:	01400044 	movi	r5,1
    79c4:	11000216 	blt	r2,r4,79d0 <__ulp+0x54>
    79c8:	00800044 	movi	r2,1
    79cc:	10ca983a 	sll	r5,r2,r3
    79d0:	000f883a 	mov	r7,zero
    79d4:	280d883a 	mov	r6,r5
    79d8:	3807883a 	mov	r3,r7
    79dc:	3005883a 	mov	r2,r6
    79e0:	f800283a 	ret
    79e4:	00800234 	movhi	r2,8
    79e8:	10cfd83a 	sra	r7,r2,r3
    79ec:	000d883a 	mov	r6,zero
    79f0:	3005883a 	mov	r2,r6
    79f4:	3807883a 	mov	r3,r7
    79f8:	f800283a 	ret

000079fc <__b2d>:
    79fc:	20800417 	ldw	r2,16(r4)
    7a00:	defff904 	addi	sp,sp,-28
    7a04:	dd000415 	stw	r20,16(sp)
    7a08:	1085883a 	add	r2,r2,r2
    7a0c:	25000504 	addi	r20,r4,20
    7a10:	1085883a 	add	r2,r2,r2
    7a14:	dc000015 	stw	r16,0(sp)
    7a18:	a0a1883a 	add	r16,r20,r2
    7a1c:	dd400515 	stw	r21,20(sp)
    7a20:	857fff17 	ldw	r21,-4(r16)
    7a24:	dc400115 	stw	r17,4(sp)
    7a28:	dfc00615 	stw	ra,24(sp)
    7a2c:	a809883a 	mov	r4,r21
    7a30:	2823883a 	mov	r17,r5
    7a34:	dcc00315 	stw	r19,12(sp)
    7a38:	dc800215 	stw	r18,8(sp)
    7a3c:	00077e80 	call	77e8 <__hi0bits>
    7a40:	100b883a 	mov	r5,r2
    7a44:	00800804 	movi	r2,32
    7a48:	1145c83a 	sub	r2,r2,r5
    7a4c:	88800015 	stw	r2,0(r17)
    7a50:	00800284 	movi	r2,10
    7a54:	80ffff04 	addi	r3,r16,-4
    7a58:	11401416 	blt	r2,r5,7aac <__b2d+0xb0>
    7a5c:	008002c4 	movi	r2,11
    7a60:	1149c83a 	sub	r4,r2,r5
    7a64:	a0c02736 	bltu	r20,r3,7b04 <__b2d+0x108>
    7a68:	000d883a 	mov	r6,zero
    7a6c:	28800544 	addi	r2,r5,21
    7a70:	a906d83a 	srl	r3,r21,r4
    7a74:	a884983a 	sll	r2,r21,r2
    7a78:	1ccffc34 	orhi	r19,r3,16368
    7a7c:	11a4b03a 	or	r18,r2,r6
    7a80:	9005883a 	mov	r2,r18
    7a84:	9807883a 	mov	r3,r19
    7a88:	dfc00617 	ldw	ra,24(sp)
    7a8c:	dd400517 	ldw	r21,20(sp)
    7a90:	dd000417 	ldw	r20,16(sp)
    7a94:	dcc00317 	ldw	r19,12(sp)
    7a98:	dc800217 	ldw	r18,8(sp)
    7a9c:	dc400117 	ldw	r17,4(sp)
    7aa0:	dc000017 	ldw	r16,0(sp)
    7aa4:	dec00704 	addi	sp,sp,28
    7aa8:	f800283a 	ret
    7aac:	a0c00e36 	bltu	r20,r3,7ae8 <__b2d+0xec>
    7ab0:	293ffd44 	addi	r4,r5,-11
    7ab4:	000d883a 	mov	r6,zero
    7ab8:	20000f26 	beq	r4,zero,7af8 <__b2d+0xfc>
    7abc:	00800804 	movi	r2,32
    7ac0:	110bc83a 	sub	r5,r2,r4
    7ac4:	a0c01236 	bltu	r20,r3,7b10 <__b2d+0x114>
    7ac8:	000f883a 	mov	r7,zero
    7acc:	a904983a 	sll	r2,r21,r4
    7ad0:	3146d83a 	srl	r3,r6,r5
    7ad4:	3108983a 	sll	r4,r6,r4
    7ad8:	108ffc34 	orhi	r2,r2,16368
    7adc:	18a6b03a 	or	r19,r3,r2
    7ae0:	3924b03a 	or	r18,r7,r4
    7ae4:	003fe606 	br	7a80 <__b2d+0x84>
    7ae8:	293ffd44 	addi	r4,r5,-11
    7aec:	81bffe17 	ldw	r6,-8(r16)
    7af0:	80fffe04 	addi	r3,r16,-8
    7af4:	203ff11e 	bne	r4,zero,7abc <__b2d+0xc0>
    7af8:	accffc34 	orhi	r19,r21,16368
    7afc:	3025883a 	mov	r18,r6
    7b00:	003fdf06 	br	7a80 <__b2d+0x84>
    7b04:	18bfff17 	ldw	r2,-4(r3)
    7b08:	110cd83a 	srl	r6,r2,r4
    7b0c:	003fd706 	br	7a6c <__b2d+0x70>
    7b10:	18bfff17 	ldw	r2,-4(r3)
    7b14:	114ed83a 	srl	r7,r2,r5
    7b18:	003fec06 	br	7acc <__b2d+0xd0>

00007b1c <__ratio>:
    7b1c:	defff904 	addi	sp,sp,-28
    7b20:	dc400215 	stw	r17,8(sp)
    7b24:	2823883a 	mov	r17,r5
    7b28:	d80b883a 	mov	r5,sp
    7b2c:	dfc00615 	stw	ra,24(sp)
    7b30:	dd000515 	stw	r20,20(sp)
    7b34:	dcc00415 	stw	r19,16(sp)
    7b38:	dc800315 	stw	r18,12(sp)
    7b3c:	2025883a 	mov	r18,r4
    7b40:	00079fc0 	call	79fc <__b2d>
    7b44:	8809883a 	mov	r4,r17
    7b48:	d9400104 	addi	r5,sp,4
    7b4c:	1027883a 	mov	r19,r2
    7b50:	1829883a 	mov	r20,r3
    7b54:	00079fc0 	call	79fc <__b2d>
    7b58:	89000417 	ldw	r4,16(r17)
    7b5c:	91c00417 	ldw	r7,16(r18)
    7b60:	d9800117 	ldw	r6,4(sp)
    7b64:	180b883a 	mov	r5,r3
    7b68:	390fc83a 	sub	r7,r7,r4
    7b6c:	1009883a 	mov	r4,r2
    7b70:	d8800017 	ldw	r2,0(sp)
    7b74:	380e917a 	slli	r7,r7,5
    7b78:	2011883a 	mov	r8,r4
    7b7c:	1185c83a 	sub	r2,r2,r6
    7b80:	11c5883a 	add	r2,r2,r7
    7b84:	1006953a 	slli	r3,r2,20
    7b88:	2813883a 	mov	r9,r5
    7b8c:	00800d0e 	bge	zero,r2,7bc4 <__ratio+0xa8>
    7b90:	1d29883a 	add	r20,r3,r20
    7b94:	a00b883a 	mov	r5,r20
    7b98:	480f883a 	mov	r7,r9
    7b9c:	9809883a 	mov	r4,r19
    7ba0:	400d883a 	mov	r6,r8
    7ba4:	000a9080 	call	a908 <__divdf3>
    7ba8:	dfc00617 	ldw	ra,24(sp)
    7bac:	dd000517 	ldw	r20,20(sp)
    7bb0:	dcc00417 	ldw	r19,16(sp)
    7bb4:	dc800317 	ldw	r18,12(sp)
    7bb8:	dc400217 	ldw	r17,8(sp)
    7bbc:	dec00704 	addi	sp,sp,28
    7bc0:	f800283a 	ret
    7bc4:	28d3c83a 	sub	r9,r5,r3
    7bc8:	003ff206 	br	7b94 <__ratio+0x78>

00007bcc <_mprec_log10>:
    7bcc:	defffe04 	addi	sp,sp,-8
    7bd0:	008005c4 	movi	r2,23
    7bd4:	dc000015 	stw	r16,0(sp)
    7bd8:	dfc00115 	stw	ra,4(sp)
    7bdc:	2021883a 	mov	r16,r4
    7be0:	11000c16 	blt	r2,r4,7c14 <_mprec_log10+0x48>
    7be4:	200490fa 	slli	r2,r4,3
    7be8:	00c00074 	movhi	r3,1
    7bec:	18f99104 	addi	r3,r3,-6588
    7bf0:	10c5883a 	add	r2,r2,r3
    7bf4:	12400117 	ldw	r9,4(r2)
    7bf8:	12000017 	ldw	r8,0(r2)
    7bfc:	4807883a 	mov	r3,r9
    7c00:	4005883a 	mov	r2,r8
    7c04:	dfc00117 	ldw	ra,4(sp)
    7c08:	dc000017 	ldw	r16,0(sp)
    7c0c:	dec00204 	addi	sp,sp,8
    7c10:	f800283a 	ret
    7c14:	0011883a 	mov	r8,zero
    7c18:	024ffc34 	movhi	r9,16368
    7c1c:	0005883a 	mov	r2,zero
    7c20:	00d00934 	movhi	r3,16420
    7c24:	480b883a 	mov	r5,r9
    7c28:	4009883a 	mov	r4,r8
    7c2c:	180f883a 	mov	r7,r3
    7c30:	100d883a 	mov	r6,r2
    7c34:	000a5440 	call	a544 <__muldf3>
    7c38:	843fffc4 	addi	r16,r16,-1
    7c3c:	1011883a 	mov	r8,r2
    7c40:	1813883a 	mov	r9,r3
    7c44:	803ff51e 	bne	r16,zero,7c1c <_mprec_log10+0x50>
    7c48:	4005883a 	mov	r2,r8
    7c4c:	4807883a 	mov	r3,r9
    7c50:	dfc00117 	ldw	ra,4(sp)
    7c54:	dc000017 	ldw	r16,0(sp)
    7c58:	dec00204 	addi	sp,sp,8
    7c5c:	f800283a 	ret

00007c60 <__copybits>:
    7c60:	297fffc4 	addi	r5,r5,-1
    7c64:	30800417 	ldw	r2,16(r6)
    7c68:	280bd17a 	srai	r5,r5,5
    7c6c:	31800504 	addi	r6,r6,20
    7c70:	1085883a 	add	r2,r2,r2
    7c74:	294b883a 	add	r5,r5,r5
    7c78:	294b883a 	add	r5,r5,r5
    7c7c:	1085883a 	add	r2,r2,r2
    7c80:	290b883a 	add	r5,r5,r4
    7c84:	3087883a 	add	r3,r6,r2
    7c88:	29400104 	addi	r5,r5,4
    7c8c:	30c0052e 	bgeu	r6,r3,7ca4 <__copybits+0x44>
    7c90:	30800017 	ldw	r2,0(r6)
    7c94:	31800104 	addi	r6,r6,4
    7c98:	20800015 	stw	r2,0(r4)
    7c9c:	21000104 	addi	r4,r4,4
    7ca0:	30fffb36 	bltu	r6,r3,7c90 <__copybits+0x30>
    7ca4:	2140032e 	bgeu	r4,r5,7cb4 <__copybits+0x54>
    7ca8:	20000015 	stw	zero,0(r4)
    7cac:	21000104 	addi	r4,r4,4
    7cb0:	217ffd36 	bltu	r4,r5,7ca8 <__copybits+0x48>
    7cb4:	f800283a 	ret

00007cb8 <__any_on>:
    7cb8:	20800417 	ldw	r2,16(r4)
    7cbc:	2807d17a 	srai	r3,r5,5
    7cc0:	21000504 	addi	r4,r4,20
    7cc4:	10c00d0e 	bge	r2,r3,7cfc <__any_on+0x44>
    7cc8:	1085883a 	add	r2,r2,r2
    7ccc:	1085883a 	add	r2,r2,r2
    7cd0:	208d883a 	add	r6,r4,r2
    7cd4:	2180182e 	bgeu	r4,r6,7d38 <__any_on+0x80>
    7cd8:	30bfff17 	ldw	r2,-4(r6)
    7cdc:	30ffff04 	addi	r3,r6,-4
    7ce0:	1000041e 	bne	r2,zero,7cf4 <__any_on+0x3c>
    7ce4:	20c0142e 	bgeu	r4,r3,7d38 <__any_on+0x80>
    7ce8:	18ffff04 	addi	r3,r3,-4
    7cec:	18800017 	ldw	r2,0(r3)
    7cf0:	103ffc26 	beq	r2,zero,7ce4 <__any_on+0x2c>
    7cf4:	00800044 	movi	r2,1
    7cf8:	f800283a 	ret
    7cfc:	18800a0e 	bge	r3,r2,7d28 <__any_on+0x70>
    7d00:	294007cc 	andi	r5,r5,31
    7d04:	28000826 	beq	r5,zero,7d28 <__any_on+0x70>
    7d08:	18c5883a 	add	r2,r3,r3
    7d0c:	1085883a 	add	r2,r2,r2
    7d10:	208d883a 	add	r6,r4,r2
    7d14:	30c00017 	ldw	r3,0(r6)
    7d18:	1944d83a 	srl	r2,r3,r5
    7d1c:	1144983a 	sll	r2,r2,r5
    7d20:	18bff41e 	bne	r3,r2,7cf4 <__any_on+0x3c>
    7d24:	003feb06 	br	7cd4 <__any_on+0x1c>
    7d28:	18c5883a 	add	r2,r3,r3
    7d2c:	1085883a 	add	r2,r2,r2
    7d30:	208d883a 	add	r6,r4,r2
    7d34:	003fe706 	br	7cd4 <__any_on+0x1c>
    7d38:	0005883a 	mov	r2,zero
    7d3c:	f800283a 	ret

00007d40 <_Balloc>:
    7d40:	20c01317 	ldw	r3,76(r4)
    7d44:	defffb04 	addi	sp,sp,-20
    7d48:	dcc00315 	stw	r19,12(sp)
    7d4c:	dc800215 	stw	r18,8(sp)
    7d50:	dfc00415 	stw	ra,16(sp)
    7d54:	2825883a 	mov	r18,r5
    7d58:	dc400115 	stw	r17,4(sp)
    7d5c:	dc000015 	stw	r16,0(sp)
    7d60:	2027883a 	mov	r19,r4
    7d64:	01800404 	movi	r6,16
    7d68:	01400104 	movi	r5,4
    7d6c:	18001726 	beq	r3,zero,7dcc <_Balloc+0x8c>
    7d70:	01400044 	movi	r5,1
    7d74:	9485883a 	add	r2,r18,r18
    7d78:	2ca2983a 	sll	r17,r5,r18
    7d7c:	1085883a 	add	r2,r2,r2
    7d80:	10c7883a 	add	r3,r2,r3
    7d84:	1c000017 	ldw	r16,0(r3)
    7d88:	8c4d883a 	add	r6,r17,r17
    7d8c:	318d883a 	add	r6,r6,r6
    7d90:	9809883a 	mov	r4,r19
    7d94:	31800504 	addi	r6,r6,20
    7d98:	80001226 	beq	r16,zero,7de4 <_Balloc+0xa4>
    7d9c:	80800017 	ldw	r2,0(r16)
    7da0:	18800015 	stw	r2,0(r3)
    7da4:	80000415 	stw	zero,16(r16)
    7da8:	80000315 	stw	zero,12(r16)
    7dac:	8005883a 	mov	r2,r16
    7db0:	dfc00417 	ldw	ra,16(sp)
    7db4:	dcc00317 	ldw	r19,12(sp)
    7db8:	dc800217 	ldw	r18,8(sp)
    7dbc:	dc400117 	ldw	r17,4(sp)
    7dc0:	dc000017 	ldw	r16,0(sp)
    7dc4:	dec00504 	addi	sp,sp,20
    7dc8:	f800283a 	ret
    7dcc:	00090980 	call	9098 <_calloc_r>
    7dd0:	1007883a 	mov	r3,r2
    7dd4:	0021883a 	mov	r16,zero
    7dd8:	98801315 	stw	r2,76(r19)
    7ddc:	103fe41e 	bne	r2,zero,7d70 <_Balloc+0x30>
    7de0:	003ff206 	br	7dac <_Balloc+0x6c>
    7de4:	00090980 	call	9098 <_calloc_r>
    7de8:	103ff026 	beq	r2,zero,7dac <_Balloc+0x6c>
    7dec:	1021883a 	mov	r16,r2
    7df0:	14800115 	stw	r18,4(r2)
    7df4:	14400215 	stw	r17,8(r2)
    7df8:	003fea06 	br	7da4 <_Balloc+0x64>

00007dfc <__d2b>:
    7dfc:	defff504 	addi	sp,sp,-44
    7e00:	dcc00515 	stw	r19,20(sp)
    7e04:	04c00044 	movi	r19,1
    7e08:	dc000215 	stw	r16,8(sp)
    7e0c:	2821883a 	mov	r16,r5
    7e10:	980b883a 	mov	r5,r19
    7e14:	ddc00915 	stw	r23,36(sp)
    7e18:	dd800815 	stw	r22,32(sp)
    7e1c:	dd400715 	stw	r21,28(sp)
    7e20:	dd000615 	stw	r20,24(sp)
    7e24:	dc800415 	stw	r18,16(sp)
    7e28:	dc400315 	stw	r17,12(sp)
    7e2c:	dfc00a15 	stw	ra,40(sp)
    7e30:	3023883a 	mov	r17,r6
    7e34:	382d883a 	mov	r22,r7
    7e38:	ddc00b17 	ldw	r23,44(sp)
    7e3c:	0007d400 	call	7d40 <_Balloc>
    7e40:	1025883a 	mov	r18,r2
    7e44:	00a00034 	movhi	r2,32768
    7e48:	10bfffc4 	addi	r2,r2,-1
    7e4c:	8888703a 	and	r4,r17,r2
    7e50:	202ad53a 	srli	r21,r4,20
    7e54:	00800434 	movhi	r2,16
    7e58:	10bfffc4 	addi	r2,r2,-1
    7e5c:	8886703a 	and	r3,r17,r2
    7e60:	a829003a 	cmpeq	r20,r21,zero
    7e64:	800b883a 	mov	r5,r16
    7e68:	d8c00115 	stw	r3,4(sp)
    7e6c:	94000504 	addi	r16,r18,20
    7e70:	a000021e 	bne	r20,zero,7e7c <__d2b+0x80>
    7e74:	18c00434 	orhi	r3,r3,16
    7e78:	d8c00115 	stw	r3,4(sp)
    7e7c:	28002726 	beq	r5,zero,7f1c <__d2b+0x120>
    7e80:	d809883a 	mov	r4,sp
    7e84:	d9400015 	stw	r5,0(sp)
    7e88:	00078580 	call	7858 <__lo0bits>
    7e8c:	100d883a 	mov	r6,r2
    7e90:	10003526 	beq	r2,zero,7f68 <__d2b+0x16c>
    7e94:	d8c00117 	ldw	r3,4(sp)
    7e98:	00800804 	movi	r2,32
    7e9c:	1185c83a 	sub	r2,r2,r6
    7ea0:	d9000017 	ldw	r4,0(sp)
    7ea4:	1886983a 	sll	r3,r3,r2
    7ea8:	1906b03a 	or	r3,r3,r4
    7eac:	90c00515 	stw	r3,20(r18)
    7eb0:	d8c00117 	ldw	r3,4(sp)
    7eb4:	1986d83a 	srl	r3,r3,r6
    7eb8:	d8c00115 	stw	r3,4(sp)
    7ebc:	180b003a 	cmpeq	r5,r3,zero
    7ec0:	00800084 	movi	r2,2
    7ec4:	114bc83a 	sub	r5,r2,r5
    7ec8:	80c00115 	stw	r3,4(r16)
    7ecc:	91400415 	stw	r5,16(r18)
    7ed0:	a0001a1e 	bne	r20,zero,7f3c <__d2b+0x140>
    7ed4:	3545883a 	add	r2,r6,r21
    7ed8:	10bef344 	addi	r2,r2,-1075
    7edc:	00c00d44 	movi	r3,53
    7ee0:	b0800015 	stw	r2,0(r22)
    7ee4:	1987c83a 	sub	r3,r3,r6
    7ee8:	b8c00015 	stw	r3,0(r23)
    7eec:	9005883a 	mov	r2,r18
    7ef0:	dfc00a17 	ldw	ra,40(sp)
    7ef4:	ddc00917 	ldw	r23,36(sp)
    7ef8:	dd800817 	ldw	r22,32(sp)
    7efc:	dd400717 	ldw	r21,28(sp)
    7f00:	dd000617 	ldw	r20,24(sp)
    7f04:	dcc00517 	ldw	r19,20(sp)
    7f08:	dc800417 	ldw	r18,16(sp)
    7f0c:	dc400317 	ldw	r17,12(sp)
    7f10:	dc000217 	ldw	r16,8(sp)
    7f14:	dec00b04 	addi	sp,sp,44
    7f18:	f800283a 	ret
    7f1c:	d9000104 	addi	r4,sp,4
    7f20:	00078580 	call	7858 <__lo0bits>
    7f24:	11800804 	addi	r6,r2,32
    7f28:	d8800117 	ldw	r2,4(sp)
    7f2c:	94c00415 	stw	r19,16(r18)
    7f30:	980b883a 	mov	r5,r19
    7f34:	90800515 	stw	r2,20(r18)
    7f38:	a03fe626 	beq	r20,zero,7ed4 <__d2b+0xd8>
    7f3c:	2945883a 	add	r2,r5,r5
    7f40:	1085883a 	add	r2,r2,r2
    7f44:	1405883a 	add	r2,r2,r16
    7f48:	113fff17 	ldw	r4,-4(r2)
    7f4c:	30fef384 	addi	r3,r6,-1074
    7f50:	2820917a 	slli	r16,r5,5
    7f54:	b0c00015 	stw	r3,0(r22)
    7f58:	00077e80 	call	77e8 <__hi0bits>
    7f5c:	80a1c83a 	sub	r16,r16,r2
    7f60:	bc000015 	stw	r16,0(r23)
    7f64:	003fe106 	br	7eec <__d2b+0xf0>
    7f68:	d8800017 	ldw	r2,0(sp)
    7f6c:	90800515 	stw	r2,20(r18)
    7f70:	d8c00117 	ldw	r3,4(sp)
    7f74:	003fd106 	br	7ebc <__d2b+0xc0>

00007f78 <__mdiff>:
    7f78:	defffb04 	addi	sp,sp,-20
    7f7c:	dc000015 	stw	r16,0(sp)
    7f80:	2821883a 	mov	r16,r5
    7f84:	dc800215 	stw	r18,8(sp)
    7f88:	300b883a 	mov	r5,r6
    7f8c:	2025883a 	mov	r18,r4
    7f90:	8009883a 	mov	r4,r16
    7f94:	dc400115 	stw	r17,4(sp)
    7f98:	dfc00415 	stw	ra,16(sp)
    7f9c:	dcc00315 	stw	r19,12(sp)
    7fa0:	3023883a 	mov	r17,r6
    7fa4:	000791c0 	call	791c <__mcmp>
    7fa8:	10004226 	beq	r2,zero,80b4 <__mdiff+0x13c>
    7fac:	10005016 	blt	r2,zero,80f0 <__mdiff+0x178>
    7fb0:	0027883a 	mov	r19,zero
    7fb4:	81400117 	ldw	r5,4(r16)
    7fb8:	9009883a 	mov	r4,r18
    7fbc:	0007d400 	call	7d40 <_Balloc>
    7fc0:	1019883a 	mov	r12,r2
    7fc4:	82800417 	ldw	r10,16(r16)
    7fc8:	88800417 	ldw	r2,16(r17)
    7fcc:	81800504 	addi	r6,r16,20
    7fd0:	5287883a 	add	r3,r10,r10
    7fd4:	1085883a 	add	r2,r2,r2
    7fd8:	18c7883a 	add	r3,r3,r3
    7fdc:	1085883a 	add	r2,r2,r2
    7fe0:	8a000504 	addi	r8,r17,20
    7fe4:	64c00315 	stw	r19,12(r12)
    7fe8:	30db883a 	add	r13,r6,r3
    7fec:	4097883a 	add	r11,r8,r2
    7ff0:	61c00504 	addi	r7,r12,20
    7ff4:	0013883a 	mov	r9,zero
    7ff8:	31000017 	ldw	r4,0(r6)
    7ffc:	41400017 	ldw	r5,0(r8)
    8000:	42000104 	addi	r8,r8,4
    8004:	20bfffcc 	andi	r2,r4,65535
    8008:	28ffffcc 	andi	r3,r5,65535
    800c:	10c5c83a 	sub	r2,r2,r3
    8010:	1245883a 	add	r2,r2,r9
    8014:	2008d43a 	srli	r4,r4,16
    8018:	280ad43a 	srli	r5,r5,16
    801c:	1007d43a 	srai	r3,r2,16
    8020:	3880000d 	sth	r2,0(r7)
    8024:	2149c83a 	sub	r4,r4,r5
    8028:	20c9883a 	add	r4,r4,r3
    802c:	3900008d 	sth	r4,2(r7)
    8030:	31800104 	addi	r6,r6,4
    8034:	39c00104 	addi	r7,r7,4
    8038:	2013d43a 	srai	r9,r4,16
    803c:	42ffee36 	bltu	r8,r11,7ff8 <__mdiff+0x80>
    8040:	33400c2e 	bgeu	r6,r13,8074 <__mdiff+0xfc>
    8044:	30800017 	ldw	r2,0(r6)
    8048:	31800104 	addi	r6,r6,4
    804c:	10ffffcc 	andi	r3,r2,65535
    8050:	1a47883a 	add	r3,r3,r9
    8054:	1004d43a 	srli	r2,r2,16
    8058:	1809d43a 	srai	r4,r3,16
    805c:	38c0000d 	sth	r3,0(r7)
    8060:	1105883a 	add	r2,r2,r4
    8064:	3880008d 	sth	r2,2(r7)
    8068:	1013d43a 	srai	r9,r2,16
    806c:	39c00104 	addi	r7,r7,4
    8070:	337ff436 	bltu	r6,r13,8044 <__mdiff+0xcc>
    8074:	38bfff17 	ldw	r2,-4(r7)
    8078:	38ffff04 	addi	r3,r7,-4
    807c:	1000041e 	bne	r2,zero,8090 <__mdiff+0x118>
    8080:	18ffff04 	addi	r3,r3,-4
    8084:	18800017 	ldw	r2,0(r3)
    8088:	52bfffc4 	addi	r10,r10,-1
    808c:	103ffc26 	beq	r2,zero,8080 <__mdiff+0x108>
    8090:	6005883a 	mov	r2,r12
    8094:	62800415 	stw	r10,16(r12)
    8098:	dfc00417 	ldw	ra,16(sp)
    809c:	dcc00317 	ldw	r19,12(sp)
    80a0:	dc800217 	ldw	r18,8(sp)
    80a4:	dc400117 	ldw	r17,4(sp)
    80a8:	dc000017 	ldw	r16,0(sp)
    80ac:	dec00504 	addi	sp,sp,20
    80b0:	f800283a 	ret
    80b4:	9009883a 	mov	r4,r18
    80b8:	000b883a 	mov	r5,zero
    80bc:	0007d400 	call	7d40 <_Balloc>
    80c0:	1019883a 	mov	r12,r2
    80c4:	00800044 	movi	r2,1
    80c8:	60800415 	stw	r2,16(r12)
    80cc:	6005883a 	mov	r2,r12
    80d0:	60000515 	stw	zero,20(r12)
    80d4:	dfc00417 	ldw	ra,16(sp)
    80d8:	dcc00317 	ldw	r19,12(sp)
    80dc:	dc800217 	ldw	r18,8(sp)
    80e0:	dc400117 	ldw	r17,4(sp)
    80e4:	dc000017 	ldw	r16,0(sp)
    80e8:	dec00504 	addi	sp,sp,20
    80ec:	f800283a 	ret
    80f0:	880d883a 	mov	r6,r17
    80f4:	04c00044 	movi	r19,1
    80f8:	8023883a 	mov	r17,r16
    80fc:	3021883a 	mov	r16,r6
    8100:	003fac06 	br	7fb4 <__mdiff+0x3c>

00008104 <__lshift>:
    8104:	defff904 	addi	sp,sp,-28
    8108:	28800417 	ldw	r2,16(r5)
    810c:	dc000015 	stw	r16,0(sp)
    8110:	3021d17a 	srai	r16,r6,5
    8114:	28c00217 	ldw	r3,8(r5)
    8118:	10800044 	addi	r2,r2,1
    811c:	dc400115 	stw	r17,4(sp)
    8120:	80a3883a 	add	r17,r16,r2
    8124:	dd400515 	stw	r21,20(sp)
    8128:	dd000415 	stw	r20,16(sp)
    812c:	dc800215 	stw	r18,8(sp)
    8130:	dfc00615 	stw	ra,24(sp)
    8134:	2825883a 	mov	r18,r5
    8138:	dcc00315 	stw	r19,12(sp)
    813c:	3029883a 	mov	r20,r6
    8140:	202b883a 	mov	r21,r4
    8144:	29400117 	ldw	r5,4(r5)
    8148:	1c40030e 	bge	r3,r17,8158 <__lshift+0x54>
    814c:	18c7883a 	add	r3,r3,r3
    8150:	29400044 	addi	r5,r5,1
    8154:	1c7ffd16 	blt	r3,r17,814c <__lshift+0x48>
    8158:	a809883a 	mov	r4,r21
    815c:	0007d400 	call	7d40 <_Balloc>
    8160:	1027883a 	mov	r19,r2
    8164:	11400504 	addi	r5,r2,20
    8168:	0400090e 	bge	zero,r16,8190 <__lshift+0x8c>
    816c:	2805883a 	mov	r2,r5
    8170:	0007883a 	mov	r3,zero
    8174:	18c00044 	addi	r3,r3,1
    8178:	10000015 	stw	zero,0(r2)
    817c:	10800104 	addi	r2,r2,4
    8180:	80fffc1e 	bne	r16,r3,8174 <__lshift+0x70>
    8184:	8405883a 	add	r2,r16,r16
    8188:	1085883a 	add	r2,r2,r2
    818c:	288b883a 	add	r5,r5,r2
    8190:	90800417 	ldw	r2,16(r18)
    8194:	91000504 	addi	r4,r18,20
    8198:	a18007cc 	andi	r6,r20,31
    819c:	1085883a 	add	r2,r2,r2
    81a0:	1085883a 	add	r2,r2,r2
    81a4:	208f883a 	add	r7,r4,r2
    81a8:	30001e26 	beq	r6,zero,8224 <__lshift+0x120>
    81ac:	00800804 	movi	r2,32
    81b0:	1191c83a 	sub	r8,r2,r6
    81b4:	0007883a 	mov	r3,zero
    81b8:	20800017 	ldw	r2,0(r4)
    81bc:	1184983a 	sll	r2,r2,r6
    81c0:	1884b03a 	or	r2,r3,r2
    81c4:	28800015 	stw	r2,0(r5)
    81c8:	20c00017 	ldw	r3,0(r4)
    81cc:	21000104 	addi	r4,r4,4
    81d0:	29400104 	addi	r5,r5,4
    81d4:	1a06d83a 	srl	r3,r3,r8
    81d8:	21fff736 	bltu	r4,r7,81b8 <__lshift+0xb4>
    81dc:	28c00015 	stw	r3,0(r5)
    81e0:	18000126 	beq	r3,zero,81e8 <__lshift+0xe4>
    81e4:	8c400044 	addi	r17,r17,1
    81e8:	88bfffc4 	addi	r2,r17,-1
    81ec:	98800415 	stw	r2,16(r19)
    81f0:	a809883a 	mov	r4,r21
    81f4:	900b883a 	mov	r5,r18
    81f8:	00077c00 	call	77c0 <_Bfree>
    81fc:	9805883a 	mov	r2,r19
    8200:	dfc00617 	ldw	ra,24(sp)
    8204:	dd400517 	ldw	r21,20(sp)
    8208:	dd000417 	ldw	r20,16(sp)
    820c:	dcc00317 	ldw	r19,12(sp)
    8210:	dc800217 	ldw	r18,8(sp)
    8214:	dc400117 	ldw	r17,4(sp)
    8218:	dc000017 	ldw	r16,0(sp)
    821c:	dec00704 	addi	sp,sp,28
    8220:	f800283a 	ret
    8224:	20800017 	ldw	r2,0(r4)
    8228:	21000104 	addi	r4,r4,4
    822c:	28800015 	stw	r2,0(r5)
    8230:	29400104 	addi	r5,r5,4
    8234:	21ffec2e 	bgeu	r4,r7,81e8 <__lshift+0xe4>
    8238:	20800017 	ldw	r2,0(r4)
    823c:	21000104 	addi	r4,r4,4
    8240:	28800015 	stw	r2,0(r5)
    8244:	29400104 	addi	r5,r5,4
    8248:	21fff636 	bltu	r4,r7,8224 <__lshift+0x120>
    824c:	003fe606 	br	81e8 <__lshift+0xe4>

00008250 <__multiply>:
    8250:	defff904 	addi	sp,sp,-28
    8254:	dcc00315 	stw	r19,12(sp)
    8258:	dc800215 	stw	r18,8(sp)
    825c:	2cc00417 	ldw	r19,16(r5)
    8260:	34800417 	ldw	r18,16(r6)
    8264:	dd000415 	stw	r20,16(sp)
    8268:	dc400115 	stw	r17,4(sp)
    826c:	dfc00615 	stw	ra,24(sp)
    8270:	dd400515 	stw	r21,20(sp)
    8274:	dc000015 	stw	r16,0(sp)
    8278:	2823883a 	mov	r17,r5
    827c:	3029883a 	mov	r20,r6
    8280:	9c80040e 	bge	r19,r18,8294 <__multiply+0x44>
    8284:	9027883a 	mov	r19,r18
    8288:	2c800417 	ldw	r18,16(r5)
    828c:	2829883a 	mov	r20,r5
    8290:	3023883a 	mov	r17,r6
    8294:	88800217 	ldw	r2,8(r17)
    8298:	9ca1883a 	add	r16,r19,r18
    829c:	89400117 	ldw	r5,4(r17)
    82a0:	1400010e 	bge	r2,r16,82a8 <__multiply+0x58>
    82a4:	29400044 	addi	r5,r5,1
    82a8:	0007d400 	call	7d40 <_Balloc>
    82ac:	102b883a 	mov	r21,r2
    82b0:	8405883a 	add	r2,r16,r16
    82b4:	1085883a 	add	r2,r2,r2
    82b8:	a9000504 	addi	r4,r21,20
    82bc:	209d883a 	add	r14,r4,r2
    82c0:	2380042e 	bgeu	r4,r14,82d4 <__multiply+0x84>
    82c4:	2005883a 	mov	r2,r4
    82c8:	10000015 	stw	zero,0(r2)
    82cc:	10800104 	addi	r2,r2,4
    82d0:	13bffd36 	bltu	r2,r14,82c8 <__multiply+0x78>
    82d4:	9485883a 	add	r2,r18,r18
    82d8:	9cc7883a 	add	r3,r19,r19
    82dc:	a1800504 	addi	r6,r20,20
    82e0:	1085883a 	add	r2,r2,r2
    82e4:	8b400504 	addi	r13,r17,20
    82e8:	18c7883a 	add	r3,r3,r3
    82ec:	309f883a 	add	r15,r6,r2
    82f0:	68d7883a 	add	r11,r13,r3
    82f4:	33c03b2e 	bgeu	r6,r15,83e4 <__multiply+0x194>
    82f8:	2019883a 	mov	r12,r4
    82fc:	30800017 	ldw	r2,0(r6)
    8300:	127fffcc 	andi	r9,r2,65535
    8304:	48001826 	beq	r9,zero,8368 <__multiply+0x118>
    8308:	6811883a 	mov	r8,r13
    830c:	600f883a 	mov	r7,r12
    8310:	0015883a 	mov	r10,zero
    8314:	40c00017 	ldw	r3,0(r8)
    8318:	39400017 	ldw	r5,0(r7)
    831c:	42000104 	addi	r8,r8,4
    8320:	193fffcc 	andi	r4,r3,65535
    8324:	4909383a 	mul	r4,r9,r4
    8328:	1806d43a 	srli	r3,r3,16
    832c:	28bfffcc 	andi	r2,r5,65535
    8330:	5085883a 	add	r2,r10,r2
    8334:	2089883a 	add	r4,r4,r2
    8338:	48c7383a 	mul	r3,r9,r3
    833c:	280ad43a 	srli	r5,r5,16
    8340:	2004d43a 	srli	r2,r4,16
    8344:	3900000d 	sth	r4,0(r7)
    8348:	1947883a 	add	r3,r3,r5
    834c:	10c5883a 	add	r2,r2,r3
    8350:	3880008d 	sth	r2,2(r7)
    8354:	1014d43a 	srli	r10,r2,16
    8358:	39c00104 	addi	r7,r7,4
    835c:	42ffed36 	bltu	r8,r11,8314 <__multiply+0xc4>
    8360:	3a800015 	stw	r10,0(r7)
    8364:	30800017 	ldw	r2,0(r6)
    8368:	1012d43a 	srli	r9,r2,16
    836c:	48001926 	beq	r9,zero,83d4 <__multiply+0x184>
    8370:	60800017 	ldw	r2,0(r12)
    8374:	6811883a 	mov	r8,r13
    8378:	600f883a 	mov	r7,r12
    837c:	0015883a 	mov	r10,zero
    8380:	100b883a 	mov	r5,r2
    8384:	41000017 	ldw	r4,0(r8)
    8388:	2806d43a 	srli	r3,r5,16
    838c:	3880000d 	sth	r2,0(r7)
    8390:	20bfffcc 	andi	r2,r4,65535
    8394:	4885383a 	mul	r2,r9,r2
    8398:	50c7883a 	add	r3,r10,r3
    839c:	2008d43a 	srli	r4,r4,16
    83a0:	10c5883a 	add	r2,r2,r3
    83a4:	3880008d 	sth	r2,2(r7)
    83a8:	39c00104 	addi	r7,r7,4
    83ac:	39400017 	ldw	r5,0(r7)
    83b0:	4909383a 	mul	r4,r9,r4
    83b4:	1004d43a 	srli	r2,r2,16
    83b8:	28ffffcc 	andi	r3,r5,65535
    83bc:	20c9883a 	add	r4,r4,r3
    83c0:	1105883a 	add	r2,r2,r4
    83c4:	42000104 	addi	r8,r8,4
    83c8:	1014d43a 	srli	r10,r2,16
    83cc:	42ffed36 	bltu	r8,r11,8384 <__multiply+0x134>
    83d0:	38800015 	stw	r2,0(r7)
    83d4:	31800104 	addi	r6,r6,4
    83d8:	33c0022e 	bgeu	r6,r15,83e4 <__multiply+0x194>
    83dc:	63000104 	addi	r12,r12,4
    83e0:	003fc606 	br	82fc <__multiply+0xac>
    83e4:	0400090e 	bge	zero,r16,840c <__multiply+0x1bc>
    83e8:	70bfff17 	ldw	r2,-4(r14)
    83ec:	70ffff04 	addi	r3,r14,-4
    83f0:	10000326 	beq	r2,zero,8400 <__multiply+0x1b0>
    83f4:	00000506 	br	840c <__multiply+0x1bc>
    83f8:	18800017 	ldw	r2,0(r3)
    83fc:	1000031e 	bne	r2,zero,840c <__multiply+0x1bc>
    8400:	843fffc4 	addi	r16,r16,-1
    8404:	18ffff04 	addi	r3,r3,-4
    8408:	803ffb1e 	bne	r16,zero,83f8 <__multiply+0x1a8>
    840c:	a805883a 	mov	r2,r21
    8410:	ac000415 	stw	r16,16(r21)
    8414:	dfc00617 	ldw	ra,24(sp)
    8418:	dd400517 	ldw	r21,20(sp)
    841c:	dd000417 	ldw	r20,16(sp)
    8420:	dcc00317 	ldw	r19,12(sp)
    8424:	dc800217 	ldw	r18,8(sp)
    8428:	dc400117 	ldw	r17,4(sp)
    842c:	dc000017 	ldw	r16,0(sp)
    8430:	dec00704 	addi	sp,sp,28
    8434:	f800283a 	ret

00008438 <__i2b>:
    8438:	defffd04 	addi	sp,sp,-12
    843c:	dc000015 	stw	r16,0(sp)
    8440:	04000044 	movi	r16,1
    8444:	dc800115 	stw	r18,4(sp)
    8448:	2825883a 	mov	r18,r5
    844c:	800b883a 	mov	r5,r16
    8450:	dfc00215 	stw	ra,8(sp)
    8454:	0007d400 	call	7d40 <_Balloc>
    8458:	14000415 	stw	r16,16(r2)
    845c:	14800515 	stw	r18,20(r2)
    8460:	dfc00217 	ldw	ra,8(sp)
    8464:	dc800117 	ldw	r18,4(sp)
    8468:	dc000017 	ldw	r16,0(sp)
    846c:	dec00304 	addi	sp,sp,12
    8470:	f800283a 	ret

00008474 <__multadd>:
    8474:	defffa04 	addi	sp,sp,-24
    8478:	dc800215 	stw	r18,8(sp)
    847c:	2c800417 	ldw	r18,16(r5)
    8480:	dd000415 	stw	r20,16(sp)
    8484:	dcc00315 	stw	r19,12(sp)
    8488:	dc000015 	stw	r16,0(sp)
    848c:	dfc00515 	stw	ra,20(sp)
    8490:	3821883a 	mov	r16,r7
    8494:	dc400115 	stw	r17,4(sp)
    8498:	2827883a 	mov	r19,r5
    849c:	2029883a 	mov	r20,r4
    84a0:	2a000504 	addi	r8,r5,20
    84a4:	000f883a 	mov	r7,zero
    84a8:	40800017 	ldw	r2,0(r8)
    84ac:	39c00044 	addi	r7,r7,1
    84b0:	10ffffcc 	andi	r3,r2,65535
    84b4:	1987383a 	mul	r3,r3,r6
    84b8:	1004d43a 	srli	r2,r2,16
    84bc:	1c07883a 	add	r3,r3,r16
    84c0:	180ad43a 	srli	r5,r3,16
    84c4:	1185383a 	mul	r2,r2,r6
    84c8:	18ffffcc 	andi	r3,r3,65535
    84cc:	1145883a 	add	r2,r2,r5
    84d0:	1008943a 	slli	r4,r2,16
    84d4:	1020d43a 	srli	r16,r2,16
    84d8:	20c9883a 	add	r4,r4,r3
    84dc:	41000015 	stw	r4,0(r8)
    84e0:	42000104 	addi	r8,r8,4
    84e4:	3cbff016 	blt	r7,r18,84a8 <__multadd+0x34>
    84e8:	80000826 	beq	r16,zero,850c <__multadd+0x98>
    84ec:	98800217 	ldw	r2,8(r19)
    84f0:	90800f0e 	bge	r18,r2,8530 <__multadd+0xbc>
    84f4:	9485883a 	add	r2,r18,r18
    84f8:	1085883a 	add	r2,r2,r2
    84fc:	14c5883a 	add	r2,r2,r19
    8500:	90c00044 	addi	r3,r18,1
    8504:	14000515 	stw	r16,20(r2)
    8508:	98c00415 	stw	r3,16(r19)
    850c:	9805883a 	mov	r2,r19
    8510:	dfc00517 	ldw	ra,20(sp)
    8514:	dd000417 	ldw	r20,16(sp)
    8518:	dcc00317 	ldw	r19,12(sp)
    851c:	dc800217 	ldw	r18,8(sp)
    8520:	dc400117 	ldw	r17,4(sp)
    8524:	dc000017 	ldw	r16,0(sp)
    8528:	dec00604 	addi	sp,sp,24
    852c:	f800283a 	ret
    8530:	99400117 	ldw	r5,4(r19)
    8534:	a009883a 	mov	r4,r20
    8538:	29400044 	addi	r5,r5,1
    853c:	0007d400 	call	7d40 <_Balloc>
    8540:	99800417 	ldw	r6,16(r19)
    8544:	99400304 	addi	r5,r19,12
    8548:	11000304 	addi	r4,r2,12
    854c:	318d883a 	add	r6,r6,r6
    8550:	318d883a 	add	r6,r6,r6
    8554:	31800204 	addi	r6,r6,8
    8558:	1023883a 	mov	r17,r2
    855c:	00075a80 	call	75a8 <memcpy>
    8560:	980b883a 	mov	r5,r19
    8564:	a009883a 	mov	r4,r20
    8568:	00077c00 	call	77c0 <_Bfree>
    856c:	8827883a 	mov	r19,r17
    8570:	003fe006 	br	84f4 <__multadd+0x80>

00008574 <__pow5mult>:
    8574:	defffa04 	addi	sp,sp,-24
    8578:	308000cc 	andi	r2,r6,3
    857c:	dd000415 	stw	r20,16(sp)
    8580:	dcc00315 	stw	r19,12(sp)
    8584:	dc000015 	stw	r16,0(sp)
    8588:	dfc00515 	stw	ra,20(sp)
    858c:	dc800215 	stw	r18,8(sp)
    8590:	dc400115 	stw	r17,4(sp)
    8594:	3021883a 	mov	r16,r6
    8598:	2027883a 	mov	r19,r4
    859c:	2829883a 	mov	r20,r5
    85a0:	10002b1e 	bne	r2,zero,8650 <__pow5mult+0xdc>
    85a4:	8025d0ba 	srai	r18,r16,2
    85a8:	90001b26 	beq	r18,zero,8618 <__pow5mult+0xa4>
    85ac:	9c001217 	ldw	r16,72(r19)
    85b0:	8000081e 	bne	r16,zero,85d4 <__pow5mult+0x60>
    85b4:	00003006 	br	8678 <__pow5mult+0x104>
    85b8:	800b883a 	mov	r5,r16
    85bc:	800d883a 	mov	r6,r16
    85c0:	9809883a 	mov	r4,r19
    85c4:	90001426 	beq	r18,zero,8618 <__pow5mult+0xa4>
    85c8:	80800017 	ldw	r2,0(r16)
    85cc:	10001b26 	beq	r2,zero,863c <__pow5mult+0xc8>
    85d0:	1021883a 	mov	r16,r2
    85d4:	9080004c 	andi	r2,r18,1
    85d8:	1005003a 	cmpeq	r2,r2,zero
    85dc:	9025d07a 	srai	r18,r18,1
    85e0:	800d883a 	mov	r6,r16
    85e4:	9809883a 	mov	r4,r19
    85e8:	a00b883a 	mov	r5,r20
    85ec:	103ff21e 	bne	r2,zero,85b8 <__pow5mult+0x44>
    85f0:	00082500 	call	8250 <__multiply>
    85f4:	a00b883a 	mov	r5,r20
    85f8:	9809883a 	mov	r4,r19
    85fc:	1023883a 	mov	r17,r2
    8600:	00077c00 	call	77c0 <_Bfree>
    8604:	8829883a 	mov	r20,r17
    8608:	800b883a 	mov	r5,r16
    860c:	800d883a 	mov	r6,r16
    8610:	9809883a 	mov	r4,r19
    8614:	903fec1e 	bne	r18,zero,85c8 <__pow5mult+0x54>
    8618:	a005883a 	mov	r2,r20
    861c:	dfc00517 	ldw	ra,20(sp)
    8620:	dd000417 	ldw	r20,16(sp)
    8624:	dcc00317 	ldw	r19,12(sp)
    8628:	dc800217 	ldw	r18,8(sp)
    862c:	dc400117 	ldw	r17,4(sp)
    8630:	dc000017 	ldw	r16,0(sp)
    8634:	dec00604 	addi	sp,sp,24
    8638:	f800283a 	ret
    863c:	00082500 	call	8250 <__multiply>
    8640:	80800015 	stw	r2,0(r16)
    8644:	1021883a 	mov	r16,r2
    8648:	10000015 	stw	zero,0(r2)
    864c:	003fe106 	br	85d4 <__pow5mult+0x60>
    8650:	1085883a 	add	r2,r2,r2
    8654:	00c00074 	movhi	r3,1
    8658:	18f9d704 	addi	r3,r3,-6308
    865c:	1085883a 	add	r2,r2,r2
    8660:	10c5883a 	add	r2,r2,r3
    8664:	11bfff17 	ldw	r6,-4(r2)
    8668:	000f883a 	mov	r7,zero
    866c:	00084740 	call	8474 <__multadd>
    8670:	1029883a 	mov	r20,r2
    8674:	003fcb06 	br	85a4 <__pow5mult+0x30>
    8678:	9809883a 	mov	r4,r19
    867c:	01409c44 	movi	r5,625
    8680:	00084380 	call	8438 <__i2b>
    8684:	98801215 	stw	r2,72(r19)
    8688:	1021883a 	mov	r16,r2
    868c:	10000015 	stw	zero,0(r2)
    8690:	003fd006 	br	85d4 <__pow5mult+0x60>

00008694 <__s2b>:
    8694:	defff904 	addi	sp,sp,-28
    8698:	dcc00315 	stw	r19,12(sp)
    869c:	dc800215 	stw	r18,8(sp)
    86a0:	2827883a 	mov	r19,r5
    86a4:	2025883a 	mov	r18,r4
    86a8:	01400244 	movi	r5,9
    86ac:	39000204 	addi	r4,r7,8
    86b0:	dd000415 	stw	r20,16(sp)
    86b4:	dc400115 	stw	r17,4(sp)
    86b8:	dfc00615 	stw	ra,24(sp)
    86bc:	dd400515 	stw	r21,20(sp)
    86c0:	dc000015 	stw	r16,0(sp)
    86c4:	3829883a 	mov	r20,r7
    86c8:	3023883a 	mov	r17,r6
    86cc:	0001ebc0 	call	1ebc <__divsi3>
    86d0:	00c00044 	movi	r3,1
    86d4:	1880350e 	bge	r3,r2,87ac <__s2b+0x118>
    86d8:	000b883a 	mov	r5,zero
    86dc:	18c7883a 	add	r3,r3,r3
    86e0:	29400044 	addi	r5,r5,1
    86e4:	18bffd16 	blt	r3,r2,86dc <__s2b+0x48>
    86e8:	9009883a 	mov	r4,r18
    86ec:	0007d400 	call	7d40 <_Balloc>
    86f0:	1011883a 	mov	r8,r2
    86f4:	d8800717 	ldw	r2,28(sp)
    86f8:	00c00044 	movi	r3,1
    86fc:	01800244 	movi	r6,9
    8700:	40800515 	stw	r2,20(r8)
    8704:	40c00415 	stw	r3,16(r8)
    8708:	3440260e 	bge	r6,r17,87a4 <__s2b+0x110>
    870c:	3021883a 	mov	r16,r6
    8710:	99ab883a 	add	r21,r19,r6
    8714:	9c05883a 	add	r2,r19,r16
    8718:	11c00007 	ldb	r7,0(r2)
    871c:	400b883a 	mov	r5,r8
    8720:	9009883a 	mov	r4,r18
    8724:	39fff404 	addi	r7,r7,-48
    8728:	01800284 	movi	r6,10
    872c:	00084740 	call	8474 <__multadd>
    8730:	84000044 	addi	r16,r16,1
    8734:	1011883a 	mov	r8,r2
    8738:	8c3ff61e 	bne	r17,r16,8714 <__s2b+0x80>
    873c:	ac45883a 	add	r2,r21,r17
    8740:	117ffe04 	addi	r5,r2,-8
    8744:	880d883a 	mov	r6,r17
    8748:	35000c0e 	bge	r6,r20,877c <__s2b+0xe8>
    874c:	a185c83a 	sub	r2,r20,r6
    8750:	2821883a 	mov	r16,r5
    8754:	28a3883a 	add	r17,r5,r2
    8758:	81c00007 	ldb	r7,0(r16)
    875c:	400b883a 	mov	r5,r8
    8760:	9009883a 	mov	r4,r18
    8764:	39fff404 	addi	r7,r7,-48
    8768:	01800284 	movi	r6,10
    876c:	00084740 	call	8474 <__multadd>
    8770:	84000044 	addi	r16,r16,1
    8774:	1011883a 	mov	r8,r2
    8778:	847ff71e 	bne	r16,r17,8758 <__s2b+0xc4>
    877c:	4005883a 	mov	r2,r8
    8780:	dfc00617 	ldw	ra,24(sp)
    8784:	dd400517 	ldw	r21,20(sp)
    8788:	dd000417 	ldw	r20,16(sp)
    878c:	dcc00317 	ldw	r19,12(sp)
    8790:	dc800217 	ldw	r18,8(sp)
    8794:	dc400117 	ldw	r17,4(sp)
    8798:	dc000017 	ldw	r16,0(sp)
    879c:	dec00704 	addi	sp,sp,28
    87a0:	f800283a 	ret
    87a4:	99400284 	addi	r5,r19,10
    87a8:	003fe706 	br	8748 <__s2b+0xb4>
    87ac:	000b883a 	mov	r5,zero
    87b0:	003fcd06 	br	86e8 <__s2b+0x54>

000087b4 <_realloc_r>:
    87b4:	defff404 	addi	sp,sp,-48
    87b8:	dd800815 	stw	r22,32(sp)
    87bc:	dc800415 	stw	r18,16(sp)
    87c0:	dc400315 	stw	r17,12(sp)
    87c4:	dfc00b15 	stw	ra,44(sp)
    87c8:	df000a15 	stw	fp,40(sp)
    87cc:	ddc00915 	stw	r23,36(sp)
    87d0:	dd400715 	stw	r21,28(sp)
    87d4:	dd000615 	stw	r20,24(sp)
    87d8:	dcc00515 	stw	r19,20(sp)
    87dc:	dc000215 	stw	r16,8(sp)
    87e0:	2825883a 	mov	r18,r5
    87e4:	3023883a 	mov	r17,r6
    87e8:	202d883a 	mov	r22,r4
    87ec:	2800c926 	beq	r5,zero,8b14 <_realloc_r+0x360>
    87f0:	000c03c0 	call	c03c <__malloc_lock>
    87f4:	943ffe04 	addi	r16,r18,-8
    87f8:	88c002c4 	addi	r3,r17,11
    87fc:	00800584 	movi	r2,22
    8800:	82000117 	ldw	r8,4(r16)
    8804:	10c01b2e 	bgeu	r2,r3,8874 <_realloc_r+0xc0>
    8808:	00bffe04 	movi	r2,-8
    880c:	188e703a 	and	r7,r3,r2
    8810:	3839883a 	mov	fp,r7
    8814:	38001a16 	blt	r7,zero,8880 <_realloc_r+0xcc>
    8818:	e4401936 	bltu	fp,r17,8880 <_realloc_r+0xcc>
    881c:	013fff04 	movi	r4,-4
    8820:	4126703a 	and	r19,r8,r4
    8824:	99c02616 	blt	r19,r7,88c0 <_realloc_r+0x10c>
    8828:	802b883a 	mov	r21,r16
    882c:	9829883a 	mov	r20,r19
    8830:	84000204 	addi	r16,r16,8
    8834:	a80f883a 	mov	r7,r21
    8838:	a70dc83a 	sub	r6,r20,fp
    883c:	008003c4 	movi	r2,15
    8840:	1180c136 	bltu	r2,r6,8b48 <_realloc_r+0x394>
    8844:	38800117 	ldw	r2,4(r7)
    8848:	a549883a 	add	r4,r20,r21
    884c:	1080004c 	andi	r2,r2,1
    8850:	a084b03a 	or	r2,r20,r2
    8854:	38800115 	stw	r2,4(r7)
    8858:	20c00117 	ldw	r3,4(r4)
    885c:	18c00054 	ori	r3,r3,1
    8860:	20c00115 	stw	r3,4(r4)
    8864:	b009883a 	mov	r4,r22
    8868:	000c05c0 	call	c05c <__malloc_unlock>
    886c:	8023883a 	mov	r17,r16
    8870:	00000606 	br	888c <_realloc_r+0xd8>
    8874:	01c00404 	movi	r7,16
    8878:	3839883a 	mov	fp,r7
    887c:	e47fe72e 	bgeu	fp,r17,881c <_realloc_r+0x68>
    8880:	00800304 	movi	r2,12
    8884:	0023883a 	mov	r17,zero
    8888:	b0800015 	stw	r2,0(r22)
    888c:	8805883a 	mov	r2,r17
    8890:	dfc00b17 	ldw	ra,44(sp)
    8894:	df000a17 	ldw	fp,40(sp)
    8898:	ddc00917 	ldw	r23,36(sp)
    889c:	dd800817 	ldw	r22,32(sp)
    88a0:	dd400717 	ldw	r21,28(sp)
    88a4:	dd000617 	ldw	r20,24(sp)
    88a8:	dcc00517 	ldw	r19,20(sp)
    88ac:	dc800417 	ldw	r18,16(sp)
    88b0:	dc400317 	ldw	r17,12(sp)
    88b4:	dc000217 	ldw	r16,8(sp)
    88b8:	dec00c04 	addi	sp,sp,48
    88bc:	f800283a 	ret
    88c0:	00800074 	movhi	r2,1
    88c4:	10bb3a04 	addi	r2,r2,-4888
    88c8:	12400217 	ldw	r9,8(r2)
    88cc:	84cd883a 	add	r6,r16,r19
    88d0:	802b883a 	mov	r21,r16
    88d4:	3240b926 	beq	r6,r9,8bbc <_realloc_r+0x408>
    88d8:	31400117 	ldw	r5,4(r6)
    88dc:	00bfff84 	movi	r2,-2
    88e0:	2884703a 	and	r2,r5,r2
    88e4:	1185883a 	add	r2,r2,r6
    88e8:	10c00117 	ldw	r3,4(r2)
    88ec:	18c0004c 	andi	r3,r3,1
    88f0:	1807003a 	cmpeq	r3,r3,zero
    88f4:	1800a326 	beq	r3,zero,8b84 <_realloc_r+0x3d0>
    88f8:	2908703a 	and	r4,r5,r4
    88fc:	9929883a 	add	r20,r19,r4
    8900:	a1c0a30e 	bge	r20,r7,8b90 <_realloc_r+0x3dc>
    8904:	4080004c 	andi	r2,r8,1
    8908:	1000551e 	bne	r2,zero,8a60 <_realloc_r+0x2ac>
    890c:	80800017 	ldw	r2,0(r16)
    8910:	80afc83a 	sub	r23,r16,r2
    8914:	b8c00117 	ldw	r3,4(r23)
    8918:	00bfff04 	movi	r2,-4
    891c:	1884703a 	and	r2,r3,r2
    8920:	30002e26 	beq	r6,zero,89dc <_realloc_r+0x228>
    8924:	3240b926 	beq	r6,r9,8c0c <_realloc_r+0x458>
    8928:	98a9883a 	add	r20,r19,r2
    892c:	2509883a 	add	r4,r4,r20
    8930:	d9000015 	stw	r4,0(sp)
    8934:	21c02a16 	blt	r4,r7,89e0 <_realloc_r+0x22c>
    8938:	30800317 	ldw	r2,12(r6)
    893c:	30c00217 	ldw	r3,8(r6)
    8940:	01400904 	movi	r5,36
    8944:	99bfff04 	addi	r6,r19,-4
    8948:	18800315 	stw	r2,12(r3)
    894c:	10c00215 	stw	r3,8(r2)
    8950:	b9000317 	ldw	r4,12(r23)
    8954:	b8800217 	ldw	r2,8(r23)
    8958:	b82b883a 	mov	r21,r23
    895c:	bc000204 	addi	r16,r23,8
    8960:	20800215 	stw	r2,8(r4)
    8964:	11000315 	stw	r4,12(r2)
    8968:	2980e436 	bltu	r5,r6,8cfc <_realloc_r+0x548>
    896c:	008004c4 	movi	r2,19
    8970:	9009883a 	mov	r4,r18
    8974:	8011883a 	mov	r8,r16
    8978:	11800f2e 	bgeu	r2,r6,89b8 <_realloc_r+0x204>
    897c:	90800017 	ldw	r2,0(r18)
    8980:	ba000404 	addi	r8,r23,16
    8984:	91000204 	addi	r4,r18,8
    8988:	b8800215 	stw	r2,8(r23)
    898c:	90c00117 	ldw	r3,4(r18)
    8990:	008006c4 	movi	r2,27
    8994:	b8c00315 	stw	r3,12(r23)
    8998:	1180072e 	bgeu	r2,r6,89b8 <_realloc_r+0x204>
    899c:	90c00217 	ldw	r3,8(r18)
    89a0:	ba000604 	addi	r8,r23,24
    89a4:	91000404 	addi	r4,r18,16
    89a8:	b8c00415 	stw	r3,16(r23)
    89ac:	90800317 	ldw	r2,12(r18)
    89b0:	b8800515 	stw	r2,20(r23)
    89b4:	3140e726 	beq	r6,r5,8d54 <_realloc_r+0x5a0>
    89b8:	20800017 	ldw	r2,0(r4)
    89bc:	dd000017 	ldw	r20,0(sp)
    89c0:	b80f883a 	mov	r7,r23
    89c4:	40800015 	stw	r2,0(r8)
    89c8:	20c00117 	ldw	r3,4(r4)
    89cc:	40c00115 	stw	r3,4(r8)
    89d0:	20800217 	ldw	r2,8(r4)
    89d4:	40800215 	stw	r2,8(r8)
    89d8:	003f9706 	br	8838 <_realloc_r+0x84>
    89dc:	98a9883a 	add	r20,r19,r2
    89e0:	a1c01f16 	blt	r20,r7,8a60 <_realloc_r+0x2ac>
    89e4:	b8c00317 	ldw	r3,12(r23)
    89e8:	b8800217 	ldw	r2,8(r23)
    89ec:	99bfff04 	addi	r6,r19,-4
    89f0:	01400904 	movi	r5,36
    89f4:	b82b883a 	mov	r21,r23
    89f8:	18800215 	stw	r2,8(r3)
    89fc:	10c00315 	stw	r3,12(r2)
    8a00:	bc000204 	addi	r16,r23,8
    8a04:	2980c336 	bltu	r5,r6,8d14 <_realloc_r+0x560>
    8a08:	008004c4 	movi	r2,19
    8a0c:	9009883a 	mov	r4,r18
    8a10:	8011883a 	mov	r8,r16
    8a14:	11800f2e 	bgeu	r2,r6,8a54 <_realloc_r+0x2a0>
    8a18:	90800017 	ldw	r2,0(r18)
    8a1c:	ba000404 	addi	r8,r23,16
    8a20:	91000204 	addi	r4,r18,8
    8a24:	b8800215 	stw	r2,8(r23)
    8a28:	90c00117 	ldw	r3,4(r18)
    8a2c:	008006c4 	movi	r2,27
    8a30:	b8c00315 	stw	r3,12(r23)
    8a34:	1180072e 	bgeu	r2,r6,8a54 <_realloc_r+0x2a0>
    8a38:	90c00217 	ldw	r3,8(r18)
    8a3c:	ba000604 	addi	r8,r23,24
    8a40:	91000404 	addi	r4,r18,16
    8a44:	b8c00415 	stw	r3,16(r23)
    8a48:	90800317 	ldw	r2,12(r18)
    8a4c:	b8800515 	stw	r2,20(r23)
    8a50:	3140c726 	beq	r6,r5,8d70 <_realloc_r+0x5bc>
    8a54:	20800017 	ldw	r2,0(r4)
    8a58:	b80f883a 	mov	r7,r23
    8a5c:	003fd906 	br	89c4 <_realloc_r+0x210>
    8a60:	880b883a 	mov	r5,r17
    8a64:	b009883a 	mov	r4,r22
    8a68:	0001fec0 	call	1fec <_malloc_r>
    8a6c:	1023883a 	mov	r17,r2
    8a70:	10002526 	beq	r2,zero,8b08 <_realloc_r+0x354>
    8a74:	80800117 	ldw	r2,4(r16)
    8a78:	00ffff84 	movi	r3,-2
    8a7c:	893ffe04 	addi	r4,r17,-8
    8a80:	10c4703a 	and	r2,r2,r3
    8a84:	8085883a 	add	r2,r16,r2
    8a88:	20809526 	beq	r4,r2,8ce0 <_realloc_r+0x52c>
    8a8c:	99bfff04 	addi	r6,r19,-4
    8a90:	01c00904 	movi	r7,36
    8a94:	39804536 	bltu	r7,r6,8bac <_realloc_r+0x3f8>
    8a98:	008004c4 	movi	r2,19
    8a9c:	9009883a 	mov	r4,r18
    8aa0:	880b883a 	mov	r5,r17
    8aa4:	11800f2e 	bgeu	r2,r6,8ae4 <_realloc_r+0x330>
    8aa8:	90800017 	ldw	r2,0(r18)
    8aac:	89400204 	addi	r5,r17,8
    8ab0:	91000204 	addi	r4,r18,8
    8ab4:	88800015 	stw	r2,0(r17)
    8ab8:	90c00117 	ldw	r3,4(r18)
    8abc:	008006c4 	movi	r2,27
    8ac0:	88c00115 	stw	r3,4(r17)
    8ac4:	1180072e 	bgeu	r2,r6,8ae4 <_realloc_r+0x330>
    8ac8:	90c00217 	ldw	r3,8(r18)
    8acc:	89400404 	addi	r5,r17,16
    8ad0:	91000404 	addi	r4,r18,16
    8ad4:	88c00215 	stw	r3,8(r17)
    8ad8:	90800317 	ldw	r2,12(r18)
    8adc:	88800315 	stw	r2,12(r17)
    8ae0:	31c09126 	beq	r6,r7,8d28 <_realloc_r+0x574>
    8ae4:	20800017 	ldw	r2,0(r4)
    8ae8:	28800015 	stw	r2,0(r5)
    8aec:	20c00117 	ldw	r3,4(r4)
    8af0:	28c00115 	stw	r3,4(r5)
    8af4:	20800217 	ldw	r2,8(r4)
    8af8:	28800215 	stw	r2,8(r5)
    8afc:	900b883a 	mov	r5,r18
    8b00:	b009883a 	mov	r4,r22
    8b04:	000693c0 	call	693c <_free_r>
    8b08:	b009883a 	mov	r4,r22
    8b0c:	000c05c0 	call	c05c <__malloc_unlock>
    8b10:	003f5e06 	br	888c <_realloc_r+0xd8>
    8b14:	300b883a 	mov	r5,r6
    8b18:	dfc00b17 	ldw	ra,44(sp)
    8b1c:	df000a17 	ldw	fp,40(sp)
    8b20:	ddc00917 	ldw	r23,36(sp)
    8b24:	dd800817 	ldw	r22,32(sp)
    8b28:	dd400717 	ldw	r21,28(sp)
    8b2c:	dd000617 	ldw	r20,24(sp)
    8b30:	dcc00517 	ldw	r19,20(sp)
    8b34:	dc800417 	ldw	r18,16(sp)
    8b38:	dc400317 	ldw	r17,12(sp)
    8b3c:	dc000217 	ldw	r16,8(sp)
    8b40:	dec00c04 	addi	sp,sp,48
    8b44:	0001fec1 	jmpi	1fec <_malloc_r>
    8b48:	38800117 	ldw	r2,4(r7)
    8b4c:	e54b883a 	add	r5,fp,r21
    8b50:	31000054 	ori	r4,r6,1
    8b54:	1080004c 	andi	r2,r2,1
    8b58:	1704b03a 	or	r2,r2,fp
    8b5c:	38800115 	stw	r2,4(r7)
    8b60:	29000115 	stw	r4,4(r5)
    8b64:	2987883a 	add	r3,r5,r6
    8b68:	18800117 	ldw	r2,4(r3)
    8b6c:	29400204 	addi	r5,r5,8
    8b70:	b009883a 	mov	r4,r22
    8b74:	10800054 	ori	r2,r2,1
    8b78:	18800115 	stw	r2,4(r3)
    8b7c:	000693c0 	call	693c <_free_r>
    8b80:	003f3806 	br	8864 <_realloc_r+0xb0>
    8b84:	000d883a 	mov	r6,zero
    8b88:	0009883a 	mov	r4,zero
    8b8c:	003f5d06 	br	8904 <_realloc_r+0x150>
    8b90:	30c00217 	ldw	r3,8(r6)
    8b94:	30800317 	ldw	r2,12(r6)
    8b98:	800f883a 	mov	r7,r16
    8b9c:	84000204 	addi	r16,r16,8
    8ba0:	10c00215 	stw	r3,8(r2)
    8ba4:	18800315 	stw	r2,12(r3)
    8ba8:	003f2306 	br	8838 <_realloc_r+0x84>
    8bac:	8809883a 	mov	r4,r17
    8bb0:	900b883a 	mov	r5,r18
    8bb4:	00076480 	call	7648 <memmove>
    8bb8:	003fd006 	br	8afc <_realloc_r+0x348>
    8bbc:	30800117 	ldw	r2,4(r6)
    8bc0:	e0c00404 	addi	r3,fp,16
    8bc4:	1108703a 	and	r4,r2,r4
    8bc8:	9905883a 	add	r2,r19,r4
    8bcc:	10ff4d16 	blt	r2,r3,8904 <_realloc_r+0x150>
    8bd0:	1705c83a 	sub	r2,r2,fp
    8bd4:	870b883a 	add	r5,r16,fp
    8bd8:	10800054 	ori	r2,r2,1
    8bdc:	28800115 	stw	r2,4(r5)
    8be0:	80c00117 	ldw	r3,4(r16)
    8be4:	00800074 	movhi	r2,1
    8be8:	10bb3a04 	addi	r2,r2,-4888
    8bec:	b009883a 	mov	r4,r22
    8bf0:	18c0004c 	andi	r3,r3,1
    8bf4:	e0c6b03a 	or	r3,fp,r3
    8bf8:	11400215 	stw	r5,8(r2)
    8bfc:	80c00115 	stw	r3,4(r16)
    8c00:	000c05c0 	call	c05c <__malloc_unlock>
    8c04:	84400204 	addi	r17,r16,8
    8c08:	003f2006 	br	888c <_realloc_r+0xd8>
    8c0c:	98a9883a 	add	r20,r19,r2
    8c10:	2509883a 	add	r4,r4,r20
    8c14:	e0800404 	addi	r2,fp,16
    8c18:	d9000115 	stw	r4,4(sp)
    8c1c:	20bf7016 	blt	r4,r2,89e0 <_realloc_r+0x22c>
    8c20:	b8c00317 	ldw	r3,12(r23)
    8c24:	b8800217 	ldw	r2,8(r23)
    8c28:	99bfff04 	addi	r6,r19,-4
    8c2c:	01400904 	movi	r5,36
    8c30:	18800215 	stw	r2,8(r3)
    8c34:	10c00315 	stw	r3,12(r2)
    8c38:	bc400204 	addi	r17,r23,8
    8c3c:	29804136 	bltu	r5,r6,8d44 <_realloc_r+0x590>
    8c40:	008004c4 	movi	r2,19
    8c44:	9009883a 	mov	r4,r18
    8c48:	880f883a 	mov	r7,r17
    8c4c:	11800f2e 	bgeu	r2,r6,8c8c <_realloc_r+0x4d8>
    8c50:	90800017 	ldw	r2,0(r18)
    8c54:	b9c00404 	addi	r7,r23,16
    8c58:	91000204 	addi	r4,r18,8
    8c5c:	b8800215 	stw	r2,8(r23)
    8c60:	90c00117 	ldw	r3,4(r18)
    8c64:	008006c4 	movi	r2,27
    8c68:	b8c00315 	stw	r3,12(r23)
    8c6c:	1180072e 	bgeu	r2,r6,8c8c <_realloc_r+0x4d8>
    8c70:	90c00217 	ldw	r3,8(r18)
    8c74:	b9c00604 	addi	r7,r23,24
    8c78:	91000404 	addi	r4,r18,16
    8c7c:	b8c00415 	stw	r3,16(r23)
    8c80:	90800317 	ldw	r2,12(r18)
    8c84:	b8800515 	stw	r2,20(r23)
    8c88:	31404026 	beq	r6,r5,8d8c <_realloc_r+0x5d8>
    8c8c:	20800017 	ldw	r2,0(r4)
    8c90:	38800015 	stw	r2,0(r7)
    8c94:	20c00117 	ldw	r3,4(r4)
    8c98:	38c00115 	stw	r3,4(r7)
    8c9c:	20800217 	ldw	r2,8(r4)
    8ca0:	38800215 	stw	r2,8(r7)
    8ca4:	d8c00117 	ldw	r3,4(sp)
    8ca8:	bf0b883a 	add	r5,r23,fp
    8cac:	b009883a 	mov	r4,r22
    8cb0:	1f05c83a 	sub	r2,r3,fp
    8cb4:	10800054 	ori	r2,r2,1
    8cb8:	28800115 	stw	r2,4(r5)
    8cbc:	b8c00117 	ldw	r3,4(r23)
    8cc0:	00800074 	movhi	r2,1
    8cc4:	10bb3a04 	addi	r2,r2,-4888
    8cc8:	11400215 	stw	r5,8(r2)
    8ccc:	18c0004c 	andi	r3,r3,1
    8cd0:	e0c6b03a 	or	r3,fp,r3
    8cd4:	b8c00115 	stw	r3,4(r23)
    8cd8:	000c05c0 	call	c05c <__malloc_unlock>
    8cdc:	003eeb06 	br	888c <_realloc_r+0xd8>
    8ce0:	20800117 	ldw	r2,4(r4)
    8ce4:	00ffff04 	movi	r3,-4
    8ce8:	800f883a 	mov	r7,r16
    8cec:	10c4703a 	and	r2,r2,r3
    8cf0:	98a9883a 	add	r20,r19,r2
    8cf4:	84000204 	addi	r16,r16,8
    8cf8:	003ecf06 	br	8838 <_realloc_r+0x84>
    8cfc:	900b883a 	mov	r5,r18
    8d00:	8009883a 	mov	r4,r16
    8d04:	00076480 	call	7648 <memmove>
    8d08:	dd000017 	ldw	r20,0(sp)
    8d0c:	b80f883a 	mov	r7,r23
    8d10:	003ec906 	br	8838 <_realloc_r+0x84>
    8d14:	900b883a 	mov	r5,r18
    8d18:	8009883a 	mov	r4,r16
    8d1c:	00076480 	call	7648 <memmove>
    8d20:	b80f883a 	mov	r7,r23
    8d24:	003ec406 	br	8838 <_realloc_r+0x84>
    8d28:	90c00417 	ldw	r3,16(r18)
    8d2c:	89400604 	addi	r5,r17,24
    8d30:	91000604 	addi	r4,r18,24
    8d34:	88c00415 	stw	r3,16(r17)
    8d38:	90800517 	ldw	r2,20(r18)
    8d3c:	88800515 	stw	r2,20(r17)
    8d40:	003f6806 	br	8ae4 <_realloc_r+0x330>
    8d44:	900b883a 	mov	r5,r18
    8d48:	8809883a 	mov	r4,r17
    8d4c:	00076480 	call	7648 <memmove>
    8d50:	003fd406 	br	8ca4 <_realloc_r+0x4f0>
    8d54:	90c00417 	ldw	r3,16(r18)
    8d58:	91000604 	addi	r4,r18,24
    8d5c:	ba000804 	addi	r8,r23,32
    8d60:	b8c00615 	stw	r3,24(r23)
    8d64:	90800517 	ldw	r2,20(r18)
    8d68:	b8800715 	stw	r2,28(r23)
    8d6c:	003f1206 	br	89b8 <_realloc_r+0x204>
    8d70:	90c00417 	ldw	r3,16(r18)
    8d74:	91000604 	addi	r4,r18,24
    8d78:	ba000804 	addi	r8,r23,32
    8d7c:	b8c00615 	stw	r3,24(r23)
    8d80:	90800517 	ldw	r2,20(r18)
    8d84:	b8800715 	stw	r2,28(r23)
    8d88:	003f3206 	br	8a54 <_realloc_r+0x2a0>
    8d8c:	90c00417 	ldw	r3,16(r18)
    8d90:	91000604 	addi	r4,r18,24
    8d94:	b9c00804 	addi	r7,r23,32
    8d98:	b8c00615 	stw	r3,24(r23)
    8d9c:	90800517 	ldw	r2,20(r18)
    8da0:	b8800715 	stw	r2,28(r23)
    8da4:	003fb906 	br	8c8c <_realloc_r+0x4d8>

00008da8 <__isinfd>:
    8da8:	200d883a 	mov	r6,r4
    8dac:	0109c83a 	sub	r4,zero,r4
    8db0:	2188b03a 	or	r4,r4,r6
    8db4:	2008d7fa 	srli	r4,r4,31
    8db8:	00a00034 	movhi	r2,32768
    8dbc:	10bfffc4 	addi	r2,r2,-1
    8dc0:	1144703a 	and	r2,r2,r5
    8dc4:	2088b03a 	or	r4,r4,r2
    8dc8:	009ffc34 	movhi	r2,32752
    8dcc:	1105c83a 	sub	r2,r2,r4
    8dd0:	0087c83a 	sub	r3,zero,r2
    8dd4:	10c4b03a 	or	r2,r2,r3
    8dd8:	1004d7fa 	srli	r2,r2,31
    8ddc:	00c00044 	movi	r3,1
    8de0:	1885c83a 	sub	r2,r3,r2
    8de4:	f800283a 	ret

00008de8 <__isnand>:
    8de8:	200d883a 	mov	r6,r4
    8dec:	0109c83a 	sub	r4,zero,r4
    8df0:	2188b03a 	or	r4,r4,r6
    8df4:	2008d7fa 	srli	r4,r4,31
    8df8:	00a00034 	movhi	r2,32768
    8dfc:	10bfffc4 	addi	r2,r2,-1
    8e00:	1144703a 	and	r2,r2,r5
    8e04:	2088b03a 	or	r4,r4,r2
    8e08:	009ffc34 	movhi	r2,32752
    8e0c:	1105c83a 	sub	r2,r2,r4
    8e10:	1004d7fa 	srli	r2,r2,31
    8e14:	f800283a 	ret

00008e18 <__sclose>:
    8e18:	2940038f 	ldh	r5,14(r5)
    8e1c:	000914c1 	jmpi	914c <_close_r>

00008e20 <__sseek>:
    8e20:	defffe04 	addi	sp,sp,-8
    8e24:	dc000015 	stw	r16,0(sp)
    8e28:	2821883a 	mov	r16,r5
    8e2c:	2940038f 	ldh	r5,14(r5)
    8e30:	dfc00115 	stw	ra,4(sp)
    8e34:	00093c40 	call	93c4 <_lseek_r>
    8e38:	1007883a 	mov	r3,r2
    8e3c:	00bfffc4 	movi	r2,-1
    8e40:	18800926 	beq	r3,r2,8e68 <__sseek+0x48>
    8e44:	8080030b 	ldhu	r2,12(r16)
    8e48:	80c01415 	stw	r3,80(r16)
    8e4c:	10840014 	ori	r2,r2,4096
    8e50:	8080030d 	sth	r2,12(r16)
    8e54:	1805883a 	mov	r2,r3
    8e58:	dfc00117 	ldw	ra,4(sp)
    8e5c:	dc000017 	ldw	r16,0(sp)
    8e60:	dec00204 	addi	sp,sp,8
    8e64:	f800283a 	ret
    8e68:	8080030b 	ldhu	r2,12(r16)
    8e6c:	10bbffcc 	andi	r2,r2,61439
    8e70:	8080030d 	sth	r2,12(r16)
    8e74:	1805883a 	mov	r2,r3
    8e78:	dfc00117 	ldw	ra,4(sp)
    8e7c:	dc000017 	ldw	r16,0(sp)
    8e80:	dec00204 	addi	sp,sp,8
    8e84:	f800283a 	ret

00008e88 <__swrite>:
    8e88:	2880030b 	ldhu	r2,12(r5)
    8e8c:	defffb04 	addi	sp,sp,-20
    8e90:	dcc00315 	stw	r19,12(sp)
    8e94:	1080400c 	andi	r2,r2,256
    8e98:	dc800215 	stw	r18,8(sp)
    8e9c:	dc400115 	stw	r17,4(sp)
    8ea0:	dc000015 	stw	r16,0(sp)
    8ea4:	3027883a 	mov	r19,r6
    8ea8:	3825883a 	mov	r18,r7
    8eac:	dfc00415 	stw	ra,16(sp)
    8eb0:	2821883a 	mov	r16,r5
    8eb4:	000d883a 	mov	r6,zero
    8eb8:	01c00084 	movi	r7,2
    8ebc:	2023883a 	mov	r17,r4
    8ec0:	10000226 	beq	r2,zero,8ecc <__swrite+0x44>
    8ec4:	2940038f 	ldh	r5,14(r5)
    8ec8:	00093c40 	call	93c4 <_lseek_r>
    8ecc:	8080030b 	ldhu	r2,12(r16)
    8ed0:	8140038f 	ldh	r5,14(r16)
    8ed4:	8809883a 	mov	r4,r17
    8ed8:	10bbffcc 	andi	r2,r2,61439
    8edc:	980d883a 	mov	r6,r19
    8ee0:	900f883a 	mov	r7,r18
    8ee4:	8080030d 	sth	r2,12(r16)
    8ee8:	dfc00417 	ldw	ra,16(sp)
    8eec:	dcc00317 	ldw	r19,12(sp)
    8ef0:	dc800217 	ldw	r18,8(sp)
    8ef4:	dc400117 	ldw	r17,4(sp)
    8ef8:	dc000017 	ldw	r16,0(sp)
    8efc:	dec00504 	addi	sp,sp,20
    8f00:	00090201 	jmpi	9020 <_write_r>

00008f04 <__sread>:
    8f04:	defffe04 	addi	sp,sp,-8
    8f08:	dc000015 	stw	r16,0(sp)
    8f0c:	2821883a 	mov	r16,r5
    8f10:	2940038f 	ldh	r5,14(r5)
    8f14:	dfc00115 	stw	ra,4(sp)
    8f18:	000943c0 	call	943c <_read_r>
    8f1c:	1007883a 	mov	r3,r2
    8f20:	10000816 	blt	r2,zero,8f44 <__sread+0x40>
    8f24:	80801417 	ldw	r2,80(r16)
    8f28:	10c5883a 	add	r2,r2,r3
    8f2c:	80801415 	stw	r2,80(r16)
    8f30:	1805883a 	mov	r2,r3
    8f34:	dfc00117 	ldw	ra,4(sp)
    8f38:	dc000017 	ldw	r16,0(sp)
    8f3c:	dec00204 	addi	sp,sp,8
    8f40:	f800283a 	ret
    8f44:	8080030b 	ldhu	r2,12(r16)
    8f48:	10bbffcc 	andi	r2,r2,61439
    8f4c:	8080030d 	sth	r2,12(r16)
    8f50:	1805883a 	mov	r2,r3
    8f54:	dfc00117 	ldw	ra,4(sp)
    8f58:	dc000017 	ldw	r16,0(sp)
    8f5c:	dec00204 	addi	sp,sp,8
    8f60:	f800283a 	ret

00008f64 <strcmp>:
    8f64:	2144b03a 	or	r2,r4,r5
    8f68:	108000cc 	andi	r2,r2,3
    8f6c:	10001d1e 	bne	r2,zero,8fe4 <strcmp+0x80>
    8f70:	200f883a 	mov	r7,r4
    8f74:	28800017 	ldw	r2,0(r5)
    8f78:	21000017 	ldw	r4,0(r4)
    8f7c:	280d883a 	mov	r6,r5
    8f80:	2080161e 	bne	r4,r2,8fdc <strcmp+0x78>
    8f84:	023fbff4 	movhi	r8,65279
    8f88:	423fbfc4 	addi	r8,r8,-257
    8f8c:	2207883a 	add	r3,r4,r8
    8f90:	01602074 	movhi	r5,32897
    8f94:	29602004 	addi	r5,r5,-32640
    8f98:	1946703a 	and	r3,r3,r5
    8f9c:	0104303a 	nor	r2,zero,r4
    8fa0:	10c4703a 	and	r2,r2,r3
    8fa4:	10001c1e 	bne	r2,zero,9018 <strcmp+0xb4>
    8fa8:	4013883a 	mov	r9,r8
    8fac:	2811883a 	mov	r8,r5
    8fb0:	00000106 	br	8fb8 <strcmp+0x54>
    8fb4:	1800181e 	bne	r3,zero,9018 <strcmp+0xb4>
    8fb8:	39c00104 	addi	r7,r7,4
    8fbc:	39000017 	ldw	r4,0(r7)
    8fc0:	31800104 	addi	r6,r6,4
    8fc4:	31400017 	ldw	r5,0(r6)
    8fc8:	2245883a 	add	r2,r4,r9
    8fcc:	1204703a 	and	r2,r2,r8
    8fd0:	0106303a 	nor	r3,zero,r4
    8fd4:	1886703a 	and	r3,r3,r2
    8fd8:	217ff626 	beq	r4,r5,8fb4 <strcmp+0x50>
    8fdc:	3809883a 	mov	r4,r7
    8fe0:	300b883a 	mov	r5,r6
    8fe4:	20c00007 	ldb	r3,0(r4)
    8fe8:	1800051e 	bne	r3,zero,9000 <strcmp+0x9c>
    8fec:	00000606 	br	9008 <strcmp+0xa4>
    8ff0:	21000044 	addi	r4,r4,1
    8ff4:	20c00007 	ldb	r3,0(r4)
    8ff8:	29400044 	addi	r5,r5,1
    8ffc:	18000226 	beq	r3,zero,9008 <strcmp+0xa4>
    9000:	28800007 	ldb	r2,0(r5)
    9004:	18bffa26 	beq	r3,r2,8ff0 <strcmp+0x8c>
    9008:	20c00003 	ldbu	r3,0(r4)
    900c:	28800003 	ldbu	r2,0(r5)
    9010:	1885c83a 	sub	r2,r3,r2
    9014:	f800283a 	ret
    9018:	0005883a 	mov	r2,zero
    901c:	f800283a 	ret

00009020 <_write_r>:
    9020:	defffd04 	addi	sp,sp,-12
    9024:	dc000015 	stw	r16,0(sp)
    9028:	04000074 	movhi	r16,1
    902c:	84078604 	addi	r16,r16,7704
    9030:	dc400115 	stw	r17,4(sp)
    9034:	80000015 	stw	zero,0(r16)
    9038:	2023883a 	mov	r17,r4
    903c:	2809883a 	mov	r4,r5
    9040:	300b883a 	mov	r5,r6
    9044:	380d883a 	mov	r6,r7
    9048:	dfc00215 	stw	ra,8(sp)
    904c:	000c3180 	call	c318 <write>
    9050:	1007883a 	mov	r3,r2
    9054:	00bfffc4 	movi	r2,-1
    9058:	18800626 	beq	r3,r2,9074 <_write_r+0x54>
    905c:	1805883a 	mov	r2,r3
    9060:	dfc00217 	ldw	ra,8(sp)
    9064:	dc400117 	ldw	r17,4(sp)
    9068:	dc000017 	ldw	r16,0(sp)
    906c:	dec00304 	addi	sp,sp,12
    9070:	f800283a 	ret
    9074:	80800017 	ldw	r2,0(r16)
    9078:	103ff826 	beq	r2,zero,905c <_write_r+0x3c>
    907c:	88800015 	stw	r2,0(r17)
    9080:	1805883a 	mov	r2,r3
    9084:	dfc00217 	ldw	ra,8(sp)
    9088:	dc400117 	ldw	r17,4(sp)
    908c:	dc000017 	ldw	r16,0(sp)
    9090:	dec00304 	addi	sp,sp,12
    9094:	f800283a 	ret

00009098 <_calloc_r>:
    9098:	298b383a 	mul	r5,r5,r6
    909c:	defffe04 	addi	sp,sp,-8
    90a0:	dc000015 	stw	r16,0(sp)
    90a4:	dfc00115 	stw	ra,4(sp)
    90a8:	0001fec0 	call	1fec <_malloc_r>
    90ac:	1021883a 	mov	r16,r2
    90b0:	01c00904 	movi	r7,36
    90b4:	10000d26 	beq	r2,zero,90ec <_calloc_r+0x54>
    90b8:	10ffff17 	ldw	r3,-4(r2)
    90bc:	1009883a 	mov	r4,r2
    90c0:	00bfff04 	movi	r2,-4
    90c4:	1886703a 	and	r3,r3,r2
    90c8:	1887883a 	add	r3,r3,r2
    90cc:	180d883a 	mov	r6,r3
    90d0:	000b883a 	mov	r5,zero
    90d4:	38c01736 	bltu	r7,r3,9134 <_calloc_r+0x9c>
    90d8:	008004c4 	movi	r2,19
    90dc:	10c00836 	bltu	r2,r3,9100 <_calloc_r+0x68>
    90e0:	20000215 	stw	zero,8(r4)
    90e4:	20000015 	stw	zero,0(r4)
    90e8:	20000115 	stw	zero,4(r4)
    90ec:	8005883a 	mov	r2,r16
    90f0:	dfc00117 	ldw	ra,4(sp)
    90f4:	dc000017 	ldw	r16,0(sp)
    90f8:	dec00204 	addi	sp,sp,8
    90fc:	f800283a 	ret
    9100:	008006c4 	movi	r2,27
    9104:	80000015 	stw	zero,0(r16)
    9108:	80000115 	stw	zero,4(r16)
    910c:	81000204 	addi	r4,r16,8
    9110:	10fff32e 	bgeu	r2,r3,90e0 <_calloc_r+0x48>
    9114:	80000215 	stw	zero,8(r16)
    9118:	80000315 	stw	zero,12(r16)
    911c:	81000404 	addi	r4,r16,16
    9120:	19ffef1e 	bne	r3,r7,90e0 <_calloc_r+0x48>
    9124:	81000604 	addi	r4,r16,24
    9128:	80000415 	stw	zero,16(r16)
    912c:	80000515 	stw	zero,20(r16)
    9130:	003feb06 	br	90e0 <_calloc_r+0x48>
    9134:	00077280 	call	7728 <memset>
    9138:	8005883a 	mov	r2,r16
    913c:	dfc00117 	ldw	ra,4(sp)
    9140:	dc000017 	ldw	r16,0(sp)
    9144:	dec00204 	addi	sp,sp,8
    9148:	f800283a 	ret

0000914c <_close_r>:
    914c:	defffd04 	addi	sp,sp,-12
    9150:	dc000015 	stw	r16,0(sp)
    9154:	04000074 	movhi	r16,1
    9158:	84078604 	addi	r16,r16,7704
    915c:	dc400115 	stw	r17,4(sp)
    9160:	80000015 	stw	zero,0(r16)
    9164:	2023883a 	mov	r17,r4
    9168:	2809883a 	mov	r4,r5
    916c:	dfc00215 	stw	ra,8(sp)
    9170:	000b7980 	call	b798 <close>
    9174:	1007883a 	mov	r3,r2
    9178:	00bfffc4 	movi	r2,-1
    917c:	18800626 	beq	r3,r2,9198 <_close_r+0x4c>
    9180:	1805883a 	mov	r2,r3
    9184:	dfc00217 	ldw	ra,8(sp)
    9188:	dc400117 	ldw	r17,4(sp)
    918c:	dc000017 	ldw	r16,0(sp)
    9190:	dec00304 	addi	sp,sp,12
    9194:	f800283a 	ret
    9198:	80800017 	ldw	r2,0(r16)
    919c:	103ff826 	beq	r2,zero,9180 <_close_r+0x34>
    91a0:	88800015 	stw	r2,0(r17)
    91a4:	1805883a 	mov	r2,r3
    91a8:	dfc00217 	ldw	ra,8(sp)
    91ac:	dc400117 	ldw	r17,4(sp)
    91b0:	dc000017 	ldw	r16,0(sp)
    91b4:	dec00304 	addi	sp,sp,12
    91b8:	f800283a 	ret

000091bc <_fclose_r>:
    91bc:	defffc04 	addi	sp,sp,-16
    91c0:	dc400115 	stw	r17,4(sp)
    91c4:	dc000015 	stw	r16,0(sp)
    91c8:	dfc00315 	stw	ra,12(sp)
    91cc:	dc800215 	stw	r18,8(sp)
    91d0:	2821883a 	mov	r16,r5
    91d4:	2023883a 	mov	r17,r4
    91d8:	28002926 	beq	r5,zero,9280 <_fclose_r+0xc4>
    91dc:	00065a80 	call	65a8 <__sfp_lock_acquire>
    91e0:	88000226 	beq	r17,zero,91ec <_fclose_r+0x30>
    91e4:	88800e17 	ldw	r2,56(r17)
    91e8:	10002d26 	beq	r2,zero,92a0 <_fclose_r+0xe4>
    91ec:	8080030f 	ldh	r2,12(r16)
    91f0:	10002226 	beq	r2,zero,927c <_fclose_r+0xc0>
    91f4:	8809883a 	mov	r4,r17
    91f8:	800b883a 	mov	r5,r16
    91fc:	00063200 	call	6320 <_fflush_r>
    9200:	1025883a 	mov	r18,r2
    9204:	80800b17 	ldw	r2,44(r16)
    9208:	10000426 	beq	r2,zero,921c <_fclose_r+0x60>
    920c:	81400717 	ldw	r5,28(r16)
    9210:	8809883a 	mov	r4,r17
    9214:	103ee83a 	callr	r2
    9218:	10002a16 	blt	r2,zero,92c4 <_fclose_r+0x108>
    921c:	8080030b 	ldhu	r2,12(r16)
    9220:	1080200c 	andi	r2,r2,128
    9224:	1000231e 	bne	r2,zero,92b4 <_fclose_r+0xf8>
    9228:	81400c17 	ldw	r5,48(r16)
    922c:	28000526 	beq	r5,zero,9244 <_fclose_r+0x88>
    9230:	80801004 	addi	r2,r16,64
    9234:	28800226 	beq	r5,r2,9240 <_fclose_r+0x84>
    9238:	8809883a 	mov	r4,r17
    923c:	000693c0 	call	693c <_free_r>
    9240:	80000c15 	stw	zero,48(r16)
    9244:	81401117 	ldw	r5,68(r16)
    9248:	28000326 	beq	r5,zero,9258 <_fclose_r+0x9c>
    924c:	8809883a 	mov	r4,r17
    9250:	000693c0 	call	693c <_free_r>
    9254:	80001115 	stw	zero,68(r16)
    9258:	8000030d 	sth	zero,12(r16)
    925c:	00065ac0 	call	65ac <__sfp_lock_release>
    9260:	9005883a 	mov	r2,r18
    9264:	dfc00317 	ldw	ra,12(sp)
    9268:	dc800217 	ldw	r18,8(sp)
    926c:	dc400117 	ldw	r17,4(sp)
    9270:	dc000017 	ldw	r16,0(sp)
    9274:	dec00404 	addi	sp,sp,16
    9278:	f800283a 	ret
    927c:	00065ac0 	call	65ac <__sfp_lock_release>
    9280:	0025883a 	mov	r18,zero
    9284:	9005883a 	mov	r2,r18
    9288:	dfc00317 	ldw	ra,12(sp)
    928c:	dc800217 	ldw	r18,8(sp)
    9290:	dc400117 	ldw	r17,4(sp)
    9294:	dc000017 	ldw	r16,0(sp)
    9298:	dec00404 	addi	sp,sp,16
    929c:	f800283a 	ret
    92a0:	8809883a 	mov	r4,r17
    92a4:	00065b80 	call	65b8 <__sinit>
    92a8:	8080030f 	ldh	r2,12(r16)
    92ac:	103fd11e 	bne	r2,zero,91f4 <_fclose_r+0x38>
    92b0:	003ff206 	br	927c <_fclose_r+0xc0>
    92b4:	81400417 	ldw	r5,16(r16)
    92b8:	8809883a 	mov	r4,r17
    92bc:	000693c0 	call	693c <_free_r>
    92c0:	003fd906 	br	9228 <_fclose_r+0x6c>
    92c4:	04bfffc4 	movi	r18,-1
    92c8:	003fd406 	br	921c <_fclose_r+0x60>

000092cc <fclose>:
    92cc:	00800074 	movhi	r2,1
    92d0:	1080c204 	addi	r2,r2,776
    92d4:	200b883a 	mov	r5,r4
    92d8:	11000017 	ldw	r4,0(r2)
    92dc:	00091bc1 	jmpi	91bc <_fclose_r>

000092e0 <_fstat_r>:
    92e0:	defffd04 	addi	sp,sp,-12
    92e4:	dc000015 	stw	r16,0(sp)
    92e8:	04000074 	movhi	r16,1
    92ec:	84078604 	addi	r16,r16,7704
    92f0:	dc400115 	stw	r17,4(sp)
    92f4:	80000015 	stw	zero,0(r16)
    92f8:	2023883a 	mov	r17,r4
    92fc:	2809883a 	mov	r4,r5
    9300:	300b883a 	mov	r5,r6
    9304:	dfc00215 	stw	ra,8(sp)
    9308:	000b9800 	call	b980 <fstat>
    930c:	1007883a 	mov	r3,r2
    9310:	00bfffc4 	movi	r2,-1
    9314:	18800626 	beq	r3,r2,9330 <_fstat_r+0x50>
    9318:	1805883a 	mov	r2,r3
    931c:	dfc00217 	ldw	ra,8(sp)
    9320:	dc400117 	ldw	r17,4(sp)
    9324:	dc000017 	ldw	r16,0(sp)
    9328:	dec00304 	addi	sp,sp,12
    932c:	f800283a 	ret
    9330:	80800017 	ldw	r2,0(r16)
    9334:	103ff826 	beq	r2,zero,9318 <_fstat_r+0x38>
    9338:	88800015 	stw	r2,0(r17)
    933c:	1805883a 	mov	r2,r3
    9340:	dfc00217 	ldw	ra,8(sp)
    9344:	dc400117 	ldw	r17,4(sp)
    9348:	dc000017 	ldw	r16,0(sp)
    934c:	dec00304 	addi	sp,sp,12
    9350:	f800283a 	ret

00009354 <_isatty_r>:
    9354:	defffd04 	addi	sp,sp,-12
    9358:	dc000015 	stw	r16,0(sp)
    935c:	04000074 	movhi	r16,1
    9360:	84078604 	addi	r16,r16,7704
    9364:	dc400115 	stw	r17,4(sp)
    9368:	80000015 	stw	zero,0(r16)
    936c:	2023883a 	mov	r17,r4
    9370:	2809883a 	mov	r4,r5
    9374:	dfc00215 	stw	ra,8(sp)
    9378:	000bc740 	call	bc74 <isatty>
    937c:	1007883a 	mov	r3,r2
    9380:	00bfffc4 	movi	r2,-1
    9384:	18800626 	beq	r3,r2,93a0 <_isatty_r+0x4c>
    9388:	1805883a 	mov	r2,r3
    938c:	dfc00217 	ldw	ra,8(sp)
    9390:	dc400117 	ldw	r17,4(sp)
    9394:	dc000017 	ldw	r16,0(sp)
    9398:	dec00304 	addi	sp,sp,12
    939c:	f800283a 	ret
    93a0:	80800017 	ldw	r2,0(r16)
    93a4:	103ff826 	beq	r2,zero,9388 <_isatty_r+0x34>
    93a8:	88800015 	stw	r2,0(r17)
    93ac:	1805883a 	mov	r2,r3
    93b0:	dfc00217 	ldw	ra,8(sp)
    93b4:	dc400117 	ldw	r17,4(sp)
    93b8:	dc000017 	ldw	r16,0(sp)
    93bc:	dec00304 	addi	sp,sp,12
    93c0:	f800283a 	ret

000093c4 <_lseek_r>:
    93c4:	defffd04 	addi	sp,sp,-12
    93c8:	dc000015 	stw	r16,0(sp)
    93cc:	04000074 	movhi	r16,1
    93d0:	84078604 	addi	r16,r16,7704
    93d4:	dc400115 	stw	r17,4(sp)
    93d8:	80000015 	stw	zero,0(r16)
    93dc:	2023883a 	mov	r17,r4
    93e0:	2809883a 	mov	r4,r5
    93e4:	300b883a 	mov	r5,r6
    93e8:	380d883a 	mov	r6,r7
    93ec:	dfc00215 	stw	ra,8(sp)
    93f0:	000be800 	call	be80 <lseek>
    93f4:	1007883a 	mov	r3,r2
    93f8:	00bfffc4 	movi	r2,-1
    93fc:	18800626 	beq	r3,r2,9418 <_lseek_r+0x54>
    9400:	1805883a 	mov	r2,r3
    9404:	dfc00217 	ldw	ra,8(sp)
    9408:	dc400117 	ldw	r17,4(sp)
    940c:	dc000017 	ldw	r16,0(sp)
    9410:	dec00304 	addi	sp,sp,12
    9414:	f800283a 	ret
    9418:	80800017 	ldw	r2,0(r16)
    941c:	103ff826 	beq	r2,zero,9400 <_lseek_r+0x3c>
    9420:	88800015 	stw	r2,0(r17)
    9424:	1805883a 	mov	r2,r3
    9428:	dfc00217 	ldw	ra,8(sp)
    942c:	dc400117 	ldw	r17,4(sp)
    9430:	dc000017 	ldw	r16,0(sp)
    9434:	dec00304 	addi	sp,sp,12
    9438:	f800283a 	ret

0000943c <_read_r>:
    943c:	defffd04 	addi	sp,sp,-12
    9440:	dc000015 	stw	r16,0(sp)
    9444:	04000074 	movhi	r16,1
    9448:	84078604 	addi	r16,r16,7704
    944c:	dc400115 	stw	r17,4(sp)
    9450:	80000015 	stw	zero,0(r16)
    9454:	2023883a 	mov	r17,r4
    9458:	2809883a 	mov	r4,r5
    945c:	300b883a 	mov	r5,r6
    9460:	380d883a 	mov	r6,r7
    9464:	dfc00215 	stw	ra,8(sp)
    9468:	000c07c0 	call	c07c <read>
    946c:	1007883a 	mov	r3,r2
    9470:	00bfffc4 	movi	r2,-1
    9474:	18800626 	beq	r3,r2,9490 <_read_r+0x54>
    9478:	1805883a 	mov	r2,r3
    947c:	dfc00217 	ldw	ra,8(sp)
    9480:	dc400117 	ldw	r17,4(sp)
    9484:	dc000017 	ldw	r16,0(sp)
    9488:	dec00304 	addi	sp,sp,12
    948c:	f800283a 	ret
    9490:	80800017 	ldw	r2,0(r16)
    9494:	103ff826 	beq	r2,zero,9478 <_read_r+0x3c>
    9498:	88800015 	stw	r2,0(r17)
    949c:	1805883a 	mov	r2,r3
    94a0:	dfc00217 	ldw	ra,8(sp)
    94a4:	dc400117 	ldw	r17,4(sp)
    94a8:	dc000017 	ldw	r16,0(sp)
    94ac:	dec00304 	addi	sp,sp,12
    94b0:	f800283a 	ret

000094b4 <__udivdi3>:
    94b4:	defff004 	addi	sp,sp,-64
    94b8:	2005883a 	mov	r2,r4
    94bc:	3011883a 	mov	r8,r6
    94c0:	df000e15 	stw	fp,56(sp)
    94c4:	dd000a15 	stw	r20,40(sp)
    94c8:	dc000615 	stw	r16,24(sp)
    94cc:	dfc00f15 	stw	ra,60(sp)
    94d0:	ddc00d15 	stw	r23,52(sp)
    94d4:	dd800c15 	stw	r22,48(sp)
    94d8:	dd400b15 	stw	r21,44(sp)
    94dc:	dcc00915 	stw	r19,36(sp)
    94e0:	dc800815 	stw	r18,32(sp)
    94e4:	dc400715 	stw	r17,28(sp)
    94e8:	4021883a 	mov	r16,r8
    94ec:	1039883a 	mov	fp,r2
    94f0:	2829883a 	mov	r20,r5
    94f4:	38003b1e 	bne	r7,zero,95e4 <__udivdi3+0x130>
    94f8:	2a005c36 	bltu	r5,r8,966c <__udivdi3+0x1b8>
    94fc:	4000a626 	beq	r8,zero,9798 <__udivdi3+0x2e4>
    9500:	00bfffd4 	movui	r2,65535
    9504:	14009e36 	bltu	r2,r16,9780 <__udivdi3+0x2cc>
    9508:	00803fc4 	movi	r2,255
    950c:	14013d36 	bltu	r2,r16,9a04 <__udivdi3+0x550>
    9510:	000b883a 	mov	r5,zero
    9514:	0005883a 	mov	r2,zero
    9518:	8084d83a 	srl	r2,r16,r2
    951c:	01000074 	movhi	r4,1
    9520:	2139df04 	addi	r4,r4,-6276
    9524:	01800804 	movi	r6,32
    9528:	1105883a 	add	r2,r2,r4
    952c:	10c00003 	ldbu	r3,0(r2)
    9530:	28c7883a 	add	r3,r5,r3
    9534:	30edc83a 	sub	r22,r6,r3
    9538:	b000ee1e 	bne	r22,zero,98f4 <__udivdi3+0x440>
    953c:	802ad43a 	srli	r21,r16,16
    9540:	00800044 	movi	r2,1
    9544:	a423c83a 	sub	r17,r20,r16
    9548:	85ffffcc 	andi	r23,r16,65535
    954c:	d8800315 	stw	r2,12(sp)
    9550:	8809883a 	mov	r4,r17
    9554:	a80b883a 	mov	r5,r21
    9558:	0001f7c0 	call	1f7c <__udivsi3>
    955c:	8809883a 	mov	r4,r17
    9560:	a80b883a 	mov	r5,r21
    9564:	102d883a 	mov	r22,r2
    9568:	0001f840 	call	1f84 <__umodsi3>
    956c:	1004943a 	slli	r2,r2,16
    9570:	e006d43a 	srli	r3,fp,16
    9574:	bda3383a 	mul	r17,r23,r22
    9578:	10c4b03a 	or	r2,r2,r3
    957c:	1440042e 	bgeu	r2,r17,9590 <__udivdi3+0xdc>
    9580:	1405883a 	add	r2,r2,r16
    9584:	b5bfffc4 	addi	r22,r22,-1
    9588:	14000136 	bltu	r2,r16,9590 <__udivdi3+0xdc>
    958c:	14413d36 	bltu	r2,r17,9a84 <__udivdi3+0x5d0>
    9590:	1463c83a 	sub	r17,r2,r17
    9594:	8809883a 	mov	r4,r17
    9598:	a80b883a 	mov	r5,r21
    959c:	0001f7c0 	call	1f7c <__udivsi3>
    95a0:	8809883a 	mov	r4,r17
    95a4:	a80b883a 	mov	r5,r21
    95a8:	1029883a 	mov	r20,r2
    95ac:	0001f840 	call	1f84 <__umodsi3>
    95b0:	1004943a 	slli	r2,r2,16
    95b4:	bd09383a 	mul	r4,r23,r20
    95b8:	e0ffffcc 	andi	r3,fp,65535
    95bc:	10c4b03a 	or	r2,r2,r3
    95c0:	1100042e 	bgeu	r2,r4,95d4 <__udivdi3+0x120>
    95c4:	8085883a 	add	r2,r16,r2
    95c8:	a53fffc4 	addi	r20,r20,-1
    95cc:	14000136 	bltu	r2,r16,95d4 <__udivdi3+0x120>
    95d0:	11012036 	bltu	r2,r4,9a54 <__udivdi3+0x5a0>
    95d4:	b004943a 	slli	r2,r22,16
    95d8:	d9000317 	ldw	r4,12(sp)
    95dc:	a084b03a 	or	r2,r20,r2
    95e0:	00001506 	br	9638 <__udivdi3+0x184>
    95e4:	380d883a 	mov	r6,r7
    95e8:	29c06236 	bltu	r5,r7,9774 <__udivdi3+0x2c0>
    95ec:	00bfffd4 	movui	r2,65535
    95f0:	11c05a36 	bltu	r2,r7,975c <__udivdi3+0x2a8>
    95f4:	00803fc4 	movi	r2,255
    95f8:	11c0fc36 	bltu	r2,r7,99ec <__udivdi3+0x538>
    95fc:	000b883a 	mov	r5,zero
    9600:	0005883a 	mov	r2,zero
    9604:	3084d83a 	srl	r2,r6,r2
    9608:	01000074 	movhi	r4,1
    960c:	2139df04 	addi	r4,r4,-6276
    9610:	01c00804 	movi	r7,32
    9614:	1105883a 	add	r2,r2,r4
    9618:	10c00003 	ldbu	r3,0(r2)
    961c:	28c7883a 	add	r3,r5,r3
    9620:	38efc83a 	sub	r23,r7,r3
    9624:	b800691e 	bne	r23,zero,97cc <__udivdi3+0x318>
    9628:	35000136 	bltu	r6,r20,9630 <__udivdi3+0x17c>
    962c:	e4005136 	bltu	fp,r16,9774 <__udivdi3+0x2c0>
    9630:	00800044 	movi	r2,1
    9634:	0009883a 	mov	r4,zero
    9638:	2007883a 	mov	r3,r4
    963c:	dfc00f17 	ldw	ra,60(sp)
    9640:	df000e17 	ldw	fp,56(sp)
    9644:	ddc00d17 	ldw	r23,52(sp)
    9648:	dd800c17 	ldw	r22,48(sp)
    964c:	dd400b17 	ldw	r21,44(sp)
    9650:	dd000a17 	ldw	r20,40(sp)
    9654:	dcc00917 	ldw	r19,36(sp)
    9658:	dc800817 	ldw	r18,32(sp)
    965c:	dc400717 	ldw	r17,28(sp)
    9660:	dc000617 	ldw	r16,24(sp)
    9664:	dec01004 	addi	sp,sp,64
    9668:	f800283a 	ret
    966c:	00bfffd4 	movui	r2,65535
    9670:	12005036 	bltu	r2,r8,97b4 <__udivdi3+0x300>
    9674:	00803fc4 	movi	r2,255
    9678:	1200e836 	bltu	r2,r8,9a1c <__udivdi3+0x568>
    967c:	000b883a 	mov	r5,zero
    9680:	0005883a 	mov	r2,zero
    9684:	8084d83a 	srl	r2,r16,r2
    9688:	01000074 	movhi	r4,1
    968c:	2139df04 	addi	r4,r4,-6276
    9690:	01800804 	movi	r6,32
    9694:	1105883a 	add	r2,r2,r4
    9698:	10c00003 	ldbu	r3,0(r2)
    969c:	28c7883a 	add	r3,r5,r3
    96a0:	30cbc83a 	sub	r5,r6,r3
    96a4:	28000626 	beq	r5,zero,96c0 <__udivdi3+0x20c>
    96a8:	3145c83a 	sub	r2,r6,r5
    96ac:	e084d83a 	srl	r2,fp,r2
    96b0:	a146983a 	sll	r3,r20,r5
    96b4:	e178983a 	sll	fp,fp,r5
    96b8:	8160983a 	sll	r16,r16,r5
    96bc:	18a8b03a 	or	r20,r3,r2
    96c0:	802ad43a 	srli	r21,r16,16
    96c4:	a009883a 	mov	r4,r20
    96c8:	85ffffcc 	andi	r23,r16,65535
    96cc:	a80b883a 	mov	r5,r21
    96d0:	0001f7c0 	call	1f7c <__udivsi3>
    96d4:	a009883a 	mov	r4,r20
    96d8:	a80b883a 	mov	r5,r21
    96dc:	102d883a 	mov	r22,r2
    96e0:	0001f840 	call	1f84 <__umodsi3>
    96e4:	1004943a 	slli	r2,r2,16
    96e8:	e006d43a 	srli	r3,fp,16
    96ec:	bda3383a 	mul	r17,r23,r22
    96f0:	10c4b03a 	or	r2,r2,r3
    96f4:	1440042e 	bgeu	r2,r17,9708 <__udivdi3+0x254>
    96f8:	1405883a 	add	r2,r2,r16
    96fc:	b5bfffc4 	addi	r22,r22,-1
    9700:	14000136 	bltu	r2,r16,9708 <__udivdi3+0x254>
    9704:	1440d536 	bltu	r2,r17,9a5c <__udivdi3+0x5a8>
    9708:	1463c83a 	sub	r17,r2,r17
    970c:	8809883a 	mov	r4,r17
    9710:	a80b883a 	mov	r5,r21
    9714:	0001f7c0 	call	1f7c <__udivsi3>
    9718:	8809883a 	mov	r4,r17
    971c:	a80b883a 	mov	r5,r21
    9720:	1029883a 	mov	r20,r2
    9724:	0001f840 	call	1f84 <__umodsi3>
    9728:	1004943a 	slli	r2,r2,16
    972c:	bd09383a 	mul	r4,r23,r20
    9730:	e0ffffcc 	andi	r3,fp,65535
    9734:	10c4b03a 	or	r2,r2,r3
    9738:	1100042e 	bgeu	r2,r4,974c <__udivdi3+0x298>
    973c:	8085883a 	add	r2,r16,r2
    9740:	a53fffc4 	addi	r20,r20,-1
    9744:	14000136 	bltu	r2,r16,974c <__udivdi3+0x298>
    9748:	1100c736 	bltu	r2,r4,9a68 <__udivdi3+0x5b4>
    974c:	b004943a 	slli	r2,r22,16
    9750:	0009883a 	mov	r4,zero
    9754:	a084b03a 	or	r2,r20,r2
    9758:	003fb706 	br	9638 <__udivdi3+0x184>
    975c:	00804034 	movhi	r2,256
    9760:	10bfffc4 	addi	r2,r2,-1
    9764:	11c0a436 	bltu	r2,r7,99f8 <__udivdi3+0x544>
    9768:	01400404 	movi	r5,16
    976c:	2805883a 	mov	r2,r5
    9770:	003fa406 	br	9604 <__udivdi3+0x150>
    9774:	0005883a 	mov	r2,zero
    9778:	0009883a 	mov	r4,zero
    977c:	003fae06 	br	9638 <__udivdi3+0x184>
    9780:	00804034 	movhi	r2,256
    9784:	10bfffc4 	addi	r2,r2,-1
    9788:	1400a136 	bltu	r2,r16,9a10 <__udivdi3+0x55c>
    978c:	01400404 	movi	r5,16
    9790:	2805883a 	mov	r2,r5
    9794:	003f6006 	br	9518 <__udivdi3+0x64>
    9798:	01000044 	movi	r4,1
    979c:	000b883a 	mov	r5,zero
    97a0:	0001f7c0 	call	1f7c <__udivsi3>
    97a4:	1021883a 	mov	r16,r2
    97a8:	00bfffd4 	movui	r2,65535
    97ac:	143ff436 	bltu	r2,r16,9780 <__udivdi3+0x2cc>
    97b0:	003f5506 	br	9508 <__udivdi3+0x54>
    97b4:	00804034 	movhi	r2,256
    97b8:	10bfffc4 	addi	r2,r2,-1
    97bc:	12009a36 	bltu	r2,r8,9a28 <__udivdi3+0x574>
    97c0:	01400404 	movi	r5,16
    97c4:	2805883a 	mov	r2,r5
    97c8:	003fae06 	br	9684 <__udivdi3+0x1d0>
    97cc:	3dc5c83a 	sub	r2,r7,r23
    97d0:	35c8983a 	sll	r4,r6,r23
    97d4:	8086d83a 	srl	r3,r16,r2
    97d8:	a0a2d83a 	srl	r17,r20,r2
    97dc:	e084d83a 	srl	r2,fp,r2
    97e0:	20eab03a 	or	r21,r4,r3
    97e4:	a82cd43a 	srli	r22,r21,16
    97e8:	a5c6983a 	sll	r3,r20,r23
    97ec:	8809883a 	mov	r4,r17
    97f0:	b00b883a 	mov	r5,r22
    97f4:	1886b03a 	or	r3,r3,r2
    97f8:	d8c00215 	stw	r3,8(sp)
    97fc:	0001f7c0 	call	1f7c <__udivsi3>
    9800:	8809883a 	mov	r4,r17
    9804:	b00b883a 	mov	r5,r22
    9808:	1029883a 	mov	r20,r2
    980c:	0001f840 	call	1f84 <__umodsi3>
    9810:	a8ffffcc 	andi	r3,r21,65535
    9814:	d8c00515 	stw	r3,20(sp)
    9818:	d9000217 	ldw	r4,8(sp)
    981c:	d9400517 	ldw	r5,20(sp)
    9820:	1004943a 	slli	r2,r2,16
    9824:	2006d43a 	srli	r3,r4,16
    9828:	85e0983a 	sll	r16,r16,r23
    982c:	2d23383a 	mul	r17,r5,r20
    9830:	10c4b03a 	or	r2,r2,r3
    9834:	dc000015 	stw	r16,0(sp)
    9838:	1440032e 	bgeu	r2,r17,9848 <__udivdi3+0x394>
    983c:	1545883a 	add	r2,r2,r21
    9840:	a53fffc4 	addi	r20,r20,-1
    9844:	15407f2e 	bgeu	r2,r21,9a44 <__udivdi3+0x590>
    9848:	1463c83a 	sub	r17,r2,r17
    984c:	8809883a 	mov	r4,r17
    9850:	b00b883a 	mov	r5,r22
    9854:	0001f7c0 	call	1f7c <__udivsi3>
    9858:	8809883a 	mov	r4,r17
    985c:	b00b883a 	mov	r5,r22
    9860:	1021883a 	mov	r16,r2
    9864:	0001f840 	call	1f84 <__umodsi3>
    9868:	d8c00517 	ldw	r3,20(sp)
    986c:	d9000217 	ldw	r4,8(sp)
    9870:	1004943a 	slli	r2,r2,16
    9874:	1c0f383a 	mul	r7,r3,r16
    9878:	20ffffcc 	andi	r3,r4,65535
    987c:	10e2b03a 	or	r17,r2,r3
    9880:	89c0032e 	bgeu	r17,r7,9890 <__udivdi3+0x3dc>
    9884:	8d63883a 	add	r17,r17,r21
    9888:	843fffc4 	addi	r16,r16,-1
    988c:	8d40692e 	bgeu	r17,r21,9a34 <__udivdi3+0x580>
    9890:	a008943a 	slli	r4,r20,16
    9894:	d9400017 	ldw	r5,0(sp)
    9898:	89e3c83a 	sub	r17,r17,r7
    989c:	8110b03a 	or	r8,r16,r4
    98a0:	280cd43a 	srli	r6,r5,16
    98a4:	28ffffcc 	andi	r3,r5,65535
    98a8:	40bfffcc 	andi	r2,r8,65535
    98ac:	400ad43a 	srli	r5,r8,16
    98b0:	10d3383a 	mul	r9,r2,r3
    98b4:	1185383a 	mul	r2,r2,r6
    98b8:	28c7383a 	mul	r3,r5,r3
    98bc:	4808d43a 	srli	r4,r9,16
    98c0:	298b383a 	mul	r5,r5,r6
    98c4:	10c5883a 	add	r2,r2,r3
    98c8:	2089883a 	add	r4,r4,r2
    98cc:	20c0022e 	bgeu	r4,r3,98d8 <__udivdi3+0x424>
    98d0:	00800074 	movhi	r2,1
    98d4:	288b883a 	add	r5,r5,r2
    98d8:	2004d43a 	srli	r2,r4,16
    98dc:	288b883a 	add	r5,r5,r2
    98e0:	89403f36 	bltu	r17,r5,99e0 <__udivdi3+0x52c>
    98e4:	89403926 	beq	r17,r5,99cc <__udivdi3+0x518>
    98e8:	4005883a 	mov	r2,r8
    98ec:	0009883a 	mov	r4,zero
    98f0:	003f5106 	br	9638 <__udivdi3+0x184>
    98f4:	85a0983a 	sll	r16,r16,r22
    98f8:	3585c83a 	sub	r2,r6,r22
    98fc:	a0a2d83a 	srl	r17,r20,r2
    9900:	802ad43a 	srli	r21,r16,16
    9904:	e084d83a 	srl	r2,fp,r2
    9908:	a586983a 	sll	r3,r20,r22
    990c:	8809883a 	mov	r4,r17
    9910:	a80b883a 	mov	r5,r21
    9914:	1886b03a 	or	r3,r3,r2
    9918:	d8c00115 	stw	r3,4(sp)
    991c:	0001f7c0 	call	1f7c <__udivsi3>
    9920:	8809883a 	mov	r4,r17
    9924:	a80b883a 	mov	r5,r21
    9928:	d8800415 	stw	r2,16(sp)
    992c:	0001f840 	call	1f84 <__umodsi3>
    9930:	d9000117 	ldw	r4,4(sp)
    9934:	d9400417 	ldw	r5,16(sp)
    9938:	1004943a 	slli	r2,r2,16
    993c:	85ffffcc 	andi	r23,r16,65535
    9940:	2006d43a 	srli	r3,r4,16
    9944:	b963383a 	mul	r17,r23,r5
    9948:	10c4b03a 	or	r2,r2,r3
    994c:	1440042e 	bgeu	r2,r17,9960 <__udivdi3+0x4ac>
    9950:	297fffc4 	addi	r5,r5,-1
    9954:	1405883a 	add	r2,r2,r16
    9958:	d9400415 	stw	r5,16(sp)
    995c:	1400442e 	bgeu	r2,r16,9a70 <__udivdi3+0x5bc>
    9960:	1463c83a 	sub	r17,r2,r17
    9964:	8809883a 	mov	r4,r17
    9968:	a80b883a 	mov	r5,r21
    996c:	0001f7c0 	call	1f7c <__udivsi3>
    9970:	8809883a 	mov	r4,r17
    9974:	a80b883a 	mov	r5,r21
    9978:	1029883a 	mov	r20,r2
    997c:	0001f840 	call	1f84 <__umodsi3>
    9980:	d9400117 	ldw	r5,4(sp)
    9984:	1004943a 	slli	r2,r2,16
    9988:	bd09383a 	mul	r4,r23,r20
    998c:	28ffffcc 	andi	r3,r5,65535
    9990:	10c6b03a 	or	r3,r2,r3
    9994:	1900062e 	bgeu	r3,r4,99b0 <__udivdi3+0x4fc>
    9998:	1c07883a 	add	r3,r3,r16
    999c:	a53fffc4 	addi	r20,r20,-1
    99a0:	1c000336 	bltu	r3,r16,99b0 <__udivdi3+0x4fc>
    99a4:	1900022e 	bgeu	r3,r4,99b0 <__udivdi3+0x4fc>
    99a8:	a53fffc4 	addi	r20,r20,-1
    99ac:	1c07883a 	add	r3,r3,r16
    99b0:	d9400417 	ldw	r5,16(sp)
    99b4:	e5b8983a 	sll	fp,fp,r22
    99b8:	1923c83a 	sub	r17,r3,r4
    99bc:	2804943a 	slli	r2,r5,16
    99c0:	a0a8b03a 	or	r20,r20,r2
    99c4:	dd000315 	stw	r20,12(sp)
    99c8:	003ee106 	br	9550 <__udivdi3+0x9c>
    99cc:	2004943a 	slli	r2,r4,16
    99d0:	e5c8983a 	sll	r4,fp,r23
    99d4:	48ffffcc 	andi	r3,r9,65535
    99d8:	10c5883a 	add	r2,r2,r3
    99dc:	20bfc22e 	bgeu	r4,r2,98e8 <__udivdi3+0x434>
    99e0:	40bfffc4 	addi	r2,r8,-1
    99e4:	0009883a 	mov	r4,zero
    99e8:	003f1306 	br	9638 <__udivdi3+0x184>
    99ec:	01400204 	movi	r5,8
    99f0:	2805883a 	mov	r2,r5
    99f4:	003f0306 	br	9604 <__udivdi3+0x150>
    99f8:	01400604 	movi	r5,24
    99fc:	2805883a 	mov	r2,r5
    9a00:	003f0006 	br	9604 <__udivdi3+0x150>
    9a04:	01400204 	movi	r5,8
    9a08:	2805883a 	mov	r2,r5
    9a0c:	003ec206 	br	9518 <__udivdi3+0x64>
    9a10:	01400604 	movi	r5,24
    9a14:	2805883a 	mov	r2,r5
    9a18:	003ebf06 	br	9518 <__udivdi3+0x64>
    9a1c:	01400204 	movi	r5,8
    9a20:	2805883a 	mov	r2,r5
    9a24:	003f1706 	br	9684 <__udivdi3+0x1d0>
    9a28:	01400604 	movi	r5,24
    9a2c:	2805883a 	mov	r2,r5
    9a30:	003f1406 	br	9684 <__udivdi3+0x1d0>
    9a34:	89ff962e 	bgeu	r17,r7,9890 <__udivdi3+0x3dc>
    9a38:	8d63883a 	add	r17,r17,r21
    9a3c:	843fffc4 	addi	r16,r16,-1
    9a40:	003f9306 	br	9890 <__udivdi3+0x3dc>
    9a44:	147f802e 	bgeu	r2,r17,9848 <__udivdi3+0x394>
    9a48:	a53fffc4 	addi	r20,r20,-1
    9a4c:	1545883a 	add	r2,r2,r21
    9a50:	003f7d06 	br	9848 <__udivdi3+0x394>
    9a54:	a53fffc4 	addi	r20,r20,-1
    9a58:	003ede06 	br	95d4 <__udivdi3+0x120>
    9a5c:	b5bfffc4 	addi	r22,r22,-1
    9a60:	1405883a 	add	r2,r2,r16
    9a64:	003f2806 	br	9708 <__udivdi3+0x254>
    9a68:	a53fffc4 	addi	r20,r20,-1
    9a6c:	003f3706 	br	974c <__udivdi3+0x298>
    9a70:	147fbb2e 	bgeu	r2,r17,9960 <__udivdi3+0x4ac>
    9a74:	297fffc4 	addi	r5,r5,-1
    9a78:	1405883a 	add	r2,r2,r16
    9a7c:	d9400415 	stw	r5,16(sp)
    9a80:	003fb706 	br	9960 <__udivdi3+0x4ac>
    9a84:	b5bfffc4 	addi	r22,r22,-1
    9a88:	1405883a 	add	r2,r2,r16
    9a8c:	003ec006 	br	9590 <__udivdi3+0xdc>

00009a90 <__umoddi3>:
    9a90:	defff104 	addi	sp,sp,-60
    9a94:	dd800b15 	stw	r22,44(sp)
    9a98:	dd000915 	stw	r20,36(sp)
    9a9c:	dc000515 	stw	r16,20(sp)
    9aa0:	dfc00e15 	stw	ra,56(sp)
    9aa4:	df000d15 	stw	fp,52(sp)
    9aa8:	ddc00c15 	stw	r23,48(sp)
    9aac:	dd400a15 	stw	r21,40(sp)
    9ab0:	dcc00815 	stw	r19,32(sp)
    9ab4:	dc800715 	stw	r18,28(sp)
    9ab8:	dc400615 	stw	r17,24(sp)
    9abc:	3021883a 	mov	r16,r6
    9ac0:	202d883a 	mov	r22,r4
    9ac4:	2829883a 	mov	r20,r5
    9ac8:	38002b1e 	bne	r7,zero,9b78 <__umoddi3+0xe8>
    9acc:	29805036 	bltu	r5,r6,9c10 <__umoddi3+0x180>
    9ad0:	30008a26 	beq	r6,zero,9cfc <__umoddi3+0x26c>
    9ad4:	00bfffd4 	movui	r2,65535
    9ad8:	14008236 	bltu	r2,r16,9ce4 <__umoddi3+0x254>
    9adc:	00803fc4 	movi	r2,255
    9ae0:	14013636 	bltu	r2,r16,9fbc <__umoddi3+0x52c>
    9ae4:	000b883a 	mov	r5,zero
    9ae8:	0005883a 	mov	r2,zero
    9aec:	8084d83a 	srl	r2,r16,r2
    9af0:	01000074 	movhi	r4,1
    9af4:	2139df04 	addi	r4,r4,-6276
    9af8:	01800804 	movi	r6,32
    9afc:	1105883a 	add	r2,r2,r4
    9b00:	10c00003 	ldbu	r3,0(r2)
    9b04:	28c7883a 	add	r3,r5,r3
    9b08:	30efc83a 	sub	r23,r6,r3
    9b0c:	b800941e 	bne	r23,zero,9d60 <__umoddi3+0x2d0>
    9b10:	802ad43a 	srli	r21,r16,16
    9b14:	a423c83a 	sub	r17,r20,r16
    9b18:	0039883a 	mov	fp,zero
    9b1c:	853fffcc 	andi	r20,r16,65535
    9b20:	8809883a 	mov	r4,r17
    9b24:	a80b883a 	mov	r5,r21
    9b28:	0001f7c0 	call	1f7c <__udivsi3>
    9b2c:	8809883a 	mov	r4,r17
    9b30:	a80b883a 	mov	r5,r21
    9b34:	a0a3383a 	mul	r17,r20,r2
    9b38:	0001f840 	call	1f84 <__umodsi3>
    9b3c:	1004943a 	slli	r2,r2,16
    9b40:	b006d43a 	srli	r3,r22,16
    9b44:	10c4b03a 	or	r2,r2,r3
    9b48:	1440032e 	bgeu	r2,r17,9b58 <__umoddi3+0xc8>
    9b4c:	1405883a 	add	r2,r2,r16
    9b50:	14000136 	bltu	r2,r16,9b58 <__umoddi3+0xc8>
    9b54:	14413536 	bltu	r2,r17,a02c <__umoddi3+0x59c>
    9b58:	1463c83a 	sub	r17,r2,r17
    9b5c:	8809883a 	mov	r4,r17
    9b60:	a80b883a 	mov	r5,r21
    9b64:	0001f7c0 	call	1f7c <__udivsi3>
    9b68:	8809883a 	mov	r4,r17
    9b6c:	a0a3383a 	mul	r17,r20,r2
    9b70:	a80b883a 	mov	r5,r21
    9b74:	00004d06 	br	9cac <__umoddi3+0x21c>
    9b78:	380d883a 	mov	r6,r7
    9b7c:	29c0102e 	bgeu	r5,r7,9bc0 <__umoddi3+0x130>
    9b80:	2011883a 	mov	r8,r4
    9b84:	2813883a 	mov	r9,r5
    9b88:	4005883a 	mov	r2,r8
    9b8c:	4807883a 	mov	r3,r9
    9b90:	dfc00e17 	ldw	ra,56(sp)
    9b94:	df000d17 	ldw	fp,52(sp)
    9b98:	ddc00c17 	ldw	r23,48(sp)
    9b9c:	dd800b17 	ldw	r22,44(sp)
    9ba0:	dd400a17 	ldw	r21,40(sp)
    9ba4:	dd000917 	ldw	r20,36(sp)
    9ba8:	dcc00817 	ldw	r19,32(sp)
    9bac:	dc800717 	ldw	r18,28(sp)
    9bb0:	dc400617 	ldw	r17,24(sp)
    9bb4:	dc000517 	ldw	r16,20(sp)
    9bb8:	dec00f04 	addi	sp,sp,60
    9bbc:	f800283a 	ret
    9bc0:	00bfffd4 	movui	r2,65535
    9bc4:	11c05a36 	bltu	r2,r7,9d30 <__umoddi3+0x2a0>
    9bc8:	00803fc4 	movi	r2,255
    9bcc:	11c0fe36 	bltu	r2,r7,9fc8 <__umoddi3+0x538>
    9bd0:	000b883a 	mov	r5,zero
    9bd4:	0005883a 	mov	r2,zero
    9bd8:	3084d83a 	srl	r2,r6,r2
    9bdc:	01000074 	movhi	r4,1
    9be0:	2139df04 	addi	r4,r4,-6276
    9be4:	01c00804 	movi	r7,32
    9be8:	1105883a 	add	r2,r2,r4
    9bec:	10c00003 	ldbu	r3,0(r2)
    9bf0:	28c7883a 	add	r3,r5,r3
    9bf4:	38ebc83a 	sub	r21,r7,r3
    9bf8:	a800851e 	bne	r21,zero,9e10 <__umoddi3+0x380>
    9bfc:	35005236 	bltu	r6,r20,9d48 <__umoddi3+0x2b8>
    9c00:	b400512e 	bgeu	r22,r16,9d48 <__umoddi3+0x2b8>
    9c04:	b011883a 	mov	r8,r22
    9c08:	a013883a 	mov	r9,r20
    9c0c:	003fde06 	br	9b88 <__umoddi3+0xf8>
    9c10:	00bfffd4 	movui	r2,65535
    9c14:	11804036 	bltu	r2,r6,9d18 <__umoddi3+0x288>
    9c18:	00803fc4 	movi	r2,255
    9c1c:	1180ed36 	bltu	r2,r6,9fd4 <__umoddi3+0x544>
    9c20:	000b883a 	mov	r5,zero
    9c24:	0005883a 	mov	r2,zero
    9c28:	8084d83a 	srl	r2,r16,r2
    9c2c:	01000074 	movhi	r4,1
    9c30:	2139df04 	addi	r4,r4,-6276
    9c34:	01800804 	movi	r6,32
    9c38:	1105883a 	add	r2,r2,r4
    9c3c:	10c00003 	ldbu	r3,0(r2)
    9c40:	28c7883a 	add	r3,r5,r3
    9c44:	30c7c83a 	sub	r3,r6,r3
    9c48:	1800bf1e 	bne	r3,zero,9f48 <__umoddi3+0x4b8>
    9c4c:	0039883a 	mov	fp,zero
    9c50:	802ad43a 	srli	r21,r16,16
    9c54:	a009883a 	mov	r4,r20
    9c58:	85ffffcc 	andi	r23,r16,65535
    9c5c:	a80b883a 	mov	r5,r21
    9c60:	0001f7c0 	call	1f7c <__udivsi3>
    9c64:	a009883a 	mov	r4,r20
    9c68:	a80b883a 	mov	r5,r21
    9c6c:	b8a3383a 	mul	r17,r23,r2
    9c70:	0001f840 	call	1f84 <__umodsi3>
    9c74:	1004943a 	slli	r2,r2,16
    9c78:	b006d43a 	srli	r3,r22,16
    9c7c:	10c4b03a 	or	r2,r2,r3
    9c80:	1440032e 	bgeu	r2,r17,9c90 <__umoddi3+0x200>
    9c84:	1405883a 	add	r2,r2,r16
    9c88:	14000136 	bltu	r2,r16,9c90 <__umoddi3+0x200>
    9c8c:	1440e536 	bltu	r2,r17,a024 <__umoddi3+0x594>
    9c90:	1463c83a 	sub	r17,r2,r17
    9c94:	8809883a 	mov	r4,r17
    9c98:	a80b883a 	mov	r5,r21
    9c9c:	0001f7c0 	call	1f7c <__udivsi3>
    9ca0:	8809883a 	mov	r4,r17
    9ca4:	b8a3383a 	mul	r17,r23,r2
    9ca8:	a80b883a 	mov	r5,r21
    9cac:	0001f840 	call	1f84 <__umodsi3>
    9cb0:	1004943a 	slli	r2,r2,16
    9cb4:	b0ffffcc 	andi	r3,r22,65535
    9cb8:	10c4b03a 	or	r2,r2,r3
    9cbc:	1440042e 	bgeu	r2,r17,9cd0 <__umoddi3+0x240>
    9cc0:	1405883a 	add	r2,r2,r16
    9cc4:	14000236 	bltu	r2,r16,9cd0 <__umoddi3+0x240>
    9cc8:	1440012e 	bgeu	r2,r17,9cd0 <__umoddi3+0x240>
    9ccc:	1405883a 	add	r2,r2,r16
    9cd0:	1445c83a 	sub	r2,r2,r17
    9cd4:	1724d83a 	srl	r18,r2,fp
    9cd8:	0013883a 	mov	r9,zero
    9cdc:	9011883a 	mov	r8,r18
    9ce0:	003fa906 	br	9b88 <__umoddi3+0xf8>
    9ce4:	00804034 	movhi	r2,256
    9ce8:	10bfffc4 	addi	r2,r2,-1
    9cec:	1400b036 	bltu	r2,r16,9fb0 <__umoddi3+0x520>
    9cf0:	01400404 	movi	r5,16
    9cf4:	2805883a 	mov	r2,r5
    9cf8:	003f7c06 	br	9aec <__umoddi3+0x5c>
    9cfc:	01000044 	movi	r4,1
    9d00:	000b883a 	mov	r5,zero
    9d04:	0001f7c0 	call	1f7c <__udivsi3>
    9d08:	1021883a 	mov	r16,r2
    9d0c:	00bfffd4 	movui	r2,65535
    9d10:	143ff436 	bltu	r2,r16,9ce4 <__umoddi3+0x254>
    9d14:	003f7106 	br	9adc <__umoddi3+0x4c>
    9d18:	00804034 	movhi	r2,256
    9d1c:	10bfffc4 	addi	r2,r2,-1
    9d20:	1180af36 	bltu	r2,r6,9fe0 <__umoddi3+0x550>
    9d24:	01400404 	movi	r5,16
    9d28:	2805883a 	mov	r2,r5
    9d2c:	003fbe06 	br	9c28 <__umoddi3+0x198>
    9d30:	00804034 	movhi	r2,256
    9d34:	10bfffc4 	addi	r2,r2,-1
    9d38:	11c0ac36 	bltu	r2,r7,9fec <__umoddi3+0x55c>
    9d3c:	01400404 	movi	r5,16
    9d40:	2805883a 	mov	r2,r5
    9d44:	003fa406 	br	9bd8 <__umoddi3+0x148>
    9d48:	b409c83a 	sub	r4,r22,r16
    9d4c:	b105803a 	cmpltu	r2,r22,r4
    9d50:	a187c83a 	sub	r3,r20,r6
    9d54:	18a9c83a 	sub	r20,r3,r2
    9d58:	202d883a 	mov	r22,r4
    9d5c:	003fa906 	br	9c04 <__umoddi3+0x174>
    9d60:	85e0983a 	sll	r16,r16,r23
    9d64:	35c5c83a 	sub	r2,r6,r23
    9d68:	a0a2d83a 	srl	r17,r20,r2
    9d6c:	802ad43a 	srli	r21,r16,16
    9d70:	b084d83a 	srl	r2,r22,r2
    9d74:	a5c6983a 	sll	r3,r20,r23
    9d78:	8809883a 	mov	r4,r17
    9d7c:	a80b883a 	mov	r5,r21
    9d80:	1886b03a 	or	r3,r3,r2
    9d84:	d8c00115 	stw	r3,4(sp)
    9d88:	853fffcc 	andi	r20,r16,65535
    9d8c:	0001f7c0 	call	1f7c <__udivsi3>
    9d90:	8809883a 	mov	r4,r17
    9d94:	a80b883a 	mov	r5,r21
    9d98:	a0a3383a 	mul	r17,r20,r2
    9d9c:	0001f840 	call	1f84 <__umodsi3>
    9da0:	d9000117 	ldw	r4,4(sp)
    9da4:	1004943a 	slli	r2,r2,16
    9da8:	b839883a 	mov	fp,r23
    9dac:	2006d43a 	srli	r3,r4,16
    9db0:	10c4b03a 	or	r2,r2,r3
    9db4:	1440022e 	bgeu	r2,r17,9dc0 <__umoddi3+0x330>
    9db8:	1405883a 	add	r2,r2,r16
    9dbc:	1400962e 	bgeu	r2,r16,a018 <__umoddi3+0x588>
    9dc0:	1463c83a 	sub	r17,r2,r17
    9dc4:	8809883a 	mov	r4,r17
    9dc8:	a80b883a 	mov	r5,r21
    9dcc:	0001f7c0 	call	1f7c <__udivsi3>
    9dd0:	8809883a 	mov	r4,r17
    9dd4:	a80b883a 	mov	r5,r21
    9dd8:	a0a3383a 	mul	r17,r20,r2
    9ddc:	0001f840 	call	1f84 <__umodsi3>
    9de0:	d9400117 	ldw	r5,4(sp)
    9de4:	1004943a 	slli	r2,r2,16
    9de8:	28ffffcc 	andi	r3,r5,65535
    9dec:	10c4b03a 	or	r2,r2,r3
    9df0:	1440042e 	bgeu	r2,r17,9e04 <__umoddi3+0x374>
    9df4:	1405883a 	add	r2,r2,r16
    9df8:	14000236 	bltu	r2,r16,9e04 <__umoddi3+0x374>
    9dfc:	1440012e 	bgeu	r2,r17,9e04 <__umoddi3+0x374>
    9e00:	1405883a 	add	r2,r2,r16
    9e04:	b5ec983a 	sll	r22,r22,r23
    9e08:	1463c83a 	sub	r17,r2,r17
    9e0c:	003f4406 	br	9b20 <__umoddi3+0x90>
    9e10:	3d4fc83a 	sub	r7,r7,r21
    9e14:	3546983a 	sll	r3,r6,r21
    9e18:	81c4d83a 	srl	r2,r16,r7
    9e1c:	a1e2d83a 	srl	r17,r20,r7
    9e20:	a54c983a 	sll	r6,r20,r21
    9e24:	18aeb03a 	or	r23,r3,r2
    9e28:	b828d43a 	srli	r20,r23,16
    9e2c:	b1c4d83a 	srl	r2,r22,r7
    9e30:	8809883a 	mov	r4,r17
    9e34:	a00b883a 	mov	r5,r20
    9e38:	308cb03a 	or	r6,r6,r2
    9e3c:	d9c00315 	stw	r7,12(sp)
    9e40:	d9800215 	stw	r6,8(sp)
    9e44:	0001f7c0 	call	1f7c <__udivsi3>
    9e48:	8809883a 	mov	r4,r17
    9e4c:	a00b883a 	mov	r5,r20
    9e50:	1039883a 	mov	fp,r2
    9e54:	0001f840 	call	1f84 <__umodsi3>
    9e58:	b8ffffcc 	andi	r3,r23,65535
    9e5c:	d8c00415 	stw	r3,16(sp)
    9e60:	d9000217 	ldw	r4,8(sp)
    9e64:	d9400417 	ldw	r5,16(sp)
    9e68:	1004943a 	slli	r2,r2,16
    9e6c:	2006d43a 	srli	r3,r4,16
    9e70:	8560983a 	sll	r16,r16,r21
    9e74:	2f23383a 	mul	r17,r5,fp
    9e78:	10c4b03a 	or	r2,r2,r3
    9e7c:	dc000015 	stw	r16,0(sp)
    9e80:	b56c983a 	sll	r22,r22,r21
    9e84:	1440032e 	bgeu	r2,r17,9e94 <__umoddi3+0x404>
    9e88:	15c5883a 	add	r2,r2,r23
    9e8c:	e73fffc4 	addi	fp,fp,-1
    9e90:	15c05d2e 	bgeu	r2,r23,a008 <__umoddi3+0x578>
    9e94:	1463c83a 	sub	r17,r2,r17
    9e98:	8809883a 	mov	r4,r17
    9e9c:	a00b883a 	mov	r5,r20
    9ea0:	0001f7c0 	call	1f7c <__udivsi3>
    9ea4:	8809883a 	mov	r4,r17
    9ea8:	a00b883a 	mov	r5,r20
    9eac:	1021883a 	mov	r16,r2
    9eb0:	0001f840 	call	1f84 <__umodsi3>
    9eb4:	d8c00417 	ldw	r3,16(sp)
    9eb8:	d9000217 	ldw	r4,8(sp)
    9ebc:	1004943a 	slli	r2,r2,16
    9ec0:	1c23383a 	mul	r17,r3,r16
    9ec4:	20ffffcc 	andi	r3,r4,65535
    9ec8:	10ceb03a 	or	r7,r2,r3
    9ecc:	3c40032e 	bgeu	r7,r17,9edc <__umoddi3+0x44c>
    9ed0:	3dcf883a 	add	r7,r7,r23
    9ed4:	843fffc4 	addi	r16,r16,-1
    9ed8:	3dc0472e 	bgeu	r7,r23,9ff8 <__umoddi3+0x568>
    9edc:	e004943a 	slli	r2,fp,16
    9ee0:	d9400017 	ldw	r5,0(sp)
    9ee4:	3c4fc83a 	sub	r7,r7,r17
    9ee8:	8084b03a 	or	r2,r16,r2
    9eec:	28ffffcc 	andi	r3,r5,65535
    9ef0:	280cd43a 	srli	r6,r5,16
    9ef4:	100ad43a 	srli	r5,r2,16
    9ef8:	10bfffcc 	andi	r2,r2,65535
    9efc:	10d1383a 	mul	r8,r2,r3
    9f00:	28c7383a 	mul	r3,r5,r3
    9f04:	1185383a 	mul	r2,r2,r6
    9f08:	4008d43a 	srli	r4,r8,16
    9f0c:	298b383a 	mul	r5,r5,r6
    9f10:	10c5883a 	add	r2,r2,r3
    9f14:	2089883a 	add	r4,r4,r2
    9f18:	20c0022e 	bgeu	r4,r3,9f24 <__umoddi3+0x494>
    9f1c:	00800074 	movhi	r2,1
    9f20:	288b883a 	add	r5,r5,r2
    9f24:	2004d43a 	srli	r2,r4,16
    9f28:	2008943a 	slli	r4,r4,16
    9f2c:	40ffffcc 	andi	r3,r8,65535
    9f30:	288b883a 	add	r5,r5,r2
    9f34:	20c9883a 	add	r4,r4,r3
    9f38:	39400b36 	bltu	r7,r5,9f68 <__umoddi3+0x4d8>
    9f3c:	39403d26 	beq	r7,r5,a034 <__umoddi3+0x5a4>
    9f40:	394bc83a 	sub	r5,r7,r5
    9f44:	00000f06 	br	9f84 <__umoddi3+0x4f4>
    9f48:	30c5c83a 	sub	r2,r6,r3
    9f4c:	1839883a 	mov	fp,r3
    9f50:	b084d83a 	srl	r2,r22,r2
    9f54:	a0c6983a 	sll	r3,r20,r3
    9f58:	8720983a 	sll	r16,r16,fp
    9f5c:	b72c983a 	sll	r22,r22,fp
    9f60:	18a8b03a 	or	r20,r3,r2
    9f64:	003f3a06 	br	9c50 <__umoddi3+0x1c0>
    9f68:	d8c00017 	ldw	r3,0(sp)
    9f6c:	20c5c83a 	sub	r2,r4,r3
    9f70:	2089803a 	cmpltu	r4,r4,r2
    9f74:	2dc7c83a 	sub	r3,r5,r23
    9f78:	1907c83a 	sub	r3,r3,r4
    9f7c:	38cbc83a 	sub	r5,r7,r3
    9f80:	1009883a 	mov	r4,r2
    9f84:	b105c83a 	sub	r2,r22,r4
    9f88:	b087803a 	cmpltu	r3,r22,r2
    9f8c:	28c7c83a 	sub	r3,r5,r3
    9f90:	d9400317 	ldw	r5,12(sp)
    9f94:	1544d83a 	srl	r2,r2,r21
    9f98:	1948983a 	sll	r4,r3,r5
    9f9c:	1d46d83a 	srl	r3,r3,r21
    9fa0:	20a4b03a 	or	r18,r4,r2
    9fa4:	9011883a 	mov	r8,r18
    9fa8:	1813883a 	mov	r9,r3
    9fac:	003ef606 	br	9b88 <__umoddi3+0xf8>
    9fb0:	01400604 	movi	r5,24
    9fb4:	2805883a 	mov	r2,r5
    9fb8:	003ecc06 	br	9aec <__umoddi3+0x5c>
    9fbc:	01400204 	movi	r5,8
    9fc0:	2805883a 	mov	r2,r5
    9fc4:	003ec906 	br	9aec <__umoddi3+0x5c>
    9fc8:	01400204 	movi	r5,8
    9fcc:	2805883a 	mov	r2,r5
    9fd0:	003f0106 	br	9bd8 <__umoddi3+0x148>
    9fd4:	01400204 	movi	r5,8
    9fd8:	2805883a 	mov	r2,r5
    9fdc:	003f1206 	br	9c28 <__umoddi3+0x198>
    9fe0:	01400604 	movi	r5,24
    9fe4:	2805883a 	mov	r2,r5
    9fe8:	003f0f06 	br	9c28 <__umoddi3+0x198>
    9fec:	01400604 	movi	r5,24
    9ff0:	2805883a 	mov	r2,r5
    9ff4:	003ef806 	br	9bd8 <__umoddi3+0x148>
    9ff8:	3c7fb82e 	bgeu	r7,r17,9edc <__umoddi3+0x44c>
    9ffc:	843fffc4 	addi	r16,r16,-1
    a000:	3dcf883a 	add	r7,r7,r23
    a004:	003fb506 	br	9edc <__umoddi3+0x44c>
    a008:	147fa22e 	bgeu	r2,r17,9e94 <__umoddi3+0x404>
    a00c:	e73fffc4 	addi	fp,fp,-1
    a010:	15c5883a 	add	r2,r2,r23
    a014:	003f9f06 	br	9e94 <__umoddi3+0x404>
    a018:	147f692e 	bgeu	r2,r17,9dc0 <__umoddi3+0x330>
    a01c:	1405883a 	add	r2,r2,r16
    a020:	003f6706 	br	9dc0 <__umoddi3+0x330>
    a024:	1405883a 	add	r2,r2,r16
    a028:	003f1906 	br	9c90 <__umoddi3+0x200>
    a02c:	1405883a 	add	r2,r2,r16
    a030:	003ec906 	br	9b58 <__umoddi3+0xc8>
    a034:	b13fcc36 	bltu	r22,r4,9f68 <__umoddi3+0x4d8>
    a038:	000b883a 	mov	r5,zero
    a03c:	003fd106 	br	9f84 <__umoddi3+0x4f4>

0000a040 <_fpadd_parts>:
    a040:	defff804 	addi	sp,sp,-32
    a044:	dcc00315 	stw	r19,12(sp)
    a048:	2027883a 	mov	r19,r4
    a04c:	21000017 	ldw	r4,0(r4)
    a050:	00c00044 	movi	r3,1
    a054:	dd400515 	stw	r21,20(sp)
    a058:	dd000415 	stw	r20,16(sp)
    a05c:	ddc00715 	stw	r23,28(sp)
    a060:	dd800615 	stw	r22,24(sp)
    a064:	dc800215 	stw	r18,8(sp)
    a068:	dc400115 	stw	r17,4(sp)
    a06c:	dc000015 	stw	r16,0(sp)
    a070:	282b883a 	mov	r21,r5
    a074:	3029883a 	mov	r20,r6
    a078:	1900632e 	bgeu	r3,r4,a208 <_fpadd_parts+0x1c8>
    a07c:	28800017 	ldw	r2,0(r5)
    a080:	1880812e 	bgeu	r3,r2,a288 <_fpadd_parts+0x248>
    a084:	00c00104 	movi	r3,4
    a088:	20c0dc26 	beq	r4,r3,a3fc <_fpadd_parts+0x3bc>
    a08c:	10c07e26 	beq	r2,r3,a288 <_fpadd_parts+0x248>
    a090:	00c00084 	movi	r3,2
    a094:	10c06726 	beq	r2,r3,a234 <_fpadd_parts+0x1f4>
    a098:	20c07b26 	beq	r4,r3,a288 <_fpadd_parts+0x248>
    a09c:	9dc00217 	ldw	r23,8(r19)
    a0a0:	28c00217 	ldw	r3,8(r5)
    a0a4:	9c400317 	ldw	r17,12(r19)
    a0a8:	2bc00317 	ldw	r15,12(r5)
    a0ac:	b8cdc83a 	sub	r6,r23,r3
    a0b0:	9c800417 	ldw	r18,16(r19)
    a0b4:	2c000417 	ldw	r16,16(r5)
    a0b8:	3009883a 	mov	r4,r6
    a0bc:	30009716 	blt	r6,zero,a31c <_fpadd_parts+0x2dc>
    a0c0:	00800fc4 	movi	r2,63
    a0c4:	11806b16 	blt	r2,r6,a274 <_fpadd_parts+0x234>
    a0c8:	0100a40e 	bge	zero,r4,a35c <_fpadd_parts+0x31c>
    a0cc:	35bff804 	addi	r22,r6,-32
    a0d0:	b000bc16 	blt	r22,zero,a3c4 <_fpadd_parts+0x384>
    a0d4:	8596d83a 	srl	r11,r16,r22
    a0d8:	0019883a 	mov	r12,zero
    a0dc:	0013883a 	mov	r9,zero
    a0e0:	01000044 	movi	r4,1
    a0e4:	0015883a 	mov	r10,zero
    a0e8:	b000be16 	blt	r22,zero,a3e4 <_fpadd_parts+0x3a4>
    a0ec:	2590983a 	sll	r8,r4,r22
    a0f0:	000f883a 	mov	r7,zero
    a0f4:	00bfffc4 	movi	r2,-1
    a0f8:	3889883a 	add	r4,r7,r2
    a0fc:	408b883a 	add	r5,r8,r2
    a100:	21cd803a 	cmpltu	r6,r4,r7
    a104:	314b883a 	add	r5,r6,r5
    a108:	7904703a 	and	r2,r15,r4
    a10c:	8146703a 	and	r3,r16,r5
    a110:	10c4b03a 	or	r2,r2,r3
    a114:	10000226 	beq	r2,zero,a120 <_fpadd_parts+0xe0>
    a118:	02400044 	movi	r9,1
    a11c:	0015883a 	mov	r10,zero
    a120:	5a5eb03a 	or	r15,r11,r9
    a124:	62a0b03a 	or	r16,r12,r10
    a128:	99400117 	ldw	r5,4(r19)
    a12c:	a8800117 	ldw	r2,4(r21)
    a130:	28806e26 	beq	r5,r2,a2ec <_fpadd_parts+0x2ac>
    a134:	28006626 	beq	r5,zero,a2d0 <_fpadd_parts+0x290>
    a138:	7c45c83a 	sub	r2,r15,r17
    a13c:	7889803a 	cmpltu	r4,r15,r2
    a140:	8487c83a 	sub	r3,r16,r18
    a144:	1909c83a 	sub	r4,r3,r4
    a148:	100d883a 	mov	r6,r2
    a14c:	200f883a 	mov	r7,r4
    a150:	38007716 	blt	r7,zero,a330 <_fpadd_parts+0x2f0>
    a154:	a5c00215 	stw	r23,8(r20)
    a158:	a1c00415 	stw	r7,16(r20)
    a15c:	a0000115 	stw	zero,4(r20)
    a160:	a1800315 	stw	r6,12(r20)
    a164:	a2000317 	ldw	r8,12(r20)
    a168:	a2400417 	ldw	r9,16(r20)
    a16c:	00bfffc4 	movi	r2,-1
    a170:	408b883a 	add	r5,r8,r2
    a174:	2a09803a 	cmpltu	r4,r5,r8
    a178:	488d883a 	add	r6,r9,r2
    a17c:	01c40034 	movhi	r7,4096
    a180:	39ffffc4 	addi	r7,r7,-1
    a184:	218d883a 	add	r6,r4,r6
    a188:	39801736 	bltu	r7,r6,a1e8 <_fpadd_parts+0x1a8>
    a18c:	31c06526 	beq	r6,r7,a324 <_fpadd_parts+0x2e4>
    a190:	a3000217 	ldw	r12,8(r20)
    a194:	4209883a 	add	r4,r8,r8
    a198:	00bfffc4 	movi	r2,-1
    a19c:	220f803a 	cmpltu	r7,r4,r8
    a1a0:	4a4b883a 	add	r5,r9,r9
    a1a4:	394f883a 	add	r7,r7,r5
    a1a8:	2095883a 	add	r10,r4,r2
    a1ac:	3897883a 	add	r11,r7,r2
    a1b0:	510d803a 	cmpltu	r6,r10,r4
    a1b4:	6099883a 	add	r12,r12,r2
    a1b8:	32d7883a 	add	r11,r6,r11
    a1bc:	00840034 	movhi	r2,4096
    a1c0:	10bfffc4 	addi	r2,r2,-1
    a1c4:	2011883a 	mov	r8,r4
    a1c8:	3813883a 	mov	r9,r7
    a1cc:	a1000315 	stw	r4,12(r20)
    a1d0:	a1c00415 	stw	r7,16(r20)
    a1d4:	a3000215 	stw	r12,8(r20)
    a1d8:	12c00336 	bltu	r2,r11,a1e8 <_fpadd_parts+0x1a8>
    a1dc:	58bfed1e 	bne	r11,r2,a194 <_fpadd_parts+0x154>
    a1e0:	00bfff84 	movi	r2,-2
    a1e4:	12bfeb2e 	bgeu	r2,r10,a194 <_fpadd_parts+0x154>
    a1e8:	a2800417 	ldw	r10,16(r20)
    a1ec:	008000c4 	movi	r2,3
    a1f0:	00c80034 	movhi	r3,8192
    a1f4:	18ffffc4 	addi	r3,r3,-1
    a1f8:	a2400317 	ldw	r9,12(r20)
    a1fc:	a0800015 	stw	r2,0(r20)
    a200:	1a802336 	bltu	r3,r10,a290 <_fpadd_parts+0x250>
    a204:	a027883a 	mov	r19,r20
    a208:	9805883a 	mov	r2,r19
    a20c:	ddc00717 	ldw	r23,28(sp)
    a210:	dd800617 	ldw	r22,24(sp)
    a214:	dd400517 	ldw	r21,20(sp)
    a218:	dd000417 	ldw	r20,16(sp)
    a21c:	dcc00317 	ldw	r19,12(sp)
    a220:	dc800217 	ldw	r18,8(sp)
    a224:	dc400117 	ldw	r17,4(sp)
    a228:	dc000017 	ldw	r16,0(sp)
    a22c:	dec00804 	addi	sp,sp,32
    a230:	f800283a 	ret
    a234:	20fff41e 	bne	r4,r3,a208 <_fpadd_parts+0x1c8>
    a238:	31000015 	stw	r4,0(r6)
    a23c:	98800117 	ldw	r2,4(r19)
    a240:	30800115 	stw	r2,4(r6)
    a244:	98c00217 	ldw	r3,8(r19)
    a248:	30c00215 	stw	r3,8(r6)
    a24c:	98800317 	ldw	r2,12(r19)
    a250:	30800315 	stw	r2,12(r6)
    a254:	98c00417 	ldw	r3,16(r19)
    a258:	30c00415 	stw	r3,16(r6)
    a25c:	98800117 	ldw	r2,4(r19)
    a260:	28c00117 	ldw	r3,4(r5)
    a264:	3027883a 	mov	r19,r6
    a268:	10c4703a 	and	r2,r2,r3
    a26c:	30800115 	stw	r2,4(r6)
    a270:	003fe506 	br	a208 <_fpadd_parts+0x1c8>
    a274:	1dc02616 	blt	r3,r23,a310 <_fpadd_parts+0x2d0>
    a278:	0023883a 	mov	r17,zero
    a27c:	182f883a 	mov	r23,r3
    a280:	0025883a 	mov	r18,zero
    a284:	003fa806 	br	a128 <_fpadd_parts+0xe8>
    a288:	a827883a 	mov	r19,r21
    a28c:	003fde06 	br	a208 <_fpadd_parts+0x1c8>
    a290:	01800044 	movi	r6,1
    a294:	500497fa 	slli	r2,r10,31
    a298:	4808d07a 	srli	r4,r9,1
    a29c:	518ad83a 	srl	r5,r10,r6
    a2a0:	a2000217 	ldw	r8,8(r20)
    a2a4:	1108b03a 	or	r4,r2,r4
    a2a8:	0007883a 	mov	r3,zero
    a2ac:	4984703a 	and	r2,r9,r6
    a2b0:	208cb03a 	or	r6,r4,r2
    a2b4:	28ceb03a 	or	r7,r5,r3
    a2b8:	42000044 	addi	r8,r8,1
    a2bc:	a027883a 	mov	r19,r20
    a2c0:	a1c00415 	stw	r7,16(r20)
    a2c4:	a2000215 	stw	r8,8(r20)
    a2c8:	a1800315 	stw	r6,12(r20)
    a2cc:	003fce06 	br	a208 <_fpadd_parts+0x1c8>
    a2d0:	8bc5c83a 	sub	r2,r17,r15
    a2d4:	8889803a 	cmpltu	r4,r17,r2
    a2d8:	9407c83a 	sub	r3,r18,r16
    a2dc:	1909c83a 	sub	r4,r3,r4
    a2e0:	100d883a 	mov	r6,r2
    a2e4:	200f883a 	mov	r7,r4
    a2e8:	003f9906 	br	a150 <_fpadd_parts+0x110>
    a2ec:	7c45883a 	add	r2,r15,r17
    a2f0:	13c9803a 	cmpltu	r4,r2,r15
    a2f4:	8487883a 	add	r3,r16,r18
    a2f8:	20c9883a 	add	r4,r4,r3
    a2fc:	a1400115 	stw	r5,4(r20)
    a300:	a5c00215 	stw	r23,8(r20)
    a304:	a0800315 	stw	r2,12(r20)
    a308:	a1000415 	stw	r4,16(r20)
    a30c:	003fb606 	br	a1e8 <_fpadd_parts+0x1a8>
    a310:	001f883a 	mov	r15,zero
    a314:	0021883a 	mov	r16,zero
    a318:	003f8306 	br	a128 <_fpadd_parts+0xe8>
    a31c:	018dc83a 	sub	r6,zero,r6
    a320:	003f6706 	br	a0c0 <_fpadd_parts+0x80>
    a324:	00bfff84 	movi	r2,-2
    a328:	117faf36 	bltu	r2,r5,a1e8 <_fpadd_parts+0x1a8>
    a32c:	003f9806 	br	a190 <_fpadd_parts+0x150>
    a330:	0005883a 	mov	r2,zero
    a334:	1189c83a 	sub	r4,r2,r6
    a338:	1105803a 	cmpltu	r2,r2,r4
    a33c:	01cbc83a 	sub	r5,zero,r7
    a340:	2885c83a 	sub	r2,r5,r2
    a344:	01800044 	movi	r6,1
    a348:	a1800115 	stw	r6,4(r20)
    a34c:	a5c00215 	stw	r23,8(r20)
    a350:	a1000315 	stw	r4,12(r20)
    a354:	a0800415 	stw	r2,16(r20)
    a358:	003f8206 	br	a164 <_fpadd_parts+0x124>
    a35c:	203f7226 	beq	r4,zero,a128 <_fpadd_parts+0xe8>
    a360:	35bff804 	addi	r22,r6,-32
    a364:	b9af883a 	add	r23,r23,r6
    a368:	b0003116 	blt	r22,zero,a430 <_fpadd_parts+0x3f0>
    a36c:	959ad83a 	srl	r13,r18,r22
    a370:	001d883a 	mov	r14,zero
    a374:	000f883a 	mov	r7,zero
    a378:	01000044 	movi	r4,1
    a37c:	0011883a 	mov	r8,zero
    a380:	b0002516 	blt	r22,zero,a418 <_fpadd_parts+0x3d8>
    a384:	2594983a 	sll	r10,r4,r22
    a388:	0013883a 	mov	r9,zero
    a38c:	00bfffc4 	movi	r2,-1
    a390:	4889883a 	add	r4,r9,r2
    a394:	508b883a 	add	r5,r10,r2
    a398:	224d803a 	cmpltu	r6,r4,r9
    a39c:	314b883a 	add	r5,r6,r5
    a3a0:	8904703a 	and	r2,r17,r4
    a3a4:	9146703a 	and	r3,r18,r5
    a3a8:	10c4b03a 	or	r2,r2,r3
    a3ac:	10000226 	beq	r2,zero,a3b8 <_fpadd_parts+0x378>
    a3b0:	01c00044 	movi	r7,1
    a3b4:	0011883a 	mov	r8,zero
    a3b8:	69e2b03a 	or	r17,r13,r7
    a3bc:	7224b03a 	or	r18,r14,r8
    a3c0:	003f5906 	br	a128 <_fpadd_parts+0xe8>
    a3c4:	8407883a 	add	r3,r16,r16
    a3c8:	008007c4 	movi	r2,31
    a3cc:	1185c83a 	sub	r2,r2,r6
    a3d0:	1886983a 	sll	r3,r3,r2
    a3d4:	7996d83a 	srl	r11,r15,r6
    a3d8:	8198d83a 	srl	r12,r16,r6
    a3dc:	1ad6b03a 	or	r11,r3,r11
    a3e0:	003f3e06 	br	a0dc <_fpadd_parts+0x9c>
    a3e4:	2006d07a 	srli	r3,r4,1
    a3e8:	008007c4 	movi	r2,31
    a3ec:	1185c83a 	sub	r2,r2,r6
    a3f0:	1890d83a 	srl	r8,r3,r2
    a3f4:	218e983a 	sll	r7,r4,r6
    a3f8:	003f3e06 	br	a0f4 <_fpadd_parts+0xb4>
    a3fc:	113f821e 	bne	r2,r4,a208 <_fpadd_parts+0x1c8>
    a400:	28c00117 	ldw	r3,4(r5)
    a404:	98800117 	ldw	r2,4(r19)
    a408:	10ff7f26 	beq	r2,r3,a208 <_fpadd_parts+0x1c8>
    a40c:	04c00074 	movhi	r19,1
    a410:	9cf9da04 	addi	r19,r19,-6296
    a414:	003f7c06 	br	a208 <_fpadd_parts+0x1c8>
    a418:	2006d07a 	srli	r3,r4,1
    a41c:	008007c4 	movi	r2,31
    a420:	1185c83a 	sub	r2,r2,r6
    a424:	1894d83a 	srl	r10,r3,r2
    a428:	2192983a 	sll	r9,r4,r6
    a42c:	003fd706 	br	a38c <_fpadd_parts+0x34c>
    a430:	9487883a 	add	r3,r18,r18
    a434:	008007c4 	movi	r2,31
    a438:	1185c83a 	sub	r2,r2,r6
    a43c:	1886983a 	sll	r3,r3,r2
    a440:	899ad83a 	srl	r13,r17,r6
    a444:	919cd83a 	srl	r14,r18,r6
    a448:	1b5ab03a 	or	r13,r3,r13
    a44c:	003fc906 	br	a374 <_fpadd_parts+0x334>

0000a450 <__subdf3>:
    a450:	deffea04 	addi	sp,sp,-88
    a454:	dcc01415 	stw	r19,80(sp)
    a458:	dcc00404 	addi	r19,sp,16
    a45c:	2011883a 	mov	r8,r4
    a460:	2813883a 	mov	r9,r5
    a464:	dc401315 	stw	r17,76(sp)
    a468:	d809883a 	mov	r4,sp
    a46c:	980b883a 	mov	r5,r19
    a470:	dc400904 	addi	r17,sp,36
    a474:	dfc01515 	stw	ra,84(sp)
    a478:	da400115 	stw	r9,4(sp)
    a47c:	d9c00315 	stw	r7,12(sp)
    a480:	da000015 	stw	r8,0(sp)
    a484:	d9800215 	stw	r6,8(sp)
    a488:	000b5980 	call	b598 <__unpack_d>
    a48c:	d9000204 	addi	r4,sp,8
    a490:	880b883a 	mov	r5,r17
    a494:	000b5980 	call	b598 <__unpack_d>
    a498:	d8800a17 	ldw	r2,40(sp)
    a49c:	880b883a 	mov	r5,r17
    a4a0:	9809883a 	mov	r4,r19
    a4a4:	d9800e04 	addi	r6,sp,56
    a4a8:	1080005c 	xori	r2,r2,1
    a4ac:	d8800a15 	stw	r2,40(sp)
    a4b0:	000a0400 	call	a040 <_fpadd_parts>
    a4b4:	1009883a 	mov	r4,r2
    a4b8:	000b2840 	call	b284 <__pack_d>
    a4bc:	dfc01517 	ldw	ra,84(sp)
    a4c0:	dcc01417 	ldw	r19,80(sp)
    a4c4:	dc401317 	ldw	r17,76(sp)
    a4c8:	dec01604 	addi	sp,sp,88
    a4cc:	f800283a 	ret

0000a4d0 <__adddf3>:
    a4d0:	deffea04 	addi	sp,sp,-88
    a4d4:	dcc01415 	stw	r19,80(sp)
    a4d8:	dcc00404 	addi	r19,sp,16
    a4dc:	2011883a 	mov	r8,r4
    a4e0:	2813883a 	mov	r9,r5
    a4e4:	dc401315 	stw	r17,76(sp)
    a4e8:	d809883a 	mov	r4,sp
    a4ec:	980b883a 	mov	r5,r19
    a4f0:	dc400904 	addi	r17,sp,36
    a4f4:	dfc01515 	stw	ra,84(sp)
    a4f8:	da400115 	stw	r9,4(sp)
    a4fc:	d9c00315 	stw	r7,12(sp)
    a500:	da000015 	stw	r8,0(sp)
    a504:	d9800215 	stw	r6,8(sp)
    a508:	000b5980 	call	b598 <__unpack_d>
    a50c:	d9000204 	addi	r4,sp,8
    a510:	880b883a 	mov	r5,r17
    a514:	000b5980 	call	b598 <__unpack_d>
    a518:	d9800e04 	addi	r6,sp,56
    a51c:	9809883a 	mov	r4,r19
    a520:	880b883a 	mov	r5,r17
    a524:	000a0400 	call	a040 <_fpadd_parts>
    a528:	1009883a 	mov	r4,r2
    a52c:	000b2840 	call	b284 <__pack_d>
    a530:	dfc01517 	ldw	ra,84(sp)
    a534:	dcc01417 	ldw	r19,80(sp)
    a538:	dc401317 	ldw	r17,76(sp)
    a53c:	dec01604 	addi	sp,sp,88
    a540:	f800283a 	ret

0000a544 <__muldf3>:
    a544:	deffe004 	addi	sp,sp,-128
    a548:	dc401815 	stw	r17,96(sp)
    a54c:	dc400404 	addi	r17,sp,16
    a550:	2011883a 	mov	r8,r4
    a554:	2813883a 	mov	r9,r5
    a558:	dc001715 	stw	r16,92(sp)
    a55c:	d809883a 	mov	r4,sp
    a560:	880b883a 	mov	r5,r17
    a564:	dc000904 	addi	r16,sp,36
    a568:	dfc01f15 	stw	ra,124(sp)
    a56c:	da400115 	stw	r9,4(sp)
    a570:	d9c00315 	stw	r7,12(sp)
    a574:	da000015 	stw	r8,0(sp)
    a578:	d9800215 	stw	r6,8(sp)
    a57c:	ddc01e15 	stw	r23,120(sp)
    a580:	dd801d15 	stw	r22,116(sp)
    a584:	dd401c15 	stw	r21,112(sp)
    a588:	dd001b15 	stw	r20,108(sp)
    a58c:	dcc01a15 	stw	r19,104(sp)
    a590:	dc801915 	stw	r18,100(sp)
    a594:	000b5980 	call	b598 <__unpack_d>
    a598:	d9000204 	addi	r4,sp,8
    a59c:	800b883a 	mov	r5,r16
    a5a0:	000b5980 	call	b598 <__unpack_d>
    a5a4:	d9000417 	ldw	r4,16(sp)
    a5a8:	00800044 	movi	r2,1
    a5ac:	1100102e 	bgeu	r2,r4,a5f0 <__muldf3+0xac>
    a5b0:	d8c00917 	ldw	r3,36(sp)
    a5b4:	10c0062e 	bgeu	r2,r3,a5d0 <__muldf3+0x8c>
    a5b8:	00800104 	movi	r2,4
    a5bc:	20800a26 	beq	r4,r2,a5e8 <__muldf3+0xa4>
    a5c0:	1880cc26 	beq	r3,r2,a8f4 <__muldf3+0x3b0>
    a5c4:	00800084 	movi	r2,2
    a5c8:	20800926 	beq	r4,r2,a5f0 <__muldf3+0xac>
    a5cc:	1880191e 	bne	r3,r2,a634 <__muldf3+0xf0>
    a5d0:	d8c00a17 	ldw	r3,40(sp)
    a5d4:	d8800517 	ldw	r2,20(sp)
    a5d8:	8009883a 	mov	r4,r16
    a5dc:	10c4c03a 	cmpne	r2,r2,r3
    a5e0:	d8800a15 	stw	r2,40(sp)
    a5e4:	00000706 	br	a604 <__muldf3+0xc0>
    a5e8:	00800084 	movi	r2,2
    a5ec:	1880c326 	beq	r3,r2,a8fc <__muldf3+0x3b8>
    a5f0:	d8800517 	ldw	r2,20(sp)
    a5f4:	d8c00a17 	ldw	r3,40(sp)
    a5f8:	8809883a 	mov	r4,r17
    a5fc:	10c4c03a 	cmpne	r2,r2,r3
    a600:	d8800515 	stw	r2,20(sp)
    a604:	000b2840 	call	b284 <__pack_d>
    a608:	dfc01f17 	ldw	ra,124(sp)
    a60c:	ddc01e17 	ldw	r23,120(sp)
    a610:	dd801d17 	ldw	r22,116(sp)
    a614:	dd401c17 	ldw	r21,112(sp)
    a618:	dd001b17 	ldw	r20,108(sp)
    a61c:	dcc01a17 	ldw	r19,104(sp)
    a620:	dc801917 	ldw	r18,100(sp)
    a624:	dc401817 	ldw	r17,96(sp)
    a628:	dc001717 	ldw	r16,92(sp)
    a62c:	dec02004 	addi	sp,sp,128
    a630:	f800283a 	ret
    a634:	dd800717 	ldw	r22,28(sp)
    a638:	dc800c17 	ldw	r18,48(sp)
    a63c:	002b883a 	mov	r21,zero
    a640:	0023883a 	mov	r17,zero
    a644:	a80b883a 	mov	r5,r21
    a648:	b00d883a 	mov	r6,r22
    a64c:	880f883a 	mov	r7,r17
    a650:	ddc00817 	ldw	r23,32(sp)
    a654:	dcc00d17 	ldw	r19,52(sp)
    a658:	9009883a 	mov	r4,r18
    a65c:	000b16c0 	call	b16c <__muldi3>
    a660:	001b883a 	mov	r13,zero
    a664:	680f883a 	mov	r7,r13
    a668:	b009883a 	mov	r4,r22
    a66c:	000b883a 	mov	r5,zero
    a670:	980d883a 	mov	r6,r19
    a674:	b82d883a 	mov	r22,r23
    a678:	002f883a 	mov	r23,zero
    a67c:	db401615 	stw	r13,88(sp)
    a680:	d8801315 	stw	r2,76(sp)
    a684:	d8c01415 	stw	r3,80(sp)
    a688:	dcc01515 	stw	r19,84(sp)
    a68c:	000b16c0 	call	b16c <__muldi3>
    a690:	b00d883a 	mov	r6,r22
    a694:	000b883a 	mov	r5,zero
    a698:	9009883a 	mov	r4,r18
    a69c:	b80f883a 	mov	r7,r23
    a6a0:	1021883a 	mov	r16,r2
    a6a4:	1823883a 	mov	r17,r3
    a6a8:	000b16c0 	call	b16c <__muldi3>
    a6ac:	8085883a 	add	r2,r16,r2
    a6b0:	140d803a 	cmpltu	r6,r2,r16
    a6b4:	88c7883a 	add	r3,r17,r3
    a6b8:	30cd883a 	add	r6,r6,r3
    a6bc:	1029883a 	mov	r20,r2
    a6c0:	302b883a 	mov	r21,r6
    a6c4:	da801317 	ldw	r10,76(sp)
    a6c8:	dac01417 	ldw	r11,80(sp)
    a6cc:	db001517 	ldw	r12,84(sp)
    a6d0:	db401617 	ldw	r13,88(sp)
    a6d4:	3440612e 	bgeu	r6,r17,a85c <__muldf3+0x318>
    a6d8:	0009883a 	mov	r4,zero
    a6dc:	5105883a 	add	r2,r10,r4
    a6e0:	128d803a 	cmpltu	r6,r2,r10
    a6e4:	5d07883a 	add	r3,r11,r20
    a6e8:	30cd883a 	add	r6,r6,r3
    a6ec:	0021883a 	mov	r16,zero
    a6f0:	04400044 	movi	r17,1
    a6f4:	1025883a 	mov	r18,r2
    a6f8:	3027883a 	mov	r19,r6
    a6fc:	32c06236 	bltu	r6,r11,a888 <__muldf3+0x344>
    a700:	59807a26 	beq	r11,r6,a8ec <__muldf3+0x3a8>
    a704:	680b883a 	mov	r5,r13
    a708:	b80f883a 	mov	r7,r23
    a70c:	6009883a 	mov	r4,r12
    a710:	b00d883a 	mov	r6,r22
    a714:	000b16c0 	call	b16c <__muldi3>
    a718:	1009883a 	mov	r4,r2
    a71c:	000f883a 	mov	r7,zero
    a720:	1545883a 	add	r2,r2,r21
    a724:	1111803a 	cmpltu	r8,r2,r4
    a728:	19c7883a 	add	r3,r3,r7
    a72c:	40c7883a 	add	r3,r8,r3
    a730:	88cb883a 	add	r5,r17,r3
    a734:	d8c00617 	ldw	r3,24(sp)
    a738:	8089883a 	add	r4,r16,r2
    a73c:	d8800b17 	ldw	r2,44(sp)
    a740:	18c00104 	addi	r3,r3,4
    a744:	240d803a 	cmpltu	r6,r4,r16
    a748:	10c7883a 	add	r3,r2,r3
    a74c:	2013883a 	mov	r9,r4
    a750:	d8800a17 	ldw	r2,40(sp)
    a754:	d9000517 	ldw	r4,20(sp)
    a758:	314d883a 	add	r6,r6,r5
    a75c:	3015883a 	mov	r10,r6
    a760:	2088c03a 	cmpne	r4,r4,r2
    a764:	00880034 	movhi	r2,8192
    a768:	10bfffc4 	addi	r2,r2,-1
    a76c:	d9000f15 	stw	r4,60(sp)
    a770:	d8c01015 	stw	r3,64(sp)
    a774:	1180162e 	bgeu	r2,r6,a7d0 <__muldf3+0x28c>
    a778:	1811883a 	mov	r8,r3
    a77c:	101f883a 	mov	r15,r2
    a780:	980497fa 	slli	r2,r19,31
    a784:	9016d07a 	srli	r11,r18,1
    a788:	500697fa 	slli	r3,r10,31
    a78c:	480cd07a 	srli	r6,r9,1
    a790:	500ed07a 	srli	r7,r10,1
    a794:	12d6b03a 	or	r11,r2,r11
    a798:	00800044 	movi	r2,1
    a79c:	198cb03a 	or	r6,r3,r6
    a7a0:	4888703a 	and	r4,r9,r2
    a7a4:	9818d07a 	srli	r12,r19,1
    a7a8:	001b883a 	mov	r13,zero
    a7ac:	03a00034 	movhi	r14,32768
    a7b0:	3013883a 	mov	r9,r6
    a7b4:	3815883a 	mov	r10,r7
    a7b8:	4091883a 	add	r8,r8,r2
    a7bc:	20000226 	beq	r4,zero,a7c8 <__muldf3+0x284>
    a7c0:	5b64b03a 	or	r18,r11,r13
    a7c4:	63a6b03a 	or	r19,r12,r14
    a7c8:	7abfed36 	bltu	r15,r10,a780 <__muldf3+0x23c>
    a7cc:	da001015 	stw	r8,64(sp)
    a7d0:	00840034 	movhi	r2,4096
    a7d4:	10bfffc4 	addi	r2,r2,-1
    a7d8:	12801436 	bltu	r2,r10,a82c <__muldf3+0x2e8>
    a7dc:	da001017 	ldw	r8,64(sp)
    a7e0:	101f883a 	mov	r15,r2
    a7e4:	4a45883a 	add	r2,r9,r9
    a7e8:	124d803a 	cmpltu	r6,r2,r9
    a7ec:	5287883a 	add	r3,r10,r10
    a7f0:	9497883a 	add	r11,r18,r18
    a7f4:	5c8f803a 	cmpltu	r7,r11,r18
    a7f8:	9cd9883a 	add	r12,r19,r19
    a7fc:	01000044 	movi	r4,1
    a800:	30cd883a 	add	r6,r6,r3
    a804:	3b0f883a 	add	r7,r7,r12
    a808:	423fffc4 	addi	r8,r8,-1
    a80c:	1013883a 	mov	r9,r2
    a810:	3015883a 	mov	r10,r6
    a814:	111ab03a 	or	r13,r2,r4
    a818:	98003016 	blt	r19,zero,a8dc <__muldf3+0x398>
    a81c:	5825883a 	mov	r18,r11
    a820:	3827883a 	mov	r19,r7
    a824:	7abfef2e 	bgeu	r15,r10,a7e4 <__muldf3+0x2a0>
    a828:	da001015 	stw	r8,64(sp)
    a82c:	00803fc4 	movi	r2,255
    a830:	488e703a 	and	r7,r9,r2
    a834:	00802004 	movi	r2,128
    a838:	0007883a 	mov	r3,zero
    a83c:	0011883a 	mov	r8,zero
    a840:	38801826 	beq	r7,r2,a8a4 <__muldf3+0x360>
    a844:	008000c4 	movi	r2,3
    a848:	d9000e04 	addi	r4,sp,56
    a84c:	da801215 	stw	r10,72(sp)
    a850:	d8800e15 	stw	r2,56(sp)
    a854:	da401115 	stw	r9,68(sp)
    a858:	003f6a06 	br	a604 <__muldf3+0xc0>
    a85c:	89802126 	beq	r17,r6,a8e4 <__muldf3+0x3a0>
    a860:	0009883a 	mov	r4,zero
    a864:	5105883a 	add	r2,r10,r4
    a868:	128d803a 	cmpltu	r6,r2,r10
    a86c:	5d07883a 	add	r3,r11,r20
    a870:	30cd883a 	add	r6,r6,r3
    a874:	0021883a 	mov	r16,zero
    a878:	0023883a 	mov	r17,zero
    a87c:	1025883a 	mov	r18,r2
    a880:	3027883a 	mov	r19,r6
    a884:	32ff9e2e 	bgeu	r6,r11,a700 <__muldf3+0x1bc>
    a888:	00800044 	movi	r2,1
    a88c:	8089883a 	add	r4,r16,r2
    a890:	240d803a 	cmpltu	r6,r4,r16
    a894:	344d883a 	add	r6,r6,r17
    a898:	2021883a 	mov	r16,r4
    a89c:	3023883a 	mov	r17,r6
    a8a0:	003f9806 	br	a704 <__muldf3+0x1c0>
    a8a4:	403fe71e 	bne	r8,zero,a844 <__muldf3+0x300>
    a8a8:	01004004 	movi	r4,256
    a8ac:	4904703a 	and	r2,r9,r4
    a8b0:	10c4b03a 	or	r2,r2,r3
    a8b4:	103fe31e 	bne	r2,zero,a844 <__muldf3+0x300>
    a8b8:	94c4b03a 	or	r2,r18,r19
    a8bc:	103fe126 	beq	r2,zero,a844 <__muldf3+0x300>
    a8c0:	49c5883a 	add	r2,r9,r7
    a8c4:	1251803a 	cmpltu	r8,r2,r9
    a8c8:	4291883a 	add	r8,r8,r10
    a8cc:	013fc004 	movi	r4,-256
    a8d0:	1112703a 	and	r9,r2,r4
    a8d4:	4015883a 	mov	r10,r8
    a8d8:	003fda06 	br	a844 <__muldf3+0x300>
    a8dc:	6813883a 	mov	r9,r13
    a8e0:	003fce06 	br	a81c <__muldf3+0x2d8>
    a8e4:	143f7c36 	bltu	r2,r16,a6d8 <__muldf3+0x194>
    a8e8:	003fdd06 	br	a860 <__muldf3+0x31c>
    a8ec:	12bf852e 	bgeu	r2,r10,a704 <__muldf3+0x1c0>
    a8f0:	003fe506 	br	a888 <__muldf3+0x344>
    a8f4:	00800084 	movi	r2,2
    a8f8:	20bf351e 	bne	r4,r2,a5d0 <__muldf3+0x8c>
    a8fc:	01000074 	movhi	r4,1
    a900:	2139da04 	addi	r4,r4,-6296
    a904:	003f3f06 	br	a604 <__muldf3+0xc0>

0000a908 <__divdf3>:
    a908:	deffed04 	addi	sp,sp,-76
    a90c:	dcc01115 	stw	r19,68(sp)
    a910:	dcc00404 	addi	r19,sp,16
    a914:	2011883a 	mov	r8,r4
    a918:	2813883a 	mov	r9,r5
    a91c:	dc000e15 	stw	r16,56(sp)
    a920:	d809883a 	mov	r4,sp
    a924:	980b883a 	mov	r5,r19
    a928:	dc000904 	addi	r16,sp,36
    a92c:	dfc01215 	stw	ra,72(sp)
    a930:	da400115 	stw	r9,4(sp)
    a934:	d9c00315 	stw	r7,12(sp)
    a938:	da000015 	stw	r8,0(sp)
    a93c:	d9800215 	stw	r6,8(sp)
    a940:	dc801015 	stw	r18,64(sp)
    a944:	dc400f15 	stw	r17,60(sp)
    a948:	000b5980 	call	b598 <__unpack_d>
    a94c:	d9000204 	addi	r4,sp,8
    a950:	800b883a 	mov	r5,r16
    a954:	000b5980 	call	b598 <__unpack_d>
    a958:	d9000417 	ldw	r4,16(sp)
    a95c:	00800044 	movi	r2,1
    a960:	11000b2e 	bgeu	r2,r4,a990 <__divdf3+0x88>
    a964:	d9400917 	ldw	r5,36(sp)
    a968:	1140762e 	bgeu	r2,r5,ab44 <__divdf3+0x23c>
    a96c:	d8800517 	ldw	r2,20(sp)
    a970:	d8c00a17 	ldw	r3,40(sp)
    a974:	01800104 	movi	r6,4
    a978:	10c4f03a 	xor	r2,r2,r3
    a97c:	d8800515 	stw	r2,20(sp)
    a980:	21800226 	beq	r4,r6,a98c <__divdf3+0x84>
    a984:	00800084 	movi	r2,2
    a988:	2080141e 	bne	r4,r2,a9dc <__divdf3+0xd4>
    a98c:	29000926 	beq	r5,r4,a9b4 <__divdf3+0xac>
    a990:	9809883a 	mov	r4,r19
    a994:	000b2840 	call	b284 <__pack_d>
    a998:	dfc01217 	ldw	ra,72(sp)
    a99c:	dcc01117 	ldw	r19,68(sp)
    a9a0:	dc801017 	ldw	r18,64(sp)
    a9a4:	dc400f17 	ldw	r17,60(sp)
    a9a8:	dc000e17 	ldw	r16,56(sp)
    a9ac:	dec01304 	addi	sp,sp,76
    a9b0:	f800283a 	ret
    a9b4:	01000074 	movhi	r4,1
    a9b8:	2139da04 	addi	r4,r4,-6296
    a9bc:	000b2840 	call	b284 <__pack_d>
    a9c0:	dfc01217 	ldw	ra,72(sp)
    a9c4:	dcc01117 	ldw	r19,68(sp)
    a9c8:	dc801017 	ldw	r18,64(sp)
    a9cc:	dc400f17 	ldw	r17,60(sp)
    a9d0:	dc000e17 	ldw	r16,56(sp)
    a9d4:	dec01304 	addi	sp,sp,76
    a9d8:	f800283a 	ret
    a9dc:	29805b26 	beq	r5,r6,ab4c <__divdf3+0x244>
    a9e0:	28802d26 	beq	r5,r2,aa98 <__divdf3+0x190>
    a9e4:	d8c00617 	ldw	r3,24(sp)
    a9e8:	d8800b17 	ldw	r2,44(sp)
    a9ec:	d9c00817 	ldw	r7,32(sp)
    a9f0:	dc400d17 	ldw	r17,52(sp)
    a9f4:	188bc83a 	sub	r5,r3,r2
    a9f8:	d9800717 	ldw	r6,28(sp)
    a9fc:	dc000c17 	ldw	r16,48(sp)
    aa00:	d9400615 	stw	r5,24(sp)
    aa04:	3c403836 	bltu	r7,r17,aae8 <__divdf3+0x1e0>
    aa08:	89c03626 	beq	r17,r7,aae4 <__divdf3+0x1dc>
    aa0c:	0015883a 	mov	r10,zero
    aa10:	001d883a 	mov	r14,zero
    aa14:	02c40034 	movhi	r11,4096
    aa18:	001f883a 	mov	r15,zero
    aa1c:	003f883a 	mov	ra,zero
    aa20:	04800f44 	movi	r18,61
    aa24:	00000f06 	br	aa64 <__divdf3+0x15c>
    aa28:	601d883a 	mov	r14,r12
    aa2c:	681f883a 	mov	r15,r13
    aa30:	400d883a 	mov	r6,r8
    aa34:	100f883a 	mov	r7,r2
    aa38:	3191883a 	add	r8,r6,r6
    aa3c:	5808d07a 	srli	r4,r11,1
    aa40:	4185803a 	cmpltu	r2,r8,r6
    aa44:	39d3883a 	add	r9,r7,r7
    aa48:	28c6b03a 	or	r3,r5,r3
    aa4c:	1245883a 	add	r2,r2,r9
    aa50:	1815883a 	mov	r10,r3
    aa54:	2017883a 	mov	r11,r4
    aa58:	400d883a 	mov	r6,r8
    aa5c:	100f883a 	mov	r7,r2
    aa60:	fc801726 	beq	ra,r18,aac0 <__divdf3+0x1b8>
    aa64:	580a97fa 	slli	r5,r11,31
    aa68:	5006d07a 	srli	r3,r10,1
    aa6c:	ffc00044 	addi	ra,ra,1
    aa70:	3c7ff136 	bltu	r7,r17,aa38 <__divdf3+0x130>
    aa74:	3411c83a 	sub	r8,r6,r16
    aa78:	3205803a 	cmpltu	r2,r6,r8
    aa7c:	3c53c83a 	sub	r9,r7,r17
    aa80:	7298b03a 	or	r12,r14,r10
    aa84:	7adab03a 	or	r13,r15,r11
    aa88:	4885c83a 	sub	r2,r9,r2
    aa8c:	89ffe61e 	bne	r17,r7,aa28 <__divdf3+0x120>
    aa90:	343fe936 	bltu	r6,r16,aa38 <__divdf3+0x130>
    aa94:	003fe406 	br	aa28 <__divdf3+0x120>
    aa98:	9809883a 	mov	r4,r19
    aa9c:	d9800415 	stw	r6,16(sp)
    aaa0:	000b2840 	call	b284 <__pack_d>
    aaa4:	dfc01217 	ldw	ra,72(sp)
    aaa8:	dcc01117 	ldw	r19,68(sp)
    aaac:	dc801017 	ldw	r18,64(sp)
    aab0:	dc400f17 	ldw	r17,60(sp)
    aab4:	dc000e17 	ldw	r16,56(sp)
    aab8:	dec01304 	addi	sp,sp,76
    aabc:	f800283a 	ret
    aac0:	00803fc4 	movi	r2,255
    aac4:	7090703a 	and	r8,r14,r2
    aac8:	00802004 	movi	r2,128
    aacc:	0007883a 	mov	r3,zero
    aad0:	0013883a 	mov	r9,zero
    aad4:	40800d26 	beq	r8,r2,ab0c <__divdf3+0x204>
    aad8:	dbc00815 	stw	r15,32(sp)
    aadc:	db800715 	stw	r14,28(sp)
    aae0:	003fab06 	br	a990 <__divdf3+0x88>
    aae4:	343fc92e 	bgeu	r6,r16,aa0c <__divdf3+0x104>
    aae8:	3185883a 	add	r2,r6,r6
    aaec:	1189803a 	cmpltu	r4,r2,r6
    aaf0:	39c7883a 	add	r3,r7,r7
    aaf4:	20c9883a 	add	r4,r4,r3
    aaf8:	297fffc4 	addi	r5,r5,-1
    aafc:	100d883a 	mov	r6,r2
    ab00:	200f883a 	mov	r7,r4
    ab04:	d9400615 	stw	r5,24(sp)
    ab08:	003fc006 	br	aa0c <__divdf3+0x104>
    ab0c:	483ff21e 	bne	r9,zero,aad8 <__divdf3+0x1d0>
    ab10:	01004004 	movi	r4,256
    ab14:	7104703a 	and	r2,r14,r4
    ab18:	10c4b03a 	or	r2,r2,r3
    ab1c:	103fee1e 	bne	r2,zero,aad8 <__divdf3+0x1d0>
    ab20:	31c4b03a 	or	r2,r6,r7
    ab24:	103fec26 	beq	r2,zero,aad8 <__divdf3+0x1d0>
    ab28:	7205883a 	add	r2,r14,r8
    ab2c:	1391803a 	cmpltu	r8,r2,r14
    ab30:	43d1883a 	add	r8,r8,r15
    ab34:	013fc004 	movi	r4,-256
    ab38:	111c703a 	and	r14,r2,r4
    ab3c:	401f883a 	mov	r15,r8
    ab40:	003fe506 	br	aad8 <__divdf3+0x1d0>
    ab44:	8009883a 	mov	r4,r16
    ab48:	003f9206 	br	a994 <__divdf3+0x8c>
    ab4c:	9809883a 	mov	r4,r19
    ab50:	d8000715 	stw	zero,28(sp)
    ab54:	d8000815 	stw	zero,32(sp)
    ab58:	d8000615 	stw	zero,24(sp)
    ab5c:	003f8d06 	br	a994 <__divdf3+0x8c>

0000ab60 <__eqdf2>:
    ab60:	deffef04 	addi	sp,sp,-68
    ab64:	dc400f15 	stw	r17,60(sp)
    ab68:	dc400404 	addi	r17,sp,16
    ab6c:	2005883a 	mov	r2,r4
    ab70:	2807883a 	mov	r3,r5
    ab74:	dc000e15 	stw	r16,56(sp)
    ab78:	d809883a 	mov	r4,sp
    ab7c:	880b883a 	mov	r5,r17
    ab80:	dc000904 	addi	r16,sp,36
    ab84:	d8c00115 	stw	r3,4(sp)
    ab88:	d8800015 	stw	r2,0(sp)
    ab8c:	d9800215 	stw	r6,8(sp)
    ab90:	dfc01015 	stw	ra,64(sp)
    ab94:	d9c00315 	stw	r7,12(sp)
    ab98:	000b5980 	call	b598 <__unpack_d>
    ab9c:	d9000204 	addi	r4,sp,8
    aba0:	800b883a 	mov	r5,r16
    aba4:	000b5980 	call	b598 <__unpack_d>
    aba8:	d8800417 	ldw	r2,16(sp)
    abac:	00c00044 	movi	r3,1
    abb0:	180d883a 	mov	r6,r3
    abb4:	1880062e 	bgeu	r3,r2,abd0 <__eqdf2+0x70>
    abb8:	d8800917 	ldw	r2,36(sp)
    abbc:	8809883a 	mov	r4,r17
    abc0:	800b883a 	mov	r5,r16
    abc4:	1880022e 	bgeu	r3,r2,abd0 <__eqdf2+0x70>
    abc8:	000b6d00 	call	b6d0 <__fpcmp_parts_d>
    abcc:	100d883a 	mov	r6,r2
    abd0:	3005883a 	mov	r2,r6
    abd4:	dfc01017 	ldw	ra,64(sp)
    abd8:	dc400f17 	ldw	r17,60(sp)
    abdc:	dc000e17 	ldw	r16,56(sp)
    abe0:	dec01104 	addi	sp,sp,68
    abe4:	f800283a 	ret

0000abe8 <__nedf2>:
    abe8:	deffef04 	addi	sp,sp,-68
    abec:	dc400f15 	stw	r17,60(sp)
    abf0:	dc400404 	addi	r17,sp,16
    abf4:	2005883a 	mov	r2,r4
    abf8:	2807883a 	mov	r3,r5
    abfc:	dc000e15 	stw	r16,56(sp)
    ac00:	d809883a 	mov	r4,sp
    ac04:	880b883a 	mov	r5,r17
    ac08:	dc000904 	addi	r16,sp,36
    ac0c:	d8c00115 	stw	r3,4(sp)
    ac10:	d8800015 	stw	r2,0(sp)
    ac14:	d9800215 	stw	r6,8(sp)
    ac18:	dfc01015 	stw	ra,64(sp)
    ac1c:	d9c00315 	stw	r7,12(sp)
    ac20:	000b5980 	call	b598 <__unpack_d>
    ac24:	d9000204 	addi	r4,sp,8
    ac28:	800b883a 	mov	r5,r16
    ac2c:	000b5980 	call	b598 <__unpack_d>
    ac30:	d8800417 	ldw	r2,16(sp)
    ac34:	00c00044 	movi	r3,1
    ac38:	180d883a 	mov	r6,r3
    ac3c:	1880062e 	bgeu	r3,r2,ac58 <__nedf2+0x70>
    ac40:	d8800917 	ldw	r2,36(sp)
    ac44:	8809883a 	mov	r4,r17
    ac48:	800b883a 	mov	r5,r16
    ac4c:	1880022e 	bgeu	r3,r2,ac58 <__nedf2+0x70>
    ac50:	000b6d00 	call	b6d0 <__fpcmp_parts_d>
    ac54:	100d883a 	mov	r6,r2
    ac58:	3005883a 	mov	r2,r6
    ac5c:	dfc01017 	ldw	ra,64(sp)
    ac60:	dc400f17 	ldw	r17,60(sp)
    ac64:	dc000e17 	ldw	r16,56(sp)
    ac68:	dec01104 	addi	sp,sp,68
    ac6c:	f800283a 	ret

0000ac70 <__gtdf2>:
    ac70:	deffef04 	addi	sp,sp,-68
    ac74:	dc400f15 	stw	r17,60(sp)
    ac78:	dc400404 	addi	r17,sp,16
    ac7c:	2005883a 	mov	r2,r4
    ac80:	2807883a 	mov	r3,r5
    ac84:	dc000e15 	stw	r16,56(sp)
    ac88:	d809883a 	mov	r4,sp
    ac8c:	880b883a 	mov	r5,r17
    ac90:	dc000904 	addi	r16,sp,36
    ac94:	d8c00115 	stw	r3,4(sp)
    ac98:	d8800015 	stw	r2,0(sp)
    ac9c:	d9800215 	stw	r6,8(sp)
    aca0:	dfc01015 	stw	ra,64(sp)
    aca4:	d9c00315 	stw	r7,12(sp)
    aca8:	000b5980 	call	b598 <__unpack_d>
    acac:	d9000204 	addi	r4,sp,8
    acb0:	800b883a 	mov	r5,r16
    acb4:	000b5980 	call	b598 <__unpack_d>
    acb8:	d8800417 	ldw	r2,16(sp)
    acbc:	00c00044 	movi	r3,1
    acc0:	01bfffc4 	movi	r6,-1
    acc4:	1880062e 	bgeu	r3,r2,ace0 <__gtdf2+0x70>
    acc8:	d8800917 	ldw	r2,36(sp)
    accc:	8809883a 	mov	r4,r17
    acd0:	800b883a 	mov	r5,r16
    acd4:	1880022e 	bgeu	r3,r2,ace0 <__gtdf2+0x70>
    acd8:	000b6d00 	call	b6d0 <__fpcmp_parts_d>
    acdc:	100d883a 	mov	r6,r2
    ace0:	3005883a 	mov	r2,r6
    ace4:	dfc01017 	ldw	ra,64(sp)
    ace8:	dc400f17 	ldw	r17,60(sp)
    acec:	dc000e17 	ldw	r16,56(sp)
    acf0:	dec01104 	addi	sp,sp,68
    acf4:	f800283a 	ret

0000acf8 <__gedf2>:
    acf8:	deffef04 	addi	sp,sp,-68
    acfc:	dc400f15 	stw	r17,60(sp)
    ad00:	dc400404 	addi	r17,sp,16
    ad04:	2005883a 	mov	r2,r4
    ad08:	2807883a 	mov	r3,r5
    ad0c:	dc000e15 	stw	r16,56(sp)
    ad10:	d809883a 	mov	r4,sp
    ad14:	880b883a 	mov	r5,r17
    ad18:	dc000904 	addi	r16,sp,36
    ad1c:	d8c00115 	stw	r3,4(sp)
    ad20:	d8800015 	stw	r2,0(sp)
    ad24:	d9800215 	stw	r6,8(sp)
    ad28:	dfc01015 	stw	ra,64(sp)
    ad2c:	d9c00315 	stw	r7,12(sp)
    ad30:	000b5980 	call	b598 <__unpack_d>
    ad34:	d9000204 	addi	r4,sp,8
    ad38:	800b883a 	mov	r5,r16
    ad3c:	000b5980 	call	b598 <__unpack_d>
    ad40:	d8800417 	ldw	r2,16(sp)
    ad44:	00c00044 	movi	r3,1
    ad48:	01bfffc4 	movi	r6,-1
    ad4c:	1880062e 	bgeu	r3,r2,ad68 <__gedf2+0x70>
    ad50:	d8800917 	ldw	r2,36(sp)
    ad54:	8809883a 	mov	r4,r17
    ad58:	800b883a 	mov	r5,r16
    ad5c:	1880022e 	bgeu	r3,r2,ad68 <__gedf2+0x70>
    ad60:	000b6d00 	call	b6d0 <__fpcmp_parts_d>
    ad64:	100d883a 	mov	r6,r2
    ad68:	3005883a 	mov	r2,r6
    ad6c:	dfc01017 	ldw	ra,64(sp)
    ad70:	dc400f17 	ldw	r17,60(sp)
    ad74:	dc000e17 	ldw	r16,56(sp)
    ad78:	dec01104 	addi	sp,sp,68
    ad7c:	f800283a 	ret

0000ad80 <__ltdf2>:
    ad80:	deffef04 	addi	sp,sp,-68
    ad84:	dc400f15 	stw	r17,60(sp)
    ad88:	dc400404 	addi	r17,sp,16
    ad8c:	2005883a 	mov	r2,r4
    ad90:	2807883a 	mov	r3,r5
    ad94:	dc000e15 	stw	r16,56(sp)
    ad98:	d809883a 	mov	r4,sp
    ad9c:	880b883a 	mov	r5,r17
    ada0:	dc000904 	addi	r16,sp,36
    ada4:	d8c00115 	stw	r3,4(sp)
    ada8:	d8800015 	stw	r2,0(sp)
    adac:	d9800215 	stw	r6,8(sp)
    adb0:	dfc01015 	stw	ra,64(sp)
    adb4:	d9c00315 	stw	r7,12(sp)
    adb8:	000b5980 	call	b598 <__unpack_d>
    adbc:	d9000204 	addi	r4,sp,8
    adc0:	800b883a 	mov	r5,r16
    adc4:	000b5980 	call	b598 <__unpack_d>
    adc8:	d8800417 	ldw	r2,16(sp)
    adcc:	00c00044 	movi	r3,1
    add0:	180d883a 	mov	r6,r3
    add4:	1880062e 	bgeu	r3,r2,adf0 <__ltdf2+0x70>
    add8:	d8800917 	ldw	r2,36(sp)
    addc:	8809883a 	mov	r4,r17
    ade0:	800b883a 	mov	r5,r16
    ade4:	1880022e 	bgeu	r3,r2,adf0 <__ltdf2+0x70>
    ade8:	000b6d00 	call	b6d0 <__fpcmp_parts_d>
    adec:	100d883a 	mov	r6,r2
    adf0:	3005883a 	mov	r2,r6
    adf4:	dfc01017 	ldw	ra,64(sp)
    adf8:	dc400f17 	ldw	r17,60(sp)
    adfc:	dc000e17 	ldw	r16,56(sp)
    ae00:	dec01104 	addi	sp,sp,68
    ae04:	f800283a 	ret

0000ae08 <__floatsidf>:
    ae08:	2006d7fa 	srli	r3,r4,31
    ae0c:	defff604 	addi	sp,sp,-40
    ae10:	008000c4 	movi	r2,3
    ae14:	dfc00915 	stw	ra,36(sp)
    ae18:	dcc00815 	stw	r19,32(sp)
    ae1c:	dc800715 	stw	r18,28(sp)
    ae20:	dc400615 	stw	r17,24(sp)
    ae24:	dc000515 	stw	r16,20(sp)
    ae28:	d8800015 	stw	r2,0(sp)
    ae2c:	d8c00115 	stw	r3,4(sp)
    ae30:	20000f1e 	bne	r4,zero,ae70 <__floatsidf+0x68>
    ae34:	00800084 	movi	r2,2
    ae38:	d8800015 	stw	r2,0(sp)
    ae3c:	d809883a 	mov	r4,sp
    ae40:	000b2840 	call	b284 <__pack_d>
    ae44:	1009883a 	mov	r4,r2
    ae48:	180b883a 	mov	r5,r3
    ae4c:	2005883a 	mov	r2,r4
    ae50:	2807883a 	mov	r3,r5
    ae54:	dfc00917 	ldw	ra,36(sp)
    ae58:	dcc00817 	ldw	r19,32(sp)
    ae5c:	dc800717 	ldw	r18,28(sp)
    ae60:	dc400617 	ldw	r17,24(sp)
    ae64:	dc000517 	ldw	r16,20(sp)
    ae68:	dec00a04 	addi	sp,sp,40
    ae6c:	f800283a 	ret
    ae70:	00800f04 	movi	r2,60
    ae74:	1807003a 	cmpeq	r3,r3,zero
    ae78:	d8800215 	stw	r2,8(sp)
    ae7c:	18001126 	beq	r3,zero,aec4 <__floatsidf+0xbc>
    ae80:	0027883a 	mov	r19,zero
    ae84:	2025883a 	mov	r18,r4
    ae88:	d9000315 	stw	r4,12(sp)
    ae8c:	dcc00415 	stw	r19,16(sp)
    ae90:	000b2040 	call	b204 <__clzsi2>
    ae94:	11000744 	addi	r4,r2,29
    ae98:	013fe80e 	bge	zero,r4,ae3c <__floatsidf+0x34>
    ae9c:	10bfff44 	addi	r2,r2,-3
    aea0:	10000c16 	blt	r2,zero,aed4 <__floatsidf+0xcc>
    aea4:	90a2983a 	sll	r17,r18,r2
    aea8:	0021883a 	mov	r16,zero
    aeac:	d8800217 	ldw	r2,8(sp)
    aeb0:	dc400415 	stw	r17,16(sp)
    aeb4:	dc000315 	stw	r16,12(sp)
    aeb8:	1105c83a 	sub	r2,r2,r4
    aebc:	d8800215 	stw	r2,8(sp)
    aec0:	003fde06 	br	ae3c <__floatsidf+0x34>
    aec4:	00a00034 	movhi	r2,32768
    aec8:	20800a26 	beq	r4,r2,aef4 <__floatsidf+0xec>
    aecc:	0109c83a 	sub	r4,zero,r4
    aed0:	003feb06 	br	ae80 <__floatsidf+0x78>
    aed4:	9006d07a 	srli	r3,r18,1
    aed8:	008007c4 	movi	r2,31
    aedc:	1105c83a 	sub	r2,r2,r4
    aee0:	1886d83a 	srl	r3,r3,r2
    aee4:	9922983a 	sll	r17,r19,r4
    aee8:	9120983a 	sll	r16,r18,r4
    aeec:	1c62b03a 	or	r17,r3,r17
    aef0:	003fee06 	br	aeac <__floatsidf+0xa4>
    aef4:	0009883a 	mov	r4,zero
    aef8:	01707834 	movhi	r5,49632
    aefc:	003fd306 	br	ae4c <__floatsidf+0x44>

0000af00 <__fixdfsi>:
    af00:	defff804 	addi	sp,sp,-32
    af04:	2005883a 	mov	r2,r4
    af08:	2807883a 	mov	r3,r5
    af0c:	d809883a 	mov	r4,sp
    af10:	d9400204 	addi	r5,sp,8
    af14:	d8c00115 	stw	r3,4(sp)
    af18:	d8800015 	stw	r2,0(sp)
    af1c:	dfc00715 	stw	ra,28(sp)
    af20:	000b5980 	call	b598 <__unpack_d>
    af24:	d8c00217 	ldw	r3,8(sp)
    af28:	00800084 	movi	r2,2
    af2c:	1880051e 	bne	r3,r2,af44 <__fixdfsi+0x44>
    af30:	0007883a 	mov	r3,zero
    af34:	1805883a 	mov	r2,r3
    af38:	dfc00717 	ldw	ra,28(sp)
    af3c:	dec00804 	addi	sp,sp,32
    af40:	f800283a 	ret
    af44:	00800044 	movi	r2,1
    af48:	10fff92e 	bgeu	r2,r3,af30 <__fixdfsi+0x30>
    af4c:	00800104 	movi	r2,4
    af50:	18800426 	beq	r3,r2,af64 <__fixdfsi+0x64>
    af54:	d8c00417 	ldw	r3,16(sp)
    af58:	183ff516 	blt	r3,zero,af30 <__fixdfsi+0x30>
    af5c:	00800784 	movi	r2,30
    af60:	10c0080e 	bge	r2,r3,af84 <__fixdfsi+0x84>
    af64:	d8800317 	ldw	r2,12(sp)
    af68:	1000121e 	bne	r2,zero,afb4 <__fixdfsi+0xb4>
    af6c:	00e00034 	movhi	r3,32768
    af70:	18ffffc4 	addi	r3,r3,-1
    af74:	1805883a 	mov	r2,r3
    af78:	dfc00717 	ldw	ra,28(sp)
    af7c:	dec00804 	addi	sp,sp,32
    af80:	f800283a 	ret
    af84:	00800f04 	movi	r2,60
    af88:	10d1c83a 	sub	r8,r2,r3
    af8c:	40bff804 	addi	r2,r8,-32
    af90:	d9800517 	ldw	r6,20(sp)
    af94:	d9c00617 	ldw	r7,24(sp)
    af98:	10000816 	blt	r2,zero,afbc <__fixdfsi+0xbc>
    af9c:	3888d83a 	srl	r4,r7,r2
    afa0:	d8800317 	ldw	r2,12(sp)
    afa4:	2007883a 	mov	r3,r4
    afa8:	103fe226 	beq	r2,zero,af34 <__fixdfsi+0x34>
    afac:	0107c83a 	sub	r3,zero,r4
    afb0:	003fe006 	br	af34 <__fixdfsi+0x34>
    afb4:	00e00034 	movhi	r3,32768
    afb8:	003fde06 	br	af34 <__fixdfsi+0x34>
    afbc:	39c7883a 	add	r3,r7,r7
    afc0:	008007c4 	movi	r2,31
    afc4:	1205c83a 	sub	r2,r2,r8
    afc8:	1886983a 	sll	r3,r3,r2
    afcc:	3208d83a 	srl	r4,r6,r8
    afd0:	1908b03a 	or	r4,r3,r4
    afd4:	003ff206 	br	afa0 <__fixdfsi+0xa0>

0000afd8 <__floatunsidf>:
    afd8:	defff204 	addi	sp,sp,-56
    afdc:	dfc00d15 	stw	ra,52(sp)
    afe0:	ddc00c15 	stw	r23,48(sp)
    afe4:	dd800b15 	stw	r22,44(sp)
    afe8:	dd400a15 	stw	r21,40(sp)
    afec:	dd000915 	stw	r20,36(sp)
    aff0:	dcc00815 	stw	r19,32(sp)
    aff4:	dc800715 	stw	r18,28(sp)
    aff8:	dc400615 	stw	r17,24(sp)
    affc:	dc000515 	stw	r16,20(sp)
    b000:	d8000115 	stw	zero,4(sp)
    b004:	20000f1e 	bne	r4,zero,b044 <__floatunsidf+0x6c>
    b008:	00800084 	movi	r2,2
    b00c:	d8800015 	stw	r2,0(sp)
    b010:	d809883a 	mov	r4,sp
    b014:	000b2840 	call	b284 <__pack_d>
    b018:	dfc00d17 	ldw	ra,52(sp)
    b01c:	ddc00c17 	ldw	r23,48(sp)
    b020:	dd800b17 	ldw	r22,44(sp)
    b024:	dd400a17 	ldw	r21,40(sp)
    b028:	dd000917 	ldw	r20,36(sp)
    b02c:	dcc00817 	ldw	r19,32(sp)
    b030:	dc800717 	ldw	r18,28(sp)
    b034:	dc400617 	ldw	r17,24(sp)
    b038:	dc000517 	ldw	r16,20(sp)
    b03c:	dec00e04 	addi	sp,sp,56
    b040:	f800283a 	ret
    b044:	008000c4 	movi	r2,3
    b048:	00c00f04 	movi	r3,60
    b04c:	002f883a 	mov	r23,zero
    b050:	202d883a 	mov	r22,r4
    b054:	d8800015 	stw	r2,0(sp)
    b058:	d8c00215 	stw	r3,8(sp)
    b05c:	d9000315 	stw	r4,12(sp)
    b060:	ddc00415 	stw	r23,16(sp)
    b064:	000b2040 	call	b204 <__clzsi2>
    b068:	12400744 	addi	r9,r2,29
    b06c:	48000b16 	blt	r9,zero,b09c <__floatunsidf+0xc4>
    b070:	483fe726 	beq	r9,zero,b010 <__floatunsidf+0x38>
    b074:	10bfff44 	addi	r2,r2,-3
    b078:	10002e16 	blt	r2,zero,b134 <__floatunsidf+0x15c>
    b07c:	b0a2983a 	sll	r17,r22,r2
    b080:	0021883a 	mov	r16,zero
    b084:	d8800217 	ldw	r2,8(sp)
    b088:	dc400415 	stw	r17,16(sp)
    b08c:	dc000315 	stw	r16,12(sp)
    b090:	1245c83a 	sub	r2,r2,r9
    b094:	d8800215 	stw	r2,8(sp)
    b098:	003fdd06 	br	b010 <__floatunsidf+0x38>
    b09c:	0255c83a 	sub	r10,zero,r9
    b0a0:	51bff804 	addi	r6,r10,-32
    b0a4:	30001b16 	blt	r6,zero,b114 <__floatunsidf+0x13c>
    b0a8:	b9a8d83a 	srl	r20,r23,r6
    b0ac:	002b883a 	mov	r21,zero
    b0b0:	000f883a 	mov	r7,zero
    b0b4:	01000044 	movi	r4,1
    b0b8:	0011883a 	mov	r8,zero
    b0bc:	30002516 	blt	r6,zero,b154 <__floatunsidf+0x17c>
    b0c0:	21a6983a 	sll	r19,r4,r6
    b0c4:	0025883a 	mov	r18,zero
    b0c8:	00bfffc4 	movi	r2,-1
    b0cc:	9089883a 	add	r4,r18,r2
    b0d0:	988b883a 	add	r5,r19,r2
    b0d4:	248d803a 	cmpltu	r6,r4,r18
    b0d8:	314b883a 	add	r5,r6,r5
    b0dc:	b104703a 	and	r2,r22,r4
    b0e0:	b946703a 	and	r3,r23,r5
    b0e4:	10c4b03a 	or	r2,r2,r3
    b0e8:	10000226 	beq	r2,zero,b0f4 <__floatunsidf+0x11c>
    b0ec:	01c00044 	movi	r7,1
    b0f0:	0011883a 	mov	r8,zero
    b0f4:	d9000217 	ldw	r4,8(sp)
    b0f8:	a1c4b03a 	or	r2,r20,r7
    b0fc:	aa06b03a 	or	r3,r21,r8
    b100:	2249c83a 	sub	r4,r4,r9
    b104:	d8c00415 	stw	r3,16(sp)
    b108:	d9000215 	stw	r4,8(sp)
    b10c:	d8800315 	stw	r2,12(sp)
    b110:	003fbf06 	br	b010 <__floatunsidf+0x38>
    b114:	bdc7883a 	add	r3,r23,r23
    b118:	008007c4 	movi	r2,31
    b11c:	1285c83a 	sub	r2,r2,r10
    b120:	1886983a 	sll	r3,r3,r2
    b124:	b2a8d83a 	srl	r20,r22,r10
    b128:	baaad83a 	srl	r21,r23,r10
    b12c:	1d28b03a 	or	r20,r3,r20
    b130:	003fdf06 	br	b0b0 <__floatunsidf+0xd8>
    b134:	b006d07a 	srli	r3,r22,1
    b138:	008007c4 	movi	r2,31
    b13c:	1245c83a 	sub	r2,r2,r9
    b140:	1886d83a 	srl	r3,r3,r2
    b144:	ba62983a 	sll	r17,r23,r9
    b148:	b260983a 	sll	r16,r22,r9
    b14c:	1c62b03a 	or	r17,r3,r17
    b150:	003fcc06 	br	b084 <__floatunsidf+0xac>
    b154:	2006d07a 	srli	r3,r4,1
    b158:	008007c4 	movi	r2,31
    b15c:	1285c83a 	sub	r2,r2,r10
    b160:	18a6d83a 	srl	r19,r3,r2
    b164:	22a4983a 	sll	r18,r4,r10
    b168:	003fd706 	br	b0c8 <__floatunsidf+0xf0>

0000b16c <__muldi3>:
    b16c:	2011883a 	mov	r8,r4
    b170:	427fffcc 	andi	r9,r8,65535
    b174:	4018d43a 	srli	r12,r8,16
    b178:	32bfffcc 	andi	r10,r6,65535
    b17c:	3016d43a 	srli	r11,r6,16
    b180:	4a85383a 	mul	r2,r9,r10
    b184:	6295383a 	mul	r10,r12,r10
    b188:	4ad3383a 	mul	r9,r9,r11
    b18c:	113fffcc 	andi	r4,r2,65535
    b190:	1004d43a 	srli	r2,r2,16
    b194:	4a93883a 	add	r9,r9,r10
    b198:	3807883a 	mov	r3,r7
    b19c:	1245883a 	add	r2,r2,r9
    b1a0:	280f883a 	mov	r7,r5
    b1a4:	180b883a 	mov	r5,r3
    b1a8:	1006943a 	slli	r3,r2,16
    b1ac:	defffd04 	addi	sp,sp,-12
    b1b0:	dc800215 	stw	r18,8(sp)
    b1b4:	1907883a 	add	r3,r3,r4
    b1b8:	dc400115 	stw	r17,4(sp)
    b1bc:	dc000015 	stw	r16,0(sp)
    b1c0:	4165383a 	mul	r18,r8,r5
    b1c4:	31e3383a 	mul	r17,r6,r7
    b1c8:	1012d43a 	srli	r9,r2,16
    b1cc:	62d9383a 	mul	r12,r12,r11
    b1d0:	181f883a 	mov	r15,r3
    b1d4:	1280022e 	bgeu	r2,r10,b1e0 <__muldi3+0x74>
    b1d8:	00800074 	movhi	r2,1
    b1dc:	6099883a 	add	r12,r12,r2
    b1e0:	624d883a 	add	r6,r12,r9
    b1e4:	9187883a 	add	r3,r18,r6
    b1e8:	88c7883a 	add	r3,r17,r3
    b1ec:	7805883a 	mov	r2,r15
    b1f0:	dc800217 	ldw	r18,8(sp)
    b1f4:	dc400117 	ldw	r17,4(sp)
    b1f8:	dc000017 	ldw	r16,0(sp)
    b1fc:	dec00304 	addi	sp,sp,12
    b200:	f800283a 	ret

0000b204 <__clzsi2>:
    b204:	00bfffd4 	movui	r2,65535
    b208:	11000e36 	bltu	r2,r4,b244 <__clzsi2+0x40>
    b20c:	00803fc4 	movi	r2,255
    b210:	01400204 	movi	r5,8
    b214:	0007883a 	mov	r3,zero
    b218:	11001036 	bltu	r2,r4,b25c <__clzsi2+0x58>
    b21c:	000b883a 	mov	r5,zero
    b220:	20c6d83a 	srl	r3,r4,r3
    b224:	00800074 	movhi	r2,1
    b228:	10b9df04 	addi	r2,r2,-6276
    b22c:	1887883a 	add	r3,r3,r2
    b230:	18800003 	ldbu	r2,0(r3)
    b234:	00c00804 	movi	r3,32
    b238:	2885883a 	add	r2,r5,r2
    b23c:	1885c83a 	sub	r2,r3,r2
    b240:	f800283a 	ret
    b244:	01400404 	movi	r5,16
    b248:	00804034 	movhi	r2,256
    b24c:	10bfffc4 	addi	r2,r2,-1
    b250:	2807883a 	mov	r3,r5
    b254:	113ff22e 	bgeu	r2,r4,b220 <__clzsi2+0x1c>
    b258:	01400604 	movi	r5,24
    b25c:	2807883a 	mov	r3,r5
    b260:	20c6d83a 	srl	r3,r4,r3
    b264:	00800074 	movhi	r2,1
    b268:	10b9df04 	addi	r2,r2,-6276
    b26c:	1887883a 	add	r3,r3,r2
    b270:	18800003 	ldbu	r2,0(r3)
    b274:	00c00804 	movi	r3,32
    b278:	2885883a 	add	r2,r5,r2
    b27c:	1885c83a 	sub	r2,r3,r2
    b280:	f800283a 	ret

0000b284 <__pack_d>:
    b284:	20c00017 	ldw	r3,0(r4)
    b288:	defffd04 	addi	sp,sp,-12
    b28c:	dc000015 	stw	r16,0(sp)
    b290:	dc800215 	stw	r18,8(sp)
    b294:	dc400115 	stw	r17,4(sp)
    b298:	00800044 	movi	r2,1
    b29c:	22000317 	ldw	r8,12(r4)
    b2a0:	001f883a 	mov	r15,zero
    b2a4:	22400417 	ldw	r9,16(r4)
    b2a8:	24000117 	ldw	r16,4(r4)
    b2ac:	10c0552e 	bgeu	r2,r3,b404 <__pack_d+0x180>
    b2b0:	00800104 	movi	r2,4
    b2b4:	18804f26 	beq	r3,r2,b3f4 <__pack_d+0x170>
    b2b8:	00800084 	movi	r2,2
    b2bc:	18800226 	beq	r3,r2,b2c8 <__pack_d+0x44>
    b2c0:	4244b03a 	or	r2,r8,r9
    b2c4:	10001a1e 	bne	r2,zero,b330 <__pack_d+0xac>
    b2c8:	000d883a 	mov	r6,zero
    b2cc:	000f883a 	mov	r7,zero
    b2d0:	0011883a 	mov	r8,zero
    b2d4:	00800434 	movhi	r2,16
    b2d8:	10bfffc4 	addi	r2,r2,-1
    b2dc:	301d883a 	mov	r14,r6
    b2e0:	3884703a 	and	r2,r7,r2
    b2e4:	400a953a 	slli	r5,r8,20
    b2e8:	79bffc2c 	andhi	r6,r15,65520
    b2ec:	308cb03a 	or	r6,r6,r2
    b2f0:	00e00434 	movhi	r3,32784
    b2f4:	18ffffc4 	addi	r3,r3,-1
    b2f8:	800497fa 	slli	r2,r16,31
    b2fc:	30c6703a 	and	r3,r6,r3
    b300:	1946b03a 	or	r3,r3,r5
    b304:	01600034 	movhi	r5,32768
    b308:	297fffc4 	addi	r5,r5,-1
    b30c:	194a703a 	and	r5,r3,r5
    b310:	288ab03a 	or	r5,r5,r2
    b314:	2807883a 	mov	r3,r5
    b318:	7005883a 	mov	r2,r14
    b31c:	dc800217 	ldw	r18,8(sp)
    b320:	dc400117 	ldw	r17,4(sp)
    b324:	dc000017 	ldw	r16,0(sp)
    b328:	dec00304 	addi	sp,sp,12
    b32c:	f800283a 	ret
    b330:	21000217 	ldw	r4,8(r4)
    b334:	00bf0084 	movi	r2,-1022
    b338:	20803f16 	blt	r4,r2,b438 <__pack_d+0x1b4>
    b33c:	0080ffc4 	movi	r2,1023
    b340:	11002c16 	blt	r2,r4,b3f4 <__pack_d+0x170>
    b344:	00803fc4 	movi	r2,255
    b348:	408c703a 	and	r6,r8,r2
    b34c:	00802004 	movi	r2,128
    b350:	0007883a 	mov	r3,zero
    b354:	000f883a 	mov	r7,zero
    b358:	2280ffc4 	addi	r10,r4,1023
    b35c:	30801e26 	beq	r6,r2,b3d8 <__pack_d+0x154>
    b360:	00801fc4 	movi	r2,127
    b364:	4089883a 	add	r4,r8,r2
    b368:	220d803a 	cmpltu	r6,r4,r8
    b36c:	324d883a 	add	r6,r6,r9
    b370:	2011883a 	mov	r8,r4
    b374:	3013883a 	mov	r9,r6
    b378:	00880034 	movhi	r2,8192
    b37c:	10bfffc4 	addi	r2,r2,-1
    b380:	12400d36 	bltu	r2,r9,b3b8 <__pack_d+0x134>
    b384:	4804963a 	slli	r2,r9,24
    b388:	400cd23a 	srli	r6,r8,8
    b38c:	480ed23a 	srli	r7,r9,8
    b390:	013fffc4 	movi	r4,-1
    b394:	118cb03a 	or	r6,r2,r6
    b398:	01400434 	movhi	r5,16
    b39c:	297fffc4 	addi	r5,r5,-1
    b3a0:	3104703a 	and	r2,r6,r4
    b3a4:	3946703a 	and	r3,r7,r5
    b3a8:	5201ffcc 	andi	r8,r10,2047
    b3ac:	100d883a 	mov	r6,r2
    b3b0:	180f883a 	mov	r7,r3
    b3b4:	003fc706 	br	b2d4 <__pack_d+0x50>
    b3b8:	480897fa 	slli	r4,r9,31
    b3bc:	4004d07a 	srli	r2,r8,1
    b3c0:	4806d07a 	srli	r3,r9,1
    b3c4:	52800044 	addi	r10,r10,1
    b3c8:	2084b03a 	or	r2,r4,r2
    b3cc:	1011883a 	mov	r8,r2
    b3d0:	1813883a 	mov	r9,r3
    b3d4:	003feb06 	br	b384 <__pack_d+0x100>
    b3d8:	383fe11e 	bne	r7,zero,b360 <__pack_d+0xdc>
    b3dc:	01004004 	movi	r4,256
    b3e0:	4104703a 	and	r2,r8,r4
    b3e4:	10c4b03a 	or	r2,r2,r3
    b3e8:	103fe326 	beq	r2,zero,b378 <__pack_d+0xf4>
    b3ec:	3005883a 	mov	r2,r6
    b3f0:	003fdc06 	br	b364 <__pack_d+0xe0>
    b3f4:	000d883a 	mov	r6,zero
    b3f8:	000f883a 	mov	r7,zero
    b3fc:	0201ffc4 	movi	r8,2047
    b400:	003fb406 	br	b2d4 <__pack_d+0x50>
    b404:	0005883a 	mov	r2,zero
    b408:	00c00234 	movhi	r3,8
    b40c:	408cb03a 	or	r6,r8,r2
    b410:	48ceb03a 	or	r7,r9,r3
    b414:	013fffc4 	movi	r4,-1
    b418:	01400434 	movhi	r5,16
    b41c:	297fffc4 	addi	r5,r5,-1
    b420:	3104703a 	and	r2,r6,r4
    b424:	3946703a 	and	r3,r7,r5
    b428:	100d883a 	mov	r6,r2
    b42c:	180f883a 	mov	r7,r3
    b430:	0201ffc4 	movi	r8,2047
    b434:	003fa706 	br	b2d4 <__pack_d+0x50>
    b438:	1109c83a 	sub	r4,r2,r4
    b43c:	00800e04 	movi	r2,56
    b440:	11004316 	blt	r2,r4,b550 <__pack_d+0x2cc>
    b444:	21fff804 	addi	r7,r4,-32
    b448:	38004516 	blt	r7,zero,b560 <__pack_d+0x2dc>
    b44c:	49d8d83a 	srl	r12,r9,r7
    b450:	001b883a 	mov	r13,zero
    b454:	0023883a 	mov	r17,zero
    b458:	01400044 	movi	r5,1
    b45c:	0025883a 	mov	r18,zero
    b460:	38004716 	blt	r7,zero,b580 <__pack_d+0x2fc>
    b464:	29d6983a 	sll	r11,r5,r7
    b468:	0015883a 	mov	r10,zero
    b46c:	00bfffc4 	movi	r2,-1
    b470:	5089883a 	add	r4,r10,r2
    b474:	588b883a 	add	r5,r11,r2
    b478:	228d803a 	cmpltu	r6,r4,r10
    b47c:	314b883a 	add	r5,r6,r5
    b480:	4104703a 	and	r2,r8,r4
    b484:	4946703a 	and	r3,r9,r5
    b488:	10c4b03a 	or	r2,r2,r3
    b48c:	10000226 	beq	r2,zero,b498 <__pack_d+0x214>
    b490:	04400044 	movi	r17,1
    b494:	0025883a 	mov	r18,zero
    b498:	00803fc4 	movi	r2,255
    b49c:	644eb03a 	or	r7,r12,r17
    b4a0:	3892703a 	and	r9,r7,r2
    b4a4:	00802004 	movi	r2,128
    b4a8:	6c90b03a 	or	r8,r13,r18
    b4ac:	0015883a 	mov	r10,zero
    b4b0:	48801626 	beq	r9,r2,b50c <__pack_d+0x288>
    b4b4:	01001fc4 	movi	r4,127
    b4b8:	3905883a 	add	r2,r7,r4
    b4bc:	11cd803a 	cmpltu	r6,r2,r7
    b4c0:	320d883a 	add	r6,r6,r8
    b4c4:	100f883a 	mov	r7,r2
    b4c8:	00840034 	movhi	r2,4096
    b4cc:	10bfffc4 	addi	r2,r2,-1
    b4d0:	3011883a 	mov	r8,r6
    b4d4:	0007883a 	mov	r3,zero
    b4d8:	11801b36 	bltu	r2,r6,b548 <__pack_d+0x2c4>
    b4dc:	4004963a 	slli	r2,r8,24
    b4e0:	3808d23a 	srli	r4,r7,8
    b4e4:	400ad23a 	srli	r5,r8,8
    b4e8:	1813883a 	mov	r9,r3
    b4ec:	1108b03a 	or	r4,r2,r4
    b4f0:	00bfffc4 	movi	r2,-1
    b4f4:	00c00434 	movhi	r3,16
    b4f8:	18ffffc4 	addi	r3,r3,-1
    b4fc:	208c703a 	and	r6,r4,r2
    b500:	28ce703a 	and	r7,r5,r3
    b504:	4a01ffcc 	andi	r8,r9,2047
    b508:	003f7206 	br	b2d4 <__pack_d+0x50>
    b50c:	503fe91e 	bne	r10,zero,b4b4 <__pack_d+0x230>
    b510:	01004004 	movi	r4,256
    b514:	3904703a 	and	r2,r7,r4
    b518:	0007883a 	mov	r3,zero
    b51c:	10c4b03a 	or	r2,r2,r3
    b520:	10000626 	beq	r2,zero,b53c <__pack_d+0x2b8>
    b524:	3a45883a 	add	r2,r7,r9
    b528:	11cd803a 	cmpltu	r6,r2,r7
    b52c:	320d883a 	add	r6,r6,r8
    b530:	100f883a 	mov	r7,r2
    b534:	3011883a 	mov	r8,r6
    b538:	0007883a 	mov	r3,zero
    b53c:	00840034 	movhi	r2,4096
    b540:	10bfffc4 	addi	r2,r2,-1
    b544:	123fe52e 	bgeu	r2,r8,b4dc <__pack_d+0x258>
    b548:	00c00044 	movi	r3,1
    b54c:	003fe306 	br	b4dc <__pack_d+0x258>
    b550:	0009883a 	mov	r4,zero
    b554:	0013883a 	mov	r9,zero
    b558:	000b883a 	mov	r5,zero
    b55c:	003fe406 	br	b4f0 <__pack_d+0x26c>
    b560:	4a47883a 	add	r3,r9,r9
    b564:	008007c4 	movi	r2,31
    b568:	1105c83a 	sub	r2,r2,r4
    b56c:	1886983a 	sll	r3,r3,r2
    b570:	4118d83a 	srl	r12,r8,r4
    b574:	491ad83a 	srl	r13,r9,r4
    b578:	1b18b03a 	or	r12,r3,r12
    b57c:	003fb506 	br	b454 <__pack_d+0x1d0>
    b580:	2806d07a 	srli	r3,r5,1
    b584:	008007c4 	movi	r2,31
    b588:	1105c83a 	sub	r2,r2,r4
    b58c:	1896d83a 	srl	r11,r3,r2
    b590:	2914983a 	sll	r10,r5,r4
    b594:	003fb506 	br	b46c <__pack_d+0x1e8>

0000b598 <__unpack_d>:
    b598:	20c00117 	ldw	r3,4(r4)
    b59c:	22400017 	ldw	r9,0(r4)
    b5a0:	00800434 	movhi	r2,16
    b5a4:	10bfffc4 	addi	r2,r2,-1
    b5a8:	1808d53a 	srli	r4,r3,20
    b5ac:	180cd7fa 	srli	r6,r3,31
    b5b0:	1894703a 	and	r10,r3,r2
    b5b4:	2201ffcc 	andi	r8,r4,2047
    b5b8:	281b883a 	mov	r13,r5
    b5bc:	4817883a 	mov	r11,r9
    b5c0:	29800115 	stw	r6,4(r5)
    b5c4:	5019883a 	mov	r12,r10
    b5c8:	40001e1e 	bne	r8,zero,b644 <__unpack_d+0xac>
    b5cc:	4a84b03a 	or	r2,r9,r10
    b5d0:	10001926 	beq	r2,zero,b638 <__unpack_d+0xa0>
    b5d4:	4804d63a 	srli	r2,r9,24
    b5d8:	500c923a 	slli	r6,r10,8
    b5dc:	013f0084 	movi	r4,-1022
    b5e0:	00c40034 	movhi	r3,4096
    b5e4:	18ffffc4 	addi	r3,r3,-1
    b5e8:	118cb03a 	or	r6,r2,r6
    b5ec:	008000c4 	movi	r2,3
    b5f0:	480a923a 	slli	r5,r9,8
    b5f4:	68800015 	stw	r2,0(r13)
    b5f8:	69000215 	stw	r4,8(r13)
    b5fc:	19800b36 	bltu	r3,r6,b62c <__unpack_d+0x94>
    b600:	200f883a 	mov	r7,r4
    b604:	1811883a 	mov	r8,r3
    b608:	2945883a 	add	r2,r5,r5
    b60c:	1149803a 	cmpltu	r4,r2,r5
    b610:	3187883a 	add	r3,r6,r6
    b614:	20c9883a 	add	r4,r4,r3
    b618:	100b883a 	mov	r5,r2
    b61c:	200d883a 	mov	r6,r4
    b620:	39ffffc4 	addi	r7,r7,-1
    b624:	413ff82e 	bgeu	r8,r4,b608 <__unpack_d+0x70>
    b628:	69c00215 	stw	r7,8(r13)
    b62c:	69800415 	stw	r6,16(r13)
    b630:	69400315 	stw	r5,12(r13)
    b634:	f800283a 	ret
    b638:	00800084 	movi	r2,2
    b63c:	28800015 	stw	r2,0(r5)
    b640:	f800283a 	ret
    b644:	0081ffc4 	movi	r2,2047
    b648:	40800f26 	beq	r8,r2,b688 <__unpack_d+0xf0>
    b64c:	480cd63a 	srli	r6,r9,24
    b650:	5006923a 	slli	r3,r10,8
    b654:	4804923a 	slli	r2,r9,8
    b658:	0009883a 	mov	r4,zero
    b65c:	30c6b03a 	or	r3,r6,r3
    b660:	01440034 	movhi	r5,4096
    b664:	110cb03a 	or	r6,r2,r4
    b668:	423f0044 	addi	r8,r8,-1023
    b66c:	194eb03a 	or	r7,r3,r5
    b670:	008000c4 	movi	r2,3
    b674:	69c00415 	stw	r7,16(r13)
    b678:	6a000215 	stw	r8,8(r13)
    b67c:	68800015 	stw	r2,0(r13)
    b680:	69800315 	stw	r6,12(r13)
    b684:	f800283a 	ret
    b688:	4a84b03a 	or	r2,r9,r10
    b68c:	1000031e 	bne	r2,zero,b69c <__unpack_d+0x104>
    b690:	00800104 	movi	r2,4
    b694:	28800015 	stw	r2,0(r5)
    b698:	f800283a 	ret
    b69c:	0009883a 	mov	r4,zero
    b6a0:	01400234 	movhi	r5,8
    b6a4:	4904703a 	and	r2,r9,r4
    b6a8:	5146703a 	and	r3,r10,r5
    b6ac:	10c4b03a 	or	r2,r2,r3
    b6b0:	10000526 	beq	r2,zero,b6c8 <__unpack_d+0x130>
    b6b4:	00800044 	movi	r2,1
    b6b8:	68800015 	stw	r2,0(r13)
    b6bc:	6b000415 	stw	r12,16(r13)
    b6c0:	6ac00315 	stw	r11,12(r13)
    b6c4:	f800283a 	ret
    b6c8:	68000015 	stw	zero,0(r13)
    b6cc:	003ffb06 	br	b6bc <__unpack_d+0x124>

0000b6d0 <__fpcmp_parts_d>:
    b6d0:	21800017 	ldw	r6,0(r4)
    b6d4:	00c00044 	movi	r3,1
    b6d8:	19800a2e 	bgeu	r3,r6,b704 <__fpcmp_parts_d+0x34>
    b6dc:	28800017 	ldw	r2,0(r5)
    b6e0:	1880082e 	bgeu	r3,r2,b704 <__fpcmp_parts_d+0x34>
    b6e4:	00c00104 	movi	r3,4
    b6e8:	30c02626 	beq	r6,r3,b784 <__fpcmp_parts_d+0xb4>
    b6ec:	10c02226 	beq	r2,r3,b778 <__fpcmp_parts_d+0xa8>
    b6f0:	00c00084 	movi	r3,2
    b6f4:	30c00526 	beq	r6,r3,b70c <__fpcmp_parts_d+0x3c>
    b6f8:	10c0071e 	bne	r2,r3,b718 <__fpcmp_parts_d+0x48>
    b6fc:	20800117 	ldw	r2,4(r4)
    b700:	1000091e 	bne	r2,zero,b728 <__fpcmp_parts_d+0x58>
    b704:	00800044 	movi	r2,1
    b708:	f800283a 	ret
    b70c:	10c01a1e 	bne	r2,r3,b778 <__fpcmp_parts_d+0xa8>
    b710:	0005883a 	mov	r2,zero
    b714:	f800283a 	ret
    b718:	22000117 	ldw	r8,4(r4)
    b71c:	28800117 	ldw	r2,4(r5)
    b720:	40800326 	beq	r8,r2,b730 <__fpcmp_parts_d+0x60>
    b724:	403ff726 	beq	r8,zero,b704 <__fpcmp_parts_d+0x34>
    b728:	00bfffc4 	movi	r2,-1
    b72c:	f800283a 	ret
    b730:	20c00217 	ldw	r3,8(r4)
    b734:	28800217 	ldw	r2,8(r5)
    b738:	10fffa16 	blt	r2,r3,b724 <__fpcmp_parts_d+0x54>
    b73c:	18800916 	blt	r3,r2,b764 <__fpcmp_parts_d+0x94>
    b740:	21c00417 	ldw	r7,16(r4)
    b744:	28c00417 	ldw	r3,16(r5)
    b748:	21800317 	ldw	r6,12(r4)
    b74c:	28800317 	ldw	r2,12(r5)
    b750:	19fff436 	bltu	r3,r7,b724 <__fpcmp_parts_d+0x54>
    b754:	38c00526 	beq	r7,r3,b76c <__fpcmp_parts_d+0x9c>
    b758:	38c00236 	bltu	r7,r3,b764 <__fpcmp_parts_d+0x94>
    b75c:	19ffec1e 	bne	r3,r7,b710 <__fpcmp_parts_d+0x40>
    b760:	30bfeb2e 	bgeu	r6,r2,b710 <__fpcmp_parts_d+0x40>
    b764:	403fe71e 	bne	r8,zero,b704 <__fpcmp_parts_d+0x34>
    b768:	003fef06 	br	b728 <__fpcmp_parts_d+0x58>
    b76c:	11bffa2e 	bgeu	r2,r6,b758 <__fpcmp_parts_d+0x88>
    b770:	403fe426 	beq	r8,zero,b704 <__fpcmp_parts_d+0x34>
    b774:	003fec06 	br	b728 <__fpcmp_parts_d+0x58>
    b778:	28800117 	ldw	r2,4(r5)
    b77c:	103fe11e 	bne	r2,zero,b704 <__fpcmp_parts_d+0x34>
    b780:	003fe906 	br	b728 <__fpcmp_parts_d+0x58>
    b784:	11bfdd1e 	bne	r2,r6,b6fc <__fpcmp_parts_d+0x2c>
    b788:	28c00117 	ldw	r3,4(r5)
    b78c:	20800117 	ldw	r2,4(r4)
    b790:	1885c83a 	sub	r2,r3,r2
    b794:	f800283a 	ret

0000b798 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b798:	defff804 	addi	sp,sp,-32
    b79c:	dfc00715 	stw	ra,28(sp)
    b7a0:	df000615 	stw	fp,24(sp)
    b7a4:	df000604 	addi	fp,sp,24
    b7a8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b7ac:	e0bffc17 	ldw	r2,-16(fp)
    b7b0:	1004803a 	cmplt	r2,r2,zero
    b7b4:	1000081e 	bne	r2,zero,b7d8 <close+0x40>
    b7b8:	e0bffc17 	ldw	r2,-16(fp)
    b7bc:	10800324 	muli	r2,r2,12
    b7c0:	1007883a 	mov	r3,r2
    b7c4:	00800074 	movhi	r2,1
    b7c8:	10bc4904 	addi	r2,r2,-3804
    b7cc:	1887883a 	add	r3,r3,r2
    b7d0:	e0ffff15 	stw	r3,-4(fp)
    b7d4:	00000106 	br	b7dc <close+0x44>
    b7d8:	e03fff15 	stw	zero,-4(fp)
    b7dc:	e0bfff17 	ldw	r2,-4(fp)
    b7e0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    b7e4:	e0bffb17 	ldw	r2,-20(fp)
    b7e8:	1005003a 	cmpeq	r2,r2,zero
    b7ec:	10001d1e 	bne	r2,zero,b864 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b7f0:	e0bffb17 	ldw	r2,-20(fp)
    b7f4:	10800017 	ldw	r2,0(r2)
    b7f8:	10800417 	ldw	r2,16(r2)
    b7fc:	1005003a 	cmpeq	r2,r2,zero
    b800:	1000071e 	bne	r2,zero,b820 <close+0x88>
    b804:	e0bffb17 	ldw	r2,-20(fp)
    b808:	10800017 	ldw	r2,0(r2)
    b80c:	10800417 	ldw	r2,16(r2)
    b810:	e13ffb17 	ldw	r4,-20(fp)
    b814:	103ee83a 	callr	r2
    b818:	e0bffe15 	stw	r2,-8(fp)
    b81c:	00000106 	br	b824 <close+0x8c>
    b820:	e03ffe15 	stw	zero,-8(fp)
    b824:	e0bffe17 	ldw	r2,-8(fp)
    b828:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b82c:	e13ffc17 	ldw	r4,-16(fp)
    b830:	000c1fc0 	call	c1fc <alt_release_fd>
    if (rval < 0)
    b834:	e0bffa17 	ldw	r2,-24(fp)
    b838:	1004403a 	cmpge	r2,r2,zero
    b83c:	1000071e 	bne	r2,zero,b85c <close+0xc4>
    {
      ALT_ERRNO = -rval;
    b840:	000b8940 	call	b894 <alt_get_errno>
    b844:	e0fffa17 	ldw	r3,-24(fp)
    b848:	00c7c83a 	sub	r3,zero,r3
    b84c:	10c00015 	stw	r3,0(r2)
      return -1;
    b850:	00bfffc4 	movi	r2,-1
    b854:	e0bffd15 	stw	r2,-12(fp)
    b858:	00000806 	br	b87c <close+0xe4>
    }
    return 0;
    b85c:	e03ffd15 	stw	zero,-12(fp)
    b860:	00000606 	br	b87c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b864:	000b8940 	call	b894 <alt_get_errno>
    b868:	1007883a 	mov	r3,r2
    b86c:	00801444 	movi	r2,81
    b870:	18800015 	stw	r2,0(r3)
    return -1;
    b874:	00bfffc4 	movi	r2,-1
    b878:	e0bffd15 	stw	r2,-12(fp)
    b87c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    b880:	e037883a 	mov	sp,fp
    b884:	dfc00117 	ldw	ra,4(sp)
    b888:	df000017 	ldw	fp,0(sp)
    b88c:	dec00204 	addi	sp,sp,8
    b890:	f800283a 	ret

0000b894 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b894:	defffd04 	addi	sp,sp,-12
    b898:	dfc00215 	stw	ra,8(sp)
    b89c:	df000115 	stw	fp,4(sp)
    b8a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b8a4:	00800074 	movhi	r2,1
    b8a8:	1080cd04 	addi	r2,r2,820
    b8ac:	10800017 	ldw	r2,0(r2)
    b8b0:	1005003a 	cmpeq	r2,r2,zero
    b8b4:	1000061e 	bne	r2,zero,b8d0 <alt_get_errno+0x3c>
    b8b8:	00800074 	movhi	r2,1
    b8bc:	1080cd04 	addi	r2,r2,820
    b8c0:	10800017 	ldw	r2,0(r2)
    b8c4:	103ee83a 	callr	r2
    b8c8:	e0bfff15 	stw	r2,-4(fp)
    b8cc:	00000306 	br	b8dc <alt_get_errno+0x48>
    b8d0:	00800074 	movhi	r2,1
    b8d4:	10878604 	addi	r2,r2,7704
    b8d8:	e0bfff15 	stw	r2,-4(fp)
    b8dc:	e0bfff17 	ldw	r2,-4(fp)
}
    b8e0:	e037883a 	mov	sp,fp
    b8e4:	dfc00117 	ldw	ra,4(sp)
    b8e8:	df000017 	ldw	fp,0(sp)
    b8ec:	dec00204 	addi	sp,sp,8
    b8f0:	f800283a 	ret

0000b8f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b8f4:	defffc04 	addi	sp,sp,-16
    b8f8:	df000315 	stw	fp,12(sp)
    b8fc:	df000304 	addi	fp,sp,12
    b900:	e13ffd15 	stw	r4,-12(fp)
    b904:	e17ffe15 	stw	r5,-8(fp)
    b908:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b90c:	e0bfff17 	ldw	r2,-4(fp)
}
    b910:	e037883a 	mov	sp,fp
    b914:	df000017 	ldw	fp,0(sp)
    b918:	dec00104 	addi	sp,sp,4
    b91c:	f800283a 	ret

0000b920 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    b920:	defffd04 	addi	sp,sp,-12
    b924:	df000215 	stw	fp,8(sp)
    b928:	df000204 	addi	fp,sp,8
    b92c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    b930:	e0bfff17 	ldw	r2,-4(fp)
    b934:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b938:	e0bffe17 	ldw	r2,-8(fp)
    b93c:	1005003a 	cmpeq	r2,r2,zero
    b940:	1000021e 	bne	r2,zero,b94c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    b944:	002af070 	cmpltui	zero,zero,43969
    b948:	00000106 	br	b950 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    b94c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    b950:	e037883a 	mov	sp,fp
    b954:	df000017 	ldw	fp,0(sp)
    b958:	dec00104 	addi	sp,sp,4
    b95c:	f800283a 	ret

0000b960 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b960:	defffd04 	addi	sp,sp,-12
    b964:	dfc00215 	stw	ra,8(sp)
    b968:	df000115 	stw	fp,4(sp)
    b96c:	df000104 	addi	fp,sp,4
    b970:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    b974:	e13fff17 	ldw	r4,-4(fp)
    b978:	000b9200 	call	b920 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b97c:	003fff06 	br	b97c <_exit+0x1c>

0000b980 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b980:	defff904 	addi	sp,sp,-28
    b984:	dfc00615 	stw	ra,24(sp)
    b988:	df000515 	stw	fp,20(sp)
    b98c:	df000504 	addi	fp,sp,20
    b990:	e13ffc15 	stw	r4,-16(fp)
    b994:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b998:	e0bffc17 	ldw	r2,-16(fp)
    b99c:	1004803a 	cmplt	r2,r2,zero
    b9a0:	1000081e 	bne	r2,zero,b9c4 <fstat+0x44>
    b9a4:	e0bffc17 	ldw	r2,-16(fp)
    b9a8:	10800324 	muli	r2,r2,12
    b9ac:	1007883a 	mov	r3,r2
    b9b0:	00800074 	movhi	r2,1
    b9b4:	10bc4904 	addi	r2,r2,-3804
    b9b8:	1887883a 	add	r3,r3,r2
    b9bc:	e0ffff15 	stw	r3,-4(fp)
    b9c0:	00000106 	br	b9c8 <fstat+0x48>
    b9c4:	e03fff15 	stw	zero,-4(fp)
    b9c8:	e0bfff17 	ldw	r2,-4(fp)
    b9cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b9d0:	e0bffb17 	ldw	r2,-20(fp)
    b9d4:	1005003a 	cmpeq	r2,r2,zero
    b9d8:	1000121e 	bne	r2,zero,ba24 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b9dc:	e0bffb17 	ldw	r2,-20(fp)
    b9e0:	10800017 	ldw	r2,0(r2)
    b9e4:	10800817 	ldw	r2,32(r2)
    b9e8:	1005003a 	cmpeq	r2,r2,zero
    b9ec:	1000081e 	bne	r2,zero,ba10 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    b9f0:	e0bffb17 	ldw	r2,-20(fp)
    b9f4:	10800017 	ldw	r2,0(r2)
    b9f8:	10800817 	ldw	r2,32(r2)
    b9fc:	e13ffb17 	ldw	r4,-20(fp)
    ba00:	e17ffd17 	ldw	r5,-12(fp)
    ba04:	103ee83a 	callr	r2
    ba08:	e0bffe15 	stw	r2,-8(fp)
    ba0c:	00000b06 	br	ba3c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ba10:	e0fffd17 	ldw	r3,-12(fp)
    ba14:	00880004 	movi	r2,8192
    ba18:	18800115 	stw	r2,4(r3)
      return 0;
    ba1c:	e03ffe15 	stw	zero,-8(fp)
    ba20:	00000606 	br	ba3c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ba24:	000ba540 	call	ba54 <alt_get_errno>
    ba28:	1007883a 	mov	r3,r2
    ba2c:	00801444 	movi	r2,81
    ba30:	18800015 	stw	r2,0(r3)
    return -1;
    ba34:	00bfffc4 	movi	r2,-1
    ba38:	e0bffe15 	stw	r2,-8(fp)
    ba3c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    ba40:	e037883a 	mov	sp,fp
    ba44:	dfc00117 	ldw	ra,4(sp)
    ba48:	df000017 	ldw	fp,0(sp)
    ba4c:	dec00204 	addi	sp,sp,8
    ba50:	f800283a 	ret

0000ba54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ba54:	defffd04 	addi	sp,sp,-12
    ba58:	dfc00215 	stw	ra,8(sp)
    ba5c:	df000115 	stw	fp,4(sp)
    ba60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ba64:	00800074 	movhi	r2,1
    ba68:	1080cd04 	addi	r2,r2,820
    ba6c:	10800017 	ldw	r2,0(r2)
    ba70:	1005003a 	cmpeq	r2,r2,zero
    ba74:	1000061e 	bne	r2,zero,ba90 <alt_get_errno+0x3c>
    ba78:	00800074 	movhi	r2,1
    ba7c:	1080cd04 	addi	r2,r2,820
    ba80:	10800017 	ldw	r2,0(r2)
    ba84:	103ee83a 	callr	r2
    ba88:	e0bfff15 	stw	r2,-4(fp)
    ba8c:	00000306 	br	ba9c <alt_get_errno+0x48>
    ba90:	00800074 	movhi	r2,1
    ba94:	10878604 	addi	r2,r2,7704
    ba98:	e0bfff15 	stw	r2,-4(fp)
    ba9c:	e0bfff17 	ldw	r2,-4(fp)
}
    baa0:	e037883a 	mov	sp,fp
    baa4:	dfc00117 	ldw	ra,4(sp)
    baa8:	df000017 	ldw	fp,0(sp)
    baac:	dec00204 	addi	sp,sp,8
    bab0:	f800283a 	ret

0000bab4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    bab4:	deffef04 	addi	sp,sp,-68
    bab8:	df001015 	stw	fp,64(sp)
    babc:	df001004 	addi	fp,sp,64
    bac0:	e13ffc15 	stw	r4,-16(fp)
    bac4:	e17ffd15 	stw	r5,-12(fp)
    bac8:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    bacc:	00bffa84 	movi	r2,-22
    bad0:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    bad4:	e0bffc17 	ldw	r2,-16(fp)
    bad8:	10800828 	cmpgeui	r2,r2,32
    badc:	1000601e 	bne	r2,zero,bc60 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bae0:	0005303a 	rdctl	r2,status
    bae4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bae8:	e0fff917 	ldw	r3,-28(fp)
    baec:	00bfff84 	movi	r2,-2
    baf0:	1884703a 	and	r2,r3,r2
    baf4:	1001703a 	wrctl	status,r2
  
  return context;
    baf8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    bafc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    bb00:	e0bffc17 	ldw	r2,-16(fp)
    bb04:	00c00074 	movhi	r3,1
    bb08:	18c85704 	addi	r3,r3,8540
    bb0c:	100490fa 	slli	r2,r2,3
    bb10:	10c7883a 	add	r3,r2,r3
    bb14:	e0bffe17 	ldw	r2,-8(fp)
    bb18:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    bb1c:	e0bffc17 	ldw	r2,-16(fp)
    bb20:	00c00074 	movhi	r3,1
    bb24:	18c85704 	addi	r3,r3,8540
    bb28:	100490fa 	slli	r2,r2,3
    bb2c:	10c5883a 	add	r2,r2,r3
    bb30:	10c00104 	addi	r3,r2,4
    bb34:	e0bffd17 	ldw	r2,-12(fp)
    bb38:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    bb3c:	e0bffe17 	ldw	r2,-8(fp)
    bb40:	1005003a 	cmpeq	r2,r2,zero
    bb44:	1000201e 	bne	r2,zero,bbc8 <alt_irq_register+0x114>
    bb48:	e0bffc17 	ldw	r2,-16(fp)
    bb4c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb50:	0005303a 	rdctl	r2,status
    bb54:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb58:	e0fff617 	ldw	r3,-40(fp)
    bb5c:	00bfff84 	movi	r2,-2
    bb60:	1884703a 	and	r2,r3,r2
    bb64:	1001703a 	wrctl	status,r2
  
  return context;
    bb68:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bb6c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    bb70:	e0fff717 	ldw	r3,-36(fp)
    bb74:	00800044 	movi	r2,1
    bb78:	10c4983a 	sll	r2,r2,r3
    bb7c:	1007883a 	mov	r3,r2
    bb80:	00800074 	movhi	r2,1
    bb84:	10878a04 	addi	r2,r2,7720
    bb88:	10800017 	ldw	r2,0(r2)
    bb8c:	1886b03a 	or	r3,r3,r2
    bb90:	00800074 	movhi	r2,1
    bb94:	10878a04 	addi	r2,r2,7720
    bb98:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bb9c:	00800074 	movhi	r2,1
    bba0:	10878a04 	addi	r2,r2,7720
    bba4:	10800017 	ldw	r2,0(r2)
    bba8:	100170fa 	wrctl	ienable,r2
    bbac:	e0bff817 	ldw	r2,-32(fp)
    bbb0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bbb4:	e0bff517 	ldw	r2,-44(fp)
    bbb8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bbbc:	0005883a 	mov	r2,zero
    bbc0:	e0bfff15 	stw	r2,-4(fp)
    bbc4:	00002006 	br	bc48 <alt_irq_register+0x194>
    bbc8:	e0bffc17 	ldw	r2,-16(fp)
    bbcc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bbd0:	0005303a 	rdctl	r2,status
    bbd4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bbd8:	e0fff217 	ldw	r3,-56(fp)
    bbdc:	00bfff84 	movi	r2,-2
    bbe0:	1884703a 	and	r2,r3,r2
    bbe4:	1001703a 	wrctl	status,r2
  
  return context;
    bbe8:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bbec:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    bbf0:	e0fff317 	ldw	r3,-52(fp)
    bbf4:	00800044 	movi	r2,1
    bbf8:	10c4983a 	sll	r2,r2,r3
    bbfc:	0084303a 	nor	r2,zero,r2
    bc00:	1007883a 	mov	r3,r2
    bc04:	00800074 	movhi	r2,1
    bc08:	10878a04 	addi	r2,r2,7720
    bc0c:	10800017 	ldw	r2,0(r2)
    bc10:	1886703a 	and	r3,r3,r2
    bc14:	00800074 	movhi	r2,1
    bc18:	10878a04 	addi	r2,r2,7720
    bc1c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bc20:	00800074 	movhi	r2,1
    bc24:	10878a04 	addi	r2,r2,7720
    bc28:	10800017 	ldw	r2,0(r2)
    bc2c:	100170fa 	wrctl	ienable,r2
    bc30:	e0bff417 	ldw	r2,-48(fp)
    bc34:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc38:	e0bff117 	ldw	r2,-60(fp)
    bc3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bc40:	0005883a 	mov	r2,zero
    bc44:	e0bfff15 	stw	r2,-4(fp)
    bc48:	e0bfff17 	ldw	r2,-4(fp)
    bc4c:	e0bffb15 	stw	r2,-20(fp)
    bc50:	e0bffa17 	ldw	r2,-24(fp)
    bc54:	e0bff015 	stw	r2,-64(fp)
    bc58:	e0bff017 	ldw	r2,-64(fp)
    bc5c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    bc60:	e0bffb17 	ldw	r2,-20(fp)
}
    bc64:	e037883a 	mov	sp,fp
    bc68:	df000017 	ldw	fp,0(sp)
    bc6c:	dec00104 	addi	sp,sp,4
    bc70:	f800283a 	ret

0000bc74 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    bc74:	deffeb04 	addi	sp,sp,-84
    bc78:	dfc01415 	stw	ra,80(sp)
    bc7c:	df001315 	stw	fp,76(sp)
    bc80:	df001304 	addi	fp,sp,76
    bc84:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bc88:	e0bffd17 	ldw	r2,-12(fp)
    bc8c:	1004803a 	cmplt	r2,r2,zero
    bc90:	1000081e 	bne	r2,zero,bcb4 <isatty+0x40>
    bc94:	e0bffd17 	ldw	r2,-12(fp)
    bc98:	10800324 	muli	r2,r2,12
    bc9c:	1007883a 	mov	r3,r2
    bca0:	00800074 	movhi	r2,1
    bca4:	10bc4904 	addi	r2,r2,-3804
    bca8:	1887883a 	add	r3,r3,r2
    bcac:	e0ffff15 	stw	r3,-4(fp)
    bcb0:	00000106 	br	bcb8 <isatty+0x44>
    bcb4:	e03fff15 	stw	zero,-4(fp)
    bcb8:	e0bfff17 	ldw	r2,-4(fp)
    bcbc:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    bcc0:	e0bfed17 	ldw	r2,-76(fp)
    bcc4:	1005003a 	cmpeq	r2,r2,zero
    bcc8:	10000f1e 	bne	r2,zero,bd08 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    bccc:	e0bfed17 	ldw	r2,-76(fp)
    bcd0:	10800017 	ldw	r2,0(r2)
    bcd4:	10800817 	ldw	r2,32(r2)
    bcd8:	1004c03a 	cmpne	r2,r2,zero
    bcdc:	1000031e 	bne	r2,zero,bcec <isatty+0x78>
    {
      return 1;
    bce0:	00800044 	movi	r2,1
    bce4:	e0bffe15 	stw	r2,-8(fp)
    bce8:	00000c06 	br	bd1c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    bcec:	e17fee04 	addi	r5,fp,-72
    bcf0:	e13ffd17 	ldw	r4,-12(fp)
    bcf4:	000b9800 	call	b980 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    bcf8:	e0bfef17 	ldw	r2,-68(fp)
    bcfc:	10880020 	cmpeqi	r2,r2,8192
    bd00:	e0bffe15 	stw	r2,-8(fp)
    bd04:	00000506 	br	bd1c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    bd08:	000bd340 	call	bd34 <alt_get_errno>
    bd0c:	1007883a 	mov	r3,r2
    bd10:	00801444 	movi	r2,81
    bd14:	18800015 	stw	r2,0(r3)
    return 0;
    bd18:	e03ffe15 	stw	zero,-8(fp)
    bd1c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    bd20:	e037883a 	mov	sp,fp
    bd24:	dfc00117 	ldw	ra,4(sp)
    bd28:	df000017 	ldw	fp,0(sp)
    bd2c:	dec00204 	addi	sp,sp,8
    bd30:	f800283a 	ret

0000bd34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bd34:	defffd04 	addi	sp,sp,-12
    bd38:	dfc00215 	stw	ra,8(sp)
    bd3c:	df000115 	stw	fp,4(sp)
    bd40:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bd44:	00800074 	movhi	r2,1
    bd48:	1080cd04 	addi	r2,r2,820
    bd4c:	10800017 	ldw	r2,0(r2)
    bd50:	1005003a 	cmpeq	r2,r2,zero
    bd54:	1000061e 	bne	r2,zero,bd70 <alt_get_errno+0x3c>
    bd58:	00800074 	movhi	r2,1
    bd5c:	1080cd04 	addi	r2,r2,820
    bd60:	10800017 	ldw	r2,0(r2)
    bd64:	103ee83a 	callr	r2
    bd68:	e0bfff15 	stw	r2,-4(fp)
    bd6c:	00000306 	br	bd7c <alt_get_errno+0x48>
    bd70:	00800074 	movhi	r2,1
    bd74:	10878604 	addi	r2,r2,7704
    bd78:	e0bfff15 	stw	r2,-4(fp)
    bd7c:	e0bfff17 	ldw	r2,-4(fp)
}
    bd80:	e037883a 	mov	sp,fp
    bd84:	dfc00117 	ldw	ra,4(sp)
    bd88:	df000017 	ldw	fp,0(sp)
    bd8c:	dec00204 	addi	sp,sp,8
    bd90:	f800283a 	ret

0000bd94 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    bd94:	defffe04 	addi	sp,sp,-8
    bd98:	dfc00115 	stw	ra,4(sp)
    bd9c:	df000015 	stw	fp,0(sp)
    bda0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    bda4:	01000074 	movhi	r4,1
    bda8:	2100d204 	addi	r4,r4,840
    bdac:	01400074 	movhi	r5,1
    bdb0:	297a2c04 	addi	r5,r5,-5968
    bdb4:	01800074 	movhi	r6,1
    bdb8:	3180d204 	addi	r6,r6,840
    bdbc:	000be140 	call	be14 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    bdc0:	01000034 	movhi	r4,0
    bdc4:	21000004 	addi	r4,r4,0
    bdc8:	01408034 	movhi	r5,512
    bdcc:	29400804 	addi	r5,r5,32
    bdd0:	01808034 	movhi	r6,512
    bdd4:	31806d04 	addi	r6,r6,436
    bdd8:	000be140 	call	be14 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    bddc:	01000074 	movhi	r4,1
    bde0:	21389004 	addi	r4,r4,-7616
    bde4:	01400074 	movhi	r5,1
    bde8:	29789004 	addi	r5,r5,-7616
    bdec:	01800074 	movhi	r6,1
    bdf0:	31ba2c04 	addi	r6,r6,-5968
    bdf4:	000be140 	call	be14 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    bdf8:	000d2600 	call	d260 <alt_dcache_flush_all>
  alt_icache_flush_all();
    bdfc:	000d4580 	call	d458 <alt_icache_flush_all>
}
    be00:	e037883a 	mov	sp,fp
    be04:	dfc00117 	ldw	ra,4(sp)
    be08:	df000017 	ldw	fp,0(sp)
    be0c:	dec00204 	addi	sp,sp,8
    be10:	f800283a 	ret

0000be14 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    be14:	defffc04 	addi	sp,sp,-16
    be18:	df000315 	stw	fp,12(sp)
    be1c:	df000304 	addi	fp,sp,12
    be20:	e13ffd15 	stw	r4,-12(fp)
    be24:	e17ffe15 	stw	r5,-8(fp)
    be28:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    be2c:	e0fffe17 	ldw	r3,-8(fp)
    be30:	e0bffd17 	ldw	r2,-12(fp)
    be34:	18800e26 	beq	r3,r2,be70 <alt_load_section+0x5c>
  {
    while( to != end )
    be38:	00000a06 	br	be64 <alt_load_section+0x50>
    {
      *to++ = *from++;
    be3c:	e0bffd17 	ldw	r2,-12(fp)
    be40:	10c00017 	ldw	r3,0(r2)
    be44:	e0bffe17 	ldw	r2,-8(fp)
    be48:	10c00015 	stw	r3,0(r2)
    be4c:	e0bffe17 	ldw	r2,-8(fp)
    be50:	10800104 	addi	r2,r2,4
    be54:	e0bffe15 	stw	r2,-8(fp)
    be58:	e0bffd17 	ldw	r2,-12(fp)
    be5c:	10800104 	addi	r2,r2,4
    be60:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    be64:	e0fffe17 	ldw	r3,-8(fp)
    be68:	e0bfff17 	ldw	r2,-4(fp)
    be6c:	18bff31e 	bne	r3,r2,be3c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    be70:	e037883a 	mov	sp,fp
    be74:	df000017 	ldw	fp,0(sp)
    be78:	dec00104 	addi	sp,sp,4
    be7c:	f800283a 	ret

0000be80 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    be80:	defff804 	addi	sp,sp,-32
    be84:	dfc00715 	stw	ra,28(sp)
    be88:	df000615 	stw	fp,24(sp)
    be8c:	df000604 	addi	fp,sp,24
    be90:	e13ffc15 	stw	r4,-16(fp)
    be94:	e17ffd15 	stw	r5,-12(fp)
    be98:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    be9c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bea0:	e0bffc17 	ldw	r2,-16(fp)
    bea4:	1004803a 	cmplt	r2,r2,zero
    bea8:	1000081e 	bne	r2,zero,becc <lseek+0x4c>
    beac:	e0bffc17 	ldw	r2,-16(fp)
    beb0:	10800324 	muli	r2,r2,12
    beb4:	1007883a 	mov	r3,r2
    beb8:	00800074 	movhi	r2,1
    bebc:	10bc4904 	addi	r2,r2,-3804
    bec0:	1887883a 	add	r3,r3,r2
    bec4:	e0ffff15 	stw	r3,-4(fp)
    bec8:	00000106 	br	bed0 <lseek+0x50>
    becc:	e03fff15 	stw	zero,-4(fp)
    bed0:	e0bfff17 	ldw	r2,-4(fp)
    bed4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    bed8:	e0bffb17 	ldw	r2,-20(fp)
    bedc:	1005003a 	cmpeq	r2,r2,zero
    bee0:	1000111e 	bne	r2,zero,bf28 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    bee4:	e0bffb17 	ldw	r2,-20(fp)
    bee8:	10800017 	ldw	r2,0(r2)
    beec:	10800717 	ldw	r2,28(r2)
    bef0:	1005003a 	cmpeq	r2,r2,zero
    bef4:	1000091e 	bne	r2,zero,bf1c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    bef8:	e0bffb17 	ldw	r2,-20(fp)
    befc:	10800017 	ldw	r2,0(r2)
    bf00:	10800717 	ldw	r2,28(r2)
    bf04:	e13ffb17 	ldw	r4,-20(fp)
    bf08:	e17ffd17 	ldw	r5,-12(fp)
    bf0c:	e1bffe17 	ldw	r6,-8(fp)
    bf10:	103ee83a 	callr	r2
    bf14:	e0bffa15 	stw	r2,-24(fp)
    bf18:	00000506 	br	bf30 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    bf1c:	00bfde84 	movi	r2,-134
    bf20:	e0bffa15 	stw	r2,-24(fp)
    bf24:	00000206 	br	bf30 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    bf28:	00bfebc4 	movi	r2,-81
    bf2c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    bf30:	e0bffa17 	ldw	r2,-24(fp)
    bf34:	1004403a 	cmpge	r2,r2,zero
    bf38:	1000071e 	bne	r2,zero,bf58 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    bf3c:	000bf700 	call	bf70 <alt_get_errno>
    bf40:	1007883a 	mov	r3,r2
    bf44:	e0bffa17 	ldw	r2,-24(fp)
    bf48:	0085c83a 	sub	r2,zero,r2
    bf4c:	18800015 	stw	r2,0(r3)
    rc = -1;
    bf50:	00bfffc4 	movi	r2,-1
    bf54:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    bf58:	e0bffa17 	ldw	r2,-24(fp)
}
    bf5c:	e037883a 	mov	sp,fp
    bf60:	dfc00117 	ldw	ra,4(sp)
    bf64:	df000017 	ldw	fp,0(sp)
    bf68:	dec00204 	addi	sp,sp,8
    bf6c:	f800283a 	ret

0000bf70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bf70:	defffd04 	addi	sp,sp,-12
    bf74:	dfc00215 	stw	ra,8(sp)
    bf78:	df000115 	stw	fp,4(sp)
    bf7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bf80:	00800074 	movhi	r2,1
    bf84:	1080cd04 	addi	r2,r2,820
    bf88:	10800017 	ldw	r2,0(r2)
    bf8c:	1005003a 	cmpeq	r2,r2,zero
    bf90:	1000061e 	bne	r2,zero,bfac <alt_get_errno+0x3c>
    bf94:	00800074 	movhi	r2,1
    bf98:	1080cd04 	addi	r2,r2,820
    bf9c:	10800017 	ldw	r2,0(r2)
    bfa0:	103ee83a 	callr	r2
    bfa4:	e0bfff15 	stw	r2,-4(fp)
    bfa8:	00000306 	br	bfb8 <alt_get_errno+0x48>
    bfac:	00800074 	movhi	r2,1
    bfb0:	10878604 	addi	r2,r2,7704
    bfb4:	e0bfff15 	stw	r2,-4(fp)
    bfb8:	e0bfff17 	ldw	r2,-4(fp)
}
    bfbc:	e037883a 	mov	sp,fp
    bfc0:	dfc00117 	ldw	ra,4(sp)
    bfc4:	df000017 	ldw	fp,0(sp)
    bfc8:	dec00204 	addi	sp,sp,8
    bfcc:	f800283a 	ret

0000bfd0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    bfd0:	defffd04 	addi	sp,sp,-12
    bfd4:	dfc00215 	stw	ra,8(sp)
    bfd8:	df000115 	stw	fp,4(sp)
    bfdc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    bfe0:	0009883a 	mov	r4,zero
    bfe4:	000c4980 	call	c498 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    bfe8:	000c4cc0 	call	c4cc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    bfec:	01000074 	movhi	r4,1
    bff0:	213a2204 	addi	r4,r4,-6008
    bff4:	01400074 	movhi	r5,1
    bff8:	297a2204 	addi	r5,r5,-6008
    bffc:	01800074 	movhi	r6,1
    c000:	31ba2204 	addi	r6,r6,-6008
    c004:	000d8180 	call	d818 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    c008:	000d3900 	call	d390 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    c00c:	01000074 	movhi	r4,1
    c010:	2134fd04 	addi	r4,r4,-11276
    c014:	000e0140 	call	e014 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    c018:	d126ca17 	ldw	r4,-25816(gp)
    c01c:	d166cb17 	ldw	r5,-25812(gp)
    c020:	d1a6cc17 	ldw	r6,-25808(gp)
    c024:	0001b800 	call	1b80 <main>
    c028:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    c02c:	01000044 	movi	r4,1
    c030:	000b7980 	call	b798 <close>
  exit (result);
    c034:	e13fff17 	ldw	r4,-4(fp)
    c038:	0001f8c0 	call	1f8c <exit>

0000c03c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    c03c:	defffe04 	addi	sp,sp,-8
    c040:	df000115 	stw	fp,4(sp)
    c044:	df000104 	addi	fp,sp,4
    c048:	e13fff15 	stw	r4,-4(fp)
}
    c04c:	e037883a 	mov	sp,fp
    c050:	df000017 	ldw	fp,0(sp)
    c054:	dec00104 	addi	sp,sp,4
    c058:	f800283a 	ret

0000c05c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    c05c:	defffe04 	addi	sp,sp,-8
    c060:	df000115 	stw	fp,4(sp)
    c064:	df000104 	addi	fp,sp,4
    c068:	e13fff15 	stw	r4,-4(fp)
}
    c06c:	e037883a 	mov	sp,fp
    c070:	df000017 	ldw	fp,0(sp)
    c074:	dec00104 	addi	sp,sp,4
    c078:	f800283a 	ret

0000c07c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    c07c:	defff704 	addi	sp,sp,-36
    c080:	dfc00815 	stw	ra,32(sp)
    c084:	df000715 	stw	fp,28(sp)
    c088:	df000704 	addi	fp,sp,28
    c08c:	e13ffb15 	stw	r4,-20(fp)
    c090:	e17ffc15 	stw	r5,-16(fp)
    c094:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c098:	e0bffb17 	ldw	r2,-20(fp)
    c09c:	1004803a 	cmplt	r2,r2,zero
    c0a0:	1000081e 	bne	r2,zero,c0c4 <read+0x48>
    c0a4:	e0bffb17 	ldw	r2,-20(fp)
    c0a8:	10800324 	muli	r2,r2,12
    c0ac:	1007883a 	mov	r3,r2
    c0b0:	00800074 	movhi	r2,1
    c0b4:	10bc4904 	addi	r2,r2,-3804
    c0b8:	1887883a 	add	r3,r3,r2
    c0bc:	e0ffff15 	stw	r3,-4(fp)
    c0c0:	00000106 	br	c0c8 <read+0x4c>
    c0c4:	e03fff15 	stw	zero,-4(fp)
    c0c8:	e0bfff17 	ldw	r2,-4(fp)
    c0cc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    c0d0:	e0bffa17 	ldw	r2,-24(fp)
    c0d4:	1005003a 	cmpeq	r2,r2,zero
    c0d8:	1000241e 	bne	r2,zero,c16c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    c0dc:	e0bffa17 	ldw	r2,-24(fp)
    c0e0:	10800217 	ldw	r2,8(r2)
    c0e4:	108000cc 	andi	r2,r2,3
    c0e8:	10800060 	cmpeqi	r2,r2,1
    c0ec:	10001a1e 	bne	r2,zero,c158 <read+0xdc>
    c0f0:	e0bffa17 	ldw	r2,-24(fp)
    c0f4:	10800017 	ldw	r2,0(r2)
    c0f8:	10800517 	ldw	r2,20(r2)
    c0fc:	1005003a 	cmpeq	r2,r2,zero
    c100:	1000151e 	bne	r2,zero,c158 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    c104:	e0bffa17 	ldw	r2,-24(fp)
    c108:	10800017 	ldw	r2,0(r2)
    c10c:	10800517 	ldw	r2,20(r2)
    c110:	e17ffc17 	ldw	r5,-16(fp)
    c114:	e1bffd17 	ldw	r6,-12(fp)
    c118:	e13ffa17 	ldw	r4,-24(fp)
    c11c:	103ee83a 	callr	r2
    c120:	e0bff915 	stw	r2,-28(fp)
    c124:	e0bff917 	ldw	r2,-28(fp)
    c128:	1004403a 	cmpge	r2,r2,zero
    c12c:	1000071e 	bne	r2,zero,c14c <read+0xd0>
        {
          ALT_ERRNO = -rval;
    c130:	000c19c0 	call	c19c <alt_get_errno>
    c134:	e0fff917 	ldw	r3,-28(fp)
    c138:	00c7c83a 	sub	r3,zero,r3
    c13c:	10c00015 	stw	r3,0(r2)
          return -1;
    c140:	00bfffc4 	movi	r2,-1
    c144:	e0bffe15 	stw	r2,-8(fp)
    c148:	00000e06 	br	c184 <read+0x108>
        }
        return rval;
    c14c:	e0bff917 	ldw	r2,-28(fp)
    c150:	e0bffe15 	stw	r2,-8(fp)
    c154:	00000b06 	br	c184 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    c158:	000c19c0 	call	c19c <alt_get_errno>
    c15c:	1007883a 	mov	r3,r2
    c160:	00800344 	movi	r2,13
    c164:	18800015 	stw	r2,0(r3)
    c168:	00000406 	br	c17c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    c16c:	000c19c0 	call	c19c <alt_get_errno>
    c170:	1007883a 	mov	r3,r2
    c174:	00801444 	movi	r2,81
    c178:	18800015 	stw	r2,0(r3)
  }
  return -1;
    c17c:	00bfffc4 	movi	r2,-1
    c180:	e0bffe15 	stw	r2,-8(fp)
    c184:	e0bffe17 	ldw	r2,-8(fp)
}
    c188:	e037883a 	mov	sp,fp
    c18c:	dfc00117 	ldw	ra,4(sp)
    c190:	df000017 	ldw	fp,0(sp)
    c194:	dec00204 	addi	sp,sp,8
    c198:	f800283a 	ret

0000c19c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c19c:	defffd04 	addi	sp,sp,-12
    c1a0:	dfc00215 	stw	ra,8(sp)
    c1a4:	df000115 	stw	fp,4(sp)
    c1a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c1ac:	00800074 	movhi	r2,1
    c1b0:	1080cd04 	addi	r2,r2,820
    c1b4:	10800017 	ldw	r2,0(r2)
    c1b8:	1005003a 	cmpeq	r2,r2,zero
    c1bc:	1000061e 	bne	r2,zero,c1d8 <alt_get_errno+0x3c>
    c1c0:	00800074 	movhi	r2,1
    c1c4:	1080cd04 	addi	r2,r2,820
    c1c8:	10800017 	ldw	r2,0(r2)
    c1cc:	103ee83a 	callr	r2
    c1d0:	e0bfff15 	stw	r2,-4(fp)
    c1d4:	00000306 	br	c1e4 <alt_get_errno+0x48>
    c1d8:	00800074 	movhi	r2,1
    c1dc:	10878604 	addi	r2,r2,7704
    c1e0:	e0bfff15 	stw	r2,-4(fp)
    c1e4:	e0bfff17 	ldw	r2,-4(fp)
}
    c1e8:	e037883a 	mov	sp,fp
    c1ec:	dfc00117 	ldw	ra,4(sp)
    c1f0:	df000017 	ldw	fp,0(sp)
    c1f4:	dec00204 	addi	sp,sp,8
    c1f8:	f800283a 	ret

0000c1fc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c1fc:	defffe04 	addi	sp,sp,-8
    c200:	df000115 	stw	fp,4(sp)
    c204:	df000104 	addi	fp,sp,4
    c208:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    c20c:	e0bfff17 	ldw	r2,-4(fp)
    c210:	108000d0 	cmplti	r2,r2,3
    c214:	10000d1e 	bne	r2,zero,c24c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    c218:	e0bfff17 	ldw	r2,-4(fp)
    c21c:	00c00074 	movhi	r3,1
    c220:	18fc4904 	addi	r3,r3,-3804
    c224:	10800324 	muli	r2,r2,12
    c228:	10c5883a 	add	r2,r2,r3
    c22c:	10800204 	addi	r2,r2,8
    c230:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c234:	e0bfff17 	ldw	r2,-4(fp)
    c238:	00c00074 	movhi	r3,1
    c23c:	18fc4904 	addi	r3,r3,-3804
    c240:	10800324 	muli	r2,r2,12
    c244:	10c5883a 	add	r2,r2,r3
    c248:	10000015 	stw	zero,0(r2)
  }
}
    c24c:	e037883a 	mov	sp,fp
    c250:	df000017 	ldw	fp,0(sp)
    c254:	dec00104 	addi	sp,sp,4
    c258:	f800283a 	ret

0000c25c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    c25c:	defff804 	addi	sp,sp,-32
    c260:	df000715 	stw	fp,28(sp)
    c264:	df000704 	addi	fp,sp,28
    c268:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c26c:	0005303a 	rdctl	r2,status
    c270:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c274:	e0fffb17 	ldw	r3,-20(fp)
    c278:	00bfff84 	movi	r2,-2
    c27c:	1884703a 	and	r2,r3,r2
    c280:	1001703a 	wrctl	status,r2
  
  return context;
    c284:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    c288:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    c28c:	d0a00e17 	ldw	r2,-32712(gp)
    c290:	10c000c4 	addi	r3,r2,3
    c294:	00bfff04 	movi	r2,-4
    c298:	1884703a 	and	r2,r3,r2
    c29c:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    c2a0:	d0e00e17 	ldw	r3,-32712(gp)
    c2a4:	e0bffe17 	ldw	r2,-8(fp)
    c2a8:	1887883a 	add	r3,r3,r2
    c2ac:	00808034 	movhi	r2,512
    c2b0:	10800004 	addi	r2,r2,0
    c2b4:	10c0072e 	bgeu	r2,r3,c2d4 <sbrk+0x78>
    c2b8:	e0bffd17 	ldw	r2,-12(fp)
    c2bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c2c0:	e0bffa17 	ldw	r2,-24(fp)
    c2c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    c2c8:	00bfffc4 	movi	r2,-1
    c2cc:	e0bfff15 	stw	r2,-4(fp)
    c2d0:	00000c06 	br	c304 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    c2d4:	d0a00e17 	ldw	r2,-32712(gp)
    c2d8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    c2dc:	d0e00e17 	ldw	r3,-32712(gp)
    c2e0:	e0bffe17 	ldw	r2,-8(fp)
    c2e4:	1885883a 	add	r2,r3,r2
    c2e8:	d0a00e15 	stw	r2,-32712(gp)
    c2ec:	e0bffd17 	ldw	r2,-12(fp)
    c2f0:	e0bff915 	stw	r2,-28(fp)
    c2f4:	e0bff917 	ldw	r2,-28(fp)
    c2f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    c2fc:	e0bffc17 	ldw	r2,-16(fp)
    c300:	e0bfff15 	stw	r2,-4(fp)
    c304:	e0bfff17 	ldw	r2,-4(fp)
} 
    c308:	e037883a 	mov	sp,fp
    c30c:	df000017 	ldw	fp,0(sp)
    c310:	dec00104 	addi	sp,sp,4
    c314:	f800283a 	ret

0000c318 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    c318:	defff704 	addi	sp,sp,-36
    c31c:	dfc00815 	stw	ra,32(sp)
    c320:	df000715 	stw	fp,28(sp)
    c324:	df000704 	addi	fp,sp,28
    c328:	e13ffb15 	stw	r4,-20(fp)
    c32c:	e17ffc15 	stw	r5,-16(fp)
    c330:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c334:	e0bffb17 	ldw	r2,-20(fp)
    c338:	1004803a 	cmplt	r2,r2,zero
    c33c:	1000081e 	bne	r2,zero,c360 <write+0x48>
    c340:	e0bffb17 	ldw	r2,-20(fp)
    c344:	10800324 	muli	r2,r2,12
    c348:	1007883a 	mov	r3,r2
    c34c:	00800074 	movhi	r2,1
    c350:	10bc4904 	addi	r2,r2,-3804
    c354:	1887883a 	add	r3,r3,r2
    c358:	e0ffff15 	stw	r3,-4(fp)
    c35c:	00000106 	br	c364 <write+0x4c>
    c360:	e03fff15 	stw	zero,-4(fp)
    c364:	e0bfff17 	ldw	r2,-4(fp)
    c368:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    c36c:	e0bffa17 	ldw	r2,-24(fp)
    c370:	1005003a 	cmpeq	r2,r2,zero
    c374:	1000241e 	bne	r2,zero,c408 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    c378:	e0bffa17 	ldw	r2,-24(fp)
    c37c:	10800217 	ldw	r2,8(r2)
    c380:	108000cc 	andi	r2,r2,3
    c384:	1005003a 	cmpeq	r2,r2,zero
    c388:	10001a1e 	bne	r2,zero,c3f4 <write+0xdc>
    c38c:	e0bffa17 	ldw	r2,-24(fp)
    c390:	10800017 	ldw	r2,0(r2)
    c394:	10800617 	ldw	r2,24(r2)
    c398:	1005003a 	cmpeq	r2,r2,zero
    c39c:	1000151e 	bne	r2,zero,c3f4 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    c3a0:	e0bffa17 	ldw	r2,-24(fp)
    c3a4:	10800017 	ldw	r2,0(r2)
    c3a8:	10800617 	ldw	r2,24(r2)
    c3ac:	e17ffc17 	ldw	r5,-16(fp)
    c3b0:	e1bffd17 	ldw	r6,-12(fp)
    c3b4:	e13ffa17 	ldw	r4,-24(fp)
    c3b8:	103ee83a 	callr	r2
    c3bc:	e0bff915 	stw	r2,-28(fp)
    c3c0:	e0bff917 	ldw	r2,-28(fp)
    c3c4:	1004403a 	cmpge	r2,r2,zero
    c3c8:	1000071e 	bne	r2,zero,c3e8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    c3cc:	000c4380 	call	c438 <alt_get_errno>
    c3d0:	e0fff917 	ldw	r3,-28(fp)
    c3d4:	00c7c83a 	sub	r3,zero,r3
    c3d8:	10c00015 	stw	r3,0(r2)
        return -1;
    c3dc:	00bfffc4 	movi	r2,-1
    c3e0:	e0bffe15 	stw	r2,-8(fp)
    c3e4:	00000e06 	br	c420 <write+0x108>
      }
      return rval;
    c3e8:	e0bff917 	ldw	r2,-28(fp)
    c3ec:	e0bffe15 	stw	r2,-8(fp)
    c3f0:	00000b06 	br	c420 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    c3f4:	000c4380 	call	c438 <alt_get_errno>
    c3f8:	1007883a 	mov	r3,r2
    c3fc:	00800344 	movi	r2,13
    c400:	18800015 	stw	r2,0(r3)
    c404:	00000406 	br	c418 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    c408:	000c4380 	call	c438 <alt_get_errno>
    c40c:	1007883a 	mov	r3,r2
    c410:	00801444 	movi	r2,81
    c414:	18800015 	stw	r2,0(r3)
  }
  return -1;
    c418:	00bfffc4 	movi	r2,-1
    c41c:	e0bffe15 	stw	r2,-8(fp)
    c420:	e0bffe17 	ldw	r2,-8(fp)
}
    c424:	e037883a 	mov	sp,fp
    c428:	dfc00117 	ldw	ra,4(sp)
    c42c:	df000017 	ldw	fp,0(sp)
    c430:	dec00204 	addi	sp,sp,8
    c434:	f800283a 	ret

0000c438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c438:	defffd04 	addi	sp,sp,-12
    c43c:	dfc00215 	stw	ra,8(sp)
    c440:	df000115 	stw	fp,4(sp)
    c444:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c448:	00800074 	movhi	r2,1
    c44c:	1080cd04 	addi	r2,r2,820
    c450:	10800017 	ldw	r2,0(r2)
    c454:	1005003a 	cmpeq	r2,r2,zero
    c458:	1000061e 	bne	r2,zero,c474 <alt_get_errno+0x3c>
    c45c:	00800074 	movhi	r2,1
    c460:	1080cd04 	addi	r2,r2,820
    c464:	10800017 	ldw	r2,0(r2)
    c468:	103ee83a 	callr	r2
    c46c:	e0bfff15 	stw	r2,-4(fp)
    c470:	00000306 	br	c480 <alt_get_errno+0x48>
    c474:	00800074 	movhi	r2,1
    c478:	10878604 	addi	r2,r2,7704
    c47c:	e0bfff15 	stw	r2,-4(fp)
    c480:	e0bfff17 	ldw	r2,-4(fp)
}
    c484:	e037883a 	mov	sp,fp
    c488:	dfc00117 	ldw	ra,4(sp)
    c48c:	df000017 	ldw	fp,0(sp)
    c490:	dec00204 	addi	sp,sp,8
    c494:	f800283a 	ret

0000c498 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    c498:	defffd04 	addi	sp,sp,-12
    c49c:	dfc00215 	stw	ra,8(sp)
    c4a0:	df000115 	stw	fp,4(sp)
    c4a4:	df000104 	addi	fp,sp,4
    c4a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    c4ac:	000dcf80 	call	dcf8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    c4b0:	00800044 	movi	r2,1
    c4b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    c4b8:	e037883a 	mov	sp,fp
    c4bc:	dfc00117 	ldw	ra,4(sp)
    c4c0:	df000017 	ldw	fp,0(sp)
    c4c4:	dec00204 	addi	sp,sp,8
    c4c8:	f800283a 	ret

0000c4cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c4cc:	defffe04 	addi	sp,sp,-8
    c4d0:	dfc00115 	stw	ra,4(sp)
    c4d4:	df000015 	stw	fp,0(sp)
    c4d8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    c4dc:	01008034 	movhi	r4,512
    c4e0:	21142804 	addi	r4,r4,20640
    c4e4:	000b883a 	mov	r5,zero
    c4e8:	000d883a 	mov	r6,zero
    c4ec:	01c0fa04 	movi	r7,1000
    c4f0:	000d07c0 	call	d07c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    c4f4:	01000074 	movhi	r4,1
    c4f8:	213cb304 	addi	r4,r4,-3380
    c4fc:	000b883a 	mov	r5,zero
    c500:	018000c4 	movi	r6,3
    c504:	000c6a80 	call	c6a8 <altera_avalon_jtag_uart_init>
    c508:	01000074 	movhi	r4,1
    c50c:	213ca904 	addi	r4,r4,-3420
    c510:	000c5280 	call	c528 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    c514:	e037883a 	mov	sp,fp
    c518:	dfc00117 	ldw	ra,4(sp)
    c51c:	df000017 	ldw	fp,0(sp)
    c520:	dec00204 	addi	sp,sp,8
    c524:	f800283a 	ret

0000c528 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    c528:	defffd04 	addi	sp,sp,-12
    c52c:	dfc00215 	stw	ra,8(sp)
    c530:	df000115 	stw	fp,4(sp)
    c534:	df000104 	addi	fp,sp,4
    c538:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    c53c:	e13fff17 	ldw	r4,-4(fp)
    c540:	01400074 	movhi	r5,1
    c544:	2940ca04 	addi	r5,r5,808
    c548:	000d27c0 	call	d27c <alt_dev_llist_insert>
}
    c54c:	e037883a 	mov	sp,fp
    c550:	dfc00117 	ldw	ra,4(sp)
    c554:	df000017 	ldw	fp,0(sp)
    c558:	dec00204 	addi	sp,sp,8
    c55c:	f800283a 	ret

0000c560 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c560:	defffa04 	addi	sp,sp,-24
    c564:	dfc00515 	stw	ra,20(sp)
    c568:	df000415 	stw	fp,16(sp)
    c56c:	df000404 	addi	fp,sp,16
    c570:	e13ffd15 	stw	r4,-12(fp)
    c574:	e17ffe15 	stw	r5,-8(fp)
    c578:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c57c:	e0bffd17 	ldw	r2,-12(fp)
    c580:	10800017 	ldw	r2,0(r2)
    c584:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c588:	e0bffc17 	ldw	r2,-16(fp)
    c58c:	11000a04 	addi	r4,r2,40
    c590:	e0bffd17 	ldw	r2,-12(fp)
    c594:	11c00217 	ldw	r7,8(r2)
    c598:	e17ffe17 	ldw	r5,-8(fp)
    c59c:	e1bfff17 	ldw	r6,-4(fp)
    c5a0:	000cba80 	call	cba8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    c5a4:	e037883a 	mov	sp,fp
    c5a8:	dfc00117 	ldw	ra,4(sp)
    c5ac:	df000017 	ldw	fp,0(sp)
    c5b0:	dec00204 	addi	sp,sp,8
    c5b4:	f800283a 	ret

0000c5b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c5b8:	defffa04 	addi	sp,sp,-24
    c5bc:	dfc00515 	stw	ra,20(sp)
    c5c0:	df000415 	stw	fp,16(sp)
    c5c4:	df000404 	addi	fp,sp,16
    c5c8:	e13ffd15 	stw	r4,-12(fp)
    c5cc:	e17ffe15 	stw	r5,-8(fp)
    c5d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c5d4:	e0bffd17 	ldw	r2,-12(fp)
    c5d8:	10800017 	ldw	r2,0(r2)
    c5dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c5e0:	e0bffc17 	ldw	r2,-16(fp)
    c5e4:	11000a04 	addi	r4,r2,40
    c5e8:	e0bffd17 	ldw	r2,-12(fp)
    c5ec:	11c00217 	ldw	r7,8(r2)
    c5f0:	e17ffe17 	ldw	r5,-8(fp)
    c5f4:	e1bfff17 	ldw	r6,-4(fp)
    c5f8:	000cdcc0 	call	cdcc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c5fc:	e037883a 	mov	sp,fp
    c600:	dfc00117 	ldw	ra,4(sp)
    c604:	df000017 	ldw	fp,0(sp)
    c608:	dec00204 	addi	sp,sp,8
    c60c:	f800283a 	ret

0000c610 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    c610:	defffc04 	addi	sp,sp,-16
    c614:	dfc00315 	stw	ra,12(sp)
    c618:	df000215 	stw	fp,8(sp)
    c61c:	df000204 	addi	fp,sp,8
    c620:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c624:	e0bfff17 	ldw	r2,-4(fp)
    c628:	10800017 	ldw	r2,0(r2)
    c62c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    c630:	e0bffe17 	ldw	r2,-8(fp)
    c634:	11000a04 	addi	r4,r2,40
    c638:	e0bfff17 	ldw	r2,-4(fp)
    c63c:	11400217 	ldw	r5,8(r2)
    c640:	000ca400 	call	ca40 <altera_avalon_jtag_uart_close>
}
    c644:	e037883a 	mov	sp,fp
    c648:	dfc00117 	ldw	ra,4(sp)
    c64c:	df000017 	ldw	fp,0(sp)
    c650:	dec00204 	addi	sp,sp,8
    c654:	f800283a 	ret

0000c658 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    c658:	defffa04 	addi	sp,sp,-24
    c65c:	dfc00515 	stw	ra,20(sp)
    c660:	df000415 	stw	fp,16(sp)
    c664:	df000404 	addi	fp,sp,16
    c668:	e13ffd15 	stw	r4,-12(fp)
    c66c:	e17ffe15 	stw	r5,-8(fp)
    c670:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    c674:	e0bffd17 	ldw	r2,-12(fp)
    c678:	10800017 	ldw	r2,0(r2)
    c67c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    c680:	e0bffc17 	ldw	r2,-16(fp)
    c684:	11000a04 	addi	r4,r2,40
    c688:	e17ffe17 	ldw	r5,-8(fp)
    c68c:	e1bfff17 	ldw	r6,-4(fp)
    c690:	000cab40 	call	cab4 <altera_avalon_jtag_uart_ioctl>
}
    c694:	e037883a 	mov	sp,fp
    c698:	dfc00117 	ldw	ra,4(sp)
    c69c:	df000017 	ldw	fp,0(sp)
    c6a0:	dec00204 	addi	sp,sp,8
    c6a4:	f800283a 	ret

0000c6a8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c6a8:	defffa04 	addi	sp,sp,-24
    c6ac:	dfc00515 	stw	ra,20(sp)
    c6b0:	df000415 	stw	fp,16(sp)
    c6b4:	df000404 	addi	fp,sp,16
    c6b8:	e13ffd15 	stw	r4,-12(fp)
    c6bc:	e17ffe15 	stw	r5,-8(fp)
    c6c0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c6c4:	e0fffd17 	ldw	r3,-12(fp)
    c6c8:	00800044 	movi	r2,1
    c6cc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c6d0:	e0bffd17 	ldw	r2,-12(fp)
    c6d4:	10800017 	ldw	r2,0(r2)
    c6d8:	11000104 	addi	r4,r2,4
    c6dc:	e0bffd17 	ldw	r2,-12(fp)
    c6e0:	10800817 	ldw	r2,32(r2)
    c6e4:	1007883a 	mov	r3,r2
    c6e8:	2005883a 	mov	r2,r4
    c6ec:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    c6f0:	e13ffe17 	ldw	r4,-8(fp)
    c6f4:	e17fff17 	ldw	r5,-4(fp)
    c6f8:	d8000015 	stw	zero,0(sp)
    c6fc:	01800074 	movhi	r6,1
    c700:	31b1da04 	addi	r6,r6,-14488
    c704:	e1fffd17 	ldw	r7,-12(fp)
    c708:	000d4880 	call	d488 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c70c:	e0bffd17 	ldw	r2,-12(fp)
    c710:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c714:	e0bffd17 	ldw	r2,-12(fp)
    c718:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c71c:	00800074 	movhi	r2,1
    c720:	10878e04 	addi	r2,r2,7736
    c724:	10800017 	ldw	r2,0(r2)
    c728:	100b883a 	mov	r5,r2
    c72c:	01800074 	movhi	r6,1
    c730:	31b26404 	addi	r6,r6,-13936
    c734:	e1fffd17 	ldw	r7,-12(fp)
    c738:	000d10c0 	call	d10c <alt_alarm_start>
    c73c:	1004403a 	cmpge	r2,r2,zero
    c740:	1000041e 	bne	r2,zero,c754 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c744:	e0fffd17 	ldw	r3,-12(fp)
    c748:	00a00034 	movhi	r2,32768
    c74c:	10bfffc4 	addi	r2,r2,-1
    c750:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c754:	e037883a 	mov	sp,fp
    c758:	dfc00117 	ldw	ra,4(sp)
    c75c:	df000017 	ldw	fp,0(sp)
    c760:	dec00204 	addi	sp,sp,8
    c764:	f800283a 	ret

0000c768 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c768:	defff804 	addi	sp,sp,-32
    c76c:	df000715 	stw	fp,28(sp)
    c770:	df000704 	addi	fp,sp,28
    c774:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c778:	e0bfff17 	ldw	r2,-4(fp)
    c77c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    c780:	e0bffe17 	ldw	r2,-8(fp)
    c784:	10800017 	ldw	r2,0(r2)
    c788:	e0bffd15 	stw	r2,-12(fp)
    c78c:	00000006 	br	c790 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c790:	e0bffd17 	ldw	r2,-12(fp)
    c794:	10800104 	addi	r2,r2,4
    c798:	10800037 	ldwio	r2,0(r2)
    c79c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c7a0:	e0bffc17 	ldw	r2,-16(fp)
    c7a4:	1080c00c 	andi	r2,r2,768
    c7a8:	1005003a 	cmpeq	r2,r2,zero
    c7ac:	1000741e 	bne	r2,zero,c980 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c7b0:	e0bffc17 	ldw	r2,-16(fp)
    c7b4:	1080400c 	andi	r2,r2,256
    c7b8:	1005003a 	cmpeq	r2,r2,zero
    c7bc:	1000351e 	bne	r2,zero,c894 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c7c0:	00800074 	movhi	r2,1
    c7c4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c7c8:	e0bffe17 	ldw	r2,-8(fp)
    c7cc:	10800a17 	ldw	r2,40(r2)
    c7d0:	10800044 	addi	r2,r2,1
    c7d4:	1081ffcc 	andi	r2,r2,2047
    c7d8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    c7dc:	e0bffe17 	ldw	r2,-8(fp)
    c7e0:	10c00b17 	ldw	r3,44(r2)
    c7e4:	e0bffa17 	ldw	r2,-24(fp)
    c7e8:	18801626 	beq	r3,r2,c844 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c7ec:	e0bffd17 	ldw	r2,-12(fp)
    c7f0:	10800037 	ldwio	r2,0(r2)
    c7f4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c7f8:	e0bffb17 	ldw	r2,-20(fp)
    c7fc:	10a0000c 	andi	r2,r2,32768
    c800:	1005003a 	cmpeq	r2,r2,zero
    c804:	10000f1e 	bne	r2,zero,c844 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c808:	e0bffe17 	ldw	r2,-8(fp)
    c80c:	10c00a17 	ldw	r3,40(r2)
    c810:	e0bffb17 	ldw	r2,-20(fp)
    c814:	1009883a 	mov	r4,r2
    c818:	e0bffe17 	ldw	r2,-8(fp)
    c81c:	1885883a 	add	r2,r3,r2
    c820:	10800e04 	addi	r2,r2,56
    c824:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c828:	e0bffe17 	ldw	r2,-8(fp)
    c82c:	10800a17 	ldw	r2,40(r2)
    c830:	10800044 	addi	r2,r2,1
    c834:	10c1ffcc 	andi	r3,r2,2047
    c838:	e0bffe17 	ldw	r2,-8(fp)
    c83c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    c840:	003fe106 	br	c7c8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c844:	e0bffb17 	ldw	r2,-20(fp)
    c848:	10bfffec 	andhi	r2,r2,65535
    c84c:	1005003a 	cmpeq	r2,r2,zero
    c850:	1000101e 	bne	r2,zero,c894 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c854:	e0bffe17 	ldw	r2,-8(fp)
    c858:	10c00817 	ldw	r3,32(r2)
    c85c:	00bfff84 	movi	r2,-2
    c860:	1886703a 	and	r3,r3,r2
    c864:	e0bffe17 	ldw	r2,-8(fp)
    c868:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c86c:	e0bffd17 	ldw	r2,-12(fp)
    c870:	11000104 	addi	r4,r2,4
    c874:	e0bffe17 	ldw	r2,-8(fp)
    c878:	10800817 	ldw	r2,32(r2)
    c87c:	1007883a 	mov	r3,r2
    c880:	2005883a 	mov	r2,r4
    c884:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c888:	e0bffd17 	ldw	r2,-12(fp)
    c88c:	10800104 	addi	r2,r2,4
    c890:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c894:	e0bffc17 	ldw	r2,-16(fp)
    c898:	1080800c 	andi	r2,r2,512
    c89c:	1005003a 	cmpeq	r2,r2,zero
    c8a0:	103fbb1e 	bne	r2,zero,c790 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c8a4:	e0bffc17 	ldw	r2,-16(fp)
    c8a8:	10bfffec 	andhi	r2,r2,65535
    c8ac:	1004d43a 	srli	r2,r2,16
    c8b0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c8b4:	00001506 	br	c90c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c8b8:	e13ffd17 	ldw	r4,-12(fp)
    c8bc:	e0bffe17 	ldw	r2,-8(fp)
    c8c0:	10c00d17 	ldw	r3,52(r2)
    c8c4:	e0bffe17 	ldw	r2,-8(fp)
    c8c8:	1885883a 	add	r2,r3,r2
    c8cc:	10820e04 	addi	r2,r2,2104
    c8d0:	10800003 	ldbu	r2,0(r2)
    c8d4:	10c03fcc 	andi	r3,r2,255
    c8d8:	18c0201c 	xori	r3,r3,128
    c8dc:	18ffe004 	addi	r3,r3,-128
    c8e0:	2005883a 	mov	r2,r4
    c8e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c8e8:	e0bffe17 	ldw	r2,-8(fp)
    c8ec:	10800d17 	ldw	r2,52(r2)
    c8f0:	10800044 	addi	r2,r2,1
    c8f4:	10c1ffcc 	andi	r3,r2,2047
    c8f8:	e0bffe17 	ldw	r2,-8(fp)
    c8fc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    c900:	e0bff917 	ldw	r2,-28(fp)
    c904:	10bfffc4 	addi	r2,r2,-1
    c908:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c90c:	e0bff917 	ldw	r2,-28(fp)
    c910:	1005003a 	cmpeq	r2,r2,zero
    c914:	1000051e 	bne	r2,zero,c92c <altera_avalon_jtag_uart_irq+0x1c4>
    c918:	e0bffe17 	ldw	r2,-8(fp)
    c91c:	10c00d17 	ldw	r3,52(r2)
    c920:	e0bffe17 	ldw	r2,-8(fp)
    c924:	10800c17 	ldw	r2,48(r2)
    c928:	18bfe31e 	bne	r3,r2,c8b8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    c92c:	e0bff917 	ldw	r2,-28(fp)
    c930:	1005003a 	cmpeq	r2,r2,zero
    c934:	103f961e 	bne	r2,zero,c790 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c938:	e0bffe17 	ldw	r2,-8(fp)
    c93c:	10c00817 	ldw	r3,32(r2)
    c940:	00bfff44 	movi	r2,-3
    c944:	1886703a 	and	r3,r3,r2
    c948:	e0bffe17 	ldw	r2,-8(fp)
    c94c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c950:	e0bffe17 	ldw	r2,-8(fp)
    c954:	10800017 	ldw	r2,0(r2)
    c958:	11000104 	addi	r4,r2,4
    c95c:	e0bffe17 	ldw	r2,-8(fp)
    c960:	10800817 	ldw	r2,32(r2)
    c964:	1007883a 	mov	r3,r2
    c968:	2005883a 	mov	r2,r4
    c96c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c970:	e0bffd17 	ldw	r2,-12(fp)
    c974:	10800104 	addi	r2,r2,4
    c978:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    c97c:	003f8406 	br	c790 <altera_avalon_jtag_uart_irq+0x28>
}
    c980:	e037883a 	mov	sp,fp
    c984:	df000017 	ldw	fp,0(sp)
    c988:	dec00104 	addi	sp,sp,4
    c98c:	f800283a 	ret

0000c990 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c990:	defffc04 	addi	sp,sp,-16
    c994:	df000315 	stw	fp,12(sp)
    c998:	df000304 	addi	fp,sp,12
    c99c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c9a0:	e0bfff17 	ldw	r2,-4(fp)
    c9a4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c9a8:	e0bffe17 	ldw	r2,-8(fp)
    c9ac:	10800017 	ldw	r2,0(r2)
    c9b0:	10800104 	addi	r2,r2,4
    c9b4:	10800037 	ldwio	r2,0(r2)
    c9b8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c9bc:	e0bffd17 	ldw	r2,-12(fp)
    c9c0:	1081000c 	andi	r2,r2,1024
    c9c4:	1005003a 	cmpeq	r2,r2,zero
    c9c8:	10000c1e 	bne	r2,zero,c9fc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c9cc:	e0bffe17 	ldw	r2,-8(fp)
    c9d0:	10800017 	ldw	r2,0(r2)
    c9d4:	11000104 	addi	r4,r2,4
    c9d8:	e0bffe17 	ldw	r2,-8(fp)
    c9dc:	10800817 	ldw	r2,32(r2)
    c9e0:	10810014 	ori	r2,r2,1024
    c9e4:	1007883a 	mov	r3,r2
    c9e8:	2005883a 	mov	r2,r4
    c9ec:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    c9f0:	e0bffe17 	ldw	r2,-8(fp)
    c9f4:	10000915 	stw	zero,36(r2)
    c9f8:	00000a06 	br	ca24 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c9fc:	e0bffe17 	ldw	r2,-8(fp)
    ca00:	10c00917 	ldw	r3,36(r2)
    ca04:	00a00034 	movhi	r2,32768
    ca08:	10bfff04 	addi	r2,r2,-4
    ca0c:	10c00536 	bltu	r2,r3,ca24 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    ca10:	e0bffe17 	ldw	r2,-8(fp)
    ca14:	10800917 	ldw	r2,36(r2)
    ca18:	10c00044 	addi	r3,r2,1
    ca1c:	e0bffe17 	ldw	r2,-8(fp)
    ca20:	10c00915 	stw	r3,36(r2)
    ca24:	00800074 	movhi	r2,1
    ca28:	10878e04 	addi	r2,r2,7736
    ca2c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ca30:	e037883a 	mov	sp,fp
    ca34:	df000017 	ldw	fp,0(sp)
    ca38:	dec00104 	addi	sp,sp,4
    ca3c:	f800283a 	ret

0000ca40 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    ca40:	defffc04 	addi	sp,sp,-16
    ca44:	df000315 	stw	fp,12(sp)
    ca48:	df000304 	addi	fp,sp,12
    ca4c:	e13ffd15 	stw	r4,-12(fp)
    ca50:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ca54:	00000706 	br	ca74 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    ca58:	e0bffe17 	ldw	r2,-8(fp)
    ca5c:	1090000c 	andi	r2,r2,16384
    ca60:	1005003a 	cmpeq	r2,r2,zero
    ca64:	1000031e 	bne	r2,zero,ca74 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    ca68:	00bffd44 	movi	r2,-11
    ca6c:	e0bfff15 	stw	r2,-4(fp)
    ca70:	00000b06 	br	caa0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ca74:	e0bffd17 	ldw	r2,-12(fp)
    ca78:	10c00d17 	ldw	r3,52(r2)
    ca7c:	e0bffd17 	ldw	r2,-12(fp)
    ca80:	10800c17 	ldw	r2,48(r2)
    ca84:	18800526 	beq	r3,r2,ca9c <altera_avalon_jtag_uart_close+0x5c>
    ca88:	e0bffd17 	ldw	r2,-12(fp)
    ca8c:	10c00917 	ldw	r3,36(r2)
    ca90:	e0bffd17 	ldw	r2,-12(fp)
    ca94:	10800117 	ldw	r2,4(r2)
    ca98:	18bfef36 	bltu	r3,r2,ca58 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ca9c:	e03fff15 	stw	zero,-4(fp)
    caa0:	e0bfff17 	ldw	r2,-4(fp)
}
    caa4:	e037883a 	mov	sp,fp
    caa8:	df000017 	ldw	fp,0(sp)
    caac:	dec00104 	addi	sp,sp,4
    cab0:	f800283a 	ret

0000cab4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    cab4:	defff804 	addi	sp,sp,-32
    cab8:	df000715 	stw	fp,28(sp)
    cabc:	df000704 	addi	fp,sp,28
    cac0:	e13ffb15 	stw	r4,-20(fp)
    cac4:	e17ffc15 	stw	r5,-16(fp)
    cac8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    cacc:	00bff9c4 	movi	r2,-25
    cad0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    cad4:	e0bffc17 	ldw	r2,-16(fp)
    cad8:	e0bfff15 	stw	r2,-4(fp)
    cadc:	e0ffff17 	ldw	r3,-4(fp)
    cae0:	189a8060 	cmpeqi	r2,r3,27137
    cae4:	1000041e 	bne	r2,zero,caf8 <altera_avalon_jtag_uart_ioctl+0x44>
    cae8:	e0ffff17 	ldw	r3,-4(fp)
    caec:	189a80a0 	cmpeqi	r2,r3,27138
    caf0:	10001b1e 	bne	r2,zero,cb60 <altera_avalon_jtag_uart_ioctl+0xac>
    caf4:	00002706 	br	cb94 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    caf8:	e0bffb17 	ldw	r2,-20(fp)
    cafc:	10c00117 	ldw	r3,4(r2)
    cb00:	00a00034 	movhi	r2,32768
    cb04:	10bfffc4 	addi	r2,r2,-1
    cb08:	18802226 	beq	r3,r2,cb94 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    cb0c:	e0bffd17 	ldw	r2,-12(fp)
    cb10:	10800017 	ldw	r2,0(r2)
    cb14:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    cb18:	e0bff917 	ldw	r2,-28(fp)
    cb1c:	10800090 	cmplti	r2,r2,2
    cb20:	1000071e 	bne	r2,zero,cb40 <altera_avalon_jtag_uart_ioctl+0x8c>
    cb24:	e0fff917 	ldw	r3,-28(fp)
    cb28:	00a00034 	movhi	r2,32768
    cb2c:	10bfffc4 	addi	r2,r2,-1
    cb30:	18800326 	beq	r3,r2,cb40 <altera_avalon_jtag_uart_ioctl+0x8c>
    cb34:	e0bff917 	ldw	r2,-28(fp)
    cb38:	e0bffe15 	stw	r2,-8(fp)
    cb3c:	00000306 	br	cb4c <altera_avalon_jtag_uart_ioctl+0x98>
    cb40:	00e00034 	movhi	r3,32768
    cb44:	18ffff84 	addi	r3,r3,-2
    cb48:	e0fffe15 	stw	r3,-8(fp)
    cb4c:	e0bffb17 	ldw	r2,-20(fp)
    cb50:	e0fffe17 	ldw	r3,-8(fp)
    cb54:	10c00115 	stw	r3,4(r2)
      rc = 0;
    cb58:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    cb5c:	00000d06 	br	cb94 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    cb60:	e0bffb17 	ldw	r2,-20(fp)
    cb64:	10c00117 	ldw	r3,4(r2)
    cb68:	00a00034 	movhi	r2,32768
    cb6c:	10bfffc4 	addi	r2,r2,-1
    cb70:	18800826 	beq	r3,r2,cb94 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    cb74:	e13ffd17 	ldw	r4,-12(fp)
    cb78:	e0bffb17 	ldw	r2,-20(fp)
    cb7c:	10c00917 	ldw	r3,36(r2)
    cb80:	e0bffb17 	ldw	r2,-20(fp)
    cb84:	10800117 	ldw	r2,4(r2)
    cb88:	1885803a 	cmpltu	r2,r3,r2
    cb8c:	20800015 	stw	r2,0(r4)
      rc = 0;
    cb90:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    cb94:	e0bffa17 	ldw	r2,-24(fp)
}
    cb98:	e037883a 	mov	sp,fp
    cb9c:	df000017 	ldw	fp,0(sp)
    cba0:	dec00104 	addi	sp,sp,4
    cba4:	f800283a 	ret

0000cba8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    cba8:	defff204 	addi	sp,sp,-56
    cbac:	dfc00d15 	stw	ra,52(sp)
    cbb0:	df000c15 	stw	fp,48(sp)
    cbb4:	df000c04 	addi	fp,sp,48
    cbb8:	e13ffb15 	stw	r4,-20(fp)
    cbbc:	e17ffc15 	stw	r5,-16(fp)
    cbc0:	e1bffd15 	stw	r6,-12(fp)
    cbc4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    cbc8:	e0bffc17 	ldw	r2,-16(fp)
    cbcc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    cbd0:	00004806 	br	ccf4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    cbd4:	e0bffb17 	ldw	r2,-20(fp)
    cbd8:	10800a17 	ldw	r2,40(r2)
    cbdc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    cbe0:	e0bffb17 	ldw	r2,-20(fp)
    cbe4:	10800b17 	ldw	r2,44(r2)
    cbe8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    cbec:	e0fff717 	ldw	r3,-36(fp)
    cbf0:	e0bff617 	ldw	r2,-40(fp)
    cbf4:	18800536 	bltu	r3,r2,cc0c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    cbf8:	e0bff717 	ldw	r2,-36(fp)
    cbfc:	e0fff617 	ldw	r3,-40(fp)
    cc00:	10c5c83a 	sub	r2,r2,r3
    cc04:	e0bff815 	stw	r2,-32(fp)
    cc08:	00000406 	br	cc1c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    cc0c:	00820004 	movi	r2,2048
    cc10:	e0fff617 	ldw	r3,-40(fp)
    cc14:	10c5c83a 	sub	r2,r2,r3
    cc18:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    cc1c:	e0bff817 	ldw	r2,-32(fp)
    cc20:	1005003a 	cmpeq	r2,r2,zero
    cc24:	10001f1e 	bne	r2,zero,cca4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    cc28:	e0fffd17 	ldw	r3,-12(fp)
    cc2c:	e0bff817 	ldw	r2,-32(fp)
    cc30:	1880022e 	bgeu	r3,r2,cc3c <altera_avalon_jtag_uart_read+0x94>
        n = space;
    cc34:	e0bffd17 	ldw	r2,-12(fp)
    cc38:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    cc3c:	e0bffb17 	ldw	r2,-20(fp)
    cc40:	10c00e04 	addi	r3,r2,56
    cc44:	e0bff617 	ldw	r2,-40(fp)
    cc48:	1887883a 	add	r3,r3,r2
    cc4c:	e0bffa17 	ldw	r2,-24(fp)
    cc50:	1009883a 	mov	r4,r2
    cc54:	180b883a 	mov	r5,r3
    cc58:	e1bff817 	ldw	r6,-32(fp)
    cc5c:	00075a80 	call	75a8 <memcpy>
      ptr   += n;
    cc60:	e0fff817 	ldw	r3,-32(fp)
    cc64:	e0bffa17 	ldw	r2,-24(fp)
    cc68:	10c5883a 	add	r2,r2,r3
    cc6c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    cc70:	e0fffd17 	ldw	r3,-12(fp)
    cc74:	e0bff817 	ldw	r2,-32(fp)
    cc78:	1885c83a 	sub	r2,r3,r2
    cc7c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cc80:	e0fff617 	ldw	r3,-40(fp)
    cc84:	e0bff817 	ldw	r2,-32(fp)
    cc88:	1885883a 	add	r2,r3,r2
    cc8c:	10c1ffcc 	andi	r3,r2,2047
    cc90:	e0bffb17 	ldw	r2,-20(fp)
    cc94:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    cc98:	e0bffd17 	ldw	r2,-12(fp)
    cc9c:	10800048 	cmpgei	r2,r2,1
    cca0:	103fcc1e 	bne	r2,zero,cbd4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    cca4:	e0fffa17 	ldw	r3,-24(fp)
    cca8:	e0bffc17 	ldw	r2,-16(fp)
    ccac:	1880141e 	bne	r3,r2,cd00 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ccb0:	e0bffe17 	ldw	r2,-8(fp)
    ccb4:	1090000c 	andi	r2,r2,16384
    ccb8:	1004c03a 	cmpne	r2,r2,zero
    ccbc:	1000101e 	bne	r2,zero,cd00 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    ccc0:	e0bffb17 	ldw	r2,-20(fp)
    ccc4:	10c00a17 	ldw	r3,40(r2)
    ccc8:	e0bff717 	ldw	r2,-36(fp)
    cccc:	1880051e 	bne	r3,r2,cce4 <altera_avalon_jtag_uart_read+0x13c>
    ccd0:	e0bffb17 	ldw	r2,-20(fp)
    ccd4:	10c00917 	ldw	r3,36(r2)
    ccd8:	e0bffb17 	ldw	r2,-20(fp)
    ccdc:	10800117 	ldw	r2,4(r2)
    cce0:	18bff736 	bltu	r3,r2,ccc0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    cce4:	e0bffb17 	ldw	r2,-20(fp)
    cce8:	10c00a17 	ldw	r3,40(r2)
    ccec:	e0bff717 	ldw	r2,-36(fp)
    ccf0:	18800326 	beq	r3,r2,cd00 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ccf4:	e0bffd17 	ldw	r2,-12(fp)
    ccf8:	10800048 	cmpgei	r2,r2,1
    ccfc:	103fb51e 	bne	r2,zero,cbd4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    cd00:	e0fffa17 	ldw	r3,-24(fp)
    cd04:	e0bffc17 	ldw	r2,-16(fp)
    cd08:	18801926 	beq	r3,r2,cd70 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cd0c:	0005303a 	rdctl	r2,status
    cd10:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cd14:	e0fff517 	ldw	r3,-44(fp)
    cd18:	00bfff84 	movi	r2,-2
    cd1c:	1884703a 	and	r2,r3,r2
    cd20:	1001703a 	wrctl	status,r2
  
  return context;
    cd24:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    cd28:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    cd2c:	e0bffb17 	ldw	r2,-20(fp)
    cd30:	10800817 	ldw	r2,32(r2)
    cd34:	10c00054 	ori	r3,r2,1
    cd38:	e0bffb17 	ldw	r2,-20(fp)
    cd3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    cd40:	e0bffb17 	ldw	r2,-20(fp)
    cd44:	10800017 	ldw	r2,0(r2)
    cd48:	11000104 	addi	r4,r2,4
    cd4c:	e0bffb17 	ldw	r2,-20(fp)
    cd50:	10800817 	ldw	r2,32(r2)
    cd54:	1007883a 	mov	r3,r2
    cd58:	2005883a 	mov	r2,r4
    cd5c:	10c00035 	stwio	r3,0(r2)
    cd60:	e0bff917 	ldw	r2,-28(fp)
    cd64:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cd68:	e0bff417 	ldw	r2,-48(fp)
    cd6c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    cd70:	e0fffa17 	ldw	r3,-24(fp)
    cd74:	e0bffc17 	ldw	r2,-16(fp)
    cd78:	18800526 	beq	r3,r2,cd90 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    cd7c:	e0fffa17 	ldw	r3,-24(fp)
    cd80:	e0bffc17 	ldw	r2,-16(fp)
    cd84:	1887c83a 	sub	r3,r3,r2
    cd88:	e0ffff15 	stw	r3,-4(fp)
    cd8c:	00000906 	br	cdb4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    cd90:	e0bffe17 	ldw	r2,-8(fp)
    cd94:	1090000c 	andi	r2,r2,16384
    cd98:	1005003a 	cmpeq	r2,r2,zero
    cd9c:	1000031e 	bne	r2,zero,cdac <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    cda0:	00bffd44 	movi	r2,-11
    cda4:	e0bfff15 	stw	r2,-4(fp)
    cda8:	00000206 	br	cdb4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    cdac:	00bffec4 	movi	r2,-5
    cdb0:	e0bfff15 	stw	r2,-4(fp)
    cdb4:	e0bfff17 	ldw	r2,-4(fp)
}
    cdb8:	e037883a 	mov	sp,fp
    cdbc:	dfc00117 	ldw	ra,4(sp)
    cdc0:	df000017 	ldw	fp,0(sp)
    cdc4:	dec00204 	addi	sp,sp,8
    cdc8:	f800283a 	ret

0000cdcc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    cdcc:	defff204 	addi	sp,sp,-56
    cdd0:	dfc00d15 	stw	ra,52(sp)
    cdd4:	df000c15 	stw	fp,48(sp)
    cdd8:	df000c04 	addi	fp,sp,48
    cddc:	e13ffb15 	stw	r4,-20(fp)
    cde0:	e17ffc15 	stw	r5,-16(fp)
    cde4:	e1bffd15 	stw	r6,-12(fp)
    cde8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    cdec:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    cdf0:	e0bffc17 	ldw	r2,-16(fp)
    cdf4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    cdf8:	00003a06 	br	cee4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    cdfc:	e0bffb17 	ldw	r2,-20(fp)
    ce00:	10800c17 	ldw	r2,48(r2)
    ce04:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    ce08:	e0bffb17 	ldw	r2,-20(fp)
    ce0c:	10800d17 	ldw	r2,52(r2)
    ce10:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    ce14:	e0fffa17 	ldw	r3,-24(fp)
    ce18:	e0bff917 	ldw	r2,-28(fp)
    ce1c:	1880062e 	bgeu	r3,r2,ce38 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    ce20:	e0fff917 	ldw	r3,-28(fp)
    ce24:	e0bffa17 	ldw	r2,-24(fp)
    ce28:	1885c83a 	sub	r2,r3,r2
    ce2c:	10bfffc4 	addi	r2,r2,-1
    ce30:	e0bff815 	stw	r2,-32(fp)
    ce34:	00000c06 	br	ce68 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    ce38:	e0bff917 	ldw	r2,-28(fp)
    ce3c:	1005003a 	cmpeq	r2,r2,zero
    ce40:	1000051e 	bne	r2,zero,ce58 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    ce44:	00820004 	movi	r2,2048
    ce48:	e0fffa17 	ldw	r3,-24(fp)
    ce4c:	10c5c83a 	sub	r2,r2,r3
    ce50:	e0bff815 	stw	r2,-32(fp)
    ce54:	00000406 	br	ce68 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    ce58:	0081ffc4 	movi	r2,2047
    ce5c:	e0fffa17 	ldw	r3,-24(fp)
    ce60:	10c5c83a 	sub	r2,r2,r3
    ce64:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    ce68:	e0bff817 	ldw	r2,-32(fp)
    ce6c:	1005003a 	cmpeq	r2,r2,zero
    ce70:	10001f1e 	bne	r2,zero,cef0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    ce74:	e0fffd17 	ldw	r3,-12(fp)
    ce78:	e0bff817 	ldw	r2,-32(fp)
    ce7c:	1880022e 	bgeu	r3,r2,ce88 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    ce80:	e0bffd17 	ldw	r2,-12(fp)
    ce84:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    ce88:	e0bffb17 	ldw	r2,-20(fp)
    ce8c:	10c20e04 	addi	r3,r2,2104
    ce90:	e0bffa17 	ldw	r2,-24(fp)
    ce94:	1885883a 	add	r2,r3,r2
    ce98:	e0fffc17 	ldw	r3,-16(fp)
    ce9c:	1009883a 	mov	r4,r2
    cea0:	180b883a 	mov	r5,r3
    cea4:	e1bff817 	ldw	r6,-32(fp)
    cea8:	00075a80 	call	75a8 <memcpy>
      ptr   += n;
    ceac:	e0fff817 	ldw	r3,-32(fp)
    ceb0:	e0bffc17 	ldw	r2,-16(fp)
    ceb4:	10c5883a 	add	r2,r2,r3
    ceb8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    cebc:	e0fffd17 	ldw	r3,-12(fp)
    cec0:	e0bff817 	ldw	r2,-32(fp)
    cec4:	1885c83a 	sub	r2,r3,r2
    cec8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cecc:	e0fffa17 	ldw	r3,-24(fp)
    ced0:	e0bff817 	ldw	r2,-32(fp)
    ced4:	1885883a 	add	r2,r3,r2
    ced8:	10c1ffcc 	andi	r3,r2,2047
    cedc:	e0bffb17 	ldw	r2,-20(fp)
    cee0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    cee4:	e0bffd17 	ldw	r2,-12(fp)
    cee8:	10800048 	cmpgei	r2,r2,1
    ceec:	103fc31e 	bne	r2,zero,cdfc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cef0:	0005303a 	rdctl	r2,status
    cef4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cef8:	e0fff517 	ldw	r3,-44(fp)
    cefc:	00bfff84 	movi	r2,-2
    cf00:	1884703a 	and	r2,r3,r2
    cf04:	1001703a 	wrctl	status,r2
  
  return context;
    cf08:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    cf0c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    cf10:	e0bffb17 	ldw	r2,-20(fp)
    cf14:	10800817 	ldw	r2,32(r2)
    cf18:	10c00094 	ori	r3,r2,2
    cf1c:	e0bffb17 	ldw	r2,-20(fp)
    cf20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    cf24:	e0bffb17 	ldw	r2,-20(fp)
    cf28:	10800017 	ldw	r2,0(r2)
    cf2c:	11000104 	addi	r4,r2,4
    cf30:	e0bffb17 	ldw	r2,-20(fp)
    cf34:	10800817 	ldw	r2,32(r2)
    cf38:	1007883a 	mov	r3,r2
    cf3c:	2005883a 	mov	r2,r4
    cf40:	10c00035 	stwio	r3,0(r2)
    cf44:	e0bff717 	ldw	r2,-36(fp)
    cf48:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cf4c:	e0bff417 	ldw	r2,-48(fp)
    cf50:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    cf54:	e0bffd17 	ldw	r2,-12(fp)
    cf58:	10800050 	cmplti	r2,r2,1
    cf5c:	1000111e 	bne	r2,zero,cfa4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    cf60:	e0bffe17 	ldw	r2,-8(fp)
    cf64:	1090000c 	andi	r2,r2,16384
    cf68:	1004c03a 	cmpne	r2,r2,zero
    cf6c:	1000101e 	bne	r2,zero,cfb0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    cf70:	e0bffb17 	ldw	r2,-20(fp)
    cf74:	10c00d17 	ldw	r3,52(r2)
    cf78:	e0bff917 	ldw	r2,-28(fp)
    cf7c:	1880051e 	bne	r3,r2,cf94 <altera_avalon_jtag_uart_write+0x1c8>
    cf80:	e0bffb17 	ldw	r2,-20(fp)
    cf84:	10c00917 	ldw	r3,36(r2)
    cf88:	e0bffb17 	ldw	r2,-20(fp)
    cf8c:	10800117 	ldw	r2,4(r2)
    cf90:	18bff736 	bltu	r3,r2,cf70 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    cf94:	e0bffb17 	ldw	r2,-20(fp)
    cf98:	10c00d17 	ldw	r3,52(r2)
    cf9c:	e0bff917 	ldw	r2,-28(fp)
    cfa0:	18800326 	beq	r3,r2,cfb0 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    cfa4:	e0bffd17 	ldw	r2,-12(fp)
    cfa8:	10800048 	cmpgei	r2,r2,1
    cfac:	103fcd1e 	bne	r2,zero,cee4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    cfb0:	e0fffc17 	ldw	r3,-16(fp)
    cfb4:	e0bff617 	ldw	r2,-40(fp)
    cfb8:	18800526 	beq	r3,r2,cfd0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    cfbc:	e0fffc17 	ldw	r3,-16(fp)
    cfc0:	e0bff617 	ldw	r2,-40(fp)
    cfc4:	1887c83a 	sub	r3,r3,r2
    cfc8:	e0ffff15 	stw	r3,-4(fp)
    cfcc:	00000906 	br	cff4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    cfd0:	e0bffe17 	ldw	r2,-8(fp)
    cfd4:	1090000c 	andi	r2,r2,16384
    cfd8:	1005003a 	cmpeq	r2,r2,zero
    cfdc:	1000031e 	bne	r2,zero,cfec <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    cfe0:	00bffd44 	movi	r2,-11
    cfe4:	e0bfff15 	stw	r2,-4(fp)
    cfe8:	00000206 	br	cff4 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    cfec:	00bffec4 	movi	r2,-5
    cff0:	e0bfff15 	stw	r2,-4(fp)
    cff4:	e0bfff17 	ldw	r2,-4(fp)
}
    cff8:	e037883a 	mov	sp,fp
    cffc:	dfc00117 	ldw	ra,4(sp)
    d000:	df000017 	ldw	fp,0(sp)
    d004:	dec00204 	addi	sp,sp,8
    d008:	f800283a 	ret

0000d00c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    d00c:	defffa04 	addi	sp,sp,-24
    d010:	dfc00515 	stw	ra,20(sp)
    d014:	df000415 	stw	fp,16(sp)
    d018:	df000404 	addi	fp,sp,16
    d01c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    d020:	e0bfff17 	ldw	r2,-4(fp)
    d024:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    d028:	e0bfff17 	ldw	r2,-4(fp)
    d02c:	10800104 	addi	r2,r2,4
    d030:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d034:	0005303a 	rdctl	r2,status
    d038:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d03c:	e0fffd17 	ldw	r3,-12(fp)
    d040:	00bfff84 	movi	r2,-2
    d044:	1884703a 	and	r2,r3,r2
    d048:	1001703a 	wrctl	status,r2
  
  return context;
    d04c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    d050:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    d054:	000dbec0 	call	dbec <alt_tick>
    d058:	e0bffe17 	ldw	r2,-8(fp)
    d05c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d060:	e0bffc17 	ldw	r2,-16(fp)
    d064:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    d068:	e037883a 	mov	sp,fp
    d06c:	dfc00117 	ldw	ra,4(sp)
    d070:	df000017 	ldw	fp,0(sp)
    d074:	dec00204 	addi	sp,sp,8
    d078:	f800283a 	ret

0000d07c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    d07c:	defff804 	addi	sp,sp,-32
    d080:	dfc00715 	stw	ra,28(sp)
    d084:	df000615 	stw	fp,24(sp)
    d088:	df000604 	addi	fp,sp,24
    d08c:	e13ffc15 	stw	r4,-16(fp)
    d090:	e17ffd15 	stw	r5,-12(fp)
    d094:	e1bffe15 	stw	r6,-8(fp)
    d098:	e1ffff15 	stw	r7,-4(fp)
    d09c:	e0bfff17 	ldw	r2,-4(fp)
    d0a0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    d0a4:	00800074 	movhi	r2,1
    d0a8:	10878e04 	addi	r2,r2,7736
    d0ac:	10800017 	ldw	r2,0(r2)
    d0b0:	1004c03a 	cmpne	r2,r2,zero
    d0b4:	1000041e 	bne	r2,zero,d0c8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    d0b8:	00c00074 	movhi	r3,1
    d0bc:	18c78e04 	addi	r3,r3,7736
    d0c0:	e0bffb17 	ldw	r2,-20(fp)
    d0c4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    d0c8:	e0bffc17 	ldw	r2,-16(fp)
    d0cc:	10800104 	addi	r2,r2,4
    d0d0:	1007883a 	mov	r3,r2
    d0d4:	008001c4 	movi	r2,7
    d0d8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    d0dc:	d8000015 	stw	zero,0(sp)
    d0e0:	e13ffd17 	ldw	r4,-12(fp)
    d0e4:	e17ffe17 	ldw	r5,-8(fp)
    d0e8:	01800074 	movhi	r6,1
    d0ec:	31b40304 	addi	r6,r6,-12276
    d0f0:	e1fffc17 	ldw	r7,-16(fp)
    d0f4:	000d4880 	call	d488 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    d0f8:	e037883a 	mov	sp,fp
    d0fc:	dfc00117 	ldw	ra,4(sp)
    d100:	df000017 	ldw	fp,0(sp)
    d104:	dec00204 	addi	sp,sp,8
    d108:	f800283a 	ret

0000d10c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    d10c:	defff404 	addi	sp,sp,-48
    d110:	df000b15 	stw	fp,44(sp)
    d114:	df000b04 	addi	fp,sp,44
    d118:	e13ffb15 	stw	r4,-20(fp)
    d11c:	e17ffc15 	stw	r5,-16(fp)
    d120:	e1bffd15 	stw	r6,-12(fp)
    d124:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    d128:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d12c:	00800074 	movhi	r2,1
    d130:	10878e04 	addi	r2,r2,7736
    d134:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    d138:	1005003a 	cmpeq	r2,r2,zero
    d13c:	1000411e 	bne	r2,zero,d244 <alt_alarm_start+0x138>
  {
    if (alarm)
    d140:	e0bffb17 	ldw	r2,-20(fp)
    d144:	1005003a 	cmpeq	r2,r2,zero
    d148:	10003b1e 	bne	r2,zero,d238 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    d14c:	e0fffb17 	ldw	r3,-20(fp)
    d150:	e0bffd17 	ldw	r2,-12(fp)
    d154:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    d158:	e0fffb17 	ldw	r3,-20(fp)
    d15c:	e0bffe17 	ldw	r2,-8(fp)
    d160:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d164:	0005303a 	rdctl	r2,status
    d168:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d16c:	e0fff817 	ldw	r3,-32(fp)
    d170:	00bfff84 	movi	r2,-2
    d174:	1884703a 	and	r2,r3,r2
    d178:	1001703a 	wrctl	status,r2
  
  return context;
    d17c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    d180:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    d184:	00800074 	movhi	r2,1
    d188:	10878f04 	addi	r2,r2,7740
    d18c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    d190:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    d194:	e0fffc17 	ldw	r3,-16(fp)
    d198:	e0bff917 	ldw	r2,-28(fp)
    d19c:	1885883a 	add	r2,r3,r2
    d1a0:	10c00044 	addi	r3,r2,1
    d1a4:	e0bffb17 	ldw	r2,-20(fp)
    d1a8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    d1ac:	e0bffb17 	ldw	r2,-20(fp)
    d1b0:	10c00217 	ldw	r3,8(r2)
    d1b4:	e0bff917 	ldw	r2,-28(fp)
    d1b8:	1880042e 	bgeu	r3,r2,d1cc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    d1bc:	e0fffb17 	ldw	r3,-20(fp)
    d1c0:	00800044 	movi	r2,1
    d1c4:	18800405 	stb	r2,16(r3)
    d1c8:	00000206 	br	d1d4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    d1cc:	e0bffb17 	ldw	r2,-20(fp)
    d1d0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    d1d4:	e0fffb17 	ldw	r3,-20(fp)
    d1d8:	00800074 	movhi	r2,1
    d1dc:	1080d004 	addi	r2,r2,832
    d1e0:	e0bff615 	stw	r2,-40(fp)
    d1e4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d1e8:	e0fff717 	ldw	r3,-36(fp)
    d1ec:	e0bff617 	ldw	r2,-40(fp)
    d1f0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    d1f4:	e0bff617 	ldw	r2,-40(fp)
    d1f8:	10c00017 	ldw	r3,0(r2)
    d1fc:	e0bff717 	ldw	r2,-36(fp)
    d200:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d204:	e0bff617 	ldw	r2,-40(fp)
    d208:	10c00017 	ldw	r3,0(r2)
    d20c:	e0bff717 	ldw	r2,-36(fp)
    d210:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    d214:	e0fff617 	ldw	r3,-40(fp)
    d218:	e0bff717 	ldw	r2,-36(fp)
    d21c:	18800015 	stw	r2,0(r3)
    d220:	e0bffa17 	ldw	r2,-24(fp)
    d224:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d228:	e0bff517 	ldw	r2,-44(fp)
    d22c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    d230:	e03fff15 	stw	zero,-4(fp)
    d234:	00000506 	br	d24c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    d238:	00bffa84 	movi	r2,-22
    d23c:	e0bfff15 	stw	r2,-4(fp)
    d240:	00000206 	br	d24c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    d244:	00bfde84 	movi	r2,-134
    d248:	e0bfff15 	stw	r2,-4(fp)
    d24c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    d250:	e037883a 	mov	sp,fp
    d254:	df000017 	ldw	fp,0(sp)
    d258:	dec00104 	addi	sp,sp,4
    d25c:	f800283a 	ret

0000d260 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    d260:	deffff04 	addi	sp,sp,-4
    d264:	df000015 	stw	fp,0(sp)
    d268:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    d26c:	e037883a 	mov	sp,fp
    d270:	df000017 	ldw	fp,0(sp)
    d274:	dec00104 	addi	sp,sp,4
    d278:	f800283a 	ret

0000d27c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    d27c:	defff904 	addi	sp,sp,-28
    d280:	dfc00615 	stw	ra,24(sp)
    d284:	df000515 	stw	fp,20(sp)
    d288:	df000504 	addi	fp,sp,20
    d28c:	e13ffd15 	stw	r4,-12(fp)
    d290:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    d294:	e0bffd17 	ldw	r2,-12(fp)
    d298:	1005003a 	cmpeq	r2,r2,zero
    d29c:	1000041e 	bne	r2,zero,d2b0 <alt_dev_llist_insert+0x34>
    d2a0:	e0bffd17 	ldw	r2,-12(fp)
    d2a4:	10800217 	ldw	r2,8(r2)
    d2a8:	1004c03a 	cmpne	r2,r2,zero
    d2ac:	1000071e 	bne	r2,zero,d2cc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    d2b0:	000d3300 	call	d330 <alt_get_errno>
    d2b4:	1007883a 	mov	r3,r2
    d2b8:	00800584 	movi	r2,22
    d2bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    d2c0:	00bffa84 	movi	r2,-22
    d2c4:	e0bfff15 	stw	r2,-4(fp)
    d2c8:	00001306 	br	d318 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    d2cc:	e0fffd17 	ldw	r3,-12(fp)
    d2d0:	e0bffe17 	ldw	r2,-8(fp)
    d2d4:	e0bffb15 	stw	r2,-20(fp)
    d2d8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d2dc:	e0fffc17 	ldw	r3,-16(fp)
    d2e0:	e0bffb17 	ldw	r2,-20(fp)
    d2e4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    d2e8:	e0bffb17 	ldw	r2,-20(fp)
    d2ec:	10c00017 	ldw	r3,0(r2)
    d2f0:	e0bffc17 	ldw	r2,-16(fp)
    d2f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d2f8:	e0bffb17 	ldw	r2,-20(fp)
    d2fc:	10c00017 	ldw	r3,0(r2)
    d300:	e0bffc17 	ldw	r2,-16(fp)
    d304:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    d308:	e0fffb17 	ldw	r3,-20(fp)
    d30c:	e0bffc17 	ldw	r2,-16(fp)
    d310:	18800015 	stw	r2,0(r3)

  return 0;  
    d314:	e03fff15 	stw	zero,-4(fp)
    d318:	e0bfff17 	ldw	r2,-4(fp)
}
    d31c:	e037883a 	mov	sp,fp
    d320:	dfc00117 	ldw	ra,4(sp)
    d324:	df000017 	ldw	fp,0(sp)
    d328:	dec00204 	addi	sp,sp,8
    d32c:	f800283a 	ret

0000d330 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d330:	defffd04 	addi	sp,sp,-12
    d334:	dfc00215 	stw	ra,8(sp)
    d338:	df000115 	stw	fp,4(sp)
    d33c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d340:	00800074 	movhi	r2,1
    d344:	1080cd04 	addi	r2,r2,820
    d348:	10800017 	ldw	r2,0(r2)
    d34c:	1005003a 	cmpeq	r2,r2,zero
    d350:	1000061e 	bne	r2,zero,d36c <alt_get_errno+0x3c>
    d354:	00800074 	movhi	r2,1
    d358:	1080cd04 	addi	r2,r2,820
    d35c:	10800017 	ldw	r2,0(r2)
    d360:	103ee83a 	callr	r2
    d364:	e0bfff15 	stw	r2,-4(fp)
    d368:	00000306 	br	d378 <alt_get_errno+0x48>
    d36c:	00800074 	movhi	r2,1
    d370:	10878604 	addi	r2,r2,7704
    d374:	e0bfff15 	stw	r2,-4(fp)
    d378:	e0bfff17 	ldw	r2,-4(fp)
}
    d37c:	e037883a 	mov	sp,fp
    d380:	dfc00117 	ldw	ra,4(sp)
    d384:	df000017 	ldw	fp,0(sp)
    d388:	dec00204 	addi	sp,sp,8
    d38c:	f800283a 	ret

0000d390 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    d390:	defffd04 	addi	sp,sp,-12
    d394:	dfc00215 	stw	ra,8(sp)
    d398:	df000115 	stw	fp,4(sp)
    d39c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d3a0:	00bfff04 	movi	r2,-4
    d3a4:	00c00074 	movhi	r3,1
    d3a8:	18f89004 	addi	r3,r3,-7616
    d3ac:	1885883a 	add	r2,r3,r2
    d3b0:	e0bfff15 	stw	r2,-4(fp)
    d3b4:	00000606 	br	d3d0 <_do_ctors+0x40>
        (*ctor) (); 
    d3b8:	e0bfff17 	ldw	r2,-4(fp)
    d3bc:	10800017 	ldw	r2,0(r2)
    d3c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d3c4:	e0bfff17 	ldw	r2,-4(fp)
    d3c8:	10bfff04 	addi	r2,r2,-4
    d3cc:	e0bfff15 	stw	r2,-4(fp)
    d3d0:	e0ffff17 	ldw	r3,-4(fp)
    d3d4:	00800074 	movhi	r2,1
    d3d8:	10b88f04 	addi	r2,r2,-7620
    d3dc:	18bff62e 	bgeu	r3,r2,d3b8 <_do_ctors+0x28>
        (*ctor) (); 
}
    d3e0:	e037883a 	mov	sp,fp
    d3e4:	dfc00117 	ldw	ra,4(sp)
    d3e8:	df000017 	ldw	fp,0(sp)
    d3ec:	dec00204 	addi	sp,sp,8
    d3f0:	f800283a 	ret

0000d3f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    d3f4:	defffd04 	addi	sp,sp,-12
    d3f8:	dfc00215 	stw	ra,8(sp)
    d3fc:	df000115 	stw	fp,4(sp)
    d400:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d404:	00bfff04 	movi	r2,-4
    d408:	00c00074 	movhi	r3,1
    d40c:	18f89004 	addi	r3,r3,-7616
    d410:	1885883a 	add	r2,r3,r2
    d414:	e0bfff15 	stw	r2,-4(fp)
    d418:	00000606 	br	d434 <_do_dtors+0x40>
        (*dtor) (); 
    d41c:	e0bfff17 	ldw	r2,-4(fp)
    d420:	10800017 	ldw	r2,0(r2)
    d424:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d428:	e0bfff17 	ldw	r2,-4(fp)
    d42c:	10bfff04 	addi	r2,r2,-4
    d430:	e0bfff15 	stw	r2,-4(fp)
    d434:	e0ffff17 	ldw	r3,-4(fp)
    d438:	00800074 	movhi	r2,1
    d43c:	10b89004 	addi	r2,r2,-7616
    d440:	18bff62e 	bgeu	r3,r2,d41c <_do_dtors+0x28>
        (*dtor) (); 
}
    d444:	e037883a 	mov	sp,fp
    d448:	dfc00117 	ldw	ra,4(sp)
    d44c:	df000017 	ldw	fp,0(sp)
    d450:	dec00204 	addi	sp,sp,8
    d454:	f800283a 	ret

0000d458 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    d458:	defffe04 	addi	sp,sp,-8
    d45c:	dfc00115 	stw	ra,4(sp)
    d460:	df000015 	stw	fp,0(sp)
    d464:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    d468:	0009883a 	mov	r4,zero
    d46c:	01440004 	movi	r5,4096
    d470:	000df840 	call	df84 <alt_icache_flush>
#endif
}
    d474:	e037883a 	mov	sp,fp
    d478:	dfc00117 	ldw	ra,4(sp)
    d47c:	df000017 	ldw	fp,0(sp)
    d480:	dec00204 	addi	sp,sp,8
    d484:	f800283a 	ret

0000d488 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d488:	defff904 	addi	sp,sp,-28
    d48c:	dfc00615 	stw	ra,24(sp)
    d490:	df000515 	stw	fp,20(sp)
    d494:	df000504 	addi	fp,sp,20
    d498:	e13ffc15 	stw	r4,-16(fp)
    d49c:	e17ffd15 	stw	r5,-12(fp)
    d4a0:	e1bffe15 	stw	r6,-8(fp)
    d4a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    d4a8:	e0800217 	ldw	r2,8(fp)
    d4ac:	d8800015 	stw	r2,0(sp)
    d4b0:	e13ffc17 	ldw	r4,-16(fp)
    d4b4:	e17ffd17 	ldw	r5,-12(fp)
    d4b8:	e1bffe17 	ldw	r6,-8(fp)
    d4bc:	e1ffff17 	ldw	r7,-4(fp)
    d4c0:	000d65c0 	call	d65c <alt_iic_isr_register>
}  
    d4c4:	e037883a 	mov	sp,fp
    d4c8:	dfc00117 	ldw	ra,4(sp)
    d4cc:	df000017 	ldw	fp,0(sp)
    d4d0:	dec00204 	addi	sp,sp,8
    d4d4:	f800283a 	ret

0000d4d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    d4d8:	defff904 	addi	sp,sp,-28
    d4dc:	df000615 	stw	fp,24(sp)
    d4e0:	df000604 	addi	fp,sp,24
    d4e4:	e13ffe15 	stw	r4,-8(fp)
    d4e8:	e17fff15 	stw	r5,-4(fp)
    d4ec:	e0bfff17 	ldw	r2,-4(fp)
    d4f0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d4f4:	0005303a 	rdctl	r2,status
    d4f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d4fc:	e0fffb17 	ldw	r3,-20(fp)
    d500:	00bfff84 	movi	r2,-2
    d504:	1884703a 	and	r2,r3,r2
    d508:	1001703a 	wrctl	status,r2
  
  return context;
    d50c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d510:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    d514:	e0fffc17 	ldw	r3,-16(fp)
    d518:	00800044 	movi	r2,1
    d51c:	10c4983a 	sll	r2,r2,r3
    d520:	1007883a 	mov	r3,r2
    d524:	00800074 	movhi	r2,1
    d528:	10878a04 	addi	r2,r2,7720
    d52c:	10800017 	ldw	r2,0(r2)
    d530:	1886b03a 	or	r3,r3,r2
    d534:	00800074 	movhi	r2,1
    d538:	10878a04 	addi	r2,r2,7720
    d53c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d540:	00800074 	movhi	r2,1
    d544:	10878a04 	addi	r2,r2,7720
    d548:	10800017 	ldw	r2,0(r2)
    d54c:	100170fa 	wrctl	ienable,r2
    d550:	e0bffd17 	ldw	r2,-12(fp)
    d554:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d558:	e0bffa17 	ldw	r2,-24(fp)
    d55c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d560:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    d564:	e037883a 	mov	sp,fp
    d568:	df000017 	ldw	fp,0(sp)
    d56c:	dec00104 	addi	sp,sp,4
    d570:	f800283a 	ret

0000d574 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    d574:	defff904 	addi	sp,sp,-28
    d578:	df000615 	stw	fp,24(sp)
    d57c:	df000604 	addi	fp,sp,24
    d580:	e13ffe15 	stw	r4,-8(fp)
    d584:	e17fff15 	stw	r5,-4(fp)
    d588:	e0bfff17 	ldw	r2,-4(fp)
    d58c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d590:	0005303a 	rdctl	r2,status
    d594:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d598:	e0fffb17 	ldw	r3,-20(fp)
    d59c:	00bfff84 	movi	r2,-2
    d5a0:	1884703a 	and	r2,r3,r2
    d5a4:	1001703a 	wrctl	status,r2
  
  return context;
    d5a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d5ac:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    d5b0:	e0fffc17 	ldw	r3,-16(fp)
    d5b4:	00800044 	movi	r2,1
    d5b8:	10c4983a 	sll	r2,r2,r3
    d5bc:	0084303a 	nor	r2,zero,r2
    d5c0:	1007883a 	mov	r3,r2
    d5c4:	00800074 	movhi	r2,1
    d5c8:	10878a04 	addi	r2,r2,7720
    d5cc:	10800017 	ldw	r2,0(r2)
    d5d0:	1886703a 	and	r3,r3,r2
    d5d4:	00800074 	movhi	r2,1
    d5d8:	10878a04 	addi	r2,r2,7720
    d5dc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d5e0:	00800074 	movhi	r2,1
    d5e4:	10878a04 	addi	r2,r2,7720
    d5e8:	10800017 	ldw	r2,0(r2)
    d5ec:	100170fa 	wrctl	ienable,r2
    d5f0:	e0bffd17 	ldw	r2,-12(fp)
    d5f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d5f8:	e0bffa17 	ldw	r2,-24(fp)
    d5fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d600:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    d604:	e037883a 	mov	sp,fp
    d608:	df000017 	ldw	fp,0(sp)
    d60c:	dec00104 	addi	sp,sp,4
    d610:	f800283a 	ret

0000d614 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d614:	defffc04 	addi	sp,sp,-16
    d618:	df000315 	stw	fp,12(sp)
    d61c:	df000304 	addi	fp,sp,12
    d620:	e13ffe15 	stw	r4,-8(fp)
    d624:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d628:	000530fa 	rdctl	r2,ienable
    d62c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d630:	e0ffff17 	ldw	r3,-4(fp)
    d634:	00800044 	movi	r2,1
    d638:	10c4983a 	sll	r2,r2,r3
    d63c:	1007883a 	mov	r3,r2
    d640:	e0bffd17 	ldw	r2,-12(fp)
    d644:	1884703a 	and	r2,r3,r2
    d648:	1004c03a 	cmpne	r2,r2,zero
}
    d64c:	e037883a 	mov	sp,fp
    d650:	df000017 	ldw	fp,0(sp)
    d654:	dec00104 	addi	sp,sp,4
    d658:	f800283a 	ret

0000d65c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d65c:	defff404 	addi	sp,sp,-48
    d660:	dfc00b15 	stw	ra,44(sp)
    d664:	df000a15 	stw	fp,40(sp)
    d668:	df000a04 	addi	fp,sp,40
    d66c:	e13ffb15 	stw	r4,-20(fp)
    d670:	e17ffc15 	stw	r5,-16(fp)
    d674:	e1bffd15 	stw	r6,-12(fp)
    d678:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    d67c:	00bffa84 	movi	r2,-22
    d680:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    d684:	e0bffc17 	ldw	r2,-16(fp)
    d688:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d68c:	e0bff917 	ldw	r2,-28(fp)
    d690:	10800808 	cmpgei	r2,r2,32
    d694:	1000291e 	bne	r2,zero,d73c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d698:	0005303a 	rdctl	r2,status
    d69c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d6a0:	e0fff717 	ldw	r3,-36(fp)
    d6a4:	00bfff84 	movi	r2,-2
    d6a8:	1884703a 	and	r2,r3,r2
    d6ac:	1001703a 	wrctl	status,r2
  
  return context;
    d6b0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d6b4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    d6b8:	e0bff917 	ldw	r2,-28(fp)
    d6bc:	00c00074 	movhi	r3,1
    d6c0:	18c85704 	addi	r3,r3,8540
    d6c4:	100490fa 	slli	r2,r2,3
    d6c8:	10c7883a 	add	r3,r2,r3
    d6cc:	e0bffd17 	ldw	r2,-12(fp)
    d6d0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    d6d4:	e0bff917 	ldw	r2,-28(fp)
    d6d8:	00c00074 	movhi	r3,1
    d6dc:	18c85704 	addi	r3,r3,8540
    d6e0:	100490fa 	slli	r2,r2,3
    d6e4:	10c5883a 	add	r2,r2,r3
    d6e8:	10c00104 	addi	r3,r2,4
    d6ec:	e0bffe17 	ldw	r2,-8(fp)
    d6f0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d6f4:	e0bffd17 	ldw	r2,-12(fp)
    d6f8:	1005003a 	cmpeq	r2,r2,zero
    d6fc:	1000051e 	bne	r2,zero,d714 <alt_iic_isr_register+0xb8>
    d700:	e17ff917 	ldw	r5,-28(fp)
    d704:	e13ffb17 	ldw	r4,-20(fp)
    d708:	000d4d80 	call	d4d8 <alt_ic_irq_enable>
    d70c:	e0bfff15 	stw	r2,-4(fp)
    d710:	00000406 	br	d724 <alt_iic_isr_register+0xc8>
    d714:	e17ff917 	ldw	r5,-28(fp)
    d718:	e13ffb17 	ldw	r4,-20(fp)
    d71c:	000d5740 	call	d574 <alt_ic_irq_disable>
    d720:	e0bfff15 	stw	r2,-4(fp)
    d724:	e0bfff17 	ldw	r2,-4(fp)
    d728:	e0bffa15 	stw	r2,-24(fp)
    d72c:	e0bff817 	ldw	r2,-32(fp)
    d730:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d734:	e0bff617 	ldw	r2,-40(fp)
    d738:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d73c:	e0bffa17 	ldw	r2,-24(fp)
}
    d740:	e037883a 	mov	sp,fp
    d744:	dfc00117 	ldw	ra,4(sp)
    d748:	df000017 	ldw	fp,0(sp)
    d74c:	dec00204 	addi	sp,sp,8
    d750:	f800283a 	ret

0000d754 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    d754:	defff904 	addi	sp,sp,-28
    d758:	dfc00615 	stw	ra,24(sp)
    d75c:	df000515 	stw	fp,20(sp)
    d760:	df000504 	addi	fp,sp,20
    d764:	e13ffc15 	stw	r4,-16(fp)
    d768:	e17ffd15 	stw	r5,-12(fp)
    d76c:	e1bffe15 	stw	r6,-8(fp)
    d770:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    d774:	e13ffd17 	ldw	r4,-12(fp)
    d778:	e17ffe17 	ldw	r5,-8(fp)
    d77c:	e1bfff17 	ldw	r6,-4(fp)
    d780:	000d96c0 	call	d96c <open>
    d784:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    d788:	e0bffb17 	ldw	r2,-20(fp)
    d78c:	1004803a 	cmplt	r2,r2,zero
    d790:	10001c1e 	bne	r2,zero,d804 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    d794:	e0bffb17 	ldw	r2,-20(fp)
    d798:	00c00074 	movhi	r3,1
    d79c:	18fc4904 	addi	r3,r3,-3804
    d7a0:	10800324 	muli	r2,r2,12
    d7a4:	10c5883a 	add	r2,r2,r3
    d7a8:	10c00017 	ldw	r3,0(r2)
    d7ac:	e0bffc17 	ldw	r2,-16(fp)
    d7b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    d7b4:	e0bffb17 	ldw	r2,-20(fp)
    d7b8:	00c00074 	movhi	r3,1
    d7bc:	18fc4904 	addi	r3,r3,-3804
    d7c0:	10800324 	muli	r2,r2,12
    d7c4:	10c5883a 	add	r2,r2,r3
    d7c8:	10800104 	addi	r2,r2,4
    d7cc:	10c00017 	ldw	r3,0(r2)
    d7d0:	e0bffc17 	ldw	r2,-16(fp)
    d7d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d7d8:	e0bffb17 	ldw	r2,-20(fp)
    d7dc:	00c00074 	movhi	r3,1
    d7e0:	18fc4904 	addi	r3,r3,-3804
    d7e4:	10800324 	muli	r2,r2,12
    d7e8:	10c5883a 	add	r2,r2,r3
    d7ec:	10800204 	addi	r2,r2,8
    d7f0:	10c00017 	ldw	r3,0(r2)
    d7f4:	e0bffc17 	ldw	r2,-16(fp)
    d7f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d7fc:	e13ffb17 	ldw	r4,-20(fp)
    d800:	000c1fc0 	call	c1fc <alt_release_fd>
  }
} 
    d804:	e037883a 	mov	sp,fp
    d808:	dfc00117 	ldw	ra,4(sp)
    d80c:	df000017 	ldw	fp,0(sp)
    d810:	dec00204 	addi	sp,sp,8
    d814:	f800283a 	ret

0000d818 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d818:	defffb04 	addi	sp,sp,-20
    d81c:	dfc00415 	stw	ra,16(sp)
    d820:	df000315 	stw	fp,12(sp)
    d824:	df000304 	addi	fp,sp,12
    d828:	e13ffd15 	stw	r4,-12(fp)
    d82c:	e17ffe15 	stw	r5,-8(fp)
    d830:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d834:	01000074 	movhi	r4,1
    d838:	213c4c04 	addi	r4,r4,-3792
    d83c:	e17ffd17 	ldw	r5,-12(fp)
    d840:	01800044 	movi	r6,1
    d844:	01c07fc4 	movi	r7,511
    d848:	000d7540 	call	d754 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d84c:	01000074 	movhi	r4,1
    d850:	213c4904 	addi	r4,r4,-3804
    d854:	e17ffe17 	ldw	r5,-8(fp)
    d858:	000d883a 	mov	r6,zero
    d85c:	01c07fc4 	movi	r7,511
    d860:	000d7540 	call	d754 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d864:	01000074 	movhi	r4,1
    d868:	213c4f04 	addi	r4,r4,-3780
    d86c:	e17fff17 	ldw	r5,-4(fp)
    d870:	01800044 	movi	r6,1
    d874:	01c07fc4 	movi	r7,511
    d878:	000d7540 	call	d754 <alt_open_fd>
}  
    d87c:	e037883a 	mov	sp,fp
    d880:	dfc00117 	ldw	ra,4(sp)
    d884:	df000017 	ldw	fp,0(sp)
    d888:	dec00204 	addi	sp,sp,8
    d88c:	f800283a 	ret

0000d890 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d890:	defffc04 	addi	sp,sp,-16
    d894:	df000315 	stw	fp,12(sp)
    d898:	df000304 	addi	fp,sp,12
    d89c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d8a0:	e0bffe17 	ldw	r2,-8(fp)
    d8a4:	10800217 	ldw	r2,8(r2)
    d8a8:	10d00034 	orhi	r3,r2,16384
    d8ac:	e0bffe17 	ldw	r2,-8(fp)
    d8b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d8b4:	e03ffd15 	stw	zero,-12(fp)
    d8b8:	00002006 	br	d93c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d8bc:	e0bffd17 	ldw	r2,-12(fp)
    d8c0:	00c00074 	movhi	r3,1
    d8c4:	18fc4904 	addi	r3,r3,-3804
    d8c8:	10800324 	muli	r2,r2,12
    d8cc:	10c5883a 	add	r2,r2,r3
    d8d0:	10c00017 	ldw	r3,0(r2)
    d8d4:	e0bffe17 	ldw	r2,-8(fp)
    d8d8:	10800017 	ldw	r2,0(r2)
    d8dc:	1880141e 	bne	r3,r2,d930 <alt_file_locked+0xa0>
    d8e0:	e0bffd17 	ldw	r2,-12(fp)
    d8e4:	00c00074 	movhi	r3,1
    d8e8:	18fc4904 	addi	r3,r3,-3804
    d8ec:	10800324 	muli	r2,r2,12
    d8f0:	10c5883a 	add	r2,r2,r3
    d8f4:	10800204 	addi	r2,r2,8
    d8f8:	10800017 	ldw	r2,0(r2)
    d8fc:	1004403a 	cmpge	r2,r2,zero
    d900:	10000b1e 	bne	r2,zero,d930 <alt_file_locked+0xa0>
    d904:	e0bffd17 	ldw	r2,-12(fp)
    d908:	10800324 	muli	r2,r2,12
    d90c:	1007883a 	mov	r3,r2
    d910:	00800074 	movhi	r2,1
    d914:	10bc4904 	addi	r2,r2,-3804
    d918:	1887883a 	add	r3,r3,r2
    d91c:	e0bffe17 	ldw	r2,-8(fp)
    d920:	18800326 	beq	r3,r2,d930 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d924:	00bffcc4 	movi	r2,-13
    d928:	e0bfff15 	stw	r2,-4(fp)
    d92c:	00000a06 	br	d958 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d930:	e0bffd17 	ldw	r2,-12(fp)
    d934:	10800044 	addi	r2,r2,1
    d938:	e0bffd15 	stw	r2,-12(fp)
    d93c:	00800074 	movhi	r2,1
    d940:	1080cc04 	addi	r2,r2,816
    d944:	10800017 	ldw	r2,0(r2)
    d948:	1007883a 	mov	r3,r2
    d94c:	e0bffd17 	ldw	r2,-12(fp)
    d950:	18bfda2e 	bgeu	r3,r2,d8bc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d954:	e03fff15 	stw	zero,-4(fp)
    d958:	e0bfff17 	ldw	r2,-4(fp)
}
    d95c:	e037883a 	mov	sp,fp
    d960:	df000017 	ldw	fp,0(sp)
    d964:	dec00104 	addi	sp,sp,4
    d968:	f800283a 	ret

0000d96c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d96c:	defff404 	addi	sp,sp,-48
    d970:	dfc00b15 	stw	ra,44(sp)
    d974:	df000a15 	stw	fp,40(sp)
    d978:	df000a04 	addi	fp,sp,40
    d97c:	e13ffb15 	stw	r4,-20(fp)
    d980:	e17ffc15 	stw	r5,-16(fp)
    d984:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d988:	00bfffc4 	movi	r2,-1
    d98c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    d990:	00bffb44 	movi	r2,-19
    d994:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    d998:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d99c:	e13ffb17 	ldw	r4,-20(fp)
    d9a0:	01400074 	movhi	r5,1
    d9a4:	2940ca04 	addi	r5,r5,808
    d9a8:	000dd180 	call	dd18 <alt_find_dev>
    d9ac:	e0bffa15 	stw	r2,-24(fp)
    d9b0:	e0bffa17 	ldw	r2,-24(fp)
    d9b4:	1004c03a 	cmpne	r2,r2,zero
    d9b8:	1000051e 	bne	r2,zero,d9d0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d9bc:	e13ffb17 	ldw	r4,-20(fp)
    d9c0:	000ddac0 	call	ddac <alt_find_file>
    d9c4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    d9c8:	00800044 	movi	r2,1
    d9cc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d9d0:	e0bffa17 	ldw	r2,-24(fp)
    d9d4:	1005003a 	cmpeq	r2,r2,zero
    d9d8:	1000301e 	bne	r2,zero,da9c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d9dc:	e13ffa17 	ldw	r4,-24(fp)
    d9e0:	000decc0 	call	decc <alt_get_fd>
    d9e4:	e0bff815 	stw	r2,-32(fp)
    d9e8:	e0bff817 	ldw	r2,-32(fp)
    d9ec:	1004403a 	cmpge	r2,r2,zero
    d9f0:	1000031e 	bne	r2,zero,da00 <open+0x94>
    {
      status = index;
    d9f4:	e0bff817 	ldw	r2,-32(fp)
    d9f8:	e0bff715 	stw	r2,-36(fp)
    d9fc:	00002906 	br	daa4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    da00:	e0bff817 	ldw	r2,-32(fp)
    da04:	10800324 	muli	r2,r2,12
    da08:	1007883a 	mov	r3,r2
    da0c:	00800074 	movhi	r2,1
    da10:	10bc4904 	addi	r2,r2,-3804
    da14:	1885883a 	add	r2,r3,r2
    da18:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    da1c:	e0fffc17 	ldw	r3,-16(fp)
    da20:	00900034 	movhi	r2,16384
    da24:	10bfffc4 	addi	r2,r2,-1
    da28:	1886703a 	and	r3,r3,r2
    da2c:	e0bff917 	ldw	r2,-28(fp)
    da30:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    da34:	e0bff617 	ldw	r2,-40(fp)
    da38:	1004c03a 	cmpne	r2,r2,zero
    da3c:	1000061e 	bne	r2,zero,da58 <open+0xec>
    da40:	e13ff917 	ldw	r4,-28(fp)
    da44:	000d8900 	call	d890 <alt_file_locked>
    da48:	e0bff715 	stw	r2,-36(fp)
    da4c:	e0bff717 	ldw	r2,-36(fp)
    da50:	1004803a 	cmplt	r2,r2,zero
    da54:	1000131e 	bne	r2,zero,daa4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    da58:	e0bffa17 	ldw	r2,-24(fp)
    da5c:	10800317 	ldw	r2,12(r2)
    da60:	1005003a 	cmpeq	r2,r2,zero
    da64:	1000091e 	bne	r2,zero,da8c <open+0x120>
    da68:	e0bffa17 	ldw	r2,-24(fp)
    da6c:	10800317 	ldw	r2,12(r2)
    da70:	e13ff917 	ldw	r4,-28(fp)
    da74:	e17ffb17 	ldw	r5,-20(fp)
    da78:	e1bffc17 	ldw	r6,-16(fp)
    da7c:	e1fffd17 	ldw	r7,-12(fp)
    da80:	103ee83a 	callr	r2
    da84:	e0bfff15 	stw	r2,-4(fp)
    da88:	00000106 	br	da90 <open+0x124>
    da8c:	e03fff15 	stw	zero,-4(fp)
    da90:	e0bfff17 	ldw	r2,-4(fp)
    da94:	e0bff715 	stw	r2,-36(fp)
    da98:	00000206 	br	daa4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    da9c:	00bffb44 	movi	r2,-19
    daa0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    daa4:	e0bff717 	ldw	r2,-36(fp)
    daa8:	1004403a 	cmpge	r2,r2,zero
    daac:	1000091e 	bne	r2,zero,dad4 <open+0x168>
  {
    alt_release_fd (index);  
    dab0:	e13ff817 	ldw	r4,-32(fp)
    dab4:	000c1fc0 	call	c1fc <alt_release_fd>
    ALT_ERRNO = -status;
    dab8:	000daf40 	call	daf4 <alt_get_errno>
    dabc:	e0fff717 	ldw	r3,-36(fp)
    dac0:	00c7c83a 	sub	r3,zero,r3
    dac4:	10c00015 	stw	r3,0(r2)
    return -1;
    dac8:	00bfffc4 	movi	r2,-1
    dacc:	e0bffe15 	stw	r2,-8(fp)
    dad0:	00000206 	br	dadc <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    dad4:	e0bff817 	ldw	r2,-32(fp)
    dad8:	e0bffe15 	stw	r2,-8(fp)
    dadc:	e0bffe17 	ldw	r2,-8(fp)
}
    dae0:	e037883a 	mov	sp,fp
    dae4:	dfc00117 	ldw	ra,4(sp)
    dae8:	df000017 	ldw	fp,0(sp)
    daec:	dec00204 	addi	sp,sp,8
    daf0:	f800283a 	ret

0000daf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    daf4:	defffd04 	addi	sp,sp,-12
    daf8:	dfc00215 	stw	ra,8(sp)
    dafc:	df000115 	stw	fp,4(sp)
    db00:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    db04:	00800074 	movhi	r2,1
    db08:	1080cd04 	addi	r2,r2,820
    db0c:	10800017 	ldw	r2,0(r2)
    db10:	1005003a 	cmpeq	r2,r2,zero
    db14:	1000061e 	bne	r2,zero,db30 <alt_get_errno+0x3c>
    db18:	00800074 	movhi	r2,1
    db1c:	1080cd04 	addi	r2,r2,820
    db20:	10800017 	ldw	r2,0(r2)
    db24:	103ee83a 	callr	r2
    db28:	e0bfff15 	stw	r2,-4(fp)
    db2c:	00000306 	br	db3c <alt_get_errno+0x48>
    db30:	00800074 	movhi	r2,1
    db34:	10878604 	addi	r2,r2,7704
    db38:	e0bfff15 	stw	r2,-4(fp)
    db3c:	e0bfff17 	ldw	r2,-4(fp)
}
    db40:	e037883a 	mov	sp,fp
    db44:	dfc00117 	ldw	ra,4(sp)
    db48:	df000017 	ldw	fp,0(sp)
    db4c:	dec00204 	addi	sp,sp,8
    db50:	f800283a 	ret

0000db54 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    db54:	defffa04 	addi	sp,sp,-24
    db58:	df000515 	stw	fp,20(sp)
    db5c:	df000504 	addi	fp,sp,20
    db60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    db64:	0005303a 	rdctl	r2,status
    db68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    db6c:	e0fffd17 	ldw	r3,-12(fp)
    db70:	00bfff84 	movi	r2,-2
    db74:	1884703a 	and	r2,r3,r2
    db78:	1001703a 	wrctl	status,r2
  
  return context;
    db7c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    db80:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    db84:	e0bfff17 	ldw	r2,-4(fp)
    db88:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    db8c:	e0bffc17 	ldw	r2,-16(fp)
    db90:	10c00017 	ldw	r3,0(r2)
    db94:	e0bffc17 	ldw	r2,-16(fp)
    db98:	10800117 	ldw	r2,4(r2)
    db9c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    dba0:	e0bffc17 	ldw	r2,-16(fp)
    dba4:	10c00117 	ldw	r3,4(r2)
    dba8:	e0bffc17 	ldw	r2,-16(fp)
    dbac:	10800017 	ldw	r2,0(r2)
    dbb0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    dbb4:	e0fffc17 	ldw	r3,-16(fp)
    dbb8:	e0bffc17 	ldw	r2,-16(fp)
    dbbc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    dbc0:	e0fffc17 	ldw	r3,-16(fp)
    dbc4:	e0bffc17 	ldw	r2,-16(fp)
    dbc8:	18800015 	stw	r2,0(r3)
    dbcc:	e0bffe17 	ldw	r2,-8(fp)
    dbd0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dbd4:	e0bffb17 	ldw	r2,-20(fp)
    dbd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    dbdc:	e037883a 	mov	sp,fp
    dbe0:	df000017 	ldw	fp,0(sp)
    dbe4:	dec00104 	addi	sp,sp,4
    dbe8:	f800283a 	ret

0000dbec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    dbec:	defffb04 	addi	sp,sp,-20
    dbf0:	dfc00415 	stw	ra,16(sp)
    dbf4:	df000315 	stw	fp,12(sp)
    dbf8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    dbfc:	d0a00f17 	ldw	r2,-32708(gp)
    dc00:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    dc04:	d0a6ce17 	ldw	r2,-25800(gp)
    dc08:	10800044 	addi	r2,r2,1
    dc0c:	d0a6ce15 	stw	r2,-25800(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    dc10:	00003106 	br	dcd8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    dc14:	e0bffe17 	ldw	r2,-8(fp)
    dc18:	10800017 	ldw	r2,0(r2)
    dc1c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    dc20:	e0bffe17 	ldw	r2,-8(fp)
    dc24:	10800403 	ldbu	r2,16(r2)
    dc28:	10803fcc 	andi	r2,r2,255
    dc2c:	1005003a 	cmpeq	r2,r2,zero
    dc30:	1000051e 	bne	r2,zero,dc48 <alt_tick+0x5c>
    dc34:	d0a6ce17 	ldw	r2,-25800(gp)
    dc38:	1004c03a 	cmpne	r2,r2,zero
    dc3c:	1000021e 	bne	r2,zero,dc48 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    dc40:	e0bffe17 	ldw	r2,-8(fp)
    dc44:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    dc48:	e0bffe17 	ldw	r2,-8(fp)
    dc4c:	10c00217 	ldw	r3,8(r2)
    dc50:	d0a6ce17 	ldw	r2,-25800(gp)
    dc54:	10c01e36 	bltu	r2,r3,dcd0 <alt_tick+0xe4>
    dc58:	e0bffe17 	ldw	r2,-8(fp)
    dc5c:	10800403 	ldbu	r2,16(r2)
    dc60:	10803fcc 	andi	r2,r2,255
    dc64:	1004c03a 	cmpne	r2,r2,zero
    dc68:	1000191e 	bne	r2,zero,dcd0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    dc6c:	e0bffe17 	ldw	r2,-8(fp)
    dc70:	10c00317 	ldw	r3,12(r2)
    dc74:	e0bffe17 	ldw	r2,-8(fp)
    dc78:	11000517 	ldw	r4,20(r2)
    dc7c:	183ee83a 	callr	r3
    dc80:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    dc84:	e0bffd17 	ldw	r2,-12(fp)
    dc88:	1004c03a 	cmpne	r2,r2,zero
    dc8c:	1000031e 	bne	r2,zero,dc9c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    dc90:	e13ffe17 	ldw	r4,-8(fp)
    dc94:	000db540 	call	db54 <alt_alarm_stop>
    dc98:	00000d06 	br	dcd0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    dc9c:	e0bffe17 	ldw	r2,-8(fp)
    dca0:	10c00217 	ldw	r3,8(r2)
    dca4:	e0bffd17 	ldw	r2,-12(fp)
    dca8:	1887883a 	add	r3,r3,r2
    dcac:	e0bffe17 	ldw	r2,-8(fp)
    dcb0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    dcb4:	e0bffe17 	ldw	r2,-8(fp)
    dcb8:	10c00217 	ldw	r3,8(r2)
    dcbc:	d0a6ce17 	ldw	r2,-25800(gp)
    dcc0:	1880032e 	bgeu	r3,r2,dcd0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    dcc4:	e0fffe17 	ldw	r3,-8(fp)
    dcc8:	00800044 	movi	r2,1
    dccc:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    dcd0:	e0bfff17 	ldw	r2,-4(fp)
    dcd4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    dcd8:	d0e00f04 	addi	r3,gp,-32708
    dcdc:	e0bffe17 	ldw	r2,-8(fp)
    dce0:	10ffcc1e 	bne	r2,r3,dc14 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    dce4:	e037883a 	mov	sp,fp
    dce8:	dfc00117 	ldw	ra,4(sp)
    dcec:	df000017 	ldw	fp,0(sp)
    dcf0:	dec00204 	addi	sp,sp,8
    dcf4:	f800283a 	ret

0000dcf8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    dcf8:	deffff04 	addi	sp,sp,-4
    dcfc:	df000015 	stw	fp,0(sp)
    dd00:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    dd04:	000170fa 	wrctl	ienable,zero
}
    dd08:	e037883a 	mov	sp,fp
    dd0c:	df000017 	ldw	fp,0(sp)
    dd10:	dec00104 	addi	sp,sp,4
    dd14:	f800283a 	ret

0000dd18 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    dd18:	defff904 	addi	sp,sp,-28
    dd1c:	dfc00615 	stw	ra,24(sp)
    dd20:	df000515 	stw	fp,20(sp)
    dd24:	df000504 	addi	fp,sp,20
    dd28:	e13ffd15 	stw	r4,-12(fp)
    dd2c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    dd30:	e0bffe17 	ldw	r2,-8(fp)
    dd34:	10800017 	ldw	r2,0(r2)
    dd38:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    dd3c:	e13ffd17 	ldw	r4,-12(fp)
    dd40:	00028c80 	call	28c8 <strlen>
    dd44:	10800044 	addi	r2,r2,1
    dd48:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    dd4c:	00000d06 	br	dd84 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    dd50:	e0bffc17 	ldw	r2,-16(fp)
    dd54:	11000217 	ldw	r4,8(r2)
    dd58:	e1bffb17 	ldw	r6,-20(fp)
    dd5c:	e17ffd17 	ldw	r5,-12(fp)
    dd60:	000e0280 	call	e028 <memcmp>
    dd64:	1004c03a 	cmpne	r2,r2,zero
    dd68:	1000031e 	bne	r2,zero,dd78 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    dd6c:	e0bffc17 	ldw	r2,-16(fp)
    dd70:	e0bfff15 	stw	r2,-4(fp)
    dd74:	00000706 	br	dd94 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    dd78:	e0bffc17 	ldw	r2,-16(fp)
    dd7c:	10800017 	ldw	r2,0(r2)
    dd80:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    dd84:	e0fffe17 	ldw	r3,-8(fp)
    dd88:	e0bffc17 	ldw	r2,-16(fp)
    dd8c:	10fff01e 	bne	r2,r3,dd50 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    dd90:	e03fff15 	stw	zero,-4(fp)
    dd94:	e0bfff17 	ldw	r2,-4(fp)
}
    dd98:	e037883a 	mov	sp,fp
    dd9c:	dfc00117 	ldw	ra,4(sp)
    dda0:	df000017 	ldw	fp,0(sp)
    dda4:	dec00204 	addi	sp,sp,8
    dda8:	f800283a 	ret

0000ddac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    ddac:	defffa04 	addi	sp,sp,-24
    ddb0:	dfc00515 	stw	ra,20(sp)
    ddb4:	df000415 	stw	fp,16(sp)
    ddb8:	df000404 	addi	fp,sp,16
    ddbc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    ddc0:	00800074 	movhi	r2,1
    ddc4:	1080c804 	addi	r2,r2,800
    ddc8:	10800017 	ldw	r2,0(r2)
    ddcc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ddd0:	00003306 	br	dea0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    ddd4:	e0bffd17 	ldw	r2,-12(fp)
    ddd8:	11000217 	ldw	r4,8(r2)
    dddc:	00028c80 	call	28c8 <strlen>
    dde0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    dde4:	e0bffd17 	ldw	r2,-12(fp)
    dde8:	10c00217 	ldw	r3,8(r2)
    ddec:	e0bffc17 	ldw	r2,-16(fp)
    ddf0:	1885883a 	add	r2,r3,r2
    ddf4:	10bfffc4 	addi	r2,r2,-1
    ddf8:	10800003 	ldbu	r2,0(r2)
    ddfc:	10803fcc 	andi	r2,r2,255
    de00:	1080201c 	xori	r2,r2,128
    de04:	10bfe004 	addi	r2,r2,-128
    de08:	10800bd8 	cmpnei	r2,r2,47
    de0c:	1000031e 	bne	r2,zero,de1c <alt_find_file+0x70>
    {
      len -= 1;
    de10:	e0bffc17 	ldw	r2,-16(fp)
    de14:	10bfffc4 	addi	r2,r2,-1
    de18:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    de1c:	e0bffc17 	ldw	r2,-16(fp)
    de20:	1007883a 	mov	r3,r2
    de24:	e0bffe17 	ldw	r2,-8(fp)
    de28:	1885883a 	add	r2,r3,r2
    de2c:	10800003 	ldbu	r2,0(r2)
    de30:	10803fcc 	andi	r2,r2,255
    de34:	1080201c 	xori	r2,r2,128
    de38:	10bfe004 	addi	r2,r2,-128
    de3c:	10800be0 	cmpeqi	r2,r2,47
    de40:	10000a1e 	bne	r2,zero,de6c <alt_find_file+0xc0>
    de44:	e0bffc17 	ldw	r2,-16(fp)
    de48:	1007883a 	mov	r3,r2
    de4c:	e0bffe17 	ldw	r2,-8(fp)
    de50:	1885883a 	add	r2,r3,r2
    de54:	10800003 	ldbu	r2,0(r2)
    de58:	10803fcc 	andi	r2,r2,255
    de5c:	1080201c 	xori	r2,r2,128
    de60:	10bfe004 	addi	r2,r2,-128
    de64:	1004c03a 	cmpne	r2,r2,zero
    de68:	10000a1e 	bne	r2,zero,de94 <alt_find_file+0xe8>
    de6c:	e0bffd17 	ldw	r2,-12(fp)
    de70:	11000217 	ldw	r4,8(r2)
    de74:	e1bffc17 	ldw	r6,-16(fp)
    de78:	e17ffe17 	ldw	r5,-8(fp)
    de7c:	000e0280 	call	e028 <memcmp>
    de80:	1004c03a 	cmpne	r2,r2,zero
    de84:	1000031e 	bne	r2,zero,de94 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    de88:	e0bffd17 	ldw	r2,-12(fp)
    de8c:	e0bfff15 	stw	r2,-4(fp)
    de90:	00000806 	br	deb4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    de94:	e0bffd17 	ldw	r2,-12(fp)
    de98:	10800017 	ldw	r2,0(r2)
    de9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    dea0:	00c00074 	movhi	r3,1
    dea4:	18c0c804 	addi	r3,r3,800
    dea8:	e0bffd17 	ldw	r2,-12(fp)
    deac:	10ffc91e 	bne	r2,r3,ddd4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    deb0:	e03fff15 	stw	zero,-4(fp)
    deb4:	e0bfff17 	ldw	r2,-4(fp)
}
    deb8:	e037883a 	mov	sp,fp
    debc:	dfc00117 	ldw	ra,4(sp)
    dec0:	df000017 	ldw	fp,0(sp)
    dec4:	dec00204 	addi	sp,sp,8
    dec8:	f800283a 	ret

0000decc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    decc:	defffc04 	addi	sp,sp,-16
    ded0:	df000315 	stw	fp,12(sp)
    ded4:	df000304 	addi	fp,sp,12
    ded8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    dedc:	00bffa04 	movi	r2,-24
    dee0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    dee4:	e03ffe15 	stw	zero,-8(fp)
    dee8:	00001e06 	br	df64 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    deec:	e0bffe17 	ldw	r2,-8(fp)
    def0:	00c00074 	movhi	r3,1
    def4:	18fc4904 	addi	r3,r3,-3804
    def8:	10800324 	muli	r2,r2,12
    defc:	10c5883a 	add	r2,r2,r3
    df00:	10800017 	ldw	r2,0(r2)
    df04:	1004c03a 	cmpne	r2,r2,zero
    df08:	1000131e 	bne	r2,zero,df58 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    df0c:	e0bffe17 	ldw	r2,-8(fp)
    df10:	00c00074 	movhi	r3,1
    df14:	18fc4904 	addi	r3,r3,-3804
    df18:	10800324 	muli	r2,r2,12
    df1c:	10c7883a 	add	r3,r2,r3
    df20:	e0bfff17 	ldw	r2,-4(fp)
    df24:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    df28:	00800074 	movhi	r2,1
    df2c:	1080cc04 	addi	r2,r2,816
    df30:	10c00017 	ldw	r3,0(r2)
    df34:	e0bffe17 	ldw	r2,-8(fp)
    df38:	1880040e 	bge	r3,r2,df4c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    df3c:	00c00074 	movhi	r3,1
    df40:	18c0cc04 	addi	r3,r3,816
    df44:	e0bffe17 	ldw	r2,-8(fp)
    df48:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    df4c:	e0bffe17 	ldw	r2,-8(fp)
    df50:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    df54:	00000606 	br	df70 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    df58:	e0bffe17 	ldw	r2,-8(fp)
    df5c:	10800044 	addi	r2,r2,1
    df60:	e0bffe15 	stw	r2,-8(fp)
    df64:	e0bffe17 	ldw	r2,-8(fp)
    df68:	10800810 	cmplti	r2,r2,32
    df6c:	103fdf1e 	bne	r2,zero,deec <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    df70:	e0bffd17 	ldw	r2,-12(fp)
}
    df74:	e037883a 	mov	sp,fp
    df78:	df000017 	ldw	fp,0(sp)
    df7c:	dec00104 	addi	sp,sp,4
    df80:	f800283a 	ret

0000df84 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    df84:	defffb04 	addi	sp,sp,-20
    df88:	df000415 	stw	fp,16(sp)
    df8c:	df000404 	addi	fp,sp,16
    df90:	e13ffe15 	stw	r4,-8(fp)
    df94:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    df98:	e0bfff17 	ldw	r2,-4(fp)
    df9c:	10840070 	cmpltui	r2,r2,4097
    dfa0:	1000021e 	bne	r2,zero,dfac <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    dfa4:	00840004 	movi	r2,4096
    dfa8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    dfac:	e0fffe17 	ldw	r3,-8(fp)
    dfb0:	e0bfff17 	ldw	r2,-4(fp)
    dfb4:	1885883a 	add	r2,r3,r2
    dfb8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    dfbc:	e0bffe17 	ldw	r2,-8(fp)
    dfc0:	e0bffd15 	stw	r2,-12(fp)
    dfc4:	00000506 	br	dfdc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    dfc8:	e0bffd17 	ldw	r2,-12(fp)
    dfcc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    dfd0:	e0bffd17 	ldw	r2,-12(fp)
    dfd4:	10800804 	addi	r2,r2,32
    dfd8:	e0bffd15 	stw	r2,-12(fp)
    dfdc:	e0fffd17 	ldw	r3,-12(fp)
    dfe0:	e0bffc17 	ldw	r2,-16(fp)
    dfe4:	18bff836 	bltu	r3,r2,dfc8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    dfe8:	e0bffe17 	ldw	r2,-8(fp)
    dfec:	108007cc 	andi	r2,r2,31
    dff0:	1005003a 	cmpeq	r2,r2,zero
    dff4:	1000021e 	bne	r2,zero,e000 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    dff8:	e0bffd17 	ldw	r2,-12(fp)
    dffc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    e000:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    e004:	e037883a 	mov	sp,fp
    e008:	df000017 	ldw	fp,0(sp)
    e00c:	dec00104 	addi	sp,sp,4
    e010:	f800283a 	ret

0000e014 <atexit>:
    e014:	200b883a 	mov	r5,r4
    e018:	000d883a 	mov	r6,zero
    e01c:	0009883a 	mov	r4,zero
    e020:	000f883a 	mov	r7,zero
    e024:	000e09c1 	jmpi	e09c <__register_exitproc>

0000e028 <memcmp>:
    e028:	00c000c4 	movi	r3,3
    e02c:	1980032e 	bgeu	r3,r6,e03c <memcmp+0x14>
    e030:	2144b03a 	or	r2,r4,r5
    e034:	10c4703a 	and	r2,r2,r3
    e038:	10000f26 	beq	r2,zero,e078 <memcmp+0x50>
    e03c:	31ffffc4 	addi	r7,r6,-1
    e040:	3000061e 	bne	r6,zero,e05c <memcmp+0x34>
    e044:	00000a06 	br	e070 <memcmp+0x48>
    e048:	39ffffc4 	addi	r7,r7,-1
    e04c:	00bfffc4 	movi	r2,-1
    e050:	21000044 	addi	r4,r4,1
    e054:	29400044 	addi	r5,r5,1
    e058:	38800526 	beq	r7,r2,e070 <memcmp+0x48>
    e05c:	20c00003 	ldbu	r3,0(r4)
    e060:	28800003 	ldbu	r2,0(r5)
    e064:	18bff826 	beq	r3,r2,e048 <memcmp+0x20>
    e068:	1885c83a 	sub	r2,r3,r2
    e06c:	f800283a 	ret
    e070:	0005883a 	mov	r2,zero
    e074:	f800283a 	ret
    e078:	180f883a 	mov	r7,r3
    e07c:	20c00017 	ldw	r3,0(r4)
    e080:	28800017 	ldw	r2,0(r5)
    e084:	18bfed1e 	bne	r3,r2,e03c <memcmp+0x14>
    e088:	31bfff04 	addi	r6,r6,-4
    e08c:	21000104 	addi	r4,r4,4
    e090:	29400104 	addi	r5,r5,4
    e094:	39bff936 	bltu	r7,r6,e07c <memcmp+0x54>
    e098:	003fe806 	br	e03c <memcmp+0x14>

0000e09c <__register_exitproc>:
    e09c:	defffa04 	addi	sp,sp,-24
    e0a0:	00800074 	movhi	r2,1
    e0a4:	1080c304 	addi	r2,r2,780
    e0a8:	dc000015 	stw	r16,0(sp)
    e0ac:	14000017 	ldw	r16,0(r2)
    e0b0:	dd000415 	stw	r20,16(sp)
    e0b4:	2829883a 	mov	r20,r5
    e0b8:	81405217 	ldw	r5,328(r16)
    e0bc:	dcc00315 	stw	r19,12(sp)
    e0c0:	dc800215 	stw	r18,8(sp)
    e0c4:	dc400115 	stw	r17,4(sp)
    e0c8:	dfc00515 	stw	ra,20(sp)
    e0cc:	2023883a 	mov	r17,r4
    e0d0:	3027883a 	mov	r19,r6
    e0d4:	3825883a 	mov	r18,r7
    e0d8:	28002526 	beq	r5,zero,e170 <__register_exitproc+0xd4>
    e0dc:	29000117 	ldw	r4,4(r5)
    e0e0:	008007c4 	movi	r2,31
    e0e4:	11002716 	blt	r2,r4,e184 <__register_exitproc+0xe8>
    e0e8:	8800101e 	bne	r17,zero,e12c <__register_exitproc+0x90>
    e0ec:	2105883a 	add	r2,r4,r4
    e0f0:	1085883a 	add	r2,r2,r2
    e0f4:	20c00044 	addi	r3,r4,1
    e0f8:	1145883a 	add	r2,r2,r5
    e0fc:	0009883a 	mov	r4,zero
    e100:	15000215 	stw	r20,8(r2)
    e104:	28c00115 	stw	r3,4(r5)
    e108:	2005883a 	mov	r2,r4
    e10c:	dfc00517 	ldw	ra,20(sp)
    e110:	dd000417 	ldw	r20,16(sp)
    e114:	dcc00317 	ldw	r19,12(sp)
    e118:	dc800217 	ldw	r18,8(sp)
    e11c:	dc400117 	ldw	r17,4(sp)
    e120:	dc000017 	ldw	r16,0(sp)
    e124:	dec00604 	addi	sp,sp,24
    e128:	f800283a 	ret
    e12c:	29802204 	addi	r6,r5,136
    e130:	00800044 	movi	r2,1
    e134:	110e983a 	sll	r7,r2,r4
    e138:	30c04017 	ldw	r3,256(r6)
    e13c:	2105883a 	add	r2,r4,r4
    e140:	1085883a 	add	r2,r2,r2
    e144:	1185883a 	add	r2,r2,r6
    e148:	19c6b03a 	or	r3,r3,r7
    e14c:	14802015 	stw	r18,128(r2)
    e150:	14c00015 	stw	r19,0(r2)
    e154:	00800084 	movi	r2,2
    e158:	30c04015 	stw	r3,256(r6)
    e15c:	88bfe31e 	bne	r17,r2,e0ec <__register_exitproc+0x50>
    e160:	30804117 	ldw	r2,260(r6)
    e164:	11c4b03a 	or	r2,r2,r7
    e168:	30804115 	stw	r2,260(r6)
    e16c:	003fdf06 	br	e0ec <__register_exitproc+0x50>
    e170:	00800074 	movhi	r2,1
    e174:	10889704 	addi	r2,r2,8796
    e178:	100b883a 	mov	r5,r2
    e17c:	80805215 	stw	r2,328(r16)
    e180:	003fd606 	br	e0dc <__register_exitproc+0x40>
    e184:	00800034 	movhi	r2,0
    e188:	1087f604 	addi	r2,r2,8152
    e18c:	1000021e 	bne	r2,zero,e198 <__register_exitproc+0xfc>
    e190:	013fffc4 	movi	r4,-1
    e194:	003fdc06 	br	e108 <__register_exitproc+0x6c>
    e198:	01006404 	movi	r4,400
    e19c:	103ee83a 	callr	r2
    e1a0:	1007883a 	mov	r3,r2
    e1a4:	103ffa26 	beq	r2,zero,e190 <__register_exitproc+0xf4>
    e1a8:	80805217 	ldw	r2,328(r16)
    e1ac:	180b883a 	mov	r5,r3
    e1b0:	18000115 	stw	zero,4(r3)
    e1b4:	18800015 	stw	r2,0(r3)
    e1b8:	80c05215 	stw	r3,328(r16)
    e1bc:	18006215 	stw	zero,392(r3)
    e1c0:	18006315 	stw	zero,396(r3)
    e1c4:	0009883a 	mov	r4,zero
    e1c8:	883fc826 	beq	r17,zero,e0ec <__register_exitproc+0x50>
    e1cc:	003fd706 	br	e12c <__register_exitproc+0x90>
    e1d0:	00000010 	cmplti	zero,zero,0
    e1d4:	00000000 	call	0 <__alt_mem_sdram>
    e1d8:	00527a01 	jmpi	527a0 <_gp+0x3a49c>
    e1dc:	011f7c01 	jmpi	11f7c0 <_gp+0x1074bc>
    e1e0:	001b0c0b 	ldhu	zero,27696(zero)
    e1e4:	00000028 	cmpgeui	zero,zero,0
    e1e8:	00000018 	cmpnei	zero,zero,0
    e1ec:	000094b4 	movhi	zero,594
    e1f0:	000005dc 	xori	zero,zero,23
    e1f4:	400e4400 	call	400e440 <__ram_exceptions_end+0x200e28c>
    e1f8:	92099170 	cmpltui	r8,r18,9797
    e1fc:	95079308 	cmpgei	r20,r18,7756
    e200:	97049605 	stb	fp,4696(r18)
    e204:	90019f03 	ldbu	zero,1660(r18)
    e208:	9c06940a 	0x9c06940a
    e20c:	00000002 	0x2
    e210:	00000028 	cmpgeui	zero,zero,0
    e214:	00000044 	movi	zero,1
    e218:	00009a90 	cmplti	zero,zero,618
    e21c:	000005b0 	cmpltui	zero,zero,22
    e220:	3c0e4400 	call	3c0e440 <__ram_exceptions_end+0x1c0e28c>
    e224:	92099168 	cmpgeui	r8,r18,9797
    e228:	95079308 	cmpgei	r20,r18,7756
    e22c:	9c039705 	stb	r16,3676(r19)
    e230:	90019f02 	0x90019f02
    e234:	9606940a 	0x9606940a
    e238:	00000004 	movi	zero,0
    e23c:	000049a0 	cmpeqi	zero,zero,294
